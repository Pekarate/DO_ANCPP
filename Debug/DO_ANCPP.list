
DO_ANCPP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d518  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000095c  0800d628  0800d628  0001d628  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df84  0800df84  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800df84  0800df84  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800df84  0800df84  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800df84  0800df84  0001df84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800df8c  0800df8c  0001df8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800df90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000062c  200001e0  0800e170  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000080c  0800e170  0002080c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000186f8  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035f7  00000000  00000000  00038901  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b8  00000000  00000000  0003bef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001398  00000000  00000000  0003d3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d937  00000000  00000000  0003e748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ae43  00000000  00000000  0005c07f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099de5  00000000  00000000  00076ec2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00110ca7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070b0  00000000  00000000  00110cf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d610 	.word	0x0800d610

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800d610 	.word	0x0800d610

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpun>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001118:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800111c:	d102      	bne.n	8001124 <__aeabi_fcmpun+0x14>
 800111e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001122:	d108      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001124:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001128:	d102      	bne.n	8001130 <__aeabi_fcmpun+0x20>
 800112a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800112e:	d102      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001130:	f04f 0000 	mov.w	r0, #0
 8001134:	4770      	bx	lr
 8001136:	f04f 0001 	mov.w	r0, #1
 800113a:	4770      	bx	lr

0800113c <__aeabi_f2iz>:
 800113c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001140:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001144:	d30f      	bcc.n	8001166 <__aeabi_f2iz+0x2a>
 8001146:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800114a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800114e:	d90d      	bls.n	800116c <__aeabi_f2iz+0x30>
 8001150:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001154:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001158:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800115c:	fa23 f002 	lsr.w	r0, r3, r2
 8001160:	bf18      	it	ne
 8001162:	4240      	negne	r0, r0
 8001164:	4770      	bx	lr
 8001166:	f04f 0000 	mov.w	r0, #0
 800116a:	4770      	bx	lr
 800116c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001170:	d101      	bne.n	8001176 <__aeabi_f2iz+0x3a>
 8001172:	0242      	lsls	r2, r0, #9
 8001174:	d105      	bne.n	8001182 <__aeabi_f2iz+0x46>
 8001176:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800117a:	bf08      	it	eq
 800117c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001180:	4770      	bx	lr
 8001182:	f04f 0000 	mov.w	r0, #0
 8001186:	4770      	bx	lr

08001188 <__aeabi_f2uiz>:
 8001188:	0042      	lsls	r2, r0, #1
 800118a:	d20e      	bcs.n	80011aa <__aeabi_f2uiz+0x22>
 800118c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001190:	d30b      	bcc.n	80011aa <__aeabi_f2uiz+0x22>
 8001192:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001196:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800119a:	d409      	bmi.n	80011b0 <__aeabi_f2uiz+0x28>
 800119c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011a4:	fa23 f002 	lsr.w	r0, r3, r2
 80011a8:	4770      	bx	lr
 80011aa:	f04f 0000 	mov.w	r0, #0
 80011ae:	4770      	bx	lr
 80011b0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011b4:	d101      	bne.n	80011ba <__aeabi_f2uiz+0x32>
 80011b6:	0242      	lsls	r2, r0, #9
 80011b8:	d102      	bne.n	80011c0 <__aeabi_f2uiz+0x38>
 80011ba:	f04f 30ff 	mov.w	r0, #4294967295
 80011be:	4770      	bx	lr
 80011c0:	f04f 0000 	mov.w	r0, #0
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop

080011c8 <__aeabi_d2lz>:
 80011c8:	b538      	push	{r3, r4, r5, lr}
 80011ca:	4605      	mov	r5, r0
 80011cc:	460c      	mov	r4, r1
 80011ce:	2200      	movs	r2, #0
 80011d0:	2300      	movs	r3, #0
 80011d2:	4628      	mov	r0, r5
 80011d4:	4621      	mov	r1, r4
 80011d6:	f7ff fbf1 	bl	80009bc <__aeabi_dcmplt>
 80011da:	b928      	cbnz	r0, 80011e8 <__aeabi_d2lz+0x20>
 80011dc:	4628      	mov	r0, r5
 80011de:	4621      	mov	r1, r4
 80011e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011e4:	f000 b80a 	b.w	80011fc <__aeabi_d2ulz>
 80011e8:	4628      	mov	r0, r5
 80011ea:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80011ee:	f000 f805 	bl	80011fc <__aeabi_d2ulz>
 80011f2:	4240      	negs	r0, r0
 80011f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011f8:	bd38      	pop	{r3, r4, r5, pc}
 80011fa:	bf00      	nop

080011fc <__aeabi_d2ulz>:
 80011fc:	b5d0      	push	{r4, r6, r7, lr}
 80011fe:	2200      	movs	r2, #0
 8001200:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <__aeabi_d2ulz+0x34>)
 8001202:	4606      	mov	r6, r0
 8001204:	460f      	mov	r7, r1
 8001206:	f7ff f967 	bl	80004d8 <__aeabi_dmul>
 800120a:	f7ff fc3d 	bl	8000a88 <__aeabi_d2uiz>
 800120e:	4604      	mov	r4, r0
 8001210:	f7ff f8e8 	bl	80003e4 <__aeabi_ui2d>
 8001214:	2200      	movs	r2, #0
 8001216:	4b07      	ldr	r3, [pc, #28]	; (8001234 <__aeabi_d2ulz+0x38>)
 8001218:	f7ff f95e 	bl	80004d8 <__aeabi_dmul>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4630      	mov	r0, r6
 8001222:	4639      	mov	r1, r7
 8001224:	f7fe ffa0 	bl	8000168 <__aeabi_dsub>
 8001228:	f7ff fc2e 	bl	8000a88 <__aeabi_d2uiz>
 800122c:	4621      	mov	r1, r4
 800122e:	bdd0      	pop	{r4, r6, r7, pc}
 8001230:	3df00000 	.word	0x3df00000
 8001234:	41f00000 	.word	0x41f00000

08001238 <_ZSt3logf>:
  using ::log;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  log(float __x)
  { return __builtin_logf(__x); }
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f007 fc95 	bl	8008b70 <logf>
 8001246:	4603      	mov	r3, r0
 8001248:	4618      	mov	r0, r3
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f007 fcb1 	bl	8008bc0 <sqrtf>
 800125e:	4603      	mov	r3, r0
 8001260:	4618      	mov	r0, r3
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <_ZN8MAX30100C1E4Mode12SamplingRate13LEDPulseWidth10LEDCurrentbb>:
#include "MAX30100.hpp"
#include "main.h"
extern I2C_HandleTypeDef hi2c1;
#define _MAX30100_I2C &hi2c1
#define _MAX30100_I2C_ADDRESS 0xAE
MAX30100::MAX30100(
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	4608      	mov	r0, r1
 8001272:	4611      	mov	r1, r2
 8001274:	461a      	mov	r2, r3
 8001276:	4603      	mov	r3, r0
 8001278:	70fb      	strb	r3, [r7, #3]
 800127a:	460b      	mov	r3, r1
 800127c:	70bb      	strb	r3, [r7, #2]
 800127e:	4613      	mov	r3, r2
 8001280:	707b      	strb	r3, [r7, #1]
        LEDPulseWidth pulseWidth,
        LEDCurrent IrLedCurrent,
        bool highResMode,
        bool debug)
{
  this->writeRegister(0x06, 0b01000000); // resst
 8001282:	2240      	movs	r2, #64	; 0x40
 8001284:	2106      	movs	r1, #6
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f000 fb3c 	bl	8001904 <_ZN8MAX3010013writeRegisterEhh>
  this->debug = debug;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	7e3a      	ldrb	r2, [r7, #24]
 8001290:	701a      	strb	r2, [r3, #0]
  currentPulseDetectorState = PULSE_IDLE;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	721a      	strb	r2, [r3, #8]

  setMode(  mode );
 8001298:	78fb      	ldrb	r3, [r7, #3]
 800129a:	4619      	mov	r1, r3
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f000 fb89 	bl	80019b4 <_ZN8MAX301007setModeE4Mode>

  //Check table 8 in datasheet on page 19. You can't just throw in sample rate and pulse width randomly. 100hz + 1600us is max for that resolution
  setSamplingRate( samplingRate );
 80012a2:	78bb      	ldrb	r3, [r7, #2]
 80012a4:	4619      	mov	r1, r3
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f000 fbc6 	bl	8001a38 <_ZN8MAX3010015setSamplingRateE12SamplingRate>
  setLEDPulseWidth( pulseWidth );
 80012ac:	787b      	ldrb	r3, [r7, #1]
 80012ae:	4619      	mov	r1, r3
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f000 fbe1 	bl	8001a78 <_ZN8MAX3010016setLEDPulseWidthE13LEDPulseWidth>

  redLEDCurrent = (uint8_t)STARTING_RED_LED_CURRENT;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2208      	movs	r2, #8
 80012ba:	705a      	strb	r2, [r3, #1]
  lastREDLedCurrentCheck = 0;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f04f 0200 	mov.w	r2, #0
 80012c2:	605a      	str	r2, [r3, #4]

  this->IrLedCurrent = IrLedCurrent;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	7c3a      	ldrb	r2, [r7, #16]
 80012c8:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
  setLEDCurrents(redLEDCurrent, IrLedCurrent );
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	785b      	ldrb	r3, [r3, #1]
 80012d0:	7c3a      	ldrb	r2, [r7, #16]
 80012d2:	4619      	mov	r1, r3
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f000 fbeb 	bl	8001ab0 <_ZN8MAX3010014setLEDCurrentsEhh>
  setHighresModeEnabled(highResMode);
 80012da:	7d3b      	ldrb	r3, [r7, #20]
 80012dc:	4619      	mov	r1, r3
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f000 fb84 	bl	80019ec <_ZN8MAX3010021setHighresModeEnabledEb>


  dcFilterIR.w = 0;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f04f 0200 	mov.w	r2, #0
 80012ea:	649a      	str	r2, [r3, #72]	; 0x48
  dcFilterIR.result = 0;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f04f 0200 	mov.w	r2, #0
 80012f2:	64da      	str	r2, [r3, #76]	; 0x4c

  dcFilterRed.w = 0;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f04f 0200 	mov.w	r2, #0
 80012fa:	651a      	str	r2, [r3, #80]	; 0x50
  dcFilterRed.result = 0;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f04f 0200 	mov.w	r2, #0
 8001302:	655a      	str	r2, [r3, #84]	; 0x54


  lpbFilterIR.v[0] = 0;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f04f 0200 	mov.w	r2, #0
 800130a:	659a      	str	r2, [r3, #88]	; 0x58
  lpbFilterIR.v[1] = 0;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f04f 0200 	mov.w	r2, #0
 8001312:	65da      	str	r2, [r3, #92]	; 0x5c
  lpbFilterIR.result = 0;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f04f 0200 	mov.w	r2, #0
 800131a:	661a      	str	r2, [r3, #96]	; 0x60

  meanDiffIR.index = 0;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2200      	movs	r2, #0
 8001320:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  meanDiffIR.sum = 0;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f04f 0200 	mov.w	r2, #0
 800132a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  meanDiffIR.count = 0;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8


  valuesBPM[0] = 0;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f04f 0200 	mov.w	r2, #0
 800133c:	611a      	str	r2, [r3, #16]
  valuesBPMSum = 0;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f04f 0200 	mov.w	r2, #0
 8001344:	639a      	str	r2, [r3, #56]	; 0x38
  valuesBPMCount = 0;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  bpmIndex = 0;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d


  irACValueSqSum = 0;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f04f 0200 	mov.w	r2, #0
 800135c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  redACValueSqSum = 0;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f04f 0200 	mov.w	r2, #0
 8001366:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  samplesRecorded = 0;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
  pulsesDetected = 0;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
  currentSaO2Value = 0;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f04f 0200 	mov.w	r2, #0
 8001380:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  lastBeatThreshold = 0;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2200      	movs	r2, #0
 8001388:	641a      	str	r2, [r3, #64]	; 0x40

}
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4618      	mov	r0, r3
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <_ZN8MAX301006updateEv>:

pulseoxymeter_t MAX30100::update()
{
 8001394:	b5b0      	push	{r4, r5, r7, lr}
 8001396:	b08a      	sub	sp, #40	; 0x28
 8001398:	af02      	add	r7, sp, #8
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
  pulseoxymeter_t result = {
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	4618      	mov	r0, r3
 80013a2:	2324      	movs	r3, #36	; 0x24
 80013a4:	461a      	mov	r2, r3
 80013a6:	2100      	movs	r1, #0
 80013a8:	f007 fdf2 	bl	8008f90 <memset>
    /*bool pulseDetected*/ false,
    /*float heartBPM*/ 0.0,
    /*float irCardiogram*/ 0.0,
    /*float irDcValue*/ 0.0,
    /*float redDcValue*/ 0.0,
    /*float SaO2*/ currentSaO2Value,
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
    /*uint32_t lastBeatThreshold*/ 0,
    /*float dcFilteredIR*/ 0.0,
    /*float dcFilteredRed*/ 0.0
  };
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	615a      	str	r2, [r3, #20]


  fifo_t rawData = readFIFO();
 80013b6:	68b8      	ldr	r0, [r7, #8]
 80013b8:	f000 fbaa 	bl	8001b10 <_ZN8MAX301008readFIFOEv>
 80013bc:	4603      	mov	r3, r0
 80013be:	617b      	str	r3, [r7, #20]

  dcFilterIR = dcRemoval( (float)rawData.rawIR, dcFilterIR.w, ALPHA );
 80013c0:	8abb      	ldrh	r3, [r7, #20]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff fc86 	bl	8000cd4 <__aeabi_ui2f>
 80013c8:	4602      	mov	r2, r0
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ce:	68bc      	ldr	r4, [r7, #8]
 80013d0:	4638      	mov	r0, r7
 80013d2:	4988      	ldr	r1, [pc, #544]	; (80015f4 <_ZN8MAX301006updateEv+0x260>)
 80013d4:	9100      	str	r1, [sp, #0]
 80013d6:	68b9      	ldr	r1, [r7, #8]
 80013d8:	f000 fbc4 	bl	8001b64 <_ZN8MAX301009dcRemovalEfff>
 80013dc:	f104 0348 	add.w	r3, r4, #72	; 0x48
 80013e0:	463a      	mov	r2, r7
 80013e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013e6:	e883 0003 	stmia.w	r3, {r0, r1}
  dcFilterRed = dcRemoval( (float)rawData.rawRed, dcFilterRed.w, ALPHA );
 80013ea:	8afb      	ldrh	r3, [r7, #22]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff fc71 	bl	8000cd4 <__aeabi_ui2f>
 80013f2:	4602      	mov	r2, r0
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013f8:	68bc      	ldr	r4, [r7, #8]
 80013fa:	4638      	mov	r0, r7
 80013fc:	497d      	ldr	r1, [pc, #500]	; (80015f4 <_ZN8MAX301006updateEv+0x260>)
 80013fe:	9100      	str	r1, [sp, #0]
 8001400:	68b9      	ldr	r1, [r7, #8]
 8001402:	f000 fbaf 	bl	8001b64 <_ZN8MAX301009dcRemovalEfff>
 8001406:	f104 0350 	add.w	r3, r4, #80	; 0x50
 800140a:	463a      	mov	r2, r7
 800140c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001410:	e883 0003 	stmia.w	r3, {r0, r1}

  float meanDiffResIR = meanDiff( dcFilterIR.result, &meanDiffIR);
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	3364      	adds	r3, #100	; 0x64
 800141c:	461a      	mov	r2, r3
 800141e:	68b8      	ldr	r0, [r7, #8]
 8001420:	f000 fc0e 	bl	8001c40 <_ZN8MAX301008meanDiffEfP16meanDiffFilter_t>
 8001424:	61f8      	str	r0, [r7, #28]
  lowPassButterworthFilter( meanDiffResIR/*-dcFilterIR.result*/, &lpbFilterIR );
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	3358      	adds	r3, #88	; 0x58
 800142a:	461a      	mov	r2, r3
 800142c:	69f9      	ldr	r1, [r7, #28]
 800142e:	68b8      	ldr	r0, [r7, #8]
 8001430:	f000 fbbe 	bl	8001bb0 <_ZN8MAX3010024lowPassButterworthFilterEfP19butterworthFilter_t>

  irACValueSqSum += dcFilterIR.result * dcFilterIR.result;
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	f8d3 40ac 	ldr.w	r4, [r3, #172]	; 0xac
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001442:	4619      	mov	r1, r3
 8001444:	4610      	mov	r0, r2
 8001446:	f7ff fc9d 	bl	8000d84 <__aeabi_fmul>
 800144a:	4603      	mov	r3, r0
 800144c:	4619      	mov	r1, r3
 800144e:	4620      	mov	r0, r4
 8001450:	f7ff fb90 	bl	8000b74 <__addsf3>
 8001454:	4603      	mov	r3, r0
 8001456:	461a      	mov	r2, r3
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  redACValueSqSum += dcFilterRed.result * dcFilterRed.result;
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	f8d3 40b0 	ldr.w	r4, [r3, #176]	; 0xb0
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800146c:	4619      	mov	r1, r3
 800146e:	4610      	mov	r0, r2
 8001470:	f7ff fc88 	bl	8000d84 <__aeabi_fmul>
 8001474:	4603      	mov	r3, r0
 8001476:	4619      	mov	r1, r3
 8001478:	4620      	mov	r0, r4
 800147a:	f7ff fb7b 	bl	8000b74 <__addsf3>
 800147e:	4603      	mov	r3, r0
 8001480:	461a      	mov	r2, r3
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  samplesRecorded++;
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 800148e:	3301      	adds	r3, #1
 8001490:	b29a      	uxth	r2, r3
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4

  if( detectPulse( lpbFilterIR.result ) && samplesRecorded > 0 )
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800149c:	4619      	mov	r1, r3
 800149e:	68b8      	ldr	r0, [r7, #8]
 80014a0:	f000 f8ae 	bl	8001600 <_ZN8MAX3010011detectPulseEf>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d006      	beq.n	80014b8 <_ZN8MAX301006updateEv+0x124>
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <_ZN8MAX301006updateEv+0x124>
 80014b4:	2301      	movs	r3, #1
 80014b6:	e000      	b.n	80014ba <_ZN8MAX301006updateEv+0x126>
 80014b8:	2300      	movs	r3, #0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d071      	beq.n	80015a2 <_ZN8MAX301006updateEv+0x20e>
  {
    result.pulseDetected=true;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2201      	movs	r2, #1
 80014c2:	701a      	strb	r2, [r3, #0]
    pulsesDetected++;
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 80014ca:	3301      	adds	r3, #1
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6

    float ratioRMS = log( sqrt(redACValueSqSum/samplesRecorded) ) / log( sqrt(irACValueSqSum/samplesRecorded) );
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	f8d3 40b0 	ldr.w	r4, [r3, #176]	; 0xb0
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff fbfb 	bl	8000cdc <__aeabi_i2f>
 80014e6:	4603      	mov	r3, r0
 80014e8:	4619      	mov	r1, r3
 80014ea:	4620      	mov	r0, r4
 80014ec:	f7ff fcfe 	bl	8000eec <__aeabi_fdiv>
 80014f0:	4603      	mov	r3, r0
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff feac 	bl	8001250 <_ZSt4sqrtf>
 80014f8:	4603      	mov	r3, r0
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff fe9c 	bl	8001238 <_ZSt3logf>
 8001500:	4605      	mov	r5, r0
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	f8d3 40ac 	ldr.w	r4, [r3, #172]	; 0xac
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff fbe4 	bl	8000cdc <__aeabi_i2f>
 8001514:	4603      	mov	r3, r0
 8001516:	4619      	mov	r1, r3
 8001518:	4620      	mov	r0, r4
 800151a:	f7ff fce7 	bl	8000eec <__aeabi_fdiv>
 800151e:	4603      	mov	r3, r0
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff fe95 	bl	8001250 <_ZSt4sqrtf>
 8001526:	4603      	mov	r3, r0
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff fe85 	bl	8001238 <_ZSt3logf>
 800152e:	4603      	mov	r3, r0
 8001530:	4619      	mov	r1, r3
 8001532:	4628      	mov	r0, r5
 8001534:	f7ff fcda 	bl	8000eec <__aeabi_fdiv>
 8001538:	4603      	mov	r3, r0
 800153a:	61bb      	str	r3, [r7, #24]
      //Serial.print("RMS Ratio: ");
      //Serial.println(ratioRMS);
    }

    //This is my adjusted standard model, so it shows 0.89 as 94% saturation. It is probably far from correct, requires proper empircal calibration
    currentSaO2Value = 110.0 - 18.0 * ratioRMS;
 800153c:	69b8      	ldr	r0, [r7, #24]
 800153e:	f7fe ff73 	bl	8000428 <__aeabi_f2d>
 8001542:	f04f 0200 	mov.w	r2, #0
 8001546:	4b2c      	ldr	r3, [pc, #176]	; (80015f8 <_ZN8MAX301006updateEv+0x264>)
 8001548:	f7fe ffc6 	bl	80004d8 <__aeabi_dmul>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	f04f 0000 	mov.w	r0, #0
 8001554:	4929      	ldr	r1, [pc, #164]	; (80015fc <_ZN8MAX301006updateEv+0x268>)
 8001556:	f7fe fe07 	bl	8000168 <__aeabi_dsub>
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	4610      	mov	r0, r2
 8001560:	4619      	mov	r1, r3
 8001562:	f7ff fab1 	bl	8000ac8 <__aeabi_d2f>
 8001566:	4602      	mov	r2, r0
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    result.SaO2 = currentSaO2Value;
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	615a      	str	r2, [r3, #20]

    if( pulsesDetected % RESET_SPO2_EVERY_N_PULSES == 0)
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 800157e:	f003 0303 	and.w	r3, r3, #3
 8001582:	2b00      	cmp	r3, #0
 8001584:	d10d      	bne.n	80015a2 <_ZN8MAX301006updateEv+0x20e>
    {
      irACValueSqSum = 0;
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	f04f 0200 	mov.w	r2, #0
 800158c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
      redACValueSqSum = 0;
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	f04f 0200 	mov.w	r2, #0
 8001596:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      samplesRecorded = 0;
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	2200      	movs	r2, #0
 800159e:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
    }
  }

  balanceIntesities( dcFilterRed.w, dcFilterIR.w );
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015aa:	461a      	mov	r2, r3
 80015ac:	68b8      	ldr	r0, [r7, #8]
 80015ae:	f000 f937 	bl	8001820 <_ZN8MAX3010017balanceIntesitiesEff>


  result.heartBPM = currentBPM;
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	68da      	ldr	r2, [r3, #12]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	605a      	str	r2, [r3, #4]
  result.irCardiogram = lpbFilterIR.result;
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	609a      	str	r2, [r3, #8]
  result.irDcValue = dcFilterIR.w;
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	60da      	str	r2, [r3, #12]
  result.redDcValue = dcFilterRed.w;
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	611a      	str	r2, [r3, #16]
  result.lastBeatThreshold = lastBeatThreshold;
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	619a      	str	r2, [r3, #24]
  result.dcFilteredIR = dcFilterIR.result;
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	61da      	str	r2, [r3, #28]
  result.dcFilteredRed = dcFilterRed.result;
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	621a      	str	r2, [r3, #32]


  return result;
 80015ea:	bf00      	nop
}
 80015ec:	68f8      	ldr	r0, [r7, #12]
 80015ee:	3720      	adds	r7, #32
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bdb0      	pop	{r4, r5, r7, pc}
 80015f4:	3f733333 	.word	0x3f733333
 80015f8:	40320000 	.word	0x40320000
 80015fc:	405b8000 	.word	0x405b8000

08001600 <_ZN8MAX3010011detectPulseEf>:

bool MAX30100::detectPulse(float sensor_value)
{
 8001600:	b590      	push	{r4, r7, lr}
 8001602:	b087      	sub	sp, #28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
  static float prev_sensor_value = 0;
  static uint8_t values_went_down = 0;
  static uint32_t currentBeat = 0;
  static uint32_t lastBeat = 0;

  if(sensor_value > PULSE_MAX_THRESHOLD)
 800160a:	497d      	ldr	r1, [pc, #500]	; (8001800 <_ZN8MAX3010011detectPulseEf+0x200>)
 800160c:	6838      	ldr	r0, [r7, #0]
 800160e:	f7ff fd75 	bl	80010fc <__aeabi_fcmpgt>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d014      	beq.n	8001642 <_ZN8MAX3010011detectPulseEf+0x42>
  {
    currentPulseDetectorState = PULSE_IDLE;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	721a      	strb	r2, [r3, #8]
    prev_sensor_value = 0;
 800161e:	4b79      	ldr	r3, [pc, #484]	; (8001804 <_ZN8MAX3010011detectPulseEf+0x204>)
 8001620:	f04f 0200 	mov.w	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
    lastBeat = 0;
 8001626:	4b78      	ldr	r3, [pc, #480]	; (8001808 <_ZN8MAX3010011detectPulseEf+0x208>)
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
    currentBeat = 0;
 800162c:	4b77      	ldr	r3, [pc, #476]	; (800180c <_ZN8MAX3010011detectPulseEf+0x20c>)
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
    values_went_down = 0;
 8001632:	4b77      	ldr	r3, [pc, #476]	; (8001810 <_ZN8MAX3010011detectPulseEf+0x210>)
 8001634:	2200      	movs	r2, #0
 8001636:	701a      	strb	r2, [r3, #0]
    lastBeatThreshold = 0;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	641a      	str	r2, [r3, #64]	; 0x40
    return false;
 800163e:	2300      	movs	r3, #0
 8001640:	e0d9      	b.n	80017f6 <_ZN8MAX3010011detectPulseEf+0x1f6>
  }

  switch(currentPulseDetectorState)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	7a1b      	ldrb	r3, [r3, #8]
 8001646:	2b02      	cmp	r3, #2
 8001648:	f000 80b6 	beq.w	80017b8 <_ZN8MAX3010011detectPulseEf+0x1b8>
 800164c:	2b02      	cmp	r3, #2
 800164e:	f300 80ce 	bgt.w	80017ee <_ZN8MAX3010011detectPulseEf+0x1ee>
 8001652:	2b00      	cmp	r3, #0
 8001654:	d002      	beq.n	800165c <_ZN8MAX3010011detectPulseEf+0x5c>
 8001656:	2b01      	cmp	r3, #1
 8001658:	d00f      	beq.n	800167a <_ZN8MAX3010011detectPulseEf+0x7a>
 800165a:	e0c8      	b.n	80017ee <_ZN8MAX3010011detectPulseEf+0x1ee>
  {
    case PULSE_IDLE:
      if(sensor_value >= PULSE_MIN_THRESHOLD) {
 800165c:	496d      	ldr	r1, [pc, #436]	; (8001814 <_ZN8MAX3010011detectPulseEf+0x214>)
 800165e:	6838      	ldr	r0, [r7, #0]
 8001660:	f7ff fd42 	bl	80010e8 <__aeabi_fcmpge>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d100      	bne.n	800166c <_ZN8MAX3010011detectPulseEf+0x6c>
        currentPulseDetectorState = PULSE_TRACE_UP;
        values_went_down = 0;
      }
      break;
 800166a:	e0c0      	b.n	80017ee <_ZN8MAX3010011detectPulseEf+0x1ee>
        currentPulseDetectorState = PULSE_TRACE_UP;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2201      	movs	r2, #1
 8001670:	721a      	strb	r2, [r3, #8]
        values_went_down = 0;
 8001672:	4b67      	ldr	r3, [pc, #412]	; (8001810 <_ZN8MAX3010011detectPulseEf+0x210>)
 8001674:	2200      	movs	r2, #0
 8001676:	701a      	strb	r2, [r3, #0]
      break;
 8001678:	e0b9      	b.n	80017ee <_ZN8MAX3010011detectPulseEf+0x1ee>

    case PULSE_TRACE_UP:
      if(sensor_value > prev_sensor_value)
 800167a:	4b62      	ldr	r3, [pc, #392]	; (8001804 <_ZN8MAX3010011detectPulseEf+0x204>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4619      	mov	r1, r3
 8001680:	6838      	ldr	r0, [r7, #0]
 8001682:	f7ff fd3b 	bl	80010fc <__aeabi_fcmpgt>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d00b      	beq.n	80016a4 <_ZN8MAX3010011detectPulseEf+0xa4>
      {
        currentBeat = HAL_GetTick();
 800168c:	f002 faaa 	bl	8003be4 <HAL_GetTick>
 8001690:	4603      	mov	r3, r0
 8001692:	4a5e      	ldr	r2, [pc, #376]	; (800180c <_ZN8MAX3010011detectPulseEf+0x20c>)
 8001694:	6013      	str	r3, [r2, #0]
        lastBeatThreshold = sensor_value;
 8001696:	6838      	ldr	r0, [r7, #0]
 8001698:	f7ff fd76 	bl	8001188 <__aeabi_f2uiz>
 800169c:	4602      	mov	r2, r0
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	641a      	str	r2, [r3, #64]	; 0x40

        currentPulseDetectorState = PULSE_TRACE_DOWN;

        return true;
      }
      break;
 80016a2:	e0a4      	b.n	80017ee <_ZN8MAX3010011detectPulseEf+0x1ee>
        uint32_t beatDuration = currentBeat - lastBeat;
 80016a4:	4b59      	ldr	r3, [pc, #356]	; (800180c <_ZN8MAX3010011detectPulseEf+0x20c>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	4b57      	ldr	r3, [pc, #348]	; (8001808 <_ZN8MAX3010011detectPulseEf+0x208>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	60bb      	str	r3, [r7, #8]
        lastBeat = currentBeat;
 80016b0:	4b56      	ldr	r3, [pc, #344]	; (800180c <_ZN8MAX3010011detectPulseEf+0x20c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a54      	ldr	r2, [pc, #336]	; (8001808 <_ZN8MAX3010011detectPulseEf+0x208>)
 80016b6:	6013      	str	r3, [r2, #0]
        float rawBPM = 0;
 80016b8:	f04f 0300 	mov.w	r3, #0
 80016bc:	617b      	str	r3, [r7, #20]
        if(beatDuration > 0)
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d009      	beq.n	80016d8 <_ZN8MAX3010011detectPulseEf+0xd8>
          rawBPM = 60000.0 / (float)beatDuration;
 80016c4:	68b8      	ldr	r0, [r7, #8]
 80016c6:	f7ff fb05 	bl	8000cd4 <__aeabi_ui2f>
 80016ca:	4603      	mov	r3, r0
 80016cc:	4619      	mov	r1, r3
 80016ce:	4852      	ldr	r0, [pc, #328]	; (8001818 <_ZN8MAX3010011detectPulseEf+0x218>)
 80016d0:	f7ff fc0c 	bl	8000eec <__aeabi_fdiv>
 80016d4:	4603      	mov	r3, r0
 80016d6:	617b      	str	r3, [r7, #20]
        if(debug == true)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d108      	bne.n	80016f2 <_ZN8MAX3010011detectPulseEf+0xf2>
        valuesBPM[bpmIndex] = rawBPM;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016e6:	461a      	mov	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3204      	adds	r2, #4
 80016ec:	6979      	ldr	r1, [r7, #20]
 80016ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        valuesBPMSum = 0;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f04f 0200 	mov.w	r2, #0
 80016f8:	639a      	str	r2, [r3, #56]	; 0x38
        for(int i=0; i<PULSE_BPM_SAMPLE_SIZE; i++)
 80016fa:	2300      	movs	r3, #0
 80016fc:	613b      	str	r3, [r7, #16]
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	2b09      	cmp	r3, #9
 8001702:	dc11      	bgt.n	8001728 <_ZN8MAX3010011detectPulseEf+0x128>
          valuesBPMSum += valuesBPM[i];
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	3204      	adds	r2, #4
 800170e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001712:	4619      	mov	r1, r3
 8001714:	f7ff fa2e 	bl	8000b74 <__addsf3>
 8001718:	4603      	mov	r3, r0
 800171a:	461a      	mov	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	639a      	str	r2, [r3, #56]	; 0x38
        for(int i=0; i<PULSE_BPM_SAMPLE_SIZE; i++)
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	3301      	adds	r3, #1
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	e7ea      	b.n	80016fe <_ZN8MAX3010011detectPulseEf+0xfe>
        if(debug == true)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d108      	bne.n	8001742 <_ZN8MAX3010011detectPulseEf+0x142>
          for(int i=0; i<PULSE_BPM_SAMPLE_SIZE; i++)
 8001730:	2300      	movs	r3, #0
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2b09      	cmp	r3, #9
 8001738:	dc03      	bgt.n	8001742 <_ZN8MAX3010011detectPulseEf+0x142>
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	3301      	adds	r3, #1
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	e7f8      	b.n	8001734 <_ZN8MAX3010011detectPulseEf+0x134>
        bpmIndex++;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001748:	3301      	adds	r3, #1
 800174a:	b2da      	uxtb	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        bpmIndex = bpmIndex % PULSE_BPM_SAMPLE_SIZE;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8001758:	4b30      	ldr	r3, [pc, #192]	; (800181c <_ZN8MAX3010011detectPulseEf+0x21c>)
 800175a:	fba3 1302 	umull	r1, r3, r3, r2
 800175e:	08d9      	lsrs	r1, r3, #3
 8001760:	460b      	mov	r3, r1
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	440b      	add	r3, r1
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	b2da      	uxtb	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if(valuesBPMCount < PULSE_BPM_SAMPLE_SIZE)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001778:	2b09      	cmp	r3, #9
 800177a:	d807      	bhi.n	800178c <_ZN8MAX3010011detectPulseEf+0x18c>
          valuesBPMCount++;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001782:	3301      	adds	r3, #1
 8001784:	b2da      	uxtb	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        currentBPM = valuesBPMSum / valuesBPMCount;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff faa0 	bl	8000cdc <__aeabi_i2f>
 800179c:	4603      	mov	r3, r0
 800179e:	4619      	mov	r1, r3
 80017a0:	4620      	mov	r0, r4
 80017a2:	f7ff fba3 	bl	8000eec <__aeabi_fdiv>
 80017a6:	4603      	mov	r3, r0
 80017a8:	461a      	mov	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	60da      	str	r2, [r3, #12]
        currentPulseDetectorState = PULSE_TRACE_DOWN;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2202      	movs	r2, #2
 80017b2:	721a      	strb	r2, [r3, #8]
        return true;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e01e      	b.n	80017f6 <_ZN8MAX3010011detectPulseEf+0x1f6>

    case PULSE_TRACE_DOWN:
      if(sensor_value < prev_sensor_value)
 80017b8:	4b12      	ldr	r3, [pc, #72]	; (8001804 <_ZN8MAX3010011detectPulseEf+0x204>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4619      	mov	r1, r3
 80017be:	6838      	ldr	r0, [r7, #0]
 80017c0:	f7ff fc7e 	bl	80010c0 <__aeabi_fcmplt>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d005      	beq.n	80017d6 <_ZN8MAX3010011detectPulseEf+0x1d6>
      {
        values_went_down++;
 80017ca:	4b11      	ldr	r3, [pc, #68]	; (8001810 <_ZN8MAX3010011detectPulseEf+0x210>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	3301      	adds	r3, #1
 80017d0:	b2da      	uxtb	r2, r3
 80017d2:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <_ZN8MAX3010011detectPulseEf+0x210>)
 80017d4:	701a      	strb	r2, [r3, #0]
      }


      if(sensor_value < PULSE_MIN_THRESHOLD)
 80017d6:	490f      	ldr	r1, [pc, #60]	; (8001814 <_ZN8MAX3010011detectPulseEf+0x214>)
 80017d8:	6838      	ldr	r0, [r7, #0]
 80017da:	f7ff fc71 	bl	80010c0 <__aeabi_fcmplt>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d100      	bne.n	80017e6 <_ZN8MAX3010011detectPulseEf+0x1e6>
      {
        currentPulseDetectorState = PULSE_IDLE;
      }
      break;
 80017e4:	e002      	b.n	80017ec <_ZN8MAX3010011detectPulseEf+0x1ec>
        currentPulseDetectorState = PULSE_IDLE;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	721a      	strb	r2, [r3, #8]
      break;
 80017ec:	bf00      	nop
  }

  prev_sensor_value = sensor_value;
 80017ee:	4a05      	ldr	r2, [pc, #20]	; (8001804 <_ZN8MAX3010011detectPulseEf+0x204>)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	6013      	str	r3, [r2, #0]
  return false;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	371c      	adds	r7, #28
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd90      	pop	{r4, r7, pc}
 80017fe:	bf00      	nop
 8001800:	44fa0000 	.word	0x44fa0000
 8001804:	200001fc 	.word	0x200001fc
 8001808:	20000208 	.word	0x20000208
 800180c:	20000204 	.word	0x20000204
 8001810:	20000200 	.word	0x20000200
 8001814:	42c80000 	.word	0x42c80000
 8001818:	476a6000 	.word	0x476a6000
 800181c:	cccccccd 	.word	0xcccccccd

08001820 <_ZN8MAX3010017balanceIntesitiesEff>:

void MAX30100::balanceIntesities( float redLedDC, float IRLedDC )
{
 8001820:	b590      	push	{r4, r7, lr}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]

  if( HAL_GetTick() - lastREDLedCurrentCheck >= RED_LED_CURRENT_ADJUSTMENT_MS)
 800182c:	f002 f9da 	bl	8003be4 <HAL_GetTick>
 8001830:	4603      	mov	r3, r0
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff fa4e 	bl	8000cd4 <__aeabi_ui2f>
 8001838:	4602      	mov	r2, r0
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	4619      	mov	r1, r3
 8001840:	4610      	mov	r0, r2
 8001842:	f7ff f995 	bl	8000b70 <__aeabi_fsub>
 8001846:	4603      	mov	r3, r0
 8001848:	2201      	movs	r2, #1
 800184a:	4614      	mov	r4, r2
 800184c:	492b      	ldr	r1, [pc, #172]	; (80018fc <_ZN8MAX3010017balanceIntesitiesEff+0xdc>)
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff fc4a 	bl	80010e8 <__aeabi_fcmpge>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <_ZN8MAX3010017balanceIntesitiesEff+0x3e>
 800185a:	2300      	movs	r3, #0
 800185c:	461c      	mov	r4, r3
 800185e:	b2e3      	uxtb	r3, r4
 8001860:	2b00      	cmp	r3, #0
 8001862:	d047      	beq.n	80018f4 <_ZN8MAX3010017balanceIntesitiesEff+0xd4>
  {
    ////Serial.println( redLedDC - IRLedDC );
    if( IRLedDC - redLedDC > MAGIC_ACCEPTABLE_INTENSITY_DIFF && redLEDCurrent < MAX30100_LED_CURRENT_50MA)
 8001864:	68b9      	ldr	r1, [r7, #8]
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f7ff f982 	bl	8000b70 <__aeabi_fsub>
 800186c:	4603      	mov	r3, r0
 800186e:	4924      	ldr	r1, [pc, #144]	; (8001900 <_ZN8MAX3010017balanceIntesitiesEff+0xe0>)
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff fc43 	bl	80010fc <__aeabi_fcmpgt>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d013      	beq.n	80018a4 <_ZN8MAX3010017balanceIntesitiesEff+0x84>
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	785b      	ldrb	r3, [r3, #1]
 8001880:	2b0e      	cmp	r3, #14
 8001882:	d80f      	bhi.n	80018a4 <_ZN8MAX3010017balanceIntesitiesEff+0x84>
    {
      redLEDCurrent++;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	785b      	ldrb	r3, [r3, #1]
 8001888:	3301      	adds	r3, #1
 800188a:	b2da      	uxtb	r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	705a      	strb	r2, [r3, #1]
      setLEDCurrents( redLEDCurrent, IrLedCurrent );
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	7859      	ldrb	r1, [r3, #1]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800189a:	461a      	mov	r2, r3
 800189c:	68f8      	ldr	r0, [r7, #12]
 800189e:	f000 f907 	bl	8001ab0 <_ZN8MAX3010014setLEDCurrentsEhh>
 80018a2:	e01e      	b.n	80018e2 <_ZN8MAX3010017balanceIntesitiesEff+0xc2>
    }
    else if(redLedDC - IRLedDC > MAGIC_ACCEPTABLE_INTENSITY_DIFF && redLEDCurrent > 0)
 80018a4:	6879      	ldr	r1, [r7, #4]
 80018a6:	68b8      	ldr	r0, [r7, #8]
 80018a8:	f7ff f962 	bl	8000b70 <__aeabi_fsub>
 80018ac:	4603      	mov	r3, r0
 80018ae:	4914      	ldr	r1, [pc, #80]	; (8001900 <_ZN8MAX3010017balanceIntesitiesEff+0xe0>)
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff fc23 	bl	80010fc <__aeabi_fcmpgt>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d012      	beq.n	80018e2 <_ZN8MAX3010017balanceIntesitiesEff+0xc2>
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	785b      	ldrb	r3, [r3, #1]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d00e      	beq.n	80018e2 <_ZN8MAX3010017balanceIntesitiesEff+0xc2>
    {
      redLEDCurrent--;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	785b      	ldrb	r3, [r3, #1]
 80018c8:	3b01      	subs	r3, #1
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	705a      	strb	r2, [r3, #1]
      setLEDCurrents( redLEDCurrent, IrLedCurrent );
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	7859      	ldrb	r1, [r3, #1]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80018da:	461a      	mov	r2, r3
 80018dc:	68f8      	ldr	r0, [r7, #12]
 80018de:	f000 f8e7 	bl	8001ab0 <_ZN8MAX3010014setLEDCurrentsEhh>
    }

    lastREDLedCurrentCheck = HAL_GetTick();
 80018e2:	f002 f97f 	bl	8003be4 <HAL_GetTick>
 80018e6:	4603      	mov	r3, r0
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff f9f3 	bl	8000cd4 <__aeabi_ui2f>
 80018ee:	4602      	mov	r2, r0
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	605a      	str	r2, [r3, #4]
  }
}
 80018f4:	bf00      	nop
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd90      	pop	{r4, r7, pc}
 80018fc:	43fa0000 	.word	0x43fa0000
 8001900:	477de800 	.word	0x477de800

08001904 <_ZN8MAX3010013writeRegisterEhh>:


// Writes val to address register on device
void MAX30100::writeRegister(uint8_t address, uint8_t val)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af04      	add	r7, sp, #16
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	460b      	mov	r3, r1
 800190e:	70fb      	strb	r3, [r7, #3]
 8001910:	4613      	mov	r3, r2
 8001912:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(_MAX30100_I2C, _MAX30100_I2C_ADDRESS, address, 1, &val, 1, 100);
 8001914:	78fb      	ldrb	r3, [r7, #3]
 8001916:	b29a      	uxth	r2, r3
 8001918:	2364      	movs	r3, #100	; 0x64
 800191a:	9302      	str	r3, [sp, #8]
 800191c:	2301      	movs	r3, #1
 800191e:	9301      	str	r3, [sp, #4]
 8001920:	1cbb      	adds	r3, r7, #2
 8001922:	9300      	str	r3, [sp, #0]
 8001924:	2301      	movs	r3, #1
 8001926:	21ae      	movs	r1, #174	; 0xae
 8001928:	4803      	ldr	r0, [pc, #12]	; (8001938 <_ZN8MAX3010013writeRegisterEhh+0x34>)
 800192a:	f003 fc6f 	bl	800520c <HAL_I2C_Mem_Write>
}
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000280 	.word	0x20000280

0800193c <_ZN8MAX3010012readRegisterEh>:

uint8_t MAX30100::readRegister(uint8_t address)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b088      	sub	sp, #32
 8001940:	af04      	add	r7, sp, #16
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	460b      	mov	r3, r1
 8001946:	70fb      	strb	r3, [r7, #3]
	uint8_t rdata = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(_MAX30100_I2C, _MAX30100_I2C_ADDRESS, address, 1, &rdata, 1, 100);
 800194c:	78fb      	ldrb	r3, [r7, #3]
 800194e:	b29a      	uxth	r2, r3
 8001950:	2364      	movs	r3, #100	; 0x64
 8001952:	9302      	str	r3, [sp, #8]
 8001954:	2301      	movs	r3, #1
 8001956:	9301      	str	r3, [sp, #4]
 8001958:	f107 030f 	add.w	r3, r7, #15
 800195c:	9300      	str	r3, [sp, #0]
 800195e:	2301      	movs	r3, #1
 8001960:	21ae      	movs	r1, #174	; 0xae
 8001962:	4804      	ldr	r0, [pc, #16]	; (8001974 <_ZN8MAX3010012readRegisterEh+0x38>)
 8001964:	f003 fd4c 	bl	8005400 <HAL_I2C_Mem_Read>
//	if (I2C_MasterByteRead(_MAX30100_I2C, _MAX30100_I2C_ADDRESS, address,
//			&rdata, 100) != BML_OK) {
//		return 255;
//	}
	return rdata;
 8001968:	7bfb      	ldrb	r3, [r7, #15]
}
 800196a:	4618      	mov	r0, r3
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	20000280 	.word	0x20000280

08001978 <_ZN8MAX301008readFromEhiPh>:

// Reads num bytes starting from address register on device in to _buff array
void MAX30100::readFrom(uint8_t address, int num, uint8_t _buff[])
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b088      	sub	sp, #32
 800197c:	af04      	add	r7, sp, #16
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	607a      	str	r2, [r7, #4]
 8001982:	603b      	str	r3, [r7, #0]
 8001984:	460b      	mov	r3, r1
 8001986:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Read(_MAX30100_I2C, _MAX30100_I2C_ADDRESS, address, 1, _buff, num, 1000);
 8001988:	7afb      	ldrb	r3, [r7, #11]
 800198a:	b29a      	uxth	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	b29b      	uxth	r3, r3
 8001990:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001994:	9102      	str	r1, [sp, #8]
 8001996:	9301      	str	r3, [sp, #4]
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	9300      	str	r3, [sp, #0]
 800199c:	2301      	movs	r3, #1
 800199e:	21ae      	movs	r1, #174	; 0xae
 80019a0:	4803      	ldr	r0, [pc, #12]	; (80019b0 <_ZN8MAX301008readFromEhiPh+0x38>)
 80019a2:	f003 fd2d 	bl	8005400 <HAL_I2C_Mem_Read>
}
 80019a6:	bf00      	nop
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000280 	.word	0x20000280

080019b4 <_ZN8MAX301007setModeE4Mode>:

void MAX30100::setMode(Mode mode)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	460b      	mov	r3, r1
 80019be:	70fb      	strb	r3, [r7, #3]
  uint8_t currentModeReg = readRegister( MAX30100_MODE_CONF );
 80019c0:	2106      	movs	r1, #6
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff ffba 	bl	800193c <_ZN8MAX3010012readRegisterEh>
 80019c8:	4603      	mov	r3, r0
 80019ca:	73fb      	strb	r3, [r7, #15]
  writeRegister( MAX30100_MODE_CONF, (currentModeReg & 0xF8) | mode );
 80019cc:	7bfb      	ldrb	r3, [r7, #15]
 80019ce:	f023 0307 	bic.w	r3, r3, #7
 80019d2:	b2da      	uxtb	r2, r3
 80019d4:	78fb      	ldrb	r3, [r7, #3]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	461a      	mov	r2, r3
 80019dc:	2106      	movs	r1, #6
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7ff ff90 	bl	8001904 <_ZN8MAX3010013writeRegisterEhh>
}
 80019e4:	bf00      	nop
 80019e6:	3710      	adds	r7, #16
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <_ZN8MAX3010021setHighresModeEnabledEb>:

void MAX30100::setHighresModeEnabled(bool enabled)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	460b      	mov	r3, r1
 80019f6:	70fb      	strb	r3, [r7, #3]
    uint8_t previous = readRegister(MAX30100_SPO2_CONF);
 80019f8:	2107      	movs	r1, #7
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7ff ff9e 	bl	800193c <_ZN8MAX3010012readRegisterEh>
 8001a00:	4603      	mov	r3, r0
 8001a02:	73fb      	strb	r3, [r7, #15]
    if (enabled) {
 8001a04:	78fb      	ldrb	r3, [r7, #3]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d009      	beq.n	8001a1e <_ZN8MAX3010021setHighresModeEnabledEb+0x32>
        writeRegister(MAX30100_SPO2_CONF, previous | MAX30100_SPO2_HI_RES_EN);
 8001a0a:	7bfb      	ldrb	r3, [r7, #15]
 8001a0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	461a      	mov	r2, r3
 8001a14:	2107      	movs	r1, #7
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7ff ff74 	bl	8001904 <_ZN8MAX3010013writeRegisterEhh>
    } else {
        writeRegister(MAX30100_SPO2_CONF, previous & ~MAX30100_SPO2_HI_RES_EN);
    }
}
 8001a1c:	e008      	b.n	8001a30 <_ZN8MAX3010021setHighresModeEnabledEb+0x44>
        writeRegister(MAX30100_SPO2_CONF, previous & ~MAX30100_SPO2_HI_RES_EN);
 8001a1e:	7bfb      	ldrb	r3, [r7, #15]
 8001a20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	461a      	mov	r2, r3
 8001a28:	2107      	movs	r1, #7
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7ff ff6a 	bl	8001904 <_ZN8MAX3010013writeRegisterEhh>
}
 8001a30:	bf00      	nop
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <_ZN8MAX3010015setSamplingRateE12SamplingRate>:

void MAX30100::setSamplingRate(SamplingRate rate)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	460b      	mov	r3, r1
 8001a42:	70fb      	strb	r3, [r7, #3]
  uint8_t currentSpO2Reg = readRegister( MAX30100_SPO2_CONF );
 8001a44:	2107      	movs	r1, #7
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7ff ff78 	bl	800193c <_ZN8MAX3010012readRegisterEh>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	73fb      	strb	r3, [r7, #15]
  writeRegister( MAX30100_SPO2_CONF, ( currentSpO2Reg & 0xE3 ) | (rate<<2) );
 8001a50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a54:	f023 031c 	bic.w	r3, r3, #28
 8001a58:	b25a      	sxtb	r2, r3
 8001a5a:	78fb      	ldrb	r3, [r7, #3]
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	b25b      	sxtb	r3, r3
 8001a60:	4313      	orrs	r3, r2
 8001a62:	b25b      	sxtb	r3, r3
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	461a      	mov	r2, r3
 8001a68:	2107      	movs	r1, #7
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff ff4a 	bl	8001904 <_ZN8MAX3010013writeRegisterEhh>
}
 8001a70:	bf00      	nop
 8001a72:	3710      	adds	r7, #16
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <_ZN8MAX3010016setLEDPulseWidthE13LEDPulseWidth>:

void MAX30100::setLEDPulseWidth(LEDPulseWidth pw)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	460b      	mov	r3, r1
 8001a82:	70fb      	strb	r3, [r7, #3]
  uint8_t currentSpO2Reg = readRegister( MAX30100_SPO2_CONF );
 8001a84:	2107      	movs	r1, #7
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff ff58 	bl	800193c <_ZN8MAX3010012readRegisterEh>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	73fb      	strb	r3, [r7, #15]
  writeRegister( MAX30100_SPO2_CONF, ( currentSpO2Reg & 0xFC ) | pw );
 8001a90:	7bfb      	ldrb	r3, [r7, #15]
 8001a92:	f023 0303 	bic.w	r3, r3, #3
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	78fb      	ldrb	r3, [r7, #3]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	2107      	movs	r1, #7
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7ff ff2e 	bl	8001904 <_ZN8MAX3010013writeRegisterEhh>
}
 8001aa8:	bf00      	nop
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <_ZN8MAX3010014setLEDCurrentsEhh>:

void MAX30100::setLEDCurrents( uint8_t redLedCurrent, uint8_t IRLedCurrent )
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	460b      	mov	r3, r1
 8001aba:	70fb      	strb	r3, [r7, #3]
 8001abc:	4613      	mov	r3, r2
 8001abe:	70bb      	strb	r3, [r7, #2]
  writeRegister( MAX30100_LED_CONF, (redLedCurrent << 4) | IRLedCurrent );
 8001ac0:	78fb      	ldrb	r3, [r7, #3]
 8001ac2:	011b      	lsls	r3, r3, #4
 8001ac4:	b25a      	sxtb	r2, r3
 8001ac6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	b25b      	sxtb	r3, r3
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	2109      	movs	r1, #9
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f7ff ff15 	bl	8001904 <_ZN8MAX3010013writeRegisterEhh>
}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <_ZN8MAX301009resetFIFOEv>:

  return (float)temp + tempFraction;
}

void MAX30100::resetFIFO()
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
  writeRegister( 2,0);
 8001aea:	2200      	movs	r2, #0
 8001aec:	2102      	movs	r1, #2
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff ff08 	bl	8001904 <_ZN8MAX3010013writeRegisterEhh>
  writeRegister( 3,0);
 8001af4:	2200      	movs	r2, #0
 8001af6:	2103      	movs	r1, #3
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f7ff ff03 	bl	8001904 <_ZN8MAX3010013writeRegisterEhh>
  writeRegister( 4,0);
 8001afe:	2200      	movs	r2, #0
 8001b00:	2104      	movs	r1, #4
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff fefe 	bl	8001904 <_ZN8MAX3010013writeRegisterEhh>
}
 8001b08:	bf00      	nop
 8001b0a:	3708      	adds	r7, #8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <_ZN8MAX301008readFIFOEv>:
fifo_t MAX30100::readFIFO()
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  fifo_t result;

  uint8_t buffer[4];
  readFrom( MAX30100_FIFO_DATA, 4, buffer );
 8001b18:	f107 030c 	add.w	r3, r7, #12
 8001b1c:	2204      	movs	r2, #4
 8001b1e:	2105      	movs	r1, #5
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f7ff ff29 	bl	8001978 <_ZN8MAX301008readFromEhiPh>
  result.rawIR = (buffer[0] << 8) | buffer[1];
 8001b26:	7b3b      	ldrb	r3, [r7, #12]
 8001b28:	021b      	lsls	r3, r3, #8
 8001b2a:	b21a      	sxth	r2, r3
 8001b2c:	7b7b      	ldrb	r3, [r7, #13]
 8001b2e:	b21b      	sxth	r3, r3
 8001b30:	4313      	orrs	r3, r2
 8001b32:	b21b      	sxth	r3, r3
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	823b      	strh	r3, [r7, #16]
  result.rawRed = (buffer[2] << 8) | buffer[3];
 8001b38:	7bbb      	ldrb	r3, [r7, #14]
 8001b3a:	021b      	lsls	r3, r3, #8
 8001b3c:	b21a      	sxth	r2, r3
 8001b3e:	7bfb      	ldrb	r3, [r7, #15]
 8001b40:	b21b      	sxth	r3, r3
 8001b42:	4313      	orrs	r3, r2
 8001b44:	b21b      	sxth	r3, r3
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	827b      	strh	r3, [r7, #18]

  return result;
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	617b      	str	r3, [r7, #20]
 8001b4e:	2300      	movs	r3, #0
 8001b50:	8aba      	ldrh	r2, [r7, #20]
 8001b52:	f362 030f 	bfi	r3, r2, #0, #16
 8001b56:	8afa      	ldrh	r2, [r7, #22]
 8001b58:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3718      	adds	r7, #24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <_ZN8MAX301009dcRemovalEfff>:

dcFilter_t MAX30100::dcRemoval(float x, float prev_w, float alpha)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
 8001b70:	603b      	str	r3, [r7, #0]
  dcFilter_t filtered;
  filtered.w = x + alpha * prev_w;
 8001b72:	6839      	ldr	r1, [r7, #0]
 8001b74:	69b8      	ldr	r0, [r7, #24]
 8001b76:	f7ff f905 	bl	8000d84 <__aeabi_fmul>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	6879      	ldr	r1, [r7, #4]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7fe fff8 	bl	8000b74 <__addsf3>
 8001b84:	4603      	mov	r3, r0
 8001b86:	461a      	mov	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	601a      	str	r2, [r3, #0]
  filtered.result = filtered.w - prev_w;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6839      	ldr	r1, [r7, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7fe ffec 	bl	8000b70 <__aeabi_fsub>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	605a      	str	r2, [r3, #4]

  return filtered;
 8001ba0:	bf00      	nop
}
 8001ba2:	68f8      	ldr	r0, [r7, #12]
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	0000      	movs	r0, r0
 8001bac:	0000      	movs	r0, r0
	...

08001bb0 <_ZN8MAX3010024lowPassButterworthFilterEfP19butterworthFilter_t>:

void MAX30100::lowPassButterworthFilter( float x, butterworthFilter_t * filterResult )
{
 8001bb0:	b5b0      	push	{r4, r5, r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
  filterResult->v[0] = filterResult->v[1];
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685a      	ldr	r2, [r3, #4]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	601a      	str	r2, [r3, #0]

  //Fs = 100Hz and Fc = 10Hz
  filterResult->v[1] = (2.452372752527856026e-1 * x) + (0.50952544949442879485 * filterResult->v[0]);
 8001bc4:	68b8      	ldr	r0, [r7, #8]
 8001bc6:	f7fe fc2f 	bl	8000428 <__aeabi_f2d>
 8001bca:	a319      	add	r3, pc, #100	; (adr r3, 8001c30 <_ZN8MAX3010024lowPassButterworthFilterEfP19butterworthFilter_t+0x80>)
 8001bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd0:	f7fe fc82 	bl	80004d8 <__aeabi_dmul>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	4614      	mov	r4, r2
 8001bda:	461d      	mov	r5, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7fe fc21 	bl	8000428 <__aeabi_f2d>
 8001be6:	a314      	add	r3, pc, #80	; (adr r3, 8001c38 <_ZN8MAX3010024lowPassButterworthFilterEfP19butterworthFilter_t+0x88>)
 8001be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bec:	f7fe fc74 	bl	80004d8 <__aeabi_dmul>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	4620      	mov	r0, r4
 8001bf6:	4629      	mov	r1, r5
 8001bf8:	f7fe fab8 	bl	800016c <__adddf3>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	460b      	mov	r3, r1
 8001c00:	4610      	mov	r0, r2
 8001c02:	4619      	mov	r1, r3
 8001c04:	f7fe ff60 	bl	8000ac8 <__aeabi_d2f>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	605a      	str	r2, [r3, #4]

  //Fs = 100Hz and Fc = 4Hz
  //filterResult->v[1] = (1.367287359973195227e-1 * x) + (0.72654252800536101020 * filterResult->v[0]); //Very precise butterworth filter

  filterResult->result = filterResult->v[0] + filterResult->v[1];
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	4619      	mov	r1, r3
 8001c18:	4610      	mov	r0, r2
 8001c1a:	f7fe ffab 	bl	8000b74 <__addsf3>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	461a      	mov	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	609a      	str	r2, [r3, #8]
}
 8001c26:	bf00      	nop
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bdb0      	pop	{r4, r5, r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	5e7c4548 	.word	0x5e7c4548
 8001c34:	3fcf63ef 	.word	0x3fcf63ef
 8001c38:	50c1dd5c 	.word	0x50c1dd5c
 8001c3c:	3fe04e08 	.word	0x3fe04e08

08001c40 <_ZN8MAX301008meanDiffEfP16meanDiffFilter_t>:

float MAX30100::meanDiff(float M, meanDiffFilter_t* filterValues)
{
 8001c40:	b590      	push	{r4, r7, lr}
 8001c42:	b087      	sub	sp, #28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
  float avg = 0;
 8001c4c:	f04f 0300 	mov.w	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]

  filterValues->sum -= filterValues->values[filterValues->index];
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c64:	4619      	mov	r1, r3
 8001c66:	4610      	mov	r0, r2
 8001c68:	f7fe ff82 	bl	8000b70 <__aeabi_fsub>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	461a      	mov	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	641a      	str	r2, [r3, #64]	; 0x40
  filterValues->values[filterValues->index] = M;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	68ba      	ldr	r2, [r7, #8]
 8001c80:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
  filterValues->sum += filterValues->values[filterValues->index];
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c8e:	4619      	mov	r1, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c96:	4619      	mov	r1, r3
 8001c98:	4610      	mov	r0, r2
 8001c9a:	f7fe ff6b 	bl	8000b74 <__addsf3>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	641a      	str	r2, [r3, #64]	; 0x40

  filterValues->index++;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cac:	3301      	adds	r3, #1
 8001cae:	b2da      	uxtb	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  filterValues->index = filterValues->index % MEAN_FILTER_SIZE;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8001cbc:	4b18      	ldr	r3, [pc, #96]	; (8001d20 <_ZN8MAX301008meanDiffEfP16meanDiffFilter_t+0xe0>)
 8001cbe:	fba3 1302 	umull	r1, r3, r3, r2
 8001cc2:	08d9      	lsrs	r1, r3, #3
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	011b      	lsls	r3, r3, #4
 8001cc8:	1a5b      	subs	r3, r3, r1
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(filterValues->count < MEAN_FILTER_SIZE)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001cda:	2b0e      	cmp	r3, #14
 8001cdc:	d807      	bhi.n	8001cee <_ZN8MAX301008meanDiffEfP16meanDiffFilter_t+0xae>
    filterValues->count++;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  avg = filterValues->sum / filterValues->count;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7fe ffef 	bl	8000cdc <__aeabi_i2f>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	4619      	mov	r1, r3
 8001d02:	4620      	mov	r0, r4
 8001d04:	f7ff f8f2 	bl	8000eec <__aeabi_fdiv>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	617b      	str	r3, [r7, #20]
  return avg - M;
 8001d0c:	68b9      	ldr	r1, [r7, #8]
 8001d0e:	6978      	ldr	r0, [r7, #20]
 8001d10:	f7fe ff2e 	bl	8000b70 <__aeabi_fsub>
 8001d14:	4603      	mov	r3, r0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	371c      	adds	r7, #28
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd90      	pop	{r4, r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	88888889 	.word	0x88888889

08001d24 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 1000);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d38:	68b9      	ldr	r1, [r7, #8]
 8001d3a:	4804      	ldr	r0, [pc, #16]	; (8001d4c <_write+0x28>)
 8001d3c:	f006 f8b1 	bl	8007ea2 <HAL_UART_Transmit>
	return len;
 8001d40:	687b      	ldr	r3, [r7, #4]
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20000404 	.word	0x20000404

08001d50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d54:	f001 feee 	bl	8003b34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d58:	f000 f828 	bl	8001dac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d5c:	f000 fab4 	bl	80022c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d60:	f000 fa8c 	bl	800227c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001d64:	f000 fa36 	bl	80021d4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001d68:	f000 fa5e 	bl	8002228 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001d6c:	f000 f87e 	bl	8001e6c <MX_ADC1_Init>
  MX_TIM3_Init();
 8001d70:	f000 f994 	bl	800209c <MX_TIM3_Init>
  MX_I2C1_Init();
 8001d74:	f000 f8b8 	bl	8001ee8 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001d78:	f000 f942 	bl	8002000 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001d7c:	f000 f9dc 	bl	8002138 <MX_TIM4_Init>
  MX_RTC_Init();
 8001d80:	f000 f8e0 	bl	8001f44 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  printf("HAL_I2C_IsDeviceReady:%d\r\n",HAL_I2C_IsDeviceReady(&hi2c1, 0xAE, 10, 100));
 8001d84:	2364      	movs	r3, #100	; 0x64
 8001d86:	220a      	movs	r2, #10
 8001d88:	21ae      	movs	r1, #174	; 0xae
 8001d8a:	4806      	ldr	r0, [pc, #24]	; (8001da4 <main+0x54>)
 8001d8c:	f003 fda0 	bl	80058d0 <HAL_I2C_IsDeviceReady>
 8001d90:	4603      	mov	r3, r0
 8001d92:	4619      	mov	r1, r3
 8001d94:	4804      	ldr	r0, [pc, #16]	; (8001da8 <main+0x58>)
 8001d96:	f007 fe3f 	bl	8009a18 <iprintf>
  initC();
 8001d9a:	f000 fecb 	bl	8002b34 <initC>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loopC();
 8001d9e:	f000 fecf 	bl	8002b40 <loopC>
 8001da2:	e7fc      	b.n	8001d9e <main+0x4e>
 8001da4:	20000280 	.word	0x20000280
 8001da8:	0800d628 	.word	0x0800d628

08001dac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b094      	sub	sp, #80	; 0x50
 8001db0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001db2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001db6:	2228      	movs	r2, #40	; 0x28
 8001db8:	2100      	movs	r1, #0
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f007 f8e8 	bl	8008f90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dc0:	f107 0314 	add.w	r3, r7, #20
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	60da      	str	r2, [r3, #12]
 8001dce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dd0:	1d3b      	adds	r3, r7, #4
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	605a      	str	r2, [r3, #4]
 8001dd8:	609a      	str	r2, [r3, #8]
 8001dda:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001ddc:	2309      	movs	r3, #9
 8001dde:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001de0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001de4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001de6:	2300      	movs	r3, #0
 8001de8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dea:	2301      	movs	r3, #1
 8001dec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001dee:	2301      	movs	r3, #1
 8001df0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001df2:	2302      	movs	r3, #2
 8001df4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001df6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001dfa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001dfc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001e00:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e06:	4618      	mov	r0, r3
 8001e08:	f004 fa2e 	bl	8006268 <HAL_RCC_OscConfig>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001e12:	f000 fae1 	bl	80023d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e16:	230f      	movs	r3, #15
 8001e18:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001e1e:	2380      	movs	r3, #128	; 0x80
 8001e20:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e22:	2300      	movs	r3, #0
 8001e24:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e26:	2300      	movs	r3, #0
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e2a:	f107 0314 	add.w	r3, r7, #20
 8001e2e:	2102      	movs	r1, #2
 8001e30:	4618      	mov	r0, r3
 8001e32:	f004 fc9b 	bl	800676c <HAL_RCC_ClockConfig>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001e3c:	f000 facc 	bl	80023d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8001e40:	2303      	movs	r3, #3
 8001e42:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001e44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e48:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8001e4a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e4e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e50:	1d3b      	adds	r3, r7, #4
 8001e52:	4618      	mov	r0, r3
 8001e54:	f004 fe22 	bl	8006a9c <HAL_RCCEx_PeriphCLKConfig>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001e5e:	f000 fabb 	bl	80023d8 <Error_Handler>
  }
}
 8001e62:	bf00      	nop
 8001e64:	3750      	adds	r7, #80	; 0x50
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
	...

08001e6c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e72:	1d3b      	adds	r3, r7, #4
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001e7c:	4b18      	ldr	r3, [pc, #96]	; (8001ee0 <MX_ADC1_Init+0x74>)
 8001e7e:	4a19      	ldr	r2, [pc, #100]	; (8001ee4 <MX_ADC1_Init+0x78>)
 8001e80:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001e82:	4b17      	ldr	r3, [pc, #92]	; (8001ee0 <MX_ADC1_Init+0x74>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001e88:	4b15      	ldr	r3, [pc, #84]	; (8001ee0 <MX_ADC1_Init+0x74>)
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e8e:	4b14      	ldr	r3, [pc, #80]	; (8001ee0 <MX_ADC1_Init+0x74>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e94:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <MX_ADC1_Init+0x74>)
 8001e96:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001e9a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e9c:	4b10      	ldr	r3, [pc, #64]	; (8001ee0 <MX_ADC1_Init+0x74>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001ea2:	4b0f      	ldr	r3, [pc, #60]	; (8001ee0 <MX_ADC1_Init+0x74>)
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ea8:	480d      	ldr	r0, [pc, #52]	; (8001ee0 <MX_ADC1_Init+0x74>)
 8001eaa:	f001 fee5 	bl	8003c78 <HAL_ADC_Init>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001eb4:	f000 fa90 	bl	80023d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ec4:	1d3b      	adds	r3, r7, #4
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4805      	ldr	r0, [pc, #20]	; (8001ee0 <MX_ADC1_Init+0x74>)
 8001eca:	f002 f89d 	bl	8004008 <HAL_ADC_ConfigChannel>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001ed4:	f000 fa80 	bl	80023d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ed8:	bf00      	nop
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	2000020c 	.word	0x2000020c
 8001ee4:	40012400 	.word	0x40012400

08001ee8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001eec:	4b12      	ldr	r3, [pc, #72]	; (8001f38 <MX_I2C1_Init+0x50>)
 8001eee:	4a13      	ldr	r2, [pc, #76]	; (8001f3c <MX_I2C1_Init+0x54>)
 8001ef0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ef2:	4b11      	ldr	r3, [pc, #68]	; (8001f38 <MX_I2C1_Init+0x50>)
 8001ef4:	4a12      	ldr	r2, [pc, #72]	; (8001f40 <MX_I2C1_Init+0x58>)
 8001ef6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ef8:	4b0f      	ldr	r3, [pc, #60]	; (8001f38 <MX_I2C1_Init+0x50>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001efe:	4b0e      	ldr	r3, [pc, #56]	; (8001f38 <MX_I2C1_Init+0x50>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f04:	4b0c      	ldr	r3, [pc, #48]	; (8001f38 <MX_I2C1_Init+0x50>)
 8001f06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f0a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f0c:	4b0a      	ldr	r3, [pc, #40]	; (8001f38 <MX_I2C1_Init+0x50>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f12:	4b09      	ldr	r3, [pc, #36]	; (8001f38 <MX_I2C1_Init+0x50>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f18:	4b07      	ldr	r3, [pc, #28]	; (8001f38 <MX_I2C1_Init+0x50>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f1e:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <MX_I2C1_Init+0x50>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f24:	4804      	ldr	r0, [pc, #16]	; (8001f38 <MX_I2C1_Init+0x50>)
 8001f26:	f003 f82d 	bl	8004f84 <HAL_I2C_Init>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f30:	f000 fa52 	bl	80023d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f34:	bf00      	nop
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	20000280 	.word	0x20000280
 8001f3c:	40005400 	.word	0x40005400
 8001f40:	000186a0 	.word	0x000186a0

08001f44 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001f4a:	f107 030c 	add.w	r3, r7, #12
 8001f4e:	2100      	movs	r1, #0
 8001f50:	460a      	mov	r2, r1
 8001f52:	801a      	strh	r2, [r3, #0]
 8001f54:	460a      	mov	r2, r1
 8001f56:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8001f58:	2300      	movs	r3, #0
 8001f5a:	60bb      	str	r3, [r7, #8]
  RTC_TamperTypeDef sTamper = {0};
 8001f5c:	463b      	mov	r3, r7
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	605a      	str	r2, [r3, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001f64:	4b24      	ldr	r3, [pc, #144]	; (8001ff8 <MX_RTC_Init+0xb4>)
 8001f66:	4a25      	ldr	r2, [pc, #148]	; (8001ffc <MX_RTC_Init+0xb8>)
 8001f68:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001f6a:	4b23      	ldr	r3, [pc, #140]	; (8001ff8 <MX_RTC_Init+0xb4>)
 8001f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f70:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8001f72:	4b21      	ldr	r3, [pc, #132]	; (8001ff8 <MX_RTC_Init+0xb4>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001f78:	481f      	ldr	r0, [pc, #124]	; (8001ff8 <MX_RTC_Init+0xb4>)
 8001f7a:	f004 ff05 	bl	8006d88 <HAL_RTC_Init>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001f84:	f000 fa28 	bl	80023d8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0;
 8001f90:	2300      	movs	r3, #0
 8001f92:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001f94:	f107 030c 	add.w	r3, r7, #12
 8001f98:	2200      	movs	r2, #0
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4816      	ldr	r0, [pc, #88]	; (8001ff8 <MX_RTC_Init+0xb4>)
 8001f9e:	f004 ff89 	bl	8006eb4 <HAL_RTC_SetTime>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <MX_RTC_Init+0x68>
  {
    Error_Handler();
 8001fa8:	f000 fa16 	bl	80023d8 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001fac:	2301      	movs	r3, #1
 8001fae:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 1;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 8001fbc:	f107 0308 	add.w	r3, r7, #8
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	480c      	ldr	r0, [pc, #48]	; (8001ff8 <MX_RTC_Init+0xb4>)
 8001fc6:	f005 f80d 	bl	8006fe4 <HAL_RTC_SetDate>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_RTC_Init+0x90>
  {
    Error_Handler();
 8001fd0:	f000 fa02 	bl	80023d8 <Error_Handler>
  }

  /** Enable the RTC Tamper
  */
  sTamper.Tamper = RTC_TAMPER_1;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	603b      	str	r3, [r7, #0]
  sTamper.Trigger = RTC_TAMPERTRIGGER_LOWLEVEL;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	607b      	str	r3, [r7, #4]
  if (HAL_RTCEx_SetTamper(&hrtc, &sTamper) != HAL_OK)
 8001fdc:	463b      	mov	r3, r7
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4805      	ldr	r0, [pc, #20]	; (8001ff8 <MX_RTC_Init+0xb4>)
 8001fe2:	f005 fa5f 	bl	80074a4 <HAL_RTCEx_SetTamper>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_RTC_Init+0xac>
  {
    Error_Handler();
 8001fec:	f000 f9f4 	bl	80023d8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001ff0:	bf00      	nop
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	200002d4 	.word	0x200002d4
 8001ffc:	40002800 	.word	0x40002800

08002000 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002006:	f107 0308 	add.w	r3, r7, #8
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	605a      	str	r2, [r3, #4]
 8002010:	609a      	str	r2, [r3, #8]
 8002012:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002014:	463b      	mov	r3, r7
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800201c:	4b1e      	ldr	r3, [pc, #120]	; (8002098 <MX_TIM2_Init+0x98>)
 800201e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002022:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 43200;
 8002024:	4b1c      	ldr	r3, [pc, #112]	; (8002098 <MX_TIM2_Init+0x98>)
 8002026:	f64a 02c0 	movw	r2, #43200	; 0xa8c0
 800202a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800202c:	4b1a      	ldr	r3, [pc, #104]	; (8002098 <MX_TIM2_Init+0x98>)
 800202e:	2200      	movs	r2, #0
 8002030:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000;
 8002032:	4b19      	ldr	r3, [pc, #100]	; (8002098 <MX_TIM2_Init+0x98>)
 8002034:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002038:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800203a:	4b17      	ldr	r3, [pc, #92]	; (8002098 <MX_TIM2_Init+0x98>)
 800203c:	2200      	movs	r2, #0
 800203e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002040:	4b15      	ldr	r3, [pc, #84]	; (8002098 <MX_TIM2_Init+0x98>)
 8002042:	2200      	movs	r2, #0
 8002044:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002046:	4814      	ldr	r0, [pc, #80]	; (8002098 <MX_TIM2_Init+0x98>)
 8002048:	f005 fab7 	bl	80075ba <HAL_TIM_Base_Init>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002052:	f000 f9c1 	bl	80023d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002056:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800205a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800205c:	f107 0308 	add.w	r3, r7, #8
 8002060:	4619      	mov	r1, r3
 8002062:	480d      	ldr	r0, [pc, #52]	; (8002098 <MX_TIM2_Init+0x98>)
 8002064:	f005 fc80 	bl	8007968 <HAL_TIM_ConfigClockSource>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800206e:	f000 f9b3 	bl	80023d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002072:	2300      	movs	r3, #0
 8002074:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002076:	2300      	movs	r3, #0
 8002078:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800207a:	463b      	mov	r3, r7
 800207c:	4619      	mov	r1, r3
 800207e:	4806      	ldr	r0, [pc, #24]	; (8002098 <MX_TIM2_Init+0x98>)
 8002080:	f005 fe52 	bl	8007d28 <HAL_TIMEx_MasterConfigSynchronization>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800208a:	f000 f9a5 	bl	80023d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800208e:	bf00      	nop
 8002090:	3718      	adds	r7, #24
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	200002e8 	.word	0x200002e8

0800209c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020a2:	f107 0308 	add.w	r3, r7, #8
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	605a      	str	r2, [r3, #4]
 80020ac:	609a      	str	r2, [r3, #8]
 80020ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020b0:	463b      	mov	r3, r7
 80020b2:	2200      	movs	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80020b8:	4b1d      	ldr	r3, [pc, #116]	; (8002130 <MX_TIM3_Init+0x94>)
 80020ba:	4a1e      	ldr	r2, [pc, #120]	; (8002134 <MX_TIM3_Init+0x98>)
 80020bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 359;
 80020be:	4b1c      	ldr	r3, [pc, #112]	; (8002130 <MX_TIM3_Init+0x94>)
 80020c0:	f240 1267 	movw	r2, #359	; 0x167
 80020c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020c6:	4b1a      	ldr	r3, [pc, #104]	; (8002130 <MX_TIM3_Init+0x94>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 80020cc:	4b18      	ldr	r3, [pc, #96]	; (8002130 <MX_TIM3_Init+0x94>)
 80020ce:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80020d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020d4:	4b16      	ldr	r3, [pc, #88]	; (8002130 <MX_TIM3_Init+0x94>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020da:	4b15      	ldr	r3, [pc, #84]	; (8002130 <MX_TIM3_Init+0x94>)
 80020dc:	2200      	movs	r2, #0
 80020de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80020e0:	4813      	ldr	r0, [pc, #76]	; (8002130 <MX_TIM3_Init+0x94>)
 80020e2:	f005 fa6a 	bl	80075ba <HAL_TIM_Base_Init>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80020ec:	f000 f974 	bl	80023d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80020f6:	f107 0308 	add.w	r3, r7, #8
 80020fa:	4619      	mov	r1, r3
 80020fc:	480c      	ldr	r0, [pc, #48]	; (8002130 <MX_TIM3_Init+0x94>)
 80020fe:	f005 fc33 	bl	8007968 <HAL_TIM_ConfigClockSource>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002108:	f000 f966 	bl	80023d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800210c:	2300      	movs	r3, #0
 800210e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002110:	2300      	movs	r3, #0
 8002112:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002114:	463b      	mov	r3, r7
 8002116:	4619      	mov	r1, r3
 8002118:	4805      	ldr	r0, [pc, #20]	; (8002130 <MX_TIM3_Init+0x94>)
 800211a:	f005 fe05 	bl	8007d28 <HAL_TIMEx_MasterConfigSynchronization>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002124:	f000 f958 	bl	80023d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002128:	bf00      	nop
 800212a:	3718      	adds	r7, #24
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	20000330 	.word	0x20000330
 8002134:	40000400 	.word	0x40000400

08002138 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800213e:	f107 0308 	add.w	r3, r7, #8
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	605a      	str	r2, [r3, #4]
 8002148:	609a      	str	r2, [r3, #8]
 800214a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800214c:	463b      	mov	r3, r7
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002154:	4b1d      	ldr	r3, [pc, #116]	; (80021cc <MX_TIM4_Init+0x94>)
 8002156:	4a1e      	ldr	r2, [pc, #120]	; (80021d0 <MX_TIM4_Init+0x98>)
 8002158:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 12000;
 800215a:	4b1c      	ldr	r3, [pc, #112]	; (80021cc <MX_TIM4_Init+0x94>)
 800215c:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8002160:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002162:	4b1a      	ldr	r3, [pc, #104]	; (80021cc <MX_TIM4_Init+0x94>)
 8002164:	2200      	movs	r2, #0
 8002166:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 12000;
 8002168:	4b18      	ldr	r3, [pc, #96]	; (80021cc <MX_TIM4_Init+0x94>)
 800216a:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 800216e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002170:	4b16      	ldr	r3, [pc, #88]	; (80021cc <MX_TIM4_Init+0x94>)
 8002172:	2200      	movs	r2, #0
 8002174:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002176:	4b15      	ldr	r3, [pc, #84]	; (80021cc <MX_TIM4_Init+0x94>)
 8002178:	2200      	movs	r2, #0
 800217a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800217c:	4813      	ldr	r0, [pc, #76]	; (80021cc <MX_TIM4_Init+0x94>)
 800217e:	f005 fa1c 	bl	80075ba <HAL_TIM_Base_Init>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002188:	f000 f926 	bl	80023d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800218c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002190:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002192:	f107 0308 	add.w	r3, r7, #8
 8002196:	4619      	mov	r1, r3
 8002198:	480c      	ldr	r0, [pc, #48]	; (80021cc <MX_TIM4_Init+0x94>)
 800219a:	f005 fbe5 	bl	8007968 <HAL_TIM_ConfigClockSource>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80021a4:	f000 f918 	bl	80023d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021a8:	2300      	movs	r3, #0
 80021aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021ac:	2300      	movs	r3, #0
 80021ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80021b0:	463b      	mov	r3, r7
 80021b2:	4619      	mov	r1, r3
 80021b4:	4805      	ldr	r0, [pc, #20]	; (80021cc <MX_TIM4_Init+0x94>)
 80021b6:	f005 fdb7 	bl	8007d28 <HAL_TIMEx_MasterConfigSynchronization>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80021c0:	f000 f90a 	bl	80023d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80021c4:	bf00      	nop
 80021c6:	3718      	adds	r7, #24
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	20000378 	.word	0x20000378
 80021d0:	40000800 	.word	0x40000800

080021d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021d8:	4b11      	ldr	r3, [pc, #68]	; (8002220 <MX_USART1_UART_Init+0x4c>)
 80021da:	4a12      	ldr	r2, [pc, #72]	; (8002224 <MX_USART1_UART_Init+0x50>)
 80021dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80021de:	4b10      	ldr	r3, [pc, #64]	; (8002220 <MX_USART1_UART_Init+0x4c>)
 80021e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021e6:	4b0e      	ldr	r3, [pc, #56]	; (8002220 <MX_USART1_UART_Init+0x4c>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021ec:	4b0c      	ldr	r3, [pc, #48]	; (8002220 <MX_USART1_UART_Init+0x4c>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021f2:	4b0b      	ldr	r3, [pc, #44]	; (8002220 <MX_USART1_UART_Init+0x4c>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021f8:	4b09      	ldr	r3, [pc, #36]	; (8002220 <MX_USART1_UART_Init+0x4c>)
 80021fa:	220c      	movs	r2, #12
 80021fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021fe:	4b08      	ldr	r3, [pc, #32]	; (8002220 <MX_USART1_UART_Init+0x4c>)
 8002200:	2200      	movs	r2, #0
 8002202:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002204:	4b06      	ldr	r3, [pc, #24]	; (8002220 <MX_USART1_UART_Init+0x4c>)
 8002206:	2200      	movs	r2, #0
 8002208:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800220a:	4805      	ldr	r0, [pc, #20]	; (8002220 <MX_USART1_UART_Init+0x4c>)
 800220c:	f005 fdfc 	bl	8007e08 <HAL_UART_Init>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002216:	f000 f8df 	bl	80023d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	200003c0 	.word	0x200003c0
 8002224:	40013800 	.word	0x40013800

08002228 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800222c:	4b11      	ldr	r3, [pc, #68]	; (8002274 <MX_USART2_UART_Init+0x4c>)
 800222e:	4a12      	ldr	r2, [pc, #72]	; (8002278 <MX_USART2_UART_Init+0x50>)
 8002230:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002232:	4b10      	ldr	r3, [pc, #64]	; (8002274 <MX_USART2_UART_Init+0x4c>)
 8002234:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002238:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800223a:	4b0e      	ldr	r3, [pc, #56]	; (8002274 <MX_USART2_UART_Init+0x4c>)
 800223c:	2200      	movs	r2, #0
 800223e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002240:	4b0c      	ldr	r3, [pc, #48]	; (8002274 <MX_USART2_UART_Init+0x4c>)
 8002242:	2200      	movs	r2, #0
 8002244:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002246:	4b0b      	ldr	r3, [pc, #44]	; (8002274 <MX_USART2_UART_Init+0x4c>)
 8002248:	2200      	movs	r2, #0
 800224a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800224c:	4b09      	ldr	r3, [pc, #36]	; (8002274 <MX_USART2_UART_Init+0x4c>)
 800224e:	220c      	movs	r2, #12
 8002250:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002252:	4b08      	ldr	r3, [pc, #32]	; (8002274 <MX_USART2_UART_Init+0x4c>)
 8002254:	2200      	movs	r2, #0
 8002256:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002258:	4b06      	ldr	r3, [pc, #24]	; (8002274 <MX_USART2_UART_Init+0x4c>)
 800225a:	2200      	movs	r2, #0
 800225c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800225e:	4805      	ldr	r0, [pc, #20]	; (8002274 <MX_USART2_UART_Init+0x4c>)
 8002260:	f005 fdd2 	bl	8007e08 <HAL_UART_Init>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800226a:	f000 f8b5 	bl	80023d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20000404 	.word	0x20000404
 8002278:	40004400 	.word	0x40004400

0800227c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002282:	4b10      	ldr	r3, [pc, #64]	; (80022c4 <MX_DMA_Init+0x48>)
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	4a0f      	ldr	r2, [pc, #60]	; (80022c4 <MX_DMA_Init+0x48>)
 8002288:	f043 0301 	orr.w	r3, r3, #1
 800228c:	6153      	str	r3, [r2, #20]
 800228e:	4b0d      	ldr	r3, [pc, #52]	; (80022c4 <MX_DMA_Init+0x48>)
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	607b      	str	r3, [r7, #4]
 8002298:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800229a:	2200      	movs	r2, #0
 800229c:	2100      	movs	r1, #0
 800229e:	200b      	movs	r0, #11
 80022a0:	f002 f9bd 	bl	800461e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80022a4:	200b      	movs	r0, #11
 80022a6:	f002 f9d6 	bl	8004656 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80022aa:	2200      	movs	r2, #0
 80022ac:	2100      	movs	r1, #0
 80022ae:	200f      	movs	r0, #15
 80022b0:	f002 f9b5 	bl	800461e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80022b4:	200f      	movs	r0, #15
 80022b6:	f002 f9ce 	bl	8004656 <HAL_NVIC_EnableIRQ>

}
 80022ba:	bf00      	nop
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40021000 	.word	0x40021000

080022c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b088      	sub	sp, #32
 80022cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ce:	f107 0310 	add.w	r3, r7, #16
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	605a      	str	r2, [r3, #4]
 80022d8:	609a      	str	r2, [r3, #8]
 80022da:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022dc:	4b3a      	ldr	r3, [pc, #232]	; (80023c8 <MX_GPIO_Init+0x100>)
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	4a39      	ldr	r2, [pc, #228]	; (80023c8 <MX_GPIO_Init+0x100>)
 80022e2:	f043 0310 	orr.w	r3, r3, #16
 80022e6:	6193      	str	r3, [r2, #24]
 80022e8:	4b37      	ldr	r3, [pc, #220]	; (80023c8 <MX_GPIO_Init+0x100>)
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	f003 0310 	and.w	r3, r3, #16
 80022f0:	60fb      	str	r3, [r7, #12]
 80022f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022f4:	4b34      	ldr	r3, [pc, #208]	; (80023c8 <MX_GPIO_Init+0x100>)
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	4a33      	ldr	r2, [pc, #204]	; (80023c8 <MX_GPIO_Init+0x100>)
 80022fa:	f043 0320 	orr.w	r3, r3, #32
 80022fe:	6193      	str	r3, [r2, #24]
 8002300:	4b31      	ldr	r3, [pc, #196]	; (80023c8 <MX_GPIO_Init+0x100>)
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	f003 0320 	and.w	r3, r3, #32
 8002308:	60bb      	str	r3, [r7, #8]
 800230a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800230c:	4b2e      	ldr	r3, [pc, #184]	; (80023c8 <MX_GPIO_Init+0x100>)
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	4a2d      	ldr	r2, [pc, #180]	; (80023c8 <MX_GPIO_Init+0x100>)
 8002312:	f043 0304 	orr.w	r3, r3, #4
 8002316:	6193      	str	r3, [r2, #24]
 8002318:	4b2b      	ldr	r3, [pc, #172]	; (80023c8 <MX_GPIO_Init+0x100>)
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	f003 0304 	and.w	r3, r3, #4
 8002320:	607b      	str	r3, [r7, #4]
 8002322:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002324:	4b28      	ldr	r3, [pc, #160]	; (80023c8 <MX_GPIO_Init+0x100>)
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	4a27      	ldr	r2, [pc, #156]	; (80023c8 <MX_GPIO_Init+0x100>)
 800232a:	f043 0308 	orr.w	r3, r3, #8
 800232e:	6193      	str	r3, [r2, #24]
 8002330:	4b25      	ldr	r3, [pc, #148]	; (80023c8 <MX_GPIO_Init+0x100>)
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	f003 0308 	and.w	r3, r3, #8
 8002338:	603b      	str	r3, [r7, #0]
 800233a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_SET);
 800233c:	2201      	movs	r2, #1
 800233e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002342:	4822      	ldr	r0, [pc, #136]	; (80023cc <MX_GPIO_Init+0x104>)
 8002344:	f002 fded 	bl	8004f22 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002348:	2301      	movs	r3, #1
 800234a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800234c:	4b20      	ldr	r3, [pc, #128]	; (80023d0 <MX_GPIO_Init+0x108>)
 800234e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002350:	2301      	movs	r3, #1
 8002352:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002354:	f107 0310 	add.w	r3, r7, #16
 8002358:	4619      	mov	r1, r3
 800235a:	481c      	ldr	r0, [pc, #112]	; (80023cc <MX_GPIO_Init+0x104>)
 800235c:	f002 fc46 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pins : LDN_Pin LDP_Pin */
  GPIO_InitStruct.Pin = LDN_Pin|LDP_Pin;
 8002360:	2330      	movs	r3, #48	; 0x30
 8002362:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002368:	2300      	movs	r3, #0
 800236a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800236c:	f107 0310 	add.w	r3, r7, #16
 8002370:	4619      	mov	r1, r3
 8002372:	4816      	ldr	r0, [pc, #88]	; (80023cc <MX_GPIO_Init+0x104>)
 8002374:	f002 fc3a 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pin : SIM_DTR_Pin */
  GPIO_InitStruct.Pin = SIM_DTR_Pin;
 8002378:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800237c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800237e:	2300      	movs	r3, #0
 8002380:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002382:	2300      	movs	r3, #0
 8002384:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SIM_DTR_GPIO_Port, &GPIO_InitStruct);
 8002386:	f107 0310 	add.w	r3, r7, #16
 800238a:	4619      	mov	r1, r3
 800238c:	4811      	ldr	r0, [pc, #68]	; (80023d4 <MX_GPIO_Init+0x10c>)
 800238e:	f002 fc2d 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pin : SIM_PWR_Pin */
  GPIO_InitStruct.Pin = SIM_PWR_Pin;
 8002392:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002396:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002398:	2301      	movs	r3, #1
 800239a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239c:	2300      	movs	r3, #0
 800239e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a0:	2302      	movs	r3, #2
 80023a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SIM_PWR_GPIO_Port, &GPIO_InitStruct);
 80023a4:	f107 0310 	add.w	r3, r7, #16
 80023a8:	4619      	mov	r1, r3
 80023aa:	4808      	ldr	r0, [pc, #32]	; (80023cc <MX_GPIO_Init+0x104>)
 80023ac:	f002 fc1e 	bl	8004bec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 10, 0);
 80023b0:	2200      	movs	r2, #0
 80023b2:	210a      	movs	r1, #10
 80023b4:	2006      	movs	r0, #6
 80023b6:	f002 f932 	bl	800461e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80023ba:	2006      	movs	r0, #6
 80023bc:	f002 f94b 	bl	8004656 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80023c0:	bf00      	nop
 80023c2:	3720      	adds	r7, #32
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40021000 	.word	0x40021000
 80023cc:	40010800 	.word	0x40010800
 80023d0:	10210000 	.word	0x10210000
 80023d4:	40010c00 	.word	0x40010c00

080023d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023dc:	b672      	cpsid	i
}
 80023de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023e0:	e7fe      	b.n	80023e0 <Error_Handler+0x8>
	...

080023e4 <HAL_GPIO_EXTI_Callback>:
uint16_t BatteryADC[100] = {0};
uint8_t  Battery = 0;
uint8_t sleep_enable = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	80fb      	strh	r3, [r7, #6]
//	printf("GPIO %d LOW\r\n",GPIO_Pin);
	printf("weakup by GPIO\r\n");
 80023ee:	4804      	ldr	r0, [pc, #16]	; (8002400 <HAL_GPIO_EXTI_Callback+0x1c>)
 80023f0:	f007 fb98 	bl	8009b24 <puts>
	HAL_PWR_DisableSleepOnExit ();
 80023f4:	f003 ff2a 	bl	800624c <HAL_PWR_DisableSleepOnExit>
}
 80023f8:	bf00      	nop
 80023fa:	3708      	adds	r7, #8
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	0800d644 	.word	0x0800d644

08002404 <_Z16enter_sleep_modev>:

void enter_sleep_mode(){
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
	if(!sleep_enable){
 8002408:	4b16      	ldr	r3, [pc, #88]	; (8002464 <_Z16enter_sleep_modev+0x60>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d027      	beq.n	8002460 <_Z16enter_sleep_modev+0x5c>
		return;
	}
	printf("ENTER SLEEP MODE\r\n");
 8002410:	4815      	ldr	r0, [pc, #84]	; (8002468 <_Z16enter_sleep_modev+0x64>)
 8002412:	f007 fb87 	bl	8009b24 <puts>
	HAL_TIM_Base_Stop_IT(&htim3);
 8002416:	4815      	ldr	r0, [pc, #84]	; (800246c <_Z16enter_sleep_modev+0x68>)
 8002418:	f005 f970 	bl	80076fc <HAL_TIM_Base_Stop_IT>
	SIM7600_TURN_OFF();
 800241c:	f000 fcac 	bl	8002d78 <_Z16SIM7600_TURN_OFFv>
	HAL_Delay(100);
 8002420:	2064      	movs	r0, #100	; 0x64
 8002422:	f001 fbe9 	bl	8003bf8 <HAL_Delay>

	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002426:	2006      	movs	r0, #6
 8002428:	f002 f915 	bl	8004656 <HAL_NVIC_EnableIRQ>
	__HAL_TIM_SET_COUNTER(&htim2,0);
 800242c:	4b10      	ldr	r3, [pc, #64]	; (8002470 <_Z16enter_sleep_modev+0x6c>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2200      	movs	r2, #0
 8002432:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim2);
 8002434:	480e      	ldr	r0, [pc, #56]	; (8002470 <_Z16enter_sleep_modev+0x6c>)
 8002436:	f005 f90f 	bl	8007658 <HAL_TIM_Base_Start_IT>
	HAL_SuspendTick();
 800243a:	f001 fc01 	bl	8003c40 <HAL_SuspendTick>

	HAL_PWR_EnableSleepOnExit ();
 800243e:	f003 fef7 	bl	8006230 <HAL_PWR_EnableSleepOnExit>

	//	  Enter Sleep Mode , wake up is done once User push-button is pressed
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8002442:	2101      	movs	r1, #1
 8002444:	2000      	movs	r0, #0
 8002446:	f003 fed7 	bl	80061f8 <HAL_PWR_EnterSLEEPMode>
	HAL_ResumeTick();
 800244a:	f001 fc07 	bl	8003c5c <HAL_ResumeTick>
	HAL_Delay(100);
 800244e:	2064      	movs	r0, #100	; 0x64
 8002450:	f001 fbd2 	bl	8003bf8 <HAL_Delay>
	printf("EXIT SLEEP MODE\r\n");
 8002454:	4807      	ldr	r0, [pc, #28]	; (8002474 <_Z16enter_sleep_modev+0x70>)
 8002456:	f007 fb65 	bl	8009b24 <puts>
	HAL_NVIC_SystemReset();
 800245a:	f002 f918 	bl	800468e <HAL_NVIC_SystemReset>
 800245e:	e000      	b.n	8002462 <_Z16enter_sleep_modev+0x5e>
		return;
 8002460:	bf00      	nop
}
 8002462:	bd80      	pop	{r7, pc}
 8002464:	2000056d 	.word	0x2000056d
 8002468:	0800d654 	.word	0x0800d654
 800246c:	20000330 	.word	0x20000330
 8002470:	200002e8 	.word	0x200002e8
 8002474:	0800d668 	.word	0x0800d668

08002478 <_Z14add_heart_beath>:
void add_heart_beat(uint8_t value)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	71fb      	strb	r3, [r7, #7]
	if(heart_beatcnt ==0)
 8002482:	4b4d      	ldr	r3, [pc, #308]	; (80025b8 <_Z14add_heart_beath+0x140>)
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d113      	bne.n	80024b2 <_Z14add_heart_beath+0x3a>
	{
		heart_beat[heart_beatcnt] = value;
 800248a:	4b4b      	ldr	r3, [pc, #300]	; (80025b8 <_Z14add_heart_beath+0x140>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	4619      	mov	r1, r3
 8002490:	4a4a      	ldr	r2, [pc, #296]	; (80025bc <_Z14add_heart_beath+0x144>)
 8002492:	79fb      	ldrb	r3, [r7, #7]
 8002494:	5453      	strb	r3, [r2, r1]
		adder_time = HAL_GetTick() +1500;
 8002496:	f001 fba5 	bl	8003be4 <HAL_GetTick>
 800249a:	4603      	mov	r3, r0
 800249c:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 80024a0:	4a47      	ldr	r2, [pc, #284]	; (80025c0 <_Z14add_heart_beath+0x148>)
 80024a2:	6013      	str	r3, [r2, #0]
		heart_beatcnt++;
 80024a4:	4b44      	ldr	r3, [pc, #272]	; (80025b8 <_Z14add_heart_beath+0x140>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	3301      	adds	r3, #1
 80024aa:	b2da      	uxtb	r2, r3
 80024ac:	4b42      	ldr	r3, [pc, #264]	; (80025b8 <_Z14add_heart_beath+0x140>)
 80024ae:	701a      	strb	r2, [r3, #0]
 80024b0:	e078      	b.n	80025a4 <_Z14add_heart_beath+0x12c>
	}
	else
	{
		if((abs(value - heart_beat[heart_beatcnt-1]) >3) || (HAL_GetTick()>adder_time))
 80024b2:	79fb      	ldrb	r3, [r7, #7]
 80024b4:	4a40      	ldr	r2, [pc, #256]	; (80025b8 <_Z14add_heart_beath+0x140>)
 80024b6:	7812      	ldrb	r2, [r2, #0]
 80024b8:	3a01      	subs	r2, #1
 80024ba:	4940      	ldr	r1, [pc, #256]	; (80025bc <_Z14add_heart_beath+0x144>)
 80024bc:	5c8a      	ldrb	r2, [r1, r2]
 80024be:	1a9b      	subs	r3, r3, r2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	bfb8      	it	lt
 80024c4:	425b      	neglt	r3, r3
 80024c6:	2b03      	cmp	r3, #3
 80024c8:	dc06      	bgt.n	80024d8 <_Z14add_heart_beath+0x60>
 80024ca:	f001 fb8b 	bl	8003be4 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	4b3b      	ldr	r3, [pc, #236]	; (80025c0 <_Z14add_heart_beath+0x148>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d901      	bls.n	80024dc <_Z14add_heart_beath+0x64>
 80024d8:	2301      	movs	r3, #1
 80024da:	e000      	b.n	80024de <_Z14add_heart_beath+0x66>
 80024dc:	2300      	movs	r3, #0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d01b      	beq.n	800251a <_Z14add_heart_beath+0xa2>
		{
			memset(heart_beat,0,NUM_SAMPLE);
 80024e2:	220a      	movs	r2, #10
 80024e4:	2100      	movs	r1, #0
 80024e6:	4835      	ldr	r0, [pc, #212]	; (80025bc <_Z14add_heart_beath+0x144>)
 80024e8:	f006 fd52 	bl	8008f90 <memset>
			heart_beatcnt = 0;
 80024ec:	4b32      	ldr	r3, [pc, #200]	; (80025b8 <_Z14add_heart_beath+0x140>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	701a      	strb	r2, [r3, #0]
			heart_beat[heart_beatcnt] = value;
 80024f2:	4b31      	ldr	r3, [pc, #196]	; (80025b8 <_Z14add_heart_beath+0x140>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	4619      	mov	r1, r3
 80024f8:	4a30      	ldr	r2, [pc, #192]	; (80025bc <_Z14add_heart_beath+0x144>)
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	5453      	strb	r3, [r2, r1]
			adder_time = HAL_GetTick() +1500;
 80024fe:	f001 fb71 	bl	8003be4 <HAL_GetTick>
 8002502:	4603      	mov	r3, r0
 8002504:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8002508:	4a2d      	ldr	r2, [pc, #180]	; (80025c0 <_Z14add_heart_beath+0x148>)
 800250a:	6013      	str	r3, [r2, #0]
			heart_beatcnt++;
 800250c:	4b2a      	ldr	r3, [pc, #168]	; (80025b8 <_Z14add_heart_beath+0x140>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	3301      	adds	r3, #1
 8002512:	b2da      	uxtb	r2, r3
 8002514:	4b28      	ldr	r3, [pc, #160]	; (80025b8 <_Z14add_heart_beath+0x140>)
 8002516:	701a      	strb	r2, [r3, #0]
			return;
 8002518:	e04b      	b.n	80025b2 <_Z14add_heart_beath+0x13a>
		}
		else
		{
			if(heart_beatcnt == NUM_SAMPLE)
 800251a:	4b27      	ldr	r3, [pc, #156]	; (80025b8 <_Z14add_heart_beath+0x140>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b0a      	cmp	r3, #10
 8002520:	d134      	bne.n	800258c <_Z14add_heart_beath+0x114>
			{
				for(int i =0;i<NUM_SAMPLE-1;i++)
 8002522:	2300      	movs	r3, #0
 8002524:	617b      	str	r3, [r7, #20]
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	2b08      	cmp	r3, #8
 800252a:	dc0c      	bgt.n	8002546 <_Z14add_heart_beath+0xce>
				{
					heart_beat[i] = heart_beat[i+1];
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	3301      	adds	r3, #1
 8002530:	4a22      	ldr	r2, [pc, #136]	; (80025bc <_Z14add_heart_beath+0x144>)
 8002532:	5cd1      	ldrb	r1, [r2, r3]
 8002534:	4a21      	ldr	r2, [pc, #132]	; (80025bc <_Z14add_heart_beath+0x144>)
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	4413      	add	r3, r2
 800253a:	460a      	mov	r2, r1
 800253c:	701a      	strb	r2, [r3, #0]
				for(int i =0;i<NUM_SAMPLE-1;i++)
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	3301      	adds	r3, #1
 8002542:	617b      	str	r3, [r7, #20]
 8002544:	e7ef      	b.n	8002526 <_Z14add_heart_beath+0xae>
				}
				heart_beat[4] = value;
 8002546:	4a1d      	ldr	r2, [pc, #116]	; (80025bc <_Z14add_heart_beath+0x144>)
 8002548:	79fb      	ldrb	r3, [r7, #7]
 800254a:	7113      	strb	r3, [r2, #4]
				heart_beatcnt = NUM_SAMPLE;
 800254c:	4b1a      	ldr	r3, [pc, #104]	; (80025b8 <_Z14add_heart_beath+0x140>)
 800254e:	220a      	movs	r2, #10
 8002550:	701a      	strb	r2, [r3, #0]
				uint16_t total =0;
 8002552:	2300      	movs	r3, #0
 8002554:	827b      	strh	r3, [r7, #18]
				for(int i =0;i<NUM_SAMPLE;i++)
 8002556:	2300      	movs	r3, #0
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2b09      	cmp	r3, #9
 800255e:	dc0b      	bgt.n	8002578 <_Z14add_heart_beath+0x100>
				{
					total+=heart_beat[i];
 8002560:	4a16      	ldr	r2, [pc, #88]	; (80025bc <_Z14add_heart_beath+0x144>)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	4413      	add	r3, r2
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	b29a      	uxth	r2, r3
 800256a:	8a7b      	ldrh	r3, [r7, #18]
 800256c:	4413      	add	r3, r2
 800256e:	827b      	strh	r3, [r7, #18]
				for(int i =0;i<NUM_SAMPLE;i++)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	3301      	adds	r3, #1
 8002574:	60fb      	str	r3, [r7, #12]
 8002576:	e7f0      	b.n	800255a <_Z14add_heart_beath+0xe2>
				}
				result_heartbeat = total/NUM_SAMPLE;
 8002578:	8a7b      	ldrh	r3, [r7, #18]
 800257a:	4a12      	ldr	r2, [pc, #72]	; (80025c4 <_Z14add_heart_beath+0x14c>)
 800257c:	fba2 2303 	umull	r2, r3, r2, r3
 8002580:	08db      	lsrs	r3, r3, #3
 8002582:	b29b      	uxth	r3, r3
 8002584:	b2da      	uxtb	r2, r3
 8002586:	4b10      	ldr	r3, [pc, #64]	; (80025c8 <_Z14add_heart_beath+0x150>)
 8002588:	701a      	strb	r2, [r3, #0]
 800258a:	e00b      	b.n	80025a4 <_Z14add_heart_beath+0x12c>
			}
			else
			{
				heart_beat[heart_beatcnt] = value;
 800258c:	4b0a      	ldr	r3, [pc, #40]	; (80025b8 <_Z14add_heart_beath+0x140>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	4619      	mov	r1, r3
 8002592:	4a0a      	ldr	r2, [pc, #40]	; (80025bc <_Z14add_heart_beath+0x144>)
 8002594:	79fb      	ldrb	r3, [r7, #7]
 8002596:	5453      	strb	r3, [r2, r1]
				heart_beatcnt++;
 8002598:	4b07      	ldr	r3, [pc, #28]	; (80025b8 <_Z14add_heart_beath+0x140>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	3301      	adds	r3, #1
 800259e:	b2da      	uxtb	r2, r3
 80025a0:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <_Z14add_heart_beath+0x140>)
 80025a2:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	adder_time = HAL_GetTick() +1500;
 80025a4:	f001 fb1e 	bl	8003be4 <HAL_GetTick>
 80025a8:	4603      	mov	r3, r0
 80025aa:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 80025ae:	4a04      	ldr	r2, [pc, #16]	; (80025c0 <_Z14add_heart_beath+0x148>)
 80025b0:	6013      	str	r3, [r2, #0]

}
 80025b2:	3718      	adds	r7, #24
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	2000049a 	.word	0x2000049a
 80025bc:	20000490 	.word	0x20000490
 80025c0:	2000049c 	.word	0x2000049c
 80025c4:	cccccccd 	.word	0xcccccccd
 80025c8:	200004a0 	.word	0x200004a0

080025cc <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == hadc1.Instance)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	4b2a      	ldr	r3, [pc, #168]	; (8002684 <HAL_ADC_ConvCpltCallback+0xb8>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d14d      	bne.n	800267c <HAL_ADC_ConvCpltCallback+0xb0>
	{
		uint32_t total = 0;
 80025e0:	2300      	movs	r3, #0
 80025e2:	617b      	str	r3, [r7, #20]
		for (int i = 0;i<100;i++){
 80025e4:	2300      	movs	r3, #0
 80025e6:	613b      	str	r3, [r7, #16]
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	2b63      	cmp	r3, #99	; 0x63
 80025ec:	dc0b      	bgt.n	8002606 <HAL_ADC_ConvCpltCallback+0x3a>
			total += BatteryADC[i];
 80025ee:	4a26      	ldr	r2, [pc, #152]	; (8002688 <HAL_ADC_ConvCpltCallback+0xbc>)
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025f6:	461a      	mov	r2, r3
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	4413      	add	r3, r2
 80025fc:	617b      	str	r3, [r7, #20]
		for (int i = 0;i<100;i++){
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	3301      	adds	r3, #1
 8002602:	613b      	str	r3, [r7, #16]
 8002604:	e7f0      	b.n	80025e8 <HAL_ADC_ConvCpltCallback+0x1c>
		}
		total = total / 100;
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	4a20      	ldr	r2, [pc, #128]	; (800268c <HAL_ADC_ConvCpltCallback+0xc0>)
 800260a:	fba2 2303 	umull	r2, r3, r2, r3
 800260e:	095b      	lsrs	r3, r3, #5
 8002610:	617b      	str	r3, [r7, #20]
		float voltage  = 3.3f;
 8002612:	4b1f      	ldr	r3, [pc, #124]	; (8002690 <HAL_ADC_ConvCpltCallback+0xc4>)
 8002614:	60fb      	str	r3, [r7, #12]
		voltage = (voltage *total/4096);
 8002616:	6978      	ldr	r0, [r7, #20]
 8002618:	f7fe fb5c 	bl	8000cd4 <__aeabi_ui2f>
 800261c:	4603      	mov	r3, r0
 800261e:	68f9      	ldr	r1, [r7, #12]
 8002620:	4618      	mov	r0, r3
 8002622:	f7fe fbaf 	bl	8000d84 <__aeabi_fmul>
 8002626:	4603      	mov	r3, r0
 8002628:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 800262c:	4618      	mov	r0, r3
 800262e:	f7fe fc5d 	bl	8000eec <__aeabi_fdiv>
 8002632:	4603      	mov	r3, r0
 8002634:	60fb      	str	r3, [r7, #12]
//		printf("bat : %d\n",(int)(voltage *100));
		voltage=voltage*2.078f;
 8002636:	4917      	ldr	r1, [pc, #92]	; (8002694 <HAL_ADC_ConvCpltCallback+0xc8>)
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f7fe fba3 	bl	8000d84 <__aeabi_fmul>
 800263e:	4603      	mov	r3, r0
 8002640:	60fb      	str	r3, [r7, #12]
		Battery = (voltage - 3.7f)*100/(4.2f-3.7f);
 8002642:	4915      	ldr	r1, [pc, #84]	; (8002698 <HAL_ADC_ConvCpltCallback+0xcc>)
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f7fe fa93 	bl	8000b70 <__aeabi_fsub>
 800264a:	4603      	mov	r3, r0
 800264c:	4913      	ldr	r1, [pc, #76]	; (800269c <HAL_ADC_ConvCpltCallback+0xd0>)
 800264e:	4618      	mov	r0, r3
 8002650:	f7fe fb98 	bl	8000d84 <__aeabi_fmul>
 8002654:	4603      	mov	r3, r0
 8002656:	4912      	ldr	r1, [pc, #72]	; (80026a0 <HAL_ADC_ConvCpltCallback+0xd4>)
 8002658:	4618      	mov	r0, r3
 800265a:	f7fe fc47 	bl	8000eec <__aeabi_fdiv>
 800265e:	4603      	mov	r3, r0
 8002660:	4618      	mov	r0, r3
 8002662:	f7fe fd91 	bl	8001188 <__aeabi_f2uiz>
 8002666:	4603      	mov	r3, r0
 8002668:	b2da      	uxtb	r2, r3
 800266a:	4b0e      	ldr	r3, [pc, #56]	; (80026a4 <HAL_ADC_ConvCpltCallback+0xd8>)
 800266c:	701a      	strb	r2, [r3, #0]
		if(Battery > 100)
 800266e:	4b0d      	ldr	r3, [pc, #52]	; (80026a4 <HAL_ADC_ConvCpltCallback+0xd8>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2b64      	cmp	r3, #100	; 0x64
 8002674:	d902      	bls.n	800267c <HAL_ADC_ConvCpltCallback+0xb0>
			Battery = 100;
 8002676:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <HAL_ADC_ConvCpltCallback+0xd8>)
 8002678:	2264      	movs	r2, #100	; 0x64
 800267a:	701a      	strb	r2, [r3, #0]
	}
}
 800267c:	bf00      	nop
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	2000020c 	.word	0x2000020c
 8002688:	200004a4 	.word	0x200004a4
 800268c:	51eb851f 	.word	0x51eb851f
 8002690:	40533333 	.word	0x40533333
 8002694:	4004fdf4 	.word	0x4004fdf4
 8002698:	406ccccd 	.word	0x406ccccd
 800269c:	42c80000 	.word	0x42c80000
 80026a0:	3efffff8 	.word	0x3efffff8
 80026a4:	2000056c 	.word	0x2000056c

080026a8 <_Z4initv>:
void init()
{
 80026a8:	b590      	push	{r4, r7, lr}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af04      	add	r7, sp, #16
	HAL_Delay(100);
 80026ae:	2064      	movs	r0, #100	; 0x64
 80026b0:	f001 faa2 	bl	8003bf8 <HAL_Delay>
	printf("helloworld\r\n");
 80026b4:	4813      	ldr	r0, [pc, #76]	; (8002704 <_Z4initv+0x5c>)
 80026b6:	f007 fa35 	bl	8009b24 <puts>
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80026ba:	2006      	movs	r0, #6
 80026bc:	f001 ffd9 	bl	8004672 <HAL_NVIC_DisableIRQ>
//	if(total >20)
//	{
//		sleep_enable = 1;
//		enter_sleep_mode();
//	}
	SIM7600_TURN_ON();
 80026c0:	f000 fb3e 	bl	8002d40 <_Z15SIM7600_TURN_ONv>
//	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
	pulseOxymeter = new MAX30100( DEFAULT_OPERATING_MODE, DEFAULT_SAMPLING_RATE, DEFAULT_LED_PULSE_WIDTH, DEFAULT_IR_LED_CURRENT, true, true );
 80026c4:	20c0      	movs	r0, #192	; 0xc0
 80026c6:	f006 fa37 	bl	8008b38 <_Znwj>
 80026ca:	4603      	mov	r3, r0
 80026cc:	461c      	mov	r4, r3
 80026ce:	2301      	movs	r3, #1
 80026d0:	9302      	str	r3, [sp, #8]
 80026d2:	2301      	movs	r3, #1
 80026d4:	9301      	str	r3, [sp, #4]
 80026d6:	230f      	movs	r3, #15
 80026d8:	9300      	str	r3, [sp, #0]
 80026da:	2303      	movs	r3, #3
 80026dc:	2201      	movs	r2, #1
 80026de:	2103      	movs	r1, #3
 80026e0:	4620      	mov	r0, r4
 80026e2:	f7fe fdc1 	bl	8001268 <_ZN8MAX30100C1E4Mode12SamplingRate13LEDPulseWidth10LEDCurrentbb>
 80026e6:	4b08      	ldr	r3, [pc, #32]	; (8002708 <_Z4initv+0x60>)
 80026e8:	601c      	str	r4, [r3, #0]
	pulseOxymeter->resetFIFO();
 80026ea:	4b07      	ldr	r3, [pc, #28]	; (8002708 <_Z4initv+0x60>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff f9f7 	bl	8001ae2 <_ZN8MAX301009resetFIFOEv>
	HAL_TIM_Base_Start_IT(&htim3);
 80026f4:	4805      	ldr	r0, [pc, #20]	; (800270c <_Z4initv+0x64>)
 80026f6:	f004 ffaf 	bl	8007658 <HAL_TIM_Base_Start_IT>

}
 80026fa:	bf00      	nop
 80026fc:	3704      	adds	r7, #4
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd90      	pop	{r4, r7, pc}
 8002702:	bf00      	nop
 8002704:	0800d67c 	.word	0x0800d67c
 8002708:	2000048c 	.word	0x2000048c
 800270c:	20000330 	.word	0x20000330

08002710 <HAL_TIM_PeriodElapsedCallback>:
char location[100] = {0};
uint32_t Baterry_check_time = 0;
uint32_t pulseDetected = 0;
uint32_t timepulseDetected = HAL_GetTick() +5000;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) // 20ms
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b08c      	sub	sp, #48	; 0x30
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim3.Instance){
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	4b28      	ldr	r3, [pc, #160]	; (80027c0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	429a      	cmp	r2, r3
 8002722:	d133      	bne.n	800278c <HAL_TIM_PeriodElapsedCallback+0x7c>
		  pulseoxymeter_t result = pulseOxymeter->update();
 8002724:	4b27      	ldr	r3, [pc, #156]	; (80027c4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	f107 030c 	add.w	r3, r7, #12
 800272c:	4611      	mov	r1, r2
 800272e:	4618      	mov	r0, r3
 8002730:	f7fe fe30 	bl	8001394 <_ZN8MAX301006updateEv>
		  if( result.pulseDetected == true )
 8002734:	7b3b      	ldrb	r3, [r7, #12]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d13d      	bne.n	80027b6 <HAL_TIM_PeriodElapsedCallback+0xa6>
		  {
				pulseDetected++;
 800273a:	4b23      	ldr	r3, [pc, #140]	; (80027c8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	3301      	adds	r3, #1
 8002740:	4a21      	ldr	r2, [pc, #132]	; (80027c8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002742:	6013      	str	r3, [r2, #0]
				printf("BEAT: %d\r\n",(int)result.heartBPM);
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	4618      	mov	r0, r3
 8002748:	f7fe fcf8 	bl	800113c <__aeabi_f2iz>
 800274c:	4603      	mov	r3, r0
 800274e:	4619      	mov	r1, r3
 8002750:	481e      	ldr	r0, [pc, #120]	; (80027cc <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002752:	f007 f961 	bl	8009a18 <iprintf>
				if((int)result.heartBPM < 200)
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	4618      	mov	r0, r3
 800275a:	f7fe fcef 	bl	800113c <__aeabi_f2iz>
 800275e:	4603      	mov	r3, r0
 8002760:	2bc7      	cmp	r3, #199	; 0xc7
 8002762:	dc28      	bgt.n	80027b6 <HAL_TIM_PeriodElapsedCallback+0xa6>
				{

					add_heart_beat((int)result.heartBPM);
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	4618      	mov	r0, r3
 8002768:	f7fe fce8 	bl	800113c <__aeabi_f2iz>
 800276c:	4603      	mov	r3, r0
 800276e:	b2db      	uxtb	r3, r3
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff fe81 	bl	8002478 <_Z14add_heart_beath>
					if(result_heartbeat)
 8002776:	4b16      	ldr	r3, [pc, #88]	; (80027d0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d01b      	beq.n	80027b6 <HAL_TIM_PeriodElapsedCallback+0xa6>
					{
						printf("OK: result_heartbeat: %d\r\n",result_heartbeat);
 800277e:	4b14      	ldr	r3, [pc, #80]	; (80027d0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	4619      	mov	r1, r3
 8002784:	4813      	ldr	r0, [pc, #76]	; (80027d4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002786:	f007 f947 	bl	8009a18 <iprintf>
			HAL_PWR_DisableSleepOnExit ();
		}
		countinterrup++;
	}

}
 800278a:	e014      	b.n	80027b6 <HAL_TIM_PeriodElapsedCallback+0xa6>
	}else if(htim->Instance == htim2.Instance){
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	4b11      	ldr	r3, [pc, #68]	; (80027d8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	429a      	cmp	r2, r3
 8002796:	d10e      	bne.n	80027b6 <HAL_TIM_PeriodElapsedCallback+0xa6>
		if(countinterrup == (MINUTES+1)) // 1p
 8002798:	4b10      	ldr	r3, [pc, #64]	; (80027dc <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2b02      	cmp	r3, #2
 800279e:	d105      	bne.n	80027ac <HAL_TIM_PeriodElapsedCallback+0x9c>
			printf("weakup from timer : %dp",MINUTES);
 80027a0:	2101      	movs	r1, #1
 80027a2:	480f      	ldr	r0, [pc, #60]	; (80027e0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80027a4:	f007 f938 	bl	8009a18 <iprintf>
			HAL_PWR_DisableSleepOnExit ();
 80027a8:	f003 fd50 	bl	800624c <HAL_PWR_DisableSleepOnExit>
		countinterrup++;
 80027ac:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	3301      	adds	r3, #1
 80027b2:	4a0a      	ldr	r2, [pc, #40]	; (80027dc <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80027b4:	6013      	str	r3, [r2, #0]
}
 80027b6:	bf00      	nop
 80027b8:	3730      	adds	r7, #48	; 0x30
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	20000330 	.word	0x20000330
 80027c4:	2000048c 	.word	0x2000048c
 80027c8:	200005d8 	.word	0x200005d8
 80027cc:	0800d688 	.word	0x0800d688
 80027d0:	200004a0 	.word	0x200004a0
 80027d4:	0800d694 	.word	0x0800d694
 80027d8:	200002e8 	.word	0x200002e8
 80027dc:	200005e0 	.word	0x200005e0
 80027e0:	0800d6b0 	.word	0x0800d6b0

080027e4 <_Z4loopv>:
void loop()
{
 80027e4:	b590      	push	{r4, r7, lr}
 80027e6:	b0b9      	sub	sp, #228	; 0xe4
 80027e8:	af04      	add	r7, sp, #16
	static int http_try = 0;
	if(HAL_GetTick() > Baterry_check_time)
 80027ea:	f001 f9fb 	bl	8003be4 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	4b94      	ldr	r3, [pc, #592]	; (8002a44 <_Z4loopv+0x260>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	bf8c      	ite	hi
 80027f8:	2301      	movhi	r3, #1
 80027fa:	2300      	movls	r3, #0
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00b      	beq.n	800281a <_Z4loopv+0x36>
//		printf("battety check\r\n");
//		if(result_heartbeat == 0)
//		{
//			printf("reading heartbeat\r\n");
//		}
		HAL_ADC_Start_DMA(&hadc1, (uint32_t *)BatteryADC, 100);
 8002802:	2264      	movs	r2, #100	; 0x64
 8002804:	4990      	ldr	r1, [pc, #576]	; (8002a48 <_Z4loopv+0x264>)
 8002806:	4891      	ldr	r0, [pc, #580]	; (8002a4c <_Z4loopv+0x268>)
 8002808:	f001 fb0e 	bl	8003e28 <HAL_ADC_Start_DMA>
		Baterry_check_time = HAL_GetTick() +2000;
 800280c:	f001 f9ea 	bl	8003be4 <HAL_GetTick>
 8002810:	4603      	mov	r3, r0
 8002812:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002816:	4a8b      	ldr	r2, [pc, #556]	; (8002a44 <_Z4loopv+0x260>)
 8002818:	6013      	str	r3, [r2, #0]
	}
	if(HAL_GetTick() > timepulseDetected)
 800281a:	f001 f9e3 	bl	8003be4 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	4b8b      	ldr	r3, [pc, #556]	; (8002a50 <_Z4loopv+0x26c>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	429a      	cmp	r2, r3
 8002826:	bf8c      	ite	hi
 8002828:	2301      	movhi	r3, #1
 800282a:	2300      	movls	r3, #0
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d02e      	beq.n	8002890 <_Z4loopv+0xac>
	{
		timepulseDetected = HAL_GetTick() +5000;
 8002832:	f001 f9d7 	bl	8003be4 <HAL_GetTick>
 8002836:	4603      	mov	r3, r0
 8002838:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800283c:	3308      	adds	r3, #8
 800283e:	4a84      	ldr	r2, [pc, #528]	; (8002a50 <_Z4loopv+0x26c>)
 8002840:	6013      	str	r3, [r2, #0]
		if(!pulseDetected){
 8002842:	4b84      	ldr	r3, [pc, #528]	; (8002a54 <_Z4loopv+0x270>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d11f      	bne.n	800288a <_Z4loopv+0xa6>
			  delete pulseOxymeter;
 800284a:	4b83      	ldr	r3, [pc, #524]	; (8002a58 <_Z4loopv+0x274>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d003      	beq.n	800285a <_Z4loopv+0x76>
 8002852:	21c0      	movs	r1, #192	; 0xc0
 8002854:	4618      	mov	r0, r3
 8002856:	f006 f96d 	bl	8008b34 <_ZdlPvj>
			  pulseOxymeter = new MAX30100( DEFAULT_OPERATING_MODE, DEFAULT_SAMPLING_RATE, DEFAULT_LED_PULSE_WIDTH, DEFAULT_IR_LED_CURRENT, true, true );
 800285a:	20c0      	movs	r0, #192	; 0xc0
 800285c:	f006 f96c 	bl	8008b38 <_Znwj>
 8002860:	4603      	mov	r3, r0
 8002862:	461c      	mov	r4, r3
 8002864:	2301      	movs	r3, #1
 8002866:	9302      	str	r3, [sp, #8]
 8002868:	2301      	movs	r3, #1
 800286a:	9301      	str	r3, [sp, #4]
 800286c:	230f      	movs	r3, #15
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	2303      	movs	r3, #3
 8002872:	2201      	movs	r2, #1
 8002874:	2103      	movs	r1, #3
 8002876:	4620      	mov	r0, r4
 8002878:	f7fe fcf6 	bl	8001268 <_ZN8MAX30100C1E4Mode12SamplingRate13LEDPulseWidth10LEDCurrentbb>
 800287c:	4b76      	ldr	r3, [pc, #472]	; (8002a58 <_Z4loopv+0x274>)
 800287e:	601c      	str	r4, [r3, #0]
			  pulseOxymeter->resetFIFO();
 8002880:	4b75      	ldr	r3, [pc, #468]	; (8002a58 <_Z4loopv+0x274>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff f92c 	bl	8001ae2 <_ZN8MAX301009resetFIFOEv>
		}
		pulseDetected=0;
 800288a:	4b72      	ldr	r3, [pc, #456]	; (8002a54 <_Z4loopv+0x270>)
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]
	}
	switch (simstate) {
 8002890:	4b72      	ldr	r3, [pc, #456]	; (8002a5c <_Z4loopv+0x278>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b03      	cmp	r3, #3
 8002896:	f200 8135 	bhi.w	8002b04 <_Z4loopv+0x320>
 800289a:	a201      	add	r2, pc, #4	; (adr r2, 80028a0 <_Z4loopv+0xbc>)
 800289c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028a0:	080028b1 	.word	0x080028b1
 80028a4:	080028db 	.word	0x080028db
 80028a8:	0800291d 	.word	0x0800291d
 80028ac:	08002a9d 	.word	0x08002a9d
		case SIM_INIT:
			 if(At_Command((char*)"AT\r\n",(char*)"OK\r\n", 2000)==1){
 80028b0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80028b4:	496a      	ldr	r1, [pc, #424]	; (8002a60 <_Z4loopv+0x27c>)
 80028b6:	486b      	ldr	r0, [pc, #428]	; (8002a64 <_Z4loopv+0x280>)
 80028b8:	f000 fb1a 	bl	8002ef0 <_Z10At_CommandPcS_m>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b01      	cmp	r3, #1
 80028c0:	bf0c      	ite	eq
 80028c2:	2301      	moveq	r3, #1
 80028c4:	2300      	movne	r3, #0
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f000 811d 	beq.w	8002b08 <_Z4loopv+0x324>
				 Sim7600_init();
 80028ce:	f000 fba9 	bl	8003024 <_Z12Sim7600_initv>
				 simstate = SIM_READ_GPS;
 80028d2:	4b62      	ldr	r3, [pc, #392]	; (8002a5c <_Z4loopv+0x278>)
 80028d4:	2201      	movs	r2, #1
 80028d6:	701a      	strb	r2, [r3, #0]
//				 simstate = SIM_REQUEST_HTTP;
			  }
			break;
 80028d8:	e116      	b.n	8002b08 <_Z4loopv+0x324>
		case SIM_READ_GPS:
			if(SIM_7600_read_GNSS(location))
 80028da:	4863      	ldr	r0, [pc, #396]	; (8002a68 <_Z4loopv+0x284>)
 80028dc:	f000 fd6a 	bl	80033b4 <_Z18SIM_7600_read_GNSSPc>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	bf14      	ite	ne
 80028e6:	2301      	movne	r3, #1
 80028e8:	2300      	moveq	r3, #0
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00a      	beq.n	8002906 <_Z4loopv+0x122>
			{
				http_try = 0;
 80028f0:	4b5e      	ldr	r3, [pc, #376]	; (8002a6c <_Z4loopv+0x288>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	601a      	str	r2, [r3, #0]
				printf("OK: location: %s\r\n",location);
 80028f6:	495c      	ldr	r1, [pc, #368]	; (8002a68 <_Z4loopv+0x284>)
 80028f8:	485d      	ldr	r0, [pc, #372]	; (8002a70 <_Z4loopv+0x28c>)
 80028fa:	f007 f88d 	bl	8009a18 <iprintf>
				simstate = SIM_REQUEST_HTTP;
 80028fe:	4b57      	ldr	r3, [pc, #348]	; (8002a5c <_Z4loopv+0x278>)
 8002900:	2202      	movs	r2, #2
 8002902:	701a      	strb	r2, [r3, #0]
			}else
			{
				HAL_Delay(5000);
				At_Command((char*)"AT\r\n",(char*)"OK\r\n", 2000);
			}
			break;
 8002904:	e101      	b.n	8002b0a <_Z4loopv+0x326>
				HAL_Delay(5000);
 8002906:	f241 3088 	movw	r0, #5000	; 0x1388
 800290a:	f001 f975 	bl	8003bf8 <HAL_Delay>
				At_Command((char*)"AT\r\n",(char*)"OK\r\n", 2000);
 800290e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002912:	4953      	ldr	r1, [pc, #332]	; (8002a60 <_Z4loopv+0x27c>)
 8002914:	4853      	ldr	r0, [pc, #332]	; (8002a64 <_Z4loopv+0x280>)
 8002916:	f000 faeb 	bl	8002ef0 <_Z10At_CommandPcS_m>
			break;
 800291a:	e0f6      	b.n	8002b0a <_Z4loopv+0x326>
		case SIM_REQUEST_HTTP:
			{
				if(result_heartbeat == 0 && (HAL_GetTick() < 50000))
 800291c:	4b55      	ldr	r3, [pc, #340]	; (8002a74 <_Z4loopv+0x290>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d108      	bne.n	8002936 <_Z4loopv+0x152>
 8002924:	f001 f95e 	bl	8003be4 <HAL_GetTick>
 8002928:	4603      	mov	r3, r0
 800292a:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800292e:	4293      	cmp	r3, r2
 8002930:	d801      	bhi.n	8002936 <_Z4loopv+0x152>
 8002932:	2301      	movs	r3, #1
 8002934:	e000      	b.n	8002938 <_Z4loopv+0x154>
 8002936:	2300      	movs	r3, #0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d007      	beq.n	800294c <_Z4loopv+0x168>
				{
					printf("wating heart beat \r\n");
 800293c:	484e      	ldr	r0, [pc, #312]	; (8002a78 <_Z4loopv+0x294>)
 800293e:	f007 f8f1 	bl	8009b24 <puts>
					HAL_Delay(1000);
 8002942:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002946:	f001 f957 	bl	8003bf8 <HAL_Delay>
 800294a:	e0de      	b.n	8002b0a <_Z4loopv+0x326>
					break;
				}

				char request[200];
				if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 800294c:	2101      	movs	r1, #1
 800294e:	484b      	ldr	r0, [pc, #300]	; (8002a7c <_Z4loopv+0x298>)
 8002950:	f002 fad0 	bl	8004ef4 <HAL_GPIO_ReadPin>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	bf14      	ite	ne
 800295a:	2301      	movne	r3, #1
 800295c:	2300      	moveq	r3, #0
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b00      	cmp	r3, #0
 8002962:	d01f      	beq.n	80029a4 <_Z4loopv+0x1c0>
				{
					if(result_heartbeat == 0)
 8002964:	4b43      	ldr	r3, [pc, #268]	; (8002a74 <_Z4loopv+0x290>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10d      	bne.n	8002988 <_Z4loopv+0x1a4>
					{
						snprintf(request,200,"token=00001&location=%s&heart_rate=%d&water_state=1&bat_cap=%d",location,result_heartbeat,Battery);
 800296c:	4b41      	ldr	r3, [pc, #260]	; (8002a74 <_Z4loopv+0x290>)
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	461a      	mov	r2, r3
 8002972:	4b43      	ldr	r3, [pc, #268]	; (8002a80 <_Z4loopv+0x29c>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	1d38      	adds	r0, r7, #4
 8002978:	9301      	str	r3, [sp, #4]
 800297a:	9200      	str	r2, [sp, #0]
 800297c:	4b3a      	ldr	r3, [pc, #232]	; (8002a68 <_Z4loopv+0x284>)
 800297e:	4a41      	ldr	r2, [pc, #260]	; (8002a84 <_Z4loopv+0x2a0>)
 8002980:	21c8      	movs	r1, #200	; 0xc8
 8002982:	f007 f92b 	bl	8009bdc <sniprintf>
 8002986:	e02c      	b.n	80029e2 <_Z4loopv+0x1fe>

					}else
					{
						snprintf(request,200,"token=00001&location=%s&heart_rate=%d&water_state=2&bat_cap=%d",location,result_heartbeat,Battery);
 8002988:	4b3a      	ldr	r3, [pc, #232]	; (8002a74 <_Z4loopv+0x290>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	461a      	mov	r2, r3
 800298e:	4b3c      	ldr	r3, [pc, #240]	; (8002a80 <_Z4loopv+0x29c>)
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	1d38      	adds	r0, r7, #4
 8002994:	9301      	str	r3, [sp, #4]
 8002996:	9200      	str	r2, [sp, #0]
 8002998:	4b33      	ldr	r3, [pc, #204]	; (8002a68 <_Z4loopv+0x284>)
 800299a:	4a3b      	ldr	r2, [pc, #236]	; (8002a88 <_Z4loopv+0x2a4>)
 800299c:	21c8      	movs	r1, #200	; 0xc8
 800299e:	f007 f91d 	bl	8009bdc <sniprintf>
 80029a2:	e01e      	b.n	80029e2 <_Z4loopv+0x1fe>
					}
				}else
				{
					if(result_heartbeat <= 100)
 80029a4:	4b33      	ldr	r3, [pc, #204]	; (8002a74 <_Z4loopv+0x290>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	2b64      	cmp	r3, #100	; 0x64
 80029aa:	d80d      	bhi.n	80029c8 <_Z4loopv+0x1e4>
					{
						snprintf(request,200,"token=00001&location=%s&heart_rate=%d&water_state=3&bat_cap=%d",location,result_heartbeat,Battery);
 80029ac:	4b31      	ldr	r3, [pc, #196]	; (8002a74 <_Z4loopv+0x290>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	461a      	mov	r2, r3
 80029b2:	4b33      	ldr	r3, [pc, #204]	; (8002a80 <_Z4loopv+0x29c>)
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	1d38      	adds	r0, r7, #4
 80029b8:	9301      	str	r3, [sp, #4]
 80029ba:	9200      	str	r2, [sp, #0]
 80029bc:	4b2a      	ldr	r3, [pc, #168]	; (8002a68 <_Z4loopv+0x284>)
 80029be:	4a33      	ldr	r2, [pc, #204]	; (8002a8c <_Z4loopv+0x2a8>)
 80029c0:	21c8      	movs	r1, #200	; 0xc8
 80029c2:	f007 f90b 	bl	8009bdc <sniprintf>
 80029c6:	e00c      	b.n	80029e2 <_Z4loopv+0x1fe>

					}else
					{
						snprintf(request,200,"token=00001&location=%s&heart_rate=%d&water_state=4&bat_cap=%d",location,result_heartbeat,Battery);
 80029c8:	4b2a      	ldr	r3, [pc, #168]	; (8002a74 <_Z4loopv+0x290>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	461a      	mov	r2, r3
 80029ce:	4b2c      	ldr	r3, [pc, #176]	; (8002a80 <_Z4loopv+0x29c>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	1d38      	adds	r0, r7, #4
 80029d4:	9301      	str	r3, [sp, #4]
 80029d6:	9200      	str	r2, [sp, #0]
 80029d8:	4b23      	ldr	r3, [pc, #140]	; (8002a68 <_Z4loopv+0x284>)
 80029da:	4a2d      	ldr	r2, [pc, #180]	; (8002a90 <_Z4loopv+0x2ac>)
 80029dc:	21c8      	movs	r1, #200	; 0xc8
 80029de:	f007 f8fd 	bl	8009bdc <sniprintf>
					}
				}
				int res= AT_SIM7600_HTTP_Get(request,NULL,NULL);
 80029e2:	1d3b      	adds	r3, r7, #4
 80029e4:	2200      	movs	r2, #0
 80029e6:	2100      	movs	r1, #0
 80029e8:	4618      	mov	r0, r3
 80029ea:	f000 fbeb 	bl	80031c4 <_Z19AT_SIM7600_HTTP_GetPcS_Pt>
 80029ee:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
				printf("HTTP STATUS CODE: %d\r\n",res);
 80029f2:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80029f6:	4827      	ldr	r0, [pc, #156]	; (8002a94 <_Z4loopv+0x2b0>)
 80029f8:	f007 f80e 	bl	8009a18 <iprintf>
				if((res== 200) || (http_try ==1)){
 80029fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002a00:	2bc8      	cmp	r3, #200	; 0xc8
 8002a02:	d003      	beq.n	8002a0c <_Z4loopv+0x228>
 8002a04:	4b19      	ldr	r3, [pc, #100]	; (8002a6c <_Z4loopv+0x288>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d115      	bne.n	8002a38 <_Z4loopv+0x254>
					if(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8002a0c:	2101      	movs	r1, #1
 8002a0e:	481b      	ldr	r0, [pc, #108]	; (8002a7c <_Z4loopv+0x298>)
 8002a10:	f002 fa70 	bl	8004ef4 <HAL_GPIO_ReadPin>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	bf0c      	ite	eq
 8002a1a:	2301      	moveq	r3, #1
 8002a1c:	2300      	movne	r3, #0
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d003      	beq.n	8002a2c <_Z4loopv+0x248>
					{
						simstate = SIM_SEND_SMS;
 8002a24:	4b0d      	ldr	r3, [pc, #52]	; (8002a5c <_Z4loopv+0x278>)
 8002a26:	2203      	movs	r2, #3
 8002a28:	701a      	strb	r2, [r3, #0]
 8002a2a:	e005      	b.n	8002a38 <_Z4loopv+0x254>
					}
					else{
						simstate = SIM_DONE;
 8002a2c:	4b0b      	ldr	r3, [pc, #44]	; (8002a5c <_Z4loopv+0x278>)
 8002a2e:	2204      	movs	r2, #4
 8002a30:	701a      	strb	r2, [r3, #0]
						sleep_enable = 1;
 8002a32:	4b19      	ldr	r3, [pc, #100]	; (8002a98 <_Z4loopv+0x2b4>)
 8002a34:	2201      	movs	r2, #1
 8002a36:	701a      	strb	r2, [r3, #0]
					}
				}
				http_try ++;
 8002a38:	4b0c      	ldr	r3, [pc, #48]	; (8002a6c <_Z4loopv+0x288>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	4a0b      	ldr	r2, [pc, #44]	; (8002a6c <_Z4loopv+0x288>)
 8002a40:	6013      	str	r3, [r2, #0]
			}
			break;
 8002a42:	e062      	b.n	8002b0a <_Z4loopv+0x326>
 8002a44:	200005d4 	.word	0x200005d4
 8002a48:	200004a4 	.word	0x200004a4
 8002a4c:	2000020c 	.word	0x2000020c
 8002a50:	200005dc 	.word	0x200005dc
 8002a54:	200005d8 	.word	0x200005d8
 8002a58:	2000048c 	.word	0x2000048c
 8002a5c:	2000056e 	.word	0x2000056e
 8002a60:	0800d6c8 	.word	0x0800d6c8
 8002a64:	0800d6d0 	.word	0x0800d6d0
 8002a68:	20000570 	.word	0x20000570
 8002a6c:	200005e4 	.word	0x200005e4
 8002a70:	0800d6d8 	.word	0x0800d6d8
 8002a74:	200004a0 	.word	0x200004a0
 8002a78:	0800d6ec 	.word	0x0800d6ec
 8002a7c:	40010800 	.word	0x40010800
 8002a80:	2000056c 	.word	0x2000056c
 8002a84:	0800d700 	.word	0x0800d700
 8002a88:	0800d740 	.word	0x0800d740
 8002a8c:	0800d780 	.word	0x0800d780
 8002a90:	0800d7c0 	.word	0x0800d7c0
 8002a94:	0800d800 	.word	0x0800d800
 8002a98:	2000056d 	.word	0x2000056d
		case SIM_SEND_SMS:
			{
				static int smscnt[2] ={0,0};
					char request[200];
					if((result_heartbeat < 100) && (smscnt[0] < 2)){  // nhijp tim <100
 8002a9c:	4b1e      	ldr	r3, [pc, #120]	; (8002b18 <_Z4loopv+0x334>)
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	2b63      	cmp	r3, #99	; 0x63
 8002aa2:	d813      	bhi.n	8002acc <_Z4loopv+0x2e8>
 8002aa4:	4b1d      	ldr	r3, [pc, #116]	; (8002b1c <_Z4loopv+0x338>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	dc0f      	bgt.n	8002acc <_Z4loopv+0x2e8>
						sprintf(request,"EMERGENCY MyLocation: %s",location);
 8002aac:	1d3b      	adds	r3, r7, #4
 8002aae:	4a1c      	ldr	r2, [pc, #112]	; (8002b20 <_Z4loopv+0x33c>)
 8002ab0:	491c      	ldr	r1, [pc, #112]	; (8002b24 <_Z4loopv+0x340>)
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f007 f8c6 	bl	8009c44 <siprintf>
						AT_Sms_Send((char *)"+84961548396",request);
 8002ab8:	1d3b      	adds	r3, r7, #4
 8002aba:	4619      	mov	r1, r3
 8002abc:	481a      	ldr	r0, [pc, #104]	; (8002b28 <_Z4loopv+0x344>)
 8002abe:	f000 fb2d 	bl	800311c <_Z11AT_Sms_SendPcS_>
						smscnt[0] ++;
 8002ac2:	4b16      	ldr	r3, [pc, #88]	; (8002b1c <_Z4loopv+0x338>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	4a14      	ldr	r2, [pc, #80]	; (8002b1c <_Z4loopv+0x338>)
 8002aca:	6013      	str	r3, [r2, #0]
					}
					if((result_heartbeat > 100) && (smscnt[1] < 2)){
 8002acc:	4b12      	ldr	r3, [pc, #72]	; (8002b18 <_Z4loopv+0x334>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	2b64      	cmp	r3, #100	; 0x64
 8002ad2:	d913      	bls.n	8002afc <_Z4loopv+0x318>
 8002ad4:	4b11      	ldr	r3, [pc, #68]	; (8002b1c <_Z4loopv+0x338>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	dc0f      	bgt.n	8002afc <_Z4loopv+0x318>
						sprintf(request,"high heart rate I need help urgently,My Location: %s",location);
 8002adc:	1d3b      	adds	r3, r7, #4
 8002ade:	4a10      	ldr	r2, [pc, #64]	; (8002b20 <_Z4loopv+0x33c>)
 8002ae0:	4912      	ldr	r1, [pc, #72]	; (8002b2c <_Z4loopv+0x348>)
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f007 f8ae 	bl	8009c44 <siprintf>
						AT_Sms_Send((char *)"+84961548396",request);
 8002ae8:	1d3b      	adds	r3, r7, #4
 8002aea:	4619      	mov	r1, r3
 8002aec:	480e      	ldr	r0, [pc, #56]	; (8002b28 <_Z4loopv+0x344>)
 8002aee:	f000 fb15 	bl	800311c <_Z11AT_Sms_SendPcS_>
						smscnt[1] ++;
 8002af2:	4b0a      	ldr	r3, [pc, #40]	; (8002b1c <_Z4loopv+0x338>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	3301      	adds	r3, #1
 8002af8:	4a08      	ldr	r2, [pc, #32]	; (8002b1c <_Z4loopv+0x338>)
 8002afa:	6053      	str	r3, [r2, #4]
					}

				simstate = SIM_READ_GPS;
 8002afc:	4b0c      	ldr	r3, [pc, #48]	; (8002b30 <_Z4loopv+0x34c>)
 8002afe:	2201      	movs	r2, #1
 8002b00:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002b02:	e002      	b.n	8002b0a <_Z4loopv+0x326>
		default:
			break;
 8002b04:	bf00      	nop
 8002b06:	e000      	b.n	8002b0a <_Z4loopv+0x326>
			break;
 8002b08:	bf00      	nop
	}
//	if(HAL_GetTick()>50000 && (result_heartbeat == 0))
//	{
//		sleep_enable = 1;
//	}
	enter_sleep_mode();
 8002b0a:	f7ff fc7b 	bl	8002404 <_Z16enter_sleep_modev>
}
 8002b0e:	bf00      	nop
 8002b10:	37d4      	adds	r7, #212	; 0xd4
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd90      	pop	{r4, r7, pc}
 8002b16:	bf00      	nop
 8002b18:	200004a0 	.word	0x200004a0
 8002b1c:	200005e8 	.word	0x200005e8
 8002b20:	20000570 	.word	0x20000570
 8002b24:	0800d818 	.word	0x0800d818
 8002b28:	0800d834 	.word	0x0800d834
 8002b2c:	0800d844 	.word	0x0800d844
 8002b30:	2000056e 	.word	0x2000056e

08002b34 <initC>:
extern "C"
{
    void initC()
    {
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
    	init();
 8002b38:	f7ff fdb6 	bl	80026a8 <_Z4initv>
    }
 8002b3c:	bf00      	nop
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <loopC>:
}
extern "C"
{
    void loopC()
    {
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
    	loop();
 8002b44:	f7ff fe4e 	bl	80027e4 <_Z4loopv>
    }
 8002b48:	bf00      	nop
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <_Z41__static_initialization_and_destruction_0ii>:
}
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d10c      	bne.n	8002b76 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d107      	bne.n	8002b76 <_Z41__static_initialization_and_destruction_0ii+0x2a>
uint32_t timepulseDetected = HAL_GetTick() +5000;
 8002b66:	f001 f83d 	bl	8003be4 <HAL_GetTick>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8002b70:	3308      	adds	r3, #8
 8002b72:	4a03      	ldr	r2, [pc, #12]	; (8002b80 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8002b74:	6013      	str	r3, [r2, #0]
}
 8002b76:	bf00      	nop
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	200005dc 	.word	0x200005dc

08002b84 <_GLOBAL__sub_I_pulseOxymeter>:
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002b8c:	2001      	movs	r0, #1
 8002b8e:	f7ff ffdd 	bl	8002b4c <_Z41__static_initialization_and_destruction_0ii>
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <_Z18AT_Getstring_indexPcS_S_i>:

extern UART_HandleTypeDef huart1;
uint8_t uart_rx[512];

int AT_Getstring_index(char *des,char *scr,char *key,int index)
{
 8002b94:	b590      	push	{r4, r7, lr}
 8002b96:	b08b      	sub	sp, #44	; 0x2c
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
 8002ba0:	603b      	str	r3, [r7, #0]
   char *p;
   if(!(p = strstr(scr,key))) //tim kiem key
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	68b8      	ldr	r0, [r7, #8]
 8002ba6:	f007 f87a 	bl	8009c9e <strstr>
 8002baa:	61f8      	str	r0, [r7, #28]
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	bf0c      	ite	eq
 8002bb2:	2301      	moveq	r3, #1
 8002bb4:	2300      	movne	r3, #0
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d002      	beq.n	8002bc2 <_Z18AT_Getstring_indexPcS_S_i+0x2e>
      return -1;
 8002bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8002bc0:	e092      	b.n	8002ce8 <_Z18AT_Getstring_indexPcS_S_i+0x154>
   uint16_t len = strlen(p);
 8002bc2:	69f8      	ldr	r0, [r7, #28]
 8002bc4:	f7fd fac4 	bl	8000150 <strlen>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	837b      	strh	r3, [r7, #26]
   char *tmp = (char *)malloc(len);
 8002bcc:	8b7b      	ldrh	r3, [r7, #26]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f006 f9c0 	bl	8008f54 <malloc>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	617b      	str	r3, [r7, #20]
   len = sprintf(tmp,",%s",p+2);
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	3302      	adds	r3, #2
 8002bdc:	461a      	mov	r2, r3
 8002bde:	4944      	ldr	r1, [pc, #272]	; (8002cf0 <_Z18AT_Getstring_indexPcS_S_i+0x15c>)
 8002be0:	6978      	ldr	r0, [r7, #20]
 8002be2:	f007 f82f 	bl	8009c44 <siprintf>
 8002be6:	4603      	mov	r3, r0
 8002be8:	837b      	strh	r3, [r7, #26]
   uint8_t cnt=0;
 8002bea:	2300      	movs	r3, #0
 8002bec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   uint16_t i=0;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	84bb      	strh	r3, [r7, #36]	; 0x24
   //printf("%s\n",tmp);
   for(i=0;i<len;i++)
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002bf8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002bfa:	8b7b      	ldrh	r3, [r7, #26]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d214      	bcs.n	8002c2a <_Z18AT_Getstring_indexPcS_S_i+0x96>
   {
      if(tmp[i] == ',')
 8002c00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002c02:	697a      	ldr	r2, [r7, #20]
 8002c04:	4413      	add	r3, r2
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	2b2c      	cmp	r3, #44	; 0x2c
 8002c0a:	d109      	bne.n	8002c20 <_Z18AT_Getstring_indexPcS_S_i+0x8c>
      {
         if(cnt == index)
 8002c0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d008      	beq.n	8002c28 <_Z18AT_Getstring_indexPcS_S_i+0x94>
            break;
         cnt++;
 8002c16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   for(i=0;i<len;i++)
 8002c20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002c22:	3301      	adds	r3, #1
 8002c24:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002c26:	e7e7      	b.n	8002bf8 <_Z18AT_Getstring_indexPcS_S_i+0x64>
            break;
 8002c28:	bf00      	nop
      }
   }
   char *start= (tmp+i+1);
 8002c2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	4413      	add	r3, r2
 8002c32:	613b      	str	r3, [r7, #16]
   if(i != len)
 8002c34:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c36:	8b7b      	ldrh	r3, [r7, #26]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d04d      	beq.n	8002cd8 <_Z18AT_Getstring_indexPcS_S_i+0x144>
   {
      //printf("find match\n");
      uint8_t tot;
      if(!(p = strstr(start,",")))
 8002c3c:	212c      	movs	r1, #44	; 0x2c
 8002c3e:	6938      	ldr	r0, [r7, #16]
 8002c40:	f007 f820 	bl	8009c84 <strchr>
 8002c44:	61f8      	str	r0, [r7, #28]
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	bf0c      	ite	eq
 8002c4c:	2301      	moveq	r3, #1
 8002c4e:	2300      	movne	r3, #0
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d021      	beq.n	8002c9a <_Z18AT_Getstring_indexPcS_S_i+0x106>
      {
         if(!(p = strstr(start,"\r")))
 8002c56:	210d      	movs	r1, #13
 8002c58:	6938      	ldr	r0, [r7, #16]
 8002c5a:	f007 f813 	bl	8009c84 <strchr>
 8002c5e:	61f8      	str	r0, [r7, #28]
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	bf0c      	ite	eq
 8002c66:	2301      	moveq	r3, #1
 8002c68:	2300      	movne	r3, #0
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d006      	beq.n	8002c7e <_Z18AT_Getstring_indexPcS_S_i+0xea>
         {
            tot = strlen(start);
 8002c70:	6938      	ldr	r0, [r7, #16]
 8002c72:	f7fd fa6d 	bl	8000150 <strlen>
 8002c76:	4603      	mov	r3, r0
 8002c78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c7c:	e01a      	b.n	8002cb4 <_Z18AT_Getstring_indexPcS_S_i+0x120>
         }
         else tot = strlen(start)-strlen(p);
 8002c7e:	6938      	ldr	r0, [r7, #16]
 8002c80:	f7fd fa66 	bl	8000150 <strlen>
 8002c84:	4603      	mov	r3, r0
 8002c86:	b2dc      	uxtb	r4, r3
 8002c88:	69f8      	ldr	r0, [r7, #28]
 8002c8a:	f7fd fa61 	bl	8000150 <strlen>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	1ae3      	subs	r3, r4, r3
 8002c94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c98:	e00c      	b.n	8002cb4 <_Z18AT_Getstring_indexPcS_S_i+0x120>
      }
      else
        tot = strlen(start)-strlen(p);
 8002c9a:	6938      	ldr	r0, [r7, #16]
 8002c9c:	f7fd fa58 	bl	8000150 <strlen>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	b2dc      	uxtb	r4, r3
 8002ca4:	69f8      	ldr	r0, [r7, #28]
 8002ca6:	f7fd fa53 	bl	8000150 <strlen>
 8002caa:	4603      	mov	r3, r0
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	1ae3      	subs	r3, r4, r3
 8002cb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      memcpy(des,start,tot);
 8002cb4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002cb8:	461a      	mov	r2, r3
 8002cba:	6939      	ldr	r1, [r7, #16]
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f006 f959 	bl	8008f74 <memcpy>
      des[tot]=0;
 8002cc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	4413      	add	r3, r2
 8002cca:	2200      	movs	r2, #0
 8002ccc:	701a      	strb	r2, [r3, #0]
      free(tmp);
 8002cce:	6978      	ldr	r0, [r7, #20]
 8002cd0:	f006 f948 	bl	8008f64 <free>
      return 1;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e007      	b.n	8002ce8 <_Z18AT_Getstring_indexPcS_S_i+0x154>
   }
   free(tmp);
 8002cd8:	6978      	ldr	r0, [r7, #20]
 8002cda:	f006 f943 	bl	8008f64 <free>
   printf("not find index\n" );
 8002cde:	4805      	ldr	r0, [pc, #20]	; (8002cf4 <_Z18AT_Getstring_indexPcS_S_i+0x160>)
 8002ce0:	f006 ff20 	bl	8009b24 <puts>
   return -3;
 8002ce4:	f06f 0302 	mvn.w	r3, #2
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	372c      	adds	r7, #44	; 0x2c
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd90      	pop	{r4, r7, pc}
 8002cf0:	0800d87c 	.word	0x0800d87c
 8002cf4:	0800d880 	.word	0x0800d880

08002cf8 <_Z15AT_Getint_indexPiPcS0_i>:
int AT_Getint_index(int *res,char *src,char *key,int index)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b08a      	sub	sp, #40	; 0x28
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
 8002d04:	603b      	str	r3, [r7, #0]
   char des[20];
   if(AT_Getstring_index(des,src,key,index)<0)
 8002d06:	f107 0014 	add.w	r0, r7, #20
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	68b9      	ldr	r1, [r7, #8]
 8002d10:	f7ff ff40 	bl	8002b94 <_Z18AT_Getstring_indexPcS_S_i>
 8002d14:	4603      	mov	r3, r0
 8002d16:	0fdb      	lsrs	r3, r3, #31
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d002      	beq.n	8002d24 <_Z15AT_Getint_indexPiPcS0_i+0x2c>
   {
      return-1;
 8002d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d22:	e009      	b.n	8002d38 <_Z15AT_Getint_indexPiPcS0_i+0x40>
   }
   *res = atoi(des);
 8002d24:	f107 0314 	add.w	r3, r7, #20
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f006 f8e4 	bl	8008ef6 <atoi>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	601a      	str	r2, [r3, #0]
   return *res;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3728      	adds	r7, #40	; 0x28
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <_Z15SIM7600_TURN_ONv>:


void SIM7600_TURN_ON()
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
	printf("turn on module sim\r\n");
 8002d44:	480a      	ldr	r0, [pc, #40]	; (8002d70 <_Z15SIM7600_TURN_ONv+0x30>)
 8002d46:	f006 feed 	bl	8009b24 <puts>
	HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_RESET);
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d50:	4808      	ldr	r0, [pc, #32]	; (8002d74 <_Z15SIM7600_TURN_ONv+0x34>)
 8002d52:	f002 f8e6 	bl	8004f22 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8002d56:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d5a:	f000 ff4d 	bl	8003bf8 <HAL_Delay>
	HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_SET);
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d64:	4803      	ldr	r0, [pc, #12]	; (8002d74 <_Z15SIM7600_TURN_ONv+0x34>)
 8002d66:	f002 f8dc 	bl	8004f22 <HAL_GPIO_WritePin>
}
 8002d6a:	bf00      	nop
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	0800d890 	.word	0x0800d890
 8002d74:	40010800 	.word	0x40010800

08002d78 <_Z16SIM7600_TURN_OFFv>:

void SIM7600_TURN_OFF()
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
	printf("turn off module sim\r\n");
 8002d7c:	480a      	ldr	r0, [pc, #40]	; (8002da8 <_Z16SIM7600_TURN_OFFv+0x30>)
 8002d7e:	f006 fed1 	bl	8009b24 <puts>
	HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_RESET);
 8002d82:	2200      	movs	r2, #0
 8002d84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d88:	4808      	ldr	r0, [pc, #32]	; (8002dac <_Z16SIM7600_TURN_OFFv+0x34>)
 8002d8a:	f002 f8ca 	bl	8004f22 <HAL_GPIO_WritePin>
	HAL_Delay(4000);
 8002d8e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8002d92:	f000 ff31 	bl	8003bf8 <HAL_Delay>
	HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_SET);
 8002d96:	2201      	movs	r2, #1
 8002d98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d9c:	4803      	ldr	r0, [pc, #12]	; (8002dac <_Z16SIM7600_TURN_OFFv+0x34>)
 8002d9e:	f002 f8c0 	bl	8004f22 <HAL_GPIO_WritePin>
}
 8002da2:	bf00      	nop
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	0800d8a4 	.word	0x0800d8a4
 8002dac:	40010800 	.word	0x40010800

08002db0 <_Z19At_Command_responsePcS_S_Pim>:
int At_Command_response(char *cmd ,char *RSP1,char* rsp,int *len,uint32_t timeout)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b088      	sub	sp, #32
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
 8002dbc:	603b      	str	r3, [r7, #0]
	int res =-1;
 8002dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002dc2:	61fb      	str	r3, [r7, #28]
	printf("TX: %s\n",cmd);
 8002dc4:	68f9      	ldr	r1, [r7, #12]
 8002dc6:	4845      	ldr	r0, [pc, #276]	; (8002edc <_Z19At_Command_responsePcS_S_Pim+0x12c>)
 8002dc8:	f006 fe26 	bl	8009a18 <iprintf>
	memset(uart_rx,0,512);
 8002dcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	4843      	ldr	r0, [pc, #268]	; (8002ee0 <_Z19At_Command_responsePcS_S_Pim+0x130>)
 8002dd4:	f006 f8dc 	bl	8008f90 <memset>
	HAL_UART_Transmit(&huart1, (uint8_t *)cmd,strlen(cmd), 1000);
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f7fd f9b9 	bl	8000150 <strlen>
 8002dde:	4603      	mov	r3, r0
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002de6:	68f9      	ldr	r1, [r7, #12]
 8002de8:	483e      	ldr	r0, [pc, #248]	; (8002ee4 <_Z19At_Command_responsePcS_S_Pim+0x134>)
 8002dea:	f005 f85a 	bl	8007ea2 <HAL_UART_Transmit>
	uart_rx[0] = huart1.Instance->DR; // free rx buffer
 8002dee:	4b3d      	ldr	r3, [pc, #244]	; (8002ee4 <_Z19At_Command_responsePcS_S_Pim+0x134>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	b2da      	uxtb	r2, r3
 8002df6:	4b3a      	ldr	r3, [pc, #232]	; (8002ee0 <_Z19At_Command_responsePcS_S_Pim+0x130>)
 8002df8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart1, uart_rx, 512);
 8002dfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dfe:	4938      	ldr	r1, [pc, #224]	; (8002ee0 <_Z19At_Command_responsePcS_S_Pim+0x130>)
 8002e00:	4838      	ldr	r0, [pc, #224]	; (8002ee4 <_Z19At_Command_responsePcS_S_Pim+0x134>)
 8002e02:	f005 f8e0 	bl	8007fc6 <HAL_UART_Receive_DMA>
	timeout += HAL_GetTick();
 8002e06:	f000 feed 	bl	8003be4 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e0e:	4413      	add	r3, r2
 8002e10:	62bb      	str	r3, [r7, #40]	; 0x28
	while(HAL_GetTick() < timeout)
 8002e12:	f000 fee7 	bl	8003be4 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	bf8c      	ite	hi
 8002e1e:	2301      	movhi	r3, #1
 8002e20:	2300      	movls	r3, #0
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d008      	beq.n	8002e3a <_Z19At_Command_responsePcS_S_Pim+0x8a>
	{
		if(strstr((char *)uart_rx,RSP1))
 8002e28:	68b9      	ldr	r1, [r7, #8]
 8002e2a:	482d      	ldr	r0, [pc, #180]	; (8002ee0 <_Z19At_Command_responsePcS_S_Pim+0x130>)
 8002e2c:	f006 ff37 	bl	8009c9e <strstr>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d0ed      	beq.n	8002e12 <_Z19At_Command_responsePcS_S_Pim+0x62>
		{
			res = 1;
 8002e36:	2301      	movs	r3, #1
 8002e38:	61fb      	str	r3, [r7, #28]
			break;
		}
	}
	uint32_t tt = HAL_GetTick() +3;
 8002e3a:	f000 fed3 	bl	8003be4 <HAL_GetTick>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	3303      	adds	r3, #3
 8002e42:	61bb      	str	r3, [r7, #24]
	uint32_t old_cnt = huart1.hdmarx->Instance->CNDTR;
 8002e44:	4b27      	ldr	r3, [pc, #156]	; (8002ee4 <_Z19At_Command_responsePcS_S_Pim+0x134>)
 8002e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	617b      	str	r3, [r7, #20]
	while(HAL_GetTick() < tt)
 8002e4e:	f000 fec9 	bl	8003be4 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	4293      	cmp	r3, r2
 8002e58:	bf8c      	ite	hi
 8002e5a:	2301      	movhi	r3, #1
 8002e5c:	2300      	movls	r3, #0
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d016      	beq.n	8002e92 <_Z19At_Command_responsePcS_S_Pim+0xe2>
	{
		if(old_cnt != huart1.hdmarx->Instance->CNDTR)
 8002e64:	4b1f      	ldr	r3, [pc, #124]	; (8002ee4 <_Z19At_Command_responsePcS_S_Pim+0x134>)
 8002e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	697a      	ldr	r2, [r7, #20]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	bf14      	ite	ne
 8002e72:	2301      	movne	r3, #1
 8002e74:	2300      	moveq	r3, #0
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d0e8      	beq.n	8002e4e <_Z19At_Command_responsePcS_S_Pim+0x9e>
		{
			old_cnt = huart1.hdmarx->Instance->CNDTR;
 8002e7c:	4b19      	ldr	r3, [pc, #100]	; (8002ee4 <_Z19At_Command_responsePcS_S_Pim+0x134>)
 8002e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	617b      	str	r3, [r7, #20]
			tt = HAL_GetTick()+3;
 8002e86:	f000 fead 	bl	8003be4 <HAL_GetTick>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	3303      	adds	r3, #3
 8002e8e:	61bb      	str	r3, [r7, #24]
	while(HAL_GetTick() < tt)
 8002e90:	e7dd      	b.n	8002e4e <_Z19At_Command_responsePcS_S_Pim+0x9e>
		}
	}
	*len = 512 - huart1.hdmarx->Instance->CNDTR;
 8002e92:	4b14      	ldr	r3, [pc, #80]	; (8002ee4 <_Z19At_Command_responsePcS_S_Pim+0x134>)
 8002e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	601a      	str	r2, [r3, #0]
	memcpy(rsp,uart_rx,*len);
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	490d      	ldr	r1, [pc, #52]	; (8002ee0 <_Z19At_Command_responsePcS_S_Pim+0x130>)
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f006 f861 	bl	8008f74 <memcpy>
	HAL_UART_DMAStop(&huart1);
 8002eb2:	480c      	ldr	r0, [pc, #48]	; (8002ee4 <_Z19At_Command_responsePcS_S_Pim+0x134>)
 8002eb4:	f005 f8b7 	bl	8008026 <HAL_UART_DMAStop>
	if(res == 1){
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d104      	bne.n	8002ec8 <_Z19At_Command_responsePcS_S_Pim+0x118>
		printf("RX=> %s=>OK\n",(char *)uart_rx);
 8002ebe:	4908      	ldr	r1, [pc, #32]	; (8002ee0 <_Z19At_Command_responsePcS_S_Pim+0x130>)
 8002ec0:	4809      	ldr	r0, [pc, #36]	; (8002ee8 <_Z19At_Command_responsePcS_S_Pim+0x138>)
 8002ec2:	f006 fda9 	bl	8009a18 <iprintf>
 8002ec6:	e003      	b.n	8002ed0 <_Z19At_Command_responsePcS_S_Pim+0x120>
	}
	else{
		printf("RX=> %s=>FAIL\n",(char *)uart_rx);
 8002ec8:	4905      	ldr	r1, [pc, #20]	; (8002ee0 <_Z19At_Command_responsePcS_S_Pim+0x130>)
 8002eca:	4808      	ldr	r0, [pc, #32]	; (8002eec <_Z19At_Command_responsePcS_S_Pim+0x13c>)
 8002ecc:	f006 fda4 	bl	8009a18 <iprintf>
	}
	return res;
 8002ed0:	69fb      	ldr	r3, [r7, #28]
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3720      	adds	r7, #32
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	0800d8bc 	.word	0x0800d8bc
 8002ee0:	200005f0 	.word	0x200005f0
 8002ee4:	200003c0 	.word	0x200003c0
 8002ee8:	0800d8c4 	.word	0x0800d8c4
 8002eec:	0800d8d4 	.word	0x0800d8d4

08002ef0 <_Z10At_CommandPcS_m>:
int At_Command(char *cmd ,char *RSP1,uint32_t timeout)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b088      	sub	sp, #32
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
	int res =-1;
 8002efc:	f04f 33ff 	mov.w	r3, #4294967295
 8002f00:	61fb      	str	r3, [r7, #28]
	printf("TX: %s\n",cmd);
 8002f02:	68f9      	ldr	r1, [r7, #12]
 8002f04:	4841      	ldr	r0, [pc, #260]	; (800300c <_Z10At_CommandPcS_m+0x11c>)
 8002f06:	f006 fd87 	bl	8009a18 <iprintf>
	memset(uart_rx,0,512);
 8002f0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f0e:	2100      	movs	r1, #0
 8002f10:	483f      	ldr	r0, [pc, #252]	; (8003010 <_Z10At_CommandPcS_m+0x120>)
 8002f12:	f006 f83d 	bl	8008f90 <memset>
	HAL_UART_Transmit(&huart1, (uint8_t *)cmd,strlen(cmd), 1000);
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f7fd f91a 	bl	8000150 <strlen>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f24:	68f9      	ldr	r1, [r7, #12]
 8002f26:	483b      	ldr	r0, [pc, #236]	; (8003014 <_Z10At_CommandPcS_m+0x124>)
 8002f28:	f004 ffbb 	bl	8007ea2 <HAL_UART_Transmit>
	uart_rx[0] = huart1.Instance->DR; // free rx buffer
 8002f2c:	4b39      	ldr	r3, [pc, #228]	; (8003014 <_Z10At_CommandPcS_m+0x124>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	b2da      	uxtb	r2, r3
 8002f34:	4b36      	ldr	r3, [pc, #216]	; (8003010 <_Z10At_CommandPcS_m+0x120>)
 8002f36:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart1, uart_rx, 512);
 8002f38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f3c:	4934      	ldr	r1, [pc, #208]	; (8003010 <_Z10At_CommandPcS_m+0x120>)
 8002f3e:	4835      	ldr	r0, [pc, #212]	; (8003014 <_Z10At_CommandPcS_m+0x124>)
 8002f40:	f005 f841 	bl	8007fc6 <HAL_UART_Receive_DMA>
	timeout += HAL_GetTick();
 8002f44:	f000 fe4e 	bl	8003be4 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	607b      	str	r3, [r7, #4]
	while(HAL_GetTick() < timeout)
 8002f50:	f000 fe48 	bl	8003be4 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	bf8c      	ite	hi
 8002f5c:	2301      	movhi	r3, #1
 8002f5e:	2300      	movls	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d012      	beq.n	8002f8c <_Z10At_CommandPcS_m+0x9c>
	{
		if(strstr((char *)uart_rx,RSP1))
 8002f66:	68b9      	ldr	r1, [r7, #8]
 8002f68:	4829      	ldr	r0, [pc, #164]	; (8003010 <_Z10At_CommandPcS_m+0x120>)
 8002f6a:	f006 fe98 	bl	8009c9e <strstr>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d002      	beq.n	8002f7a <_Z10At_CommandPcS_m+0x8a>
		{
			res = 1;
 8002f74:	2301      	movs	r3, #1
 8002f76:	61fb      	str	r3, [r7, #28]
			break;
 8002f78:	e008      	b.n	8002f8c <_Z10At_CommandPcS_m+0x9c>
		}
		else if(strstr((char *)uart_rx,"ERROR\r\n"))
 8002f7a:	4927      	ldr	r1, [pc, #156]	; (8003018 <_Z10At_CommandPcS_m+0x128>)
 8002f7c:	4824      	ldr	r0, [pc, #144]	; (8003010 <_Z10At_CommandPcS_m+0x120>)
 8002f7e:	f006 fe8e 	bl	8009c9e <strstr>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d100      	bne.n	8002f8a <_Z10At_CommandPcS_m+0x9a>
	while(HAL_GetTick() < timeout)
 8002f88:	e7e2      	b.n	8002f50 <_Z10At_CommandPcS_m+0x60>
		{
			break;
 8002f8a:	bf00      	nop
		}
	}
	uint32_t tt = HAL_GetTick() +3;
 8002f8c:	f000 fe2a 	bl	8003be4 <HAL_GetTick>
 8002f90:	4603      	mov	r3, r0
 8002f92:	3303      	adds	r3, #3
 8002f94:	61bb      	str	r3, [r7, #24]
	uint32_t old_cnt = huart1.hdmarx->Instance->CNDTR;
 8002f96:	4b1f      	ldr	r3, [pc, #124]	; (8003014 <_Z10At_CommandPcS_m+0x124>)
 8002f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	617b      	str	r3, [r7, #20]
	while(HAL_GetTick() < tt)
 8002fa0:	f000 fe20 	bl	8003be4 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	bf8c      	ite	hi
 8002fac:	2301      	movhi	r3, #1
 8002fae:	2300      	movls	r3, #0
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d016      	beq.n	8002fe4 <_Z10At_CommandPcS_m+0xf4>
	{
		if(old_cnt != huart1.hdmarx->Instance->CNDTR)
 8002fb6:	4b17      	ldr	r3, [pc, #92]	; (8003014 <_Z10At_CommandPcS_m+0x124>)
 8002fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	bf14      	ite	ne
 8002fc4:	2301      	movne	r3, #1
 8002fc6:	2300      	moveq	r3, #0
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d0e8      	beq.n	8002fa0 <_Z10At_CommandPcS_m+0xb0>
		{
			old_cnt = huart1.hdmarx->Instance->CNDTR;
 8002fce:	4b11      	ldr	r3, [pc, #68]	; (8003014 <_Z10At_CommandPcS_m+0x124>)
 8002fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	617b      	str	r3, [r7, #20]
			tt = HAL_GetTick()+3;
 8002fd8:	f000 fe04 	bl	8003be4 <HAL_GetTick>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	3303      	adds	r3, #3
 8002fe0:	61bb      	str	r3, [r7, #24]
	while(HAL_GetTick() < tt)
 8002fe2:	e7dd      	b.n	8002fa0 <_Z10At_CommandPcS_m+0xb0>
		}
	}
	HAL_UART_DMAStop(&huart1);
 8002fe4:	480b      	ldr	r0, [pc, #44]	; (8003014 <_Z10At_CommandPcS_m+0x124>)
 8002fe6:	f005 f81e 	bl	8008026 <HAL_UART_DMAStop>
	if(res == 1){
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d104      	bne.n	8002ffa <_Z10At_CommandPcS_m+0x10a>
		printf("RX=> %s=>OK\n",(char *)uart_rx);
 8002ff0:	4907      	ldr	r1, [pc, #28]	; (8003010 <_Z10At_CommandPcS_m+0x120>)
 8002ff2:	480a      	ldr	r0, [pc, #40]	; (800301c <_Z10At_CommandPcS_m+0x12c>)
 8002ff4:	f006 fd10 	bl	8009a18 <iprintf>
 8002ff8:	e003      	b.n	8003002 <_Z10At_CommandPcS_m+0x112>
	}
	else{
		printf("RX=> %s=>FAIL\n",(char *)uart_rx);
 8002ffa:	4905      	ldr	r1, [pc, #20]	; (8003010 <_Z10At_CommandPcS_m+0x120>)
 8002ffc:	4808      	ldr	r0, [pc, #32]	; (8003020 <_Z10At_CommandPcS_m+0x130>)
 8002ffe:	f006 fd0b 	bl	8009a18 <iprintf>
	}
	return res;
 8003002:	69fb      	ldr	r3, [r7, #28]
}
 8003004:	4618      	mov	r0, r3
 8003006:	3720      	adds	r7, #32
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	0800d8bc 	.word	0x0800d8bc
 8003010:	200005f0 	.word	0x200005f0
 8003014:	200003c0 	.word	0x200003c0
 8003018:	0800d8e4 	.word	0x0800d8e4
 800301c:	0800d8c4 	.word	0x0800d8c4
 8003020:	0800d8d4 	.word	0x0800d8d4

08003024 <_Z12Sim7600_initv>:

void Sim7600_init()
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
	for(uint8_t i=0;i<10;i++)
 800302a:	2300      	movs	r3, #0
 800302c:	71fb      	strb	r3, [r7, #7]
 800302e:	79fb      	ldrb	r3, [r7, #7]
 8003030:	2b09      	cmp	r3, #9
 8003032:	d815      	bhi.n	8003060 <_Z12Sim7600_initv+0x3c>
	{
	  if(At_Command((char *)"ATE0\r\n",(char *)"OK\r\n",5000)>0)
 8003034:	f241 3288 	movw	r2, #5000	; 0x1388
 8003038:	492e      	ldr	r1, [pc, #184]	; (80030f4 <_Z12Sim7600_initv+0xd0>)
 800303a:	482f      	ldr	r0, [pc, #188]	; (80030f8 <_Z12Sim7600_initv+0xd4>)
 800303c:	f7ff ff58 	bl	8002ef0 <_Z10At_CommandPcS_m>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	bfcc      	ite	gt
 8003046:	2301      	movgt	r3, #1
 8003048:	2300      	movle	r3, #0
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b00      	cmp	r3, #0
 800304e:	d106      	bne.n	800305e <_Z12Sim7600_initv+0x3a>
		break;
	  HAL_Delay(20);
 8003050:	2014      	movs	r0, #20
 8003052:	f000 fdd1 	bl	8003bf8 <HAL_Delay>
	for(uint8_t i=0;i<10;i++)
 8003056:	79fb      	ldrb	r3, [r7, #7]
 8003058:	3301      	adds	r3, #1
 800305a:	71fb      	strb	r3, [r7, #7]
 800305c:	e7e7      	b.n	800302e <_Z12Sim7600_initv+0xa>
		break;
 800305e:	bf00      	nop
	}
	for(uint8_t i=0;i<10;i++)
 8003060:	2300      	movs	r3, #0
 8003062:	71bb      	strb	r3, [r7, #6]
 8003064:	79bb      	ldrb	r3, [r7, #6]
 8003066:	2b09      	cmp	r3, #9
 8003068:	d815      	bhi.n	8003096 <_Z12Sim7600_initv+0x72>
	{
	  if(At_Command((char *)"AT+CSCS=\"GSM\"\r\n", (char *)"OK\r\n", 5000)>0)
 800306a:	f241 3288 	movw	r2, #5000	; 0x1388
 800306e:	4921      	ldr	r1, [pc, #132]	; (80030f4 <_Z12Sim7600_initv+0xd0>)
 8003070:	4822      	ldr	r0, [pc, #136]	; (80030fc <_Z12Sim7600_initv+0xd8>)
 8003072:	f7ff ff3d 	bl	8002ef0 <_Z10At_CommandPcS_m>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	bfcc      	ite	gt
 800307c:	2301      	movgt	r3, #1
 800307e:	2300      	movle	r3, #0
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d106      	bne.n	8003094 <_Z12Sim7600_initv+0x70>
		break;
	  HAL_Delay(20);
 8003086:	2014      	movs	r0, #20
 8003088:	f000 fdb6 	bl	8003bf8 <HAL_Delay>
	for(uint8_t i=0;i<10;i++)
 800308c:	79bb      	ldrb	r3, [r7, #6]
 800308e:	3301      	adds	r3, #1
 8003090:	71bb      	strb	r3, [r7, #6]
 8003092:	e7e7      	b.n	8003064 <_Z12Sim7600_initv+0x40>
		break;
 8003094:	bf00      	nop
	}
	At_Command((char *)"AT+CGSOCKCONT=1,\"IP\",\"CMNET\"\r\n", (char *)"OK\r\n",1000);
 8003096:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800309a:	4916      	ldr	r1, [pc, #88]	; (80030f4 <_Z12Sim7600_initv+0xd0>)
 800309c:	4818      	ldr	r0, [pc, #96]	; (8003100 <_Z12Sim7600_initv+0xdc>)
 800309e:	f7ff ff27 	bl	8002ef0 <_Z10At_CommandPcS_m>
//	At_Command((char *)"AT+CGPSURL=\"111.222.333.444:8888\"\r\n", (char *)"OK\r\n",1000);
//	At_Command((char *)"AT+CGPSSSL=0\r\n", (char *)"OK\r\n",1000);
	At_Command((char *)"AT+CGPS=1\r\n", (char *)"OK\r\n",1000);
 80030a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80030a6:	4913      	ldr	r1, [pc, #76]	; (80030f4 <_Z12Sim7600_initv+0xd0>)
 80030a8:	4816      	ldr	r0, [pc, #88]	; (8003104 <_Z12Sim7600_initv+0xe0>)
 80030aa:	f7ff ff21 	bl	8002ef0 <_Z10At_CommandPcS_m>



	At_Command((char *)"AT+CMGF=1\r\n", (char *)"OK\r\n",1000);
 80030ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80030b2:	4910      	ldr	r1, [pc, #64]	; (80030f4 <_Z12Sim7600_initv+0xd0>)
 80030b4:	4814      	ldr	r0, [pc, #80]	; (8003108 <_Z12Sim7600_initv+0xe4>)
 80030b6:	f7ff ff1b 	bl	8002ef0 <_Z10At_CommandPcS_m>
	At_Command((char *)"AT+CREG?\r\n", (char *)"OK\r\n",1000);
 80030ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80030be:	490d      	ldr	r1, [pc, #52]	; (80030f4 <_Z12Sim7600_initv+0xd0>)
 80030c0:	4812      	ldr	r0, [pc, #72]	; (800310c <_Z12Sim7600_initv+0xe8>)
 80030c2:	f7ff ff15 	bl	8002ef0 <_Z10At_CommandPcS_m>
	At_Command((char *)"AT+CSQ\r\n", (char *)"OK\r\n",1000);
 80030c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80030ca:	490a      	ldr	r1, [pc, #40]	; (80030f4 <_Z12Sim7600_initv+0xd0>)
 80030cc:	4810      	ldr	r0, [pc, #64]	; (8003110 <_Z12Sim7600_initv+0xec>)
 80030ce:	f7ff ff0f 	bl	8002ef0 <_Z10At_CommandPcS_m>
	At_Command((char *)"AT+CGREG?\r\n", (char *)"OK\r\n",1000);
 80030d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80030d6:	4907      	ldr	r1, [pc, #28]	; (80030f4 <_Z12Sim7600_initv+0xd0>)
 80030d8:	480e      	ldr	r0, [pc, #56]	; (8003114 <_Z12Sim7600_initv+0xf0>)
 80030da:	f7ff ff09 	bl	8002ef0 <_Z10At_CommandPcS_m>

	At_Command((char *)"AT+CGPADDR\r\n", (char *)"OK\r\n",1000);
 80030de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80030e2:	4904      	ldr	r1, [pc, #16]	; (80030f4 <_Z12Sim7600_initv+0xd0>)
 80030e4:	480c      	ldr	r0, [pc, #48]	; (8003118 <_Z12Sim7600_initv+0xf4>)
 80030e6:	f7ff ff03 	bl	8002ef0 <_Z10At_CommandPcS_m>
}
 80030ea:	bf00      	nop
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	0800d8ec 	.word	0x0800d8ec
 80030f8:	0800d8f4 	.word	0x0800d8f4
 80030fc:	0800d8fc 	.word	0x0800d8fc
 8003100:	0800d90c 	.word	0x0800d90c
 8003104:	0800d92c 	.word	0x0800d92c
 8003108:	0800d938 	.word	0x0800d938
 800310c:	0800d944 	.word	0x0800d944
 8003110:	0800d950 	.word	0x0800d950
 8003114:	0800d95c 	.word	0x0800d95c
 8003118:	0800d968 	.word	0x0800d968

0800311c <_Z11AT_Sms_SendPcS_>:
int AT_Sms_Send(char* input_number,char* msg)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b0c2      	sub	sp, #264	; 0x108
 8003120:	af00      	add	r7, sp, #0
 8003122:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003126:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800312a:	6018      	str	r0, [r3, #0]
 800312c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003130:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003134:	6019      	str	r1, [r3, #0]
  char aux_string[256] = {0};
 8003136:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800313a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800313e:	2200      	movs	r2, #0
 8003140:	601a      	str	r2, [r3, #0]
 8003142:	3304      	adds	r3, #4
 8003144:	22fc      	movs	r2, #252	; 0xfc
 8003146:	2100      	movs	r1, #0
 8003148:	4618      	mov	r0, r3
 800314a:	f005 ff21 	bl	8008f90 <memset>
  sprintf(aux_string,"AT+CMGS=\"%s\"\r\n", input_number);
 800314e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003152:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003156:	f107 0008 	add.w	r0, r7, #8
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	4913      	ldr	r1, [pc, #76]	; (80031ac <_Z11AT_Sms_SendPcS_+0x90>)
 800315e:	f006 fd71 	bl	8009c44 <siprintf>
  At_Command(aux_string,(char *)">",5000);     // Send the SMS number
 8003162:	f107 0308 	add.w	r3, r7, #8
 8003166:	f241 3288 	movw	r2, #5000	; 0x1388
 800316a:	4911      	ldr	r1, [pc, #68]	; (80031b0 <_Z11AT_Sms_SendPcS_+0x94>)
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff febf 	bl	8002ef0 <_Z10At_CommandPcS_m>
  sprintf(aux_string,"%s%c",msg,26);
 8003172:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003176:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 800317a:	f107 0008 	add.w	r0, r7, #8
 800317e:	231a      	movs	r3, #26
 8003180:	6812      	ldr	r2, [r2, #0]
 8003182:	490c      	ldr	r1, [pc, #48]	; (80031b4 <_Z11AT_Sms_SendPcS_+0x98>)
 8003184:	f006 fd5e 	bl	8009c44 <siprintf>
  printf("send content\n");
 8003188:	480b      	ldr	r0, [pc, #44]	; (80031b8 <_Z11AT_Sms_SendPcS_+0x9c>)
 800318a:	f006 fccb 	bl	8009b24 <puts>
  return  At_Command(aux_string,(char *)"OK\r\n",180000);     // Send the SMS number
 800318e:	f107 0308 	add.w	r3, r7, #8
 8003192:	4a0a      	ldr	r2, [pc, #40]	; (80031bc <_Z11AT_Sms_SendPcS_+0xa0>)
 8003194:	490a      	ldr	r1, [pc, #40]	; (80031c0 <_Z11AT_Sms_SendPcS_+0xa4>)
 8003196:	4618      	mov	r0, r3
 8003198:	f7ff feaa 	bl	8002ef0 <_Z10At_CommandPcS_m>
 800319c:	4603      	mov	r3, r0
 800319e:	bf00      	nop
  return -1;
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	0800d978 	.word	0x0800d978
 80031b0:	0800d988 	.word	0x0800d988
 80031b4:	0800d98c 	.word	0x0800d98c
 80031b8:	0800d994 	.word	0x0800d994
 80031bc:	0002bf20 	.word	0x0002bf20
 80031c0:	0800d8ec 	.word	0x0800d8ec

080031c4 <_Z19AT_SIM7600_HTTP_GetPcS_Pt>:

int AT_SIM7600_HTTP_Get(char * request_url,char *rsp,uint16_t *sizess)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 80031ca:	af02      	add	r7, sp, #8
 80031cc:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80031d0:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 80031d4:	6018      	str	r0, [r3, #0]
 80031d6:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80031da:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80031de:	6019      	str	r1, [r3, #0]
 80031e0:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80031e4:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 80031e8:	601a      	str	r2, [r3, #0]
	char buf[1024];
	int buflen;
//	char *para;
	int Status_Code = 0;
 80031ea:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80031ee:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 80031f2:	2200      	movs	r2, #0
 80031f4:	601a      	str	r2, [r3, #0]


	At_Command((char *)"AT+HTTPINIT\r\n",(char *)"OK\r\n",10000);
 80031f6:	f242 7210 	movw	r2, #10000	; 0x2710
 80031fa:	493e      	ldr	r1, [pc, #248]	; (80032f4 <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x130>)
 80031fc:	483e      	ldr	r0, [pc, #248]	; (80032f8 <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x134>)
 80031fe:	f7ff fe77 	bl	8002ef0 <_Z10At_CommandPcS_m>
	sprintf(buf,"AT+HTTPDATA=%d,1000\r\n",strlen(request_url));
 8003202:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8003206:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 800320a:	6818      	ldr	r0, [r3, #0]
 800320c:	f7fc ffa0 	bl	8000150 <strlen>
 8003210:	4602      	mov	r2, r0
 8003212:	f107 0318 	add.w	r3, r7, #24
 8003216:	4939      	ldr	r1, [pc, #228]	; (80032fc <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x138>)
 8003218:	4618      	mov	r0, r3
 800321a:	f006 fd13 	bl	8009c44 <siprintf>
	if(At_Command(buf,(char *)"DOWNLOAD",3000)!=1)
 800321e:	f107 0318 	add.w	r3, r7, #24
 8003222:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003226:	4936      	ldr	r1, [pc, #216]	; (8003300 <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x13c>)
 8003228:	4618      	mov	r0, r3
 800322a:	f7ff fe61 	bl	8002ef0 <_Z10At_CommandPcS_m>
 800322e:	4603      	mov	r3, r0
 8003230:	2b01      	cmp	r3, #1
 8003232:	bf14      	ite	ne
 8003234:	2301      	movne	r3, #1
 8003236:	2300      	moveq	r3, #0
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00b      	beq.n	8003256 <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x92>
	{
		At_Command((char *)"AT+HTTPTERM\r\n",(char *)"OK\r\n",10000);
 800323e:	f242 7210 	movw	r2, #10000	; 0x2710
 8003242:	492c      	ldr	r1, [pc, #176]	; (80032f4 <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x130>)
 8003244:	482f      	ldr	r0, [pc, #188]	; (8003304 <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x140>)
 8003246:	f7ff fe53 	bl	8002ef0 <_Z10At_CommandPcS_m>
		return Status_Code;
 800324a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800324e:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	e049      	b.n	80032ea <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x126>
	}
	At_Command(request_url,(char *)"OK\r\n",10000);
 8003256:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800325a:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 800325e:	f242 7210 	movw	r2, #10000	; 0x2710
 8003262:	4924      	ldr	r1, [pc, #144]	; (80032f4 <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x130>)
 8003264:	6818      	ldr	r0, [r3, #0]
 8003266:	f7ff fe43 	bl	8002ef0 <_Z10At_CommandPcS_m>
	At_Command((char *)"AT+HTTPPARA=\"CONTENT\",\"application/x-www-form-urlencoded\"\r\n",(char *)"OK\r\n",10000);
 800326a:	f242 7210 	movw	r2, #10000	; 0x2710
 800326e:	4921      	ldr	r1, [pc, #132]	; (80032f4 <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x130>)
 8003270:	4825      	ldr	r0, [pc, #148]	; (8003308 <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x144>)
 8003272:	f7ff fe3d 	bl	8002ef0 <_Z10At_CommandPcS_m>
	sprintf(buf,"AT+HTTPPARA=\"URL\",\"http://deviot.me/data/form\"\r\n");
 8003276:	f107 0318 	add.w	r3, r7, #24
 800327a:	4924      	ldr	r1, [pc, #144]	; (800330c <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x148>)
 800327c:	4618      	mov	r0, r3
 800327e:	f006 fce1 	bl	8009c44 <siprintf>
	At_Command(buf,(char *)"OK\r\n",10000);
 8003282:	f107 0318 	add.w	r3, r7, #24
 8003286:	f242 7210 	movw	r2, #10000	; 0x2710
 800328a:	491a      	ldr	r1, [pc, #104]	; (80032f4 <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x130>)
 800328c:	4618      	mov	r0, r3
 800328e:	f7ff fe2f 	bl	8002ef0 <_Z10At_CommandPcS_m>
	memset(buf,0,1024);
 8003292:	f107 0318 	add.w	r3, r7, #24
 8003296:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800329a:	2100      	movs	r1, #0
 800329c:	4618      	mov	r0, r3
 800329e:	f005 fe77 	bl	8008f90 <memset>
	At_Command_response((char *)"AT+HTTPACTION=1\r\n",(char *)"+HTTPACTION",buf,&buflen,10000);
 80032a2:	f107 0314 	add.w	r3, r7, #20
 80032a6:	f107 0218 	add.w	r2, r7, #24
 80032aa:	f242 7110 	movw	r1, #10000	; 0x2710
 80032ae:	9100      	str	r1, [sp, #0]
 80032b0:	4917      	ldr	r1, [pc, #92]	; (8003310 <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x14c>)
 80032b2:	4818      	ldr	r0, [pc, #96]	; (8003314 <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x150>)
 80032b4:	f7ff fd7c 	bl	8002db0 <_Z19At_Command_responsePcS_S_Pim>
	AT_Getint_index(&Status_Code,buf,(char *)": ",1);
 80032b8:	f107 0118 	add.w	r1, r7, #24
 80032bc:	f107 0010 	add.w	r0, r7, #16
 80032c0:	2301      	movs	r3, #1
 80032c2:	4a15      	ldr	r2, [pc, #84]	; (8003318 <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x154>)
 80032c4:	f7ff fd18 	bl	8002cf8 <_Z15AT_Getint_indexPiPcS0_i>
	At_Command((char *)"AT+HTTPREAD=0,500\r\n",(char *)"OK\r\n",10000);
 80032c8:	f242 7210 	movw	r2, #10000	; 0x2710
 80032cc:	4909      	ldr	r1, [pc, #36]	; (80032f4 <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x130>)
 80032ce:	4813      	ldr	r0, [pc, #76]	; (800331c <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x158>)
 80032d0:	f7ff fe0e 	bl	8002ef0 <_Z10At_CommandPcS_m>
	At_Command((char *)"AT+HTTPTERM\r\n",(char *)"OK\r\n",10000);
 80032d4:	f242 7210 	movw	r2, #10000	; 0x2710
 80032d8:	4906      	ldr	r1, [pc, #24]	; (80032f4 <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x130>)
 80032da:	480a      	ldr	r0, [pc, #40]	; (8003304 <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x140>)
 80032dc:	f7ff fe08 	bl	8002ef0 <_Z10At_CommandPcS_m>
	return Status_Code;
 80032e0:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80032e4:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 80032e8:	681b      	ldr	r3, [r3, #0]
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	f507 6783 	add.w	r7, r7, #1048	; 0x418
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	0800d8ec 	.word	0x0800d8ec
 80032f8:	0800d9a4 	.word	0x0800d9a4
 80032fc:	0800d9b4 	.word	0x0800d9b4
 8003300:	0800d9cc 	.word	0x0800d9cc
 8003304:	0800d9d8 	.word	0x0800d9d8
 8003308:	0800d9e8 	.word	0x0800d9e8
 800330c:	0800da24 	.word	0x0800da24
 8003310:	0800da58 	.word	0x0800da58
 8003314:	0800da64 	.word	0x0800da64
 8003318:	0800da78 	.word	0x0800da78
 800331c:	0800da7c 	.word	0x0800da7c

08003320 <_Z18extractFloatValuesPKcPfS1_>:
//+CGPSINFO: 16°04'58.6327"N 108°08'98.5204"E,170423,130954.0,34.9,0.0,0.0
//           16°04'35.0"N 108°08'59.8"E
int extractFloatValues(const char* sentence, float* value1, float* value2)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
    const char* start = strchr(sentence, ':');  // Find the first occurrence of ':'
 800332c:	213a      	movs	r1, #58	; 0x3a
 800332e:	68f8      	ldr	r0, [r7, #12]
 8003330:	f006 fca8 	bl	8009c84 <strchr>
 8003334:	6178      	str	r0, [r7, #20]
    if (start == NULL) {
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d102      	bne.n	8003342 <_Z18extractFloatValuesPKcPfS1_+0x22>
        // fprintf(stderr, "Error: Invalid sentence format\n");
        return -1;
 800333c:	f04f 33ff 	mov.w	r3, #4294967295
 8003340:	e033      	b.n	80033aa <_Z18extractFloatValuesPKcPfS1_+0x8a>
    }
    start++;  // Move past the ':' character
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	3301      	adds	r3, #1
 8003346:	617b      	str	r3, [r7, #20]

    char* end;
    *value1 = strtof(start, &end);  // Convert the first substring to float
 8003348:	f107 0310 	add.w	r3, r7, #16
 800334c:	4619      	mov	r1, r3
 800334e:	6978      	ldr	r0, [r7, #20]
 8003350:	f007 fac6 	bl	800a8e0 <strtof>
 8003354:	4602      	mov	r2, r0
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	601a      	str	r2, [r3, #0]
    if (start == end) {
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	429a      	cmp	r2, r3
 8003360:	d102      	bne.n	8003368 <_Z18extractFloatValuesPKcPfS1_+0x48>
        // fprintf(stderr, "Error: Failed to extract float value 1\n");
        return -1;
 8003362:	f04f 33ff 	mov.w	r3, #4294967295
 8003366:	e020      	b.n	80033aa <_Z18extractFloatValuesPKcPfS1_+0x8a>
    }

    start = strchr(end + 1, ',');  // Find the next occurrence of ','
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	3301      	adds	r3, #1
 800336c:	212c      	movs	r1, #44	; 0x2c
 800336e:	4618      	mov	r0, r3
 8003370:	f006 fc88 	bl	8009c84 <strchr>
 8003374:	6178      	str	r0, [r7, #20]
    if (start == NULL) {
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d102      	bne.n	8003382 <_Z18extractFloatValuesPKcPfS1_+0x62>
//        fprintf(stderr, "Error: Failed to extract float value 2\n");
        return -1;
 800337c:	f04f 33ff 	mov.w	r3, #4294967295
 8003380:	e013      	b.n	80033aa <_Z18extractFloatValuesPKcPfS1_+0x8a>
    }
    start++;  // Move past the ',' character
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	3301      	adds	r3, #1
 8003386:	617b      	str	r3, [r7, #20]

    *value2 = strtof(start, &end);  // Convert the second substring to float
 8003388:	f107 0310 	add.w	r3, r7, #16
 800338c:	4619      	mov	r1, r3
 800338e:	6978      	ldr	r0, [r7, #20]
 8003390:	f007 faa6 	bl	800a8e0 <strtof>
 8003394:	4602      	mov	r2, r0
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	601a      	str	r2, [r3, #0]
    if (start == end) {
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	697a      	ldr	r2, [r7, #20]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d102      	bne.n	80033a8 <_Z18extractFloatValuesPKcPfS1_+0x88>
//        fprintf(stderr, "Error: Failed to extract float value 2\n");
        return -1;
 80033a2:	f04f 33ff 	mov.w	r3, #4294967295
 80033a6:	e000      	b.n	80033aa <_Z18extractFloatValuesPKcPfS1_+0x8a>
    }
    return 1;
 80033a8:	2301      	movs	r3, #1
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
	...

080033b4 <_Z18SIM_7600_read_GNSSPc>:
int  SIM_7600_read_GNSS(char *Location)
{
 80033b4:	b5b0      	push	{r4, r5, r7, lr}
 80033b6:	b0ba      	sub	sp, #232	; 0xe8
 80033b8:	af02      	add	r7, sp, #8
 80033ba:	6078      	str	r0, [r7, #4]
	char rsp[200]={0};
 80033bc:	2300      	movs	r3, #0
 80033be:	617b      	str	r3, [r7, #20]
 80033c0:	f107 0318 	add.w	r3, r7, #24
 80033c4:	22c4      	movs	r2, #196	; 0xc4
 80033c6:	2100      	movs	r1, #0
 80033c8:	4618      	mov	r0, r3
 80033ca:	f005 fde1 	bl	8008f90 <memset>
	int len;
	if(At_Command_response((char*)"AT+CGPSINFO\r\n",(char*)"OK\r\n",rsp,&len, 2000)){
 80033ce:	f107 0310 	add.w	r3, r7, #16
 80033d2:	f107 0214 	add.w	r2, r7, #20
 80033d6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80033da:	9100      	str	r1, [sp, #0]
 80033dc:	4923      	ldr	r1, [pc, #140]	; (800346c <_Z18SIM_7600_read_GNSSPc+0xb8>)
 80033de:	4824      	ldr	r0, [pc, #144]	; (8003470 <_Z18SIM_7600_read_GNSSPc+0xbc>)
 80033e0:	f7ff fce6 	bl	8002db0 <_Z19At_Command_responsePcS_S_Pim>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	bf14      	ite	ne
 80033ea:	2301      	movne	r3, #1
 80033ec:	2300      	moveq	r3, #0
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d035      	beq.n	8003460 <_Z18SIM_7600_read_GNSSPc+0xac>
		char *start = strstr(rsp,": ");
 80033f4:	f107 0314 	add.w	r3, r7, #20
 80033f8:	491e      	ldr	r1, [pc, #120]	; (8003474 <_Z18SIM_7600_read_GNSSPc+0xc0>)
 80033fa:	4618      	mov	r0, r3
 80033fc:	f006 fc4f 	bl	8009c9e <strstr>
 8003400:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
		if(start)
 8003404:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003408:	2b00      	cmp	r3, #0
 800340a:	d029      	beq.n	8003460 <_Z18SIM_7600_read_GNSSPc+0xac>
		{
			float plat,plong=0.0f;
 800340c:	f04f 0300 	mov.w	r3, #0
 8003410:	60bb      	str	r3, [r7, #8]
			if(extractFloatValues(rsp,&plat,&plong) == 1)
 8003412:	f107 0208 	add.w	r2, r7, #8
 8003416:	f107 010c 	add.w	r1, r7, #12
 800341a:	f107 0314 	add.w	r3, r7, #20
 800341e:	4618      	mov	r0, r3
 8003420:	f7ff ff7e 	bl	8003320 <_Z18extractFloatValuesPKcPfS1_>
 8003424:	4603      	mov	r3, r0
 8003426:	2b01      	cmp	r3, #1
 8003428:	bf0c      	ite	eq
 800342a:	2301      	moveq	r3, #1
 800342c:	2300      	movne	r3, #0
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b00      	cmp	r3, #0
 8003432:	d015      	beq.n	8003460 <_Z18SIM_7600_read_GNSSPc+0xac>
			{
				sprintf(Location,"%f, %f",plat,plong);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	4618      	mov	r0, r3
 8003438:	f7fc fff6 	bl	8000428 <__aeabi_f2d>
 800343c:	4604      	mov	r4, r0
 800343e:	460d      	mov	r5, r1
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	4618      	mov	r0, r3
 8003444:	f7fc fff0 	bl	8000428 <__aeabi_f2d>
 8003448:	4602      	mov	r2, r0
 800344a:	460b      	mov	r3, r1
 800344c:	e9cd 2300 	strd	r2, r3, [sp]
 8003450:	4622      	mov	r2, r4
 8003452:	462b      	mov	r3, r5
 8003454:	4908      	ldr	r1, [pc, #32]	; (8003478 <_Z18SIM_7600_read_GNSSPc+0xc4>)
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f006 fbf4 	bl	8009c44 <siprintf>
				return 1;
 800345c:	2301      	movs	r3, #1
 800345e:	e000      	b.n	8003462 <_Z18SIM_7600_read_GNSSPc+0xae>
			}
		}
	 }
	return 0;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	37e0      	adds	r7, #224	; 0xe0
 8003466:	46bd      	mov	sp, r7
 8003468:	bdb0      	pop	{r4, r5, r7, pc}
 800346a:	bf00      	nop
 800346c:	0800d8ec 	.word	0x0800d8ec
 8003470:	0800da90 	.word	0x0800da90
 8003474:	0800da78 	.word	0x0800da78
 8003478:	0800daa0 	.word	0x0800daa0

0800347c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003482:	4b15      	ldr	r3, [pc, #84]	; (80034d8 <HAL_MspInit+0x5c>)
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	4a14      	ldr	r2, [pc, #80]	; (80034d8 <HAL_MspInit+0x5c>)
 8003488:	f043 0301 	orr.w	r3, r3, #1
 800348c:	6193      	str	r3, [r2, #24]
 800348e:	4b12      	ldr	r3, [pc, #72]	; (80034d8 <HAL_MspInit+0x5c>)
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	60bb      	str	r3, [r7, #8]
 8003498:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800349a:	4b0f      	ldr	r3, [pc, #60]	; (80034d8 <HAL_MspInit+0x5c>)
 800349c:	69db      	ldr	r3, [r3, #28]
 800349e:	4a0e      	ldr	r2, [pc, #56]	; (80034d8 <HAL_MspInit+0x5c>)
 80034a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034a4:	61d3      	str	r3, [r2, #28]
 80034a6:	4b0c      	ldr	r3, [pc, #48]	; (80034d8 <HAL_MspInit+0x5c>)
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ae:	607b      	str	r3, [r7, #4]
 80034b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80034b2:	4b0a      	ldr	r3, [pc, #40]	; (80034dc <HAL_MspInit+0x60>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	60fb      	str	r3, [r7, #12]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80034be:	60fb      	str	r3, [r7, #12]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034c6:	60fb      	str	r3, [r7, #12]
 80034c8:	4a04      	ldr	r2, [pc, #16]	; (80034dc <HAL_MspInit+0x60>)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034ce:	bf00      	nop
 80034d0:	3714      	adds	r7, #20
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bc80      	pop	{r7}
 80034d6:	4770      	bx	lr
 80034d8:	40021000 	.word	0x40021000
 80034dc:	40010000 	.word	0x40010000

080034e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b088      	sub	sp, #32
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e8:	f107 0310 	add.w	r3, r7, #16
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	605a      	str	r2, [r3, #4]
 80034f2:	609a      	str	r2, [r3, #8]
 80034f4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a28      	ldr	r2, [pc, #160]	; (800359c <HAL_ADC_MspInit+0xbc>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d149      	bne.n	8003594 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003500:	4b27      	ldr	r3, [pc, #156]	; (80035a0 <HAL_ADC_MspInit+0xc0>)
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	4a26      	ldr	r2, [pc, #152]	; (80035a0 <HAL_ADC_MspInit+0xc0>)
 8003506:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800350a:	6193      	str	r3, [r2, #24]
 800350c:	4b24      	ldr	r3, [pc, #144]	; (80035a0 <HAL_ADC_MspInit+0xc0>)
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003514:	60fb      	str	r3, [r7, #12]
 8003516:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003518:	4b21      	ldr	r3, [pc, #132]	; (80035a0 <HAL_ADC_MspInit+0xc0>)
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	4a20      	ldr	r2, [pc, #128]	; (80035a0 <HAL_ADC_MspInit+0xc0>)
 800351e:	f043 0304 	orr.w	r3, r3, #4
 8003522:	6193      	str	r3, [r2, #24]
 8003524:	4b1e      	ldr	r3, [pc, #120]	; (80035a0 <HAL_ADC_MspInit+0xc0>)
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	f003 0304 	and.w	r3, r3, #4
 800352c:	60bb      	str	r3, [r7, #8]
 800352e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003530:	2302      	movs	r3, #2
 8003532:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003534:	2303      	movs	r3, #3
 8003536:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003538:	f107 0310 	add.w	r3, r7, #16
 800353c:	4619      	mov	r1, r3
 800353e:	4819      	ldr	r0, [pc, #100]	; (80035a4 <HAL_ADC_MspInit+0xc4>)
 8003540:	f001 fb54 	bl	8004bec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003544:	4b18      	ldr	r3, [pc, #96]	; (80035a8 <HAL_ADC_MspInit+0xc8>)
 8003546:	4a19      	ldr	r2, [pc, #100]	; (80035ac <HAL_ADC_MspInit+0xcc>)
 8003548:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800354a:	4b17      	ldr	r3, [pc, #92]	; (80035a8 <HAL_ADC_MspInit+0xc8>)
 800354c:	2200      	movs	r2, #0
 800354e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003550:	4b15      	ldr	r3, [pc, #84]	; (80035a8 <HAL_ADC_MspInit+0xc8>)
 8003552:	2200      	movs	r2, #0
 8003554:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003556:	4b14      	ldr	r3, [pc, #80]	; (80035a8 <HAL_ADC_MspInit+0xc8>)
 8003558:	2280      	movs	r2, #128	; 0x80
 800355a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800355c:	4b12      	ldr	r3, [pc, #72]	; (80035a8 <HAL_ADC_MspInit+0xc8>)
 800355e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003562:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003564:	4b10      	ldr	r3, [pc, #64]	; (80035a8 <HAL_ADC_MspInit+0xc8>)
 8003566:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800356a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800356c:	4b0e      	ldr	r3, [pc, #56]	; (80035a8 <HAL_ADC_MspInit+0xc8>)
 800356e:	2200      	movs	r2, #0
 8003570:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003572:	4b0d      	ldr	r3, [pc, #52]	; (80035a8 <HAL_ADC_MspInit+0xc8>)
 8003574:	2200      	movs	r2, #0
 8003576:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003578:	480b      	ldr	r0, [pc, #44]	; (80035a8 <HAL_ADC_MspInit+0xc8>)
 800357a:	f001 f899 	bl	80046b0 <HAL_DMA_Init>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8003584:	f7fe ff28 	bl	80023d8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a07      	ldr	r2, [pc, #28]	; (80035a8 <HAL_ADC_MspInit+0xc8>)
 800358c:	621a      	str	r2, [r3, #32]
 800358e:	4a06      	ldr	r2, [pc, #24]	; (80035a8 <HAL_ADC_MspInit+0xc8>)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003594:	bf00      	nop
 8003596:	3720      	adds	r7, #32
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	40012400 	.word	0x40012400
 80035a0:	40021000 	.word	0x40021000
 80035a4:	40010800 	.word	0x40010800
 80035a8:	2000023c 	.word	0x2000023c
 80035ac:	40020008 	.word	0x40020008

080035b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b088      	sub	sp, #32
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035b8:	f107 0310 	add.w	r3, r7, #16
 80035bc:	2200      	movs	r2, #0
 80035be:	601a      	str	r2, [r3, #0]
 80035c0:	605a      	str	r2, [r3, #4]
 80035c2:	609a      	str	r2, [r3, #8]
 80035c4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a15      	ldr	r2, [pc, #84]	; (8003620 <HAL_I2C_MspInit+0x70>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d123      	bne.n	8003618 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035d0:	4b14      	ldr	r3, [pc, #80]	; (8003624 <HAL_I2C_MspInit+0x74>)
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	4a13      	ldr	r2, [pc, #76]	; (8003624 <HAL_I2C_MspInit+0x74>)
 80035d6:	f043 0308 	orr.w	r3, r3, #8
 80035da:	6193      	str	r3, [r2, #24]
 80035dc:	4b11      	ldr	r3, [pc, #68]	; (8003624 <HAL_I2C_MspInit+0x74>)
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	f003 0308 	and.w	r3, r3, #8
 80035e4:	60fb      	str	r3, [r7, #12]
 80035e6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80035e8:	23c0      	movs	r3, #192	; 0xc0
 80035ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035ec:	2312      	movs	r3, #18
 80035ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035f0:	2303      	movs	r3, #3
 80035f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035f4:	f107 0310 	add.w	r3, r7, #16
 80035f8:	4619      	mov	r1, r3
 80035fa:	480b      	ldr	r0, [pc, #44]	; (8003628 <HAL_I2C_MspInit+0x78>)
 80035fc:	f001 faf6 	bl	8004bec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003600:	4b08      	ldr	r3, [pc, #32]	; (8003624 <HAL_I2C_MspInit+0x74>)
 8003602:	69db      	ldr	r3, [r3, #28]
 8003604:	4a07      	ldr	r2, [pc, #28]	; (8003624 <HAL_I2C_MspInit+0x74>)
 8003606:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800360a:	61d3      	str	r3, [r2, #28]
 800360c:	4b05      	ldr	r3, [pc, #20]	; (8003624 <HAL_I2C_MspInit+0x74>)
 800360e:	69db      	ldr	r3, [r3, #28]
 8003610:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003614:	60bb      	str	r3, [r7, #8]
 8003616:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003618:	bf00      	nop
 800361a:	3720      	adds	r7, #32
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	40005400 	.word	0x40005400
 8003624:	40021000 	.word	0x40021000
 8003628:	40010c00 	.word	0x40010c00

0800362c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a0f      	ldr	r2, [pc, #60]	; (8003678 <HAL_RTC_MspInit+0x4c>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d118      	bne.n	8003670 <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800363e:	f002 fdcf 	bl	80061e0 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8003642:	4b0e      	ldr	r3, [pc, #56]	; (800367c <HAL_RTC_MspInit+0x50>)
 8003644:	69db      	ldr	r3, [r3, #28]
 8003646:	4a0d      	ldr	r2, [pc, #52]	; (800367c <HAL_RTC_MspInit+0x50>)
 8003648:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800364c:	61d3      	str	r3, [r2, #28]
 800364e:	4b0b      	ldr	r3, [pc, #44]	; (800367c <HAL_RTC_MspInit+0x50>)
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003656:	60fb      	str	r3, [r7, #12]
 8003658:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800365a:	4b09      	ldr	r3, [pc, #36]	; (8003680 <HAL_RTC_MspInit+0x54>)
 800365c:	2201      	movs	r2, #1
 800365e:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8003660:	2200      	movs	r2, #0
 8003662:	2100      	movs	r1, #0
 8003664:	2003      	movs	r0, #3
 8003666:	f000 ffda 	bl	800461e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800366a:	2003      	movs	r0, #3
 800366c:	f000 fff3 	bl	8004656 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003670:	bf00      	nop
 8003672:	3710      	adds	r7, #16
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	40002800 	.word	0x40002800
 800367c:	40021000 	.word	0x40021000
 8003680:	4242043c 	.word	0x4242043c

08003684 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003694:	d114      	bne.n	80036c0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003696:	4b26      	ldr	r3, [pc, #152]	; (8003730 <HAL_TIM_Base_MspInit+0xac>)
 8003698:	69db      	ldr	r3, [r3, #28]
 800369a:	4a25      	ldr	r2, [pc, #148]	; (8003730 <HAL_TIM_Base_MspInit+0xac>)
 800369c:	f043 0301 	orr.w	r3, r3, #1
 80036a0:	61d3      	str	r3, [r2, #28]
 80036a2:	4b23      	ldr	r3, [pc, #140]	; (8003730 <HAL_TIM_Base_MspInit+0xac>)
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	617b      	str	r3, [r7, #20]
 80036ac:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80036ae:	2200      	movs	r2, #0
 80036b0:	2100      	movs	r1, #0
 80036b2:	201c      	movs	r0, #28
 80036b4:	f000 ffb3 	bl	800461e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80036b8:	201c      	movs	r0, #28
 80036ba:	f000 ffcc 	bl	8004656 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80036be:	e032      	b.n	8003726 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a1b      	ldr	r2, [pc, #108]	; (8003734 <HAL_TIM_Base_MspInit+0xb0>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d114      	bne.n	80036f4 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80036ca:	4b19      	ldr	r3, [pc, #100]	; (8003730 <HAL_TIM_Base_MspInit+0xac>)
 80036cc:	69db      	ldr	r3, [r3, #28]
 80036ce:	4a18      	ldr	r2, [pc, #96]	; (8003730 <HAL_TIM_Base_MspInit+0xac>)
 80036d0:	f043 0302 	orr.w	r3, r3, #2
 80036d4:	61d3      	str	r3, [r2, #28]
 80036d6:	4b16      	ldr	r3, [pc, #88]	; (8003730 <HAL_TIM_Base_MspInit+0xac>)
 80036d8:	69db      	ldr	r3, [r3, #28]
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	613b      	str	r3, [r7, #16]
 80036e0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80036e2:	2200      	movs	r2, #0
 80036e4:	2100      	movs	r1, #0
 80036e6:	201d      	movs	r0, #29
 80036e8:	f000 ff99 	bl	800461e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80036ec:	201d      	movs	r0, #29
 80036ee:	f000 ffb2 	bl	8004656 <HAL_NVIC_EnableIRQ>
}
 80036f2:	e018      	b.n	8003726 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM4)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a0f      	ldr	r2, [pc, #60]	; (8003738 <HAL_TIM_Base_MspInit+0xb4>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d113      	bne.n	8003726 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80036fe:	4b0c      	ldr	r3, [pc, #48]	; (8003730 <HAL_TIM_Base_MspInit+0xac>)
 8003700:	69db      	ldr	r3, [r3, #28]
 8003702:	4a0b      	ldr	r2, [pc, #44]	; (8003730 <HAL_TIM_Base_MspInit+0xac>)
 8003704:	f043 0304 	orr.w	r3, r3, #4
 8003708:	61d3      	str	r3, [r2, #28]
 800370a:	4b09      	ldr	r3, [pc, #36]	; (8003730 <HAL_TIM_Base_MspInit+0xac>)
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	f003 0304 	and.w	r3, r3, #4
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003716:	2200      	movs	r2, #0
 8003718:	2100      	movs	r1, #0
 800371a:	201e      	movs	r0, #30
 800371c:	f000 ff7f 	bl	800461e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003720:	201e      	movs	r0, #30
 8003722:	f000 ff98 	bl	8004656 <HAL_NVIC_EnableIRQ>
}
 8003726:	bf00      	nop
 8003728:	3718      	adds	r7, #24
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	40021000 	.word	0x40021000
 8003734:	40000400 	.word	0x40000400
 8003738:	40000800 	.word	0x40000800

0800373c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b08a      	sub	sp, #40	; 0x28
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003744:	f107 0318 	add.w	r3, r7, #24
 8003748:	2200      	movs	r2, #0
 800374a:	601a      	str	r2, [r3, #0]
 800374c:	605a      	str	r2, [r3, #4]
 800374e:	609a      	str	r2, [r3, #8]
 8003750:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a4e      	ldr	r2, [pc, #312]	; (8003890 <HAL_UART_MspInit+0x154>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d160      	bne.n	800381e <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800375c:	4b4d      	ldr	r3, [pc, #308]	; (8003894 <HAL_UART_MspInit+0x158>)
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	4a4c      	ldr	r2, [pc, #304]	; (8003894 <HAL_UART_MspInit+0x158>)
 8003762:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003766:	6193      	str	r3, [r2, #24]
 8003768:	4b4a      	ldr	r3, [pc, #296]	; (8003894 <HAL_UART_MspInit+0x158>)
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003770:	617b      	str	r3, [r7, #20]
 8003772:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003774:	4b47      	ldr	r3, [pc, #284]	; (8003894 <HAL_UART_MspInit+0x158>)
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	4a46      	ldr	r2, [pc, #280]	; (8003894 <HAL_UART_MspInit+0x158>)
 800377a:	f043 0304 	orr.w	r3, r3, #4
 800377e:	6193      	str	r3, [r2, #24]
 8003780:	4b44      	ldr	r3, [pc, #272]	; (8003894 <HAL_UART_MspInit+0x158>)
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	f003 0304 	and.w	r3, r3, #4
 8003788:	613b      	str	r3, [r7, #16]
 800378a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800378c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003790:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003792:	2302      	movs	r3, #2
 8003794:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003796:	2303      	movs	r3, #3
 8003798:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800379a:	f107 0318 	add.w	r3, r7, #24
 800379e:	4619      	mov	r1, r3
 80037a0:	483d      	ldr	r0, [pc, #244]	; (8003898 <HAL_UART_MspInit+0x15c>)
 80037a2:	f001 fa23 	bl	8004bec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80037a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037ac:	2300      	movs	r3, #0
 80037ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b0:	2300      	movs	r3, #0
 80037b2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037b4:	f107 0318 	add.w	r3, r7, #24
 80037b8:	4619      	mov	r1, r3
 80037ba:	4837      	ldr	r0, [pc, #220]	; (8003898 <HAL_UART_MspInit+0x15c>)
 80037bc:	f001 fa16 	bl	8004bec <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80037c0:	4b36      	ldr	r3, [pc, #216]	; (800389c <HAL_UART_MspInit+0x160>)
 80037c2:	4a37      	ldr	r2, [pc, #220]	; (80038a0 <HAL_UART_MspInit+0x164>)
 80037c4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037c6:	4b35      	ldr	r3, [pc, #212]	; (800389c <HAL_UART_MspInit+0x160>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037cc:	4b33      	ldr	r3, [pc, #204]	; (800389c <HAL_UART_MspInit+0x160>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80037d2:	4b32      	ldr	r3, [pc, #200]	; (800389c <HAL_UART_MspInit+0x160>)
 80037d4:	2280      	movs	r2, #128	; 0x80
 80037d6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037d8:	4b30      	ldr	r3, [pc, #192]	; (800389c <HAL_UART_MspInit+0x160>)
 80037da:	2200      	movs	r2, #0
 80037dc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037de:	4b2f      	ldr	r3, [pc, #188]	; (800389c <HAL_UART_MspInit+0x160>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80037e4:	4b2d      	ldr	r3, [pc, #180]	; (800389c <HAL_UART_MspInit+0x160>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80037ea:	4b2c      	ldr	r3, [pc, #176]	; (800389c <HAL_UART_MspInit+0x160>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80037f0:	482a      	ldr	r0, [pc, #168]	; (800389c <HAL_UART_MspInit+0x160>)
 80037f2:	f000 ff5d 	bl	80046b0 <HAL_DMA_Init>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d001      	beq.n	8003800 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80037fc:	f7fe fdec 	bl	80023d8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a26      	ldr	r2, [pc, #152]	; (800389c <HAL_UART_MspInit+0x160>)
 8003804:	639a      	str	r2, [r3, #56]	; 0x38
 8003806:	4a25      	ldr	r2, [pc, #148]	; (800389c <HAL_UART_MspInit+0x160>)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800380c:	2200      	movs	r2, #0
 800380e:	2100      	movs	r1, #0
 8003810:	2025      	movs	r0, #37	; 0x25
 8003812:	f000 ff04 	bl	800461e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003816:	2025      	movs	r0, #37	; 0x25
 8003818:	f000 ff1d 	bl	8004656 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800381c:	e034      	b.n	8003888 <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART2)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a20      	ldr	r2, [pc, #128]	; (80038a4 <HAL_UART_MspInit+0x168>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d12f      	bne.n	8003888 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003828:	4b1a      	ldr	r3, [pc, #104]	; (8003894 <HAL_UART_MspInit+0x158>)
 800382a:	69db      	ldr	r3, [r3, #28]
 800382c:	4a19      	ldr	r2, [pc, #100]	; (8003894 <HAL_UART_MspInit+0x158>)
 800382e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003832:	61d3      	str	r3, [r2, #28]
 8003834:	4b17      	ldr	r3, [pc, #92]	; (8003894 <HAL_UART_MspInit+0x158>)
 8003836:	69db      	ldr	r3, [r3, #28]
 8003838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800383c:	60fb      	str	r3, [r7, #12]
 800383e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003840:	4b14      	ldr	r3, [pc, #80]	; (8003894 <HAL_UART_MspInit+0x158>)
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	4a13      	ldr	r2, [pc, #76]	; (8003894 <HAL_UART_MspInit+0x158>)
 8003846:	f043 0304 	orr.w	r3, r3, #4
 800384a:	6193      	str	r3, [r2, #24]
 800384c:	4b11      	ldr	r3, [pc, #68]	; (8003894 <HAL_UART_MspInit+0x158>)
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	f003 0304 	and.w	r3, r3, #4
 8003854:	60bb      	str	r3, [r7, #8]
 8003856:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003858:	2304      	movs	r3, #4
 800385a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800385c:	2302      	movs	r3, #2
 800385e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003860:	2303      	movs	r3, #3
 8003862:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003864:	f107 0318 	add.w	r3, r7, #24
 8003868:	4619      	mov	r1, r3
 800386a:	480b      	ldr	r0, [pc, #44]	; (8003898 <HAL_UART_MspInit+0x15c>)
 800386c:	f001 f9be 	bl	8004bec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003870:	2308      	movs	r3, #8
 8003872:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003874:	2300      	movs	r3, #0
 8003876:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003878:	2300      	movs	r3, #0
 800387a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800387c:	f107 0318 	add.w	r3, r7, #24
 8003880:	4619      	mov	r1, r3
 8003882:	4805      	ldr	r0, [pc, #20]	; (8003898 <HAL_UART_MspInit+0x15c>)
 8003884:	f001 f9b2 	bl	8004bec <HAL_GPIO_Init>
}
 8003888:	bf00      	nop
 800388a:	3728      	adds	r7, #40	; 0x28
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	40013800 	.word	0x40013800
 8003894:	40021000 	.word	0x40021000
 8003898:	40010800 	.word	0x40010800
 800389c:	20000448 	.word	0x20000448
 80038a0:	40020058 	.word	0x40020058
 80038a4:	40004400 	.word	0x40004400

080038a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80038ac:	e7fe      	b.n	80038ac <NMI_Handler+0x4>

080038ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038ae:	b480      	push	{r7}
 80038b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038b2:	e7fe      	b.n	80038b2 <HardFault_Handler+0x4>

080038b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038b8:	e7fe      	b.n	80038b8 <MemManage_Handler+0x4>

080038ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038ba:	b480      	push	{r7}
 80038bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038be:	e7fe      	b.n	80038be <BusFault_Handler+0x4>

080038c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038c0:	b480      	push	{r7}
 80038c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038c4:	e7fe      	b.n	80038c4 <UsageFault_Handler+0x4>

080038c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038c6:	b480      	push	{r7}
 80038c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038ca:	bf00      	nop
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bc80      	pop	{r7}
 80038d0:	4770      	bx	lr

080038d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038d2:	b480      	push	{r7}
 80038d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038d6:	bf00      	nop
 80038d8:	46bd      	mov	sp, r7
 80038da:	bc80      	pop	{r7}
 80038dc:	4770      	bx	lr

080038de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038de:	b480      	push	{r7}
 80038e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038e2:	bf00      	nop
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bc80      	pop	{r7}
 80038e8:	4770      	bx	lr

080038ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038ee:	f000 f967 	bl	8003bc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038f2:	bf00      	nop
 80038f4:	bd80      	pop	{r7, pc}
	...

080038f8 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 80038fc:	4802      	ldr	r0, [pc, #8]	; (8003908 <RTC_IRQHandler+0x10>)
 80038fe:	f003 fe13 	bl	8007528 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8003902:	bf00      	nop
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	200002d4 	.word	0x200002d4

0800390c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003910:	2001      	movs	r0, #1
 8003912:	f001 fb1f 	bl	8004f54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003916:	bf00      	nop
 8003918:	bd80      	pop	{r7, pc}
	...

0800391c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003920:	4802      	ldr	r0, [pc, #8]	; (800392c <DMA1_Channel1_IRQHandler+0x10>)
 8003922:	f001 f82f 	bl	8004984 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003926:	bf00      	nop
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	2000023c 	.word	0x2000023c

08003930 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003934:	4802      	ldr	r0, [pc, #8]	; (8003940 <DMA1_Channel5_IRQHandler+0x10>)
 8003936:	f001 f825 	bl	8004984 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800393a:	bf00      	nop
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	20000448 	.word	0x20000448

08003944 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003948:	4802      	ldr	r0, [pc, #8]	; (8003954 <TIM2_IRQHandler+0x10>)
 800394a:	f003 ff05 	bl	8007758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800394e:	bf00      	nop
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	200002e8 	.word	0x200002e8

08003958 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800395c:	4802      	ldr	r0, [pc, #8]	; (8003968 <TIM3_IRQHandler+0x10>)
 800395e:	f003 fefb 	bl	8007758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003962:	bf00      	nop
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	20000330 	.word	0x20000330

0800396c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003970:	4802      	ldr	r0, [pc, #8]	; (800397c <TIM4_IRQHandler+0x10>)
 8003972:	f003 fef1 	bl	8007758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003976:	bf00      	nop
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	20000378 	.word	0x20000378

08003980 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003984:	4802      	ldr	r0, [pc, #8]	; (8003990 <USART1_IRQHandler+0x10>)
 8003986:	f004 fba9 	bl	80080dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800398a:	bf00      	nop
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	200003c0 	.word	0x200003c0

08003994 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003994:	b480      	push	{r7}
 8003996:	af00      	add	r7, sp, #0
  return 1;
 8003998:	2301      	movs	r3, #1
}
 800399a:	4618      	mov	r0, r3
 800399c:	46bd      	mov	sp, r7
 800399e:	bc80      	pop	{r7}
 80039a0:	4770      	bx	lr

080039a2 <_kill>:

int _kill(int pid, int sig)
{
 80039a2:	b580      	push	{r7, lr}
 80039a4:	b082      	sub	sp, #8
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
 80039aa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80039ac:	f005 faa8 	bl	8008f00 <__errno>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2216      	movs	r2, #22
 80039b4:	601a      	str	r2, [r3, #0]
  return -1;
 80039b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3708      	adds	r7, #8
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <_exit>:

void _exit (int status)
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b082      	sub	sp, #8
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80039ca:	f04f 31ff 	mov.w	r1, #4294967295
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f7ff ffe7 	bl	80039a2 <_kill>
  while (1) {}    /* Make sure we hang here */
 80039d4:	e7fe      	b.n	80039d4 <_exit+0x12>

080039d6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b086      	sub	sp, #24
 80039da:	af00      	add	r7, sp, #0
 80039dc:	60f8      	str	r0, [r7, #12]
 80039de:	60b9      	str	r1, [r7, #8]
 80039e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039e2:	2300      	movs	r3, #0
 80039e4:	617b      	str	r3, [r7, #20]
 80039e6:	e00a      	b.n	80039fe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80039e8:	f3af 8000 	nop.w
 80039ec:	4601      	mov	r1, r0
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	1c5a      	adds	r2, r3, #1
 80039f2:	60ba      	str	r2, [r7, #8]
 80039f4:	b2ca      	uxtb	r2, r1
 80039f6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	3301      	adds	r3, #1
 80039fc:	617b      	str	r3, [r7, #20]
 80039fe:	697a      	ldr	r2, [r7, #20]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	dbf0      	blt.n	80039e8 <_read+0x12>
  }

  return len;
 8003a06:	687b      	ldr	r3, [r7, #4]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3718      	adds	r7, #24
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003a18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bc80      	pop	{r7}
 8003a24:	4770      	bx	lr

08003a26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a26:	b480      	push	{r7}
 8003a28:	b083      	sub	sp, #12
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
 8003a2e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a36:	605a      	str	r2, [r3, #4]
  return 0;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bc80      	pop	{r7}
 8003a42:	4770      	bx	lr

08003a44 <_isatty>:

int _isatty(int file)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003a4c:	2301      	movs	r3, #1
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bc80      	pop	{r7}
 8003a56:	4770      	bx	lr

08003a58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3714      	adds	r7, #20
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bc80      	pop	{r7}
 8003a6e:	4770      	bx	lr

08003a70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a78:	4a14      	ldr	r2, [pc, #80]	; (8003acc <_sbrk+0x5c>)
 8003a7a:	4b15      	ldr	r3, [pc, #84]	; (8003ad0 <_sbrk+0x60>)
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a84:	4b13      	ldr	r3, [pc, #76]	; (8003ad4 <_sbrk+0x64>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d102      	bne.n	8003a92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a8c:	4b11      	ldr	r3, [pc, #68]	; (8003ad4 <_sbrk+0x64>)
 8003a8e:	4a12      	ldr	r2, [pc, #72]	; (8003ad8 <_sbrk+0x68>)
 8003a90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a92:	4b10      	ldr	r3, [pc, #64]	; (8003ad4 <_sbrk+0x64>)
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4413      	add	r3, r2
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d207      	bcs.n	8003ab0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003aa0:	f005 fa2e 	bl	8008f00 <__errno>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	220c      	movs	r2, #12
 8003aa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8003aae:	e009      	b.n	8003ac4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ab0:	4b08      	ldr	r3, [pc, #32]	; (8003ad4 <_sbrk+0x64>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ab6:	4b07      	ldr	r3, [pc, #28]	; (8003ad4 <_sbrk+0x64>)
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4413      	add	r3, r2
 8003abe:	4a05      	ldr	r2, [pc, #20]	; (8003ad4 <_sbrk+0x64>)
 8003ac0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3718      	adds	r7, #24
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	20005000 	.word	0x20005000
 8003ad0:	00000400 	.word	0x00000400
 8003ad4:	200007f0 	.word	0x200007f0
 8003ad8:	20000810 	.word	0x20000810

08003adc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ae0:	bf00      	nop
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bc80      	pop	{r7}
 8003ae6:	4770      	bx	lr

08003ae8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ae8:	480c      	ldr	r0, [pc, #48]	; (8003b1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003aea:	490d      	ldr	r1, [pc, #52]	; (8003b20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003aec:	4a0d      	ldr	r2, [pc, #52]	; (8003b24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003aee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003af0:	e002      	b.n	8003af8 <LoopCopyDataInit>

08003af2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003af2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003af4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003af6:	3304      	adds	r3, #4

08003af8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003af8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003afa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003afc:	d3f9      	bcc.n	8003af2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003afe:	4a0a      	ldr	r2, [pc, #40]	; (8003b28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003b00:	4c0a      	ldr	r4, [pc, #40]	; (8003b2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003b02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b04:	e001      	b.n	8003b0a <LoopFillZerobss>

08003b06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b08:	3204      	adds	r2, #4

08003b0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b0c:	d3fb      	bcc.n	8003b06 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003b0e:	f7ff ffe5 	bl	8003adc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b12:	f005 f9fb 	bl	8008f0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003b16:	f7fe f91b 	bl	8001d50 <main>
  bx lr
 8003b1a:	4770      	bx	lr
  ldr r0, =_sdata
 8003b1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b20:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003b24:	0800df90 	.word	0x0800df90
  ldr r2, =_sbss
 8003b28:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003b2c:	2000080c 	.word	0x2000080c

08003b30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003b30:	e7fe      	b.n	8003b30 <ADC1_2_IRQHandler>
	...

08003b34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b38:	4b08      	ldr	r3, [pc, #32]	; (8003b5c <HAL_Init+0x28>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a07      	ldr	r2, [pc, #28]	; (8003b5c <HAL_Init+0x28>)
 8003b3e:	f043 0310 	orr.w	r3, r3, #16
 8003b42:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b44:	2003      	movs	r0, #3
 8003b46:	f000 fd5f 	bl	8004608 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b4a:	200f      	movs	r0, #15
 8003b4c:	f000 f808 	bl	8003b60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b50:	f7ff fc94 	bl	800347c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	40022000 	.word	0x40022000

08003b60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b68:	4b12      	ldr	r3, [pc, #72]	; (8003bb4 <HAL_InitTick+0x54>)
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	4b12      	ldr	r3, [pc, #72]	; (8003bb8 <HAL_InitTick+0x58>)
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	4619      	mov	r1, r3
 8003b72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b76:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f000 fd89 	bl	8004696 <HAL_SYSTICK_Config>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d001      	beq.n	8003b8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e00e      	b.n	8003bac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2b0f      	cmp	r3, #15
 8003b92:	d80a      	bhi.n	8003baa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b94:	2200      	movs	r2, #0
 8003b96:	6879      	ldr	r1, [r7, #4]
 8003b98:	f04f 30ff 	mov.w	r0, #4294967295
 8003b9c:	f000 fd3f 	bl	800461e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ba0:	4a06      	ldr	r2, [pc, #24]	; (8003bbc <HAL_InitTick+0x5c>)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	e000      	b.n	8003bac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3708      	adds	r7, #8
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	20000000 	.word	0x20000000
 8003bb8:	20000008 	.word	0x20000008
 8003bbc:	20000004 	.word	0x20000004

08003bc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bc4:	4b05      	ldr	r3, [pc, #20]	; (8003bdc <HAL_IncTick+0x1c>)
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	461a      	mov	r2, r3
 8003bca:	4b05      	ldr	r3, [pc, #20]	; (8003be0 <HAL_IncTick+0x20>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4413      	add	r3, r2
 8003bd0:	4a03      	ldr	r2, [pc, #12]	; (8003be0 <HAL_IncTick+0x20>)
 8003bd2:	6013      	str	r3, [r2, #0]
}
 8003bd4:	bf00      	nop
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bc80      	pop	{r7}
 8003bda:	4770      	bx	lr
 8003bdc:	20000008 	.word	0x20000008
 8003be0:	200007f4 	.word	0x200007f4

08003be4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0
  return uwTick;
 8003be8:	4b02      	ldr	r3, [pc, #8]	; (8003bf4 <HAL_GetTick+0x10>)
 8003bea:	681b      	ldr	r3, [r3, #0]
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bc80      	pop	{r7}
 8003bf2:	4770      	bx	lr
 8003bf4:	200007f4 	.word	0x200007f4

08003bf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c00:	f7ff fff0 	bl	8003be4 <HAL_GetTick>
 8003c04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c10:	d005      	beq.n	8003c1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c12:	4b0a      	ldr	r3, [pc, #40]	; (8003c3c <HAL_Delay+0x44>)
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	461a      	mov	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c1e:	bf00      	nop
 8003c20:	f7ff ffe0 	bl	8003be4 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d8f7      	bhi.n	8003c20 <HAL_Delay+0x28>
  {
  }
}
 8003c30:	bf00      	nop
 8003c32:	bf00      	nop
 8003c34:	3710      	adds	r7, #16
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	20000008 	.word	0x20000008

08003c40 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003c40:	b480      	push	{r7}
 8003c42:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003c44:	4b04      	ldr	r3, [pc, #16]	; (8003c58 <HAL_SuspendTick+0x18>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a03      	ldr	r2, [pc, #12]	; (8003c58 <HAL_SuspendTick+0x18>)
 8003c4a:	f023 0302 	bic.w	r3, r3, #2
 8003c4e:	6013      	str	r3, [r2, #0]
}
 8003c50:	bf00      	nop
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bc80      	pop	{r7}
 8003c56:	4770      	bx	lr
 8003c58:	e000e010 	.word	0xe000e010

08003c5c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003c60:	4b04      	ldr	r3, [pc, #16]	; (8003c74 <HAL_ResumeTick+0x18>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a03      	ldr	r2, [pc, #12]	; (8003c74 <HAL_ResumeTick+0x18>)
 8003c66:	f043 0302 	orr.w	r3, r3, #2
 8003c6a:	6013      	str	r3, [r2, #0]
}
 8003c6c:	bf00      	nop
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bc80      	pop	{r7}
 8003c72:	4770      	bx	lr
 8003c74:	e000e010 	.word	0xe000e010

08003c78 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c80:	2300      	movs	r3, #0
 8003c82:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003c84:	2300      	movs	r3, #0
 8003c86:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e0be      	b.n	8003e18 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d109      	bne.n	8003cbc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f7ff fc12 	bl	80034e0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 faf5 	bl	80042ac <ADC_ConversionStop_Disable>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cca:	f003 0310 	and.w	r3, r3, #16
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f040 8099 	bne.w	8003e06 <HAL_ADC_Init+0x18e>
 8003cd4:	7dfb      	ldrb	r3, [r7, #23]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	f040 8095 	bne.w	8003e06 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003ce4:	f023 0302 	bic.w	r3, r3, #2
 8003ce8:	f043 0202 	orr.w	r2, r3, #2
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003cf8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	7b1b      	ldrb	r3, [r3, #12]
 8003cfe:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003d00:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003d02:	68ba      	ldr	r2, [r7, #8]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d10:	d003      	beq.n	8003d1a <HAL_ADC_Init+0xa2>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d102      	bne.n	8003d20 <HAL_ADC_Init+0xa8>
 8003d1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d1e:	e000      	b.n	8003d22 <HAL_ADC_Init+0xaa>
 8003d20:	2300      	movs	r3, #0
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	7d1b      	ldrb	r3, [r3, #20]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d119      	bne.n	8003d64 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	7b1b      	ldrb	r3, [r3, #12]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d109      	bne.n	8003d4c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	035a      	lsls	r2, r3, #13
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003d48:	613b      	str	r3, [r7, #16]
 8003d4a:	e00b      	b.n	8003d64 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d50:	f043 0220 	orr.w	r2, r3, #32
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5c:	f043 0201 	orr.w	r2, r3, #1
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	430a      	orrs	r2, r1
 8003d76:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689a      	ldr	r2, [r3, #8]
 8003d7e:	4b28      	ldr	r3, [pc, #160]	; (8003e20 <HAL_ADC_Init+0x1a8>)
 8003d80:	4013      	ands	r3, r2
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	6812      	ldr	r2, [r2, #0]
 8003d86:	68b9      	ldr	r1, [r7, #8]
 8003d88:	430b      	orrs	r3, r1
 8003d8a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d94:	d003      	beq.n	8003d9e <HAL_ADC_Init+0x126>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d104      	bne.n	8003da8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	3b01      	subs	r3, #1
 8003da4:	051b      	lsls	r3, r3, #20
 8003da6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dae:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	430a      	orrs	r2, r1
 8003dba:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689a      	ldr	r2, [r3, #8]
 8003dc2:	4b18      	ldr	r3, [pc, #96]	; (8003e24 <HAL_ADC_Init+0x1ac>)
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	68ba      	ldr	r2, [r7, #8]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d10b      	bne.n	8003de4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd6:	f023 0303 	bic.w	r3, r3, #3
 8003dda:	f043 0201 	orr.w	r2, r3, #1
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003de2:	e018      	b.n	8003e16 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de8:	f023 0312 	bic.w	r3, r3, #18
 8003dec:	f043 0210 	orr.w	r2, r3, #16
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df8:	f043 0201 	orr.w	r2, r3, #1
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003e04:	e007      	b.n	8003e16 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0a:	f043 0210 	orr.w	r2, r3, #16
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003e16:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3718      	adds	r7, #24
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	ffe1f7fd 	.word	0xffe1f7fd
 8003e24:	ff1f0efe 	.word	0xff1f0efe

08003e28 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e34:	2300      	movs	r3, #0
 8003e36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a64      	ldr	r2, [pc, #400]	; (8003fd0 <HAL_ADC_Start_DMA+0x1a8>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d004      	beq.n	8003e4c <HAL_ADC_Start_DMA+0x24>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a63      	ldr	r2, [pc, #396]	; (8003fd4 <HAL_ADC_Start_DMA+0x1ac>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d106      	bne.n	8003e5a <HAL_ADC_Start_DMA+0x32>
 8003e4c:	4b60      	ldr	r3, [pc, #384]	; (8003fd0 <HAL_ADC_Start_DMA+0x1a8>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f040 80b3 	bne.w	8003fc0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d101      	bne.n	8003e68 <HAL_ADC_Start_DMA+0x40>
 8003e64:	2302      	movs	r3, #2
 8003e66:	e0ae      	b.n	8003fc6 <HAL_ADC_Start_DMA+0x19e>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	f000 f9c1 	bl	80041f8 <ADC_Enable>
 8003e76:	4603      	mov	r3, r0
 8003e78:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003e7a:	7dfb      	ldrb	r3, [r7, #23]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	f040 809a 	bne.w	8003fb6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e86:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003e8a:	f023 0301 	bic.w	r3, r3, #1
 8003e8e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a4e      	ldr	r2, [pc, #312]	; (8003fd4 <HAL_ADC_Start_DMA+0x1ac>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d105      	bne.n	8003eac <HAL_ADC_Start_DMA+0x84>
 8003ea0:	4b4b      	ldr	r3, [pc, #300]	; (8003fd0 <HAL_ADC_Start_DMA+0x1a8>)
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d115      	bne.n	8003ed8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d026      	beq.n	8003f14 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003ece:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003ed6:	e01d      	b.n	8003f14 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003edc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a39      	ldr	r2, [pc, #228]	; (8003fd0 <HAL_ADC_Start_DMA+0x1a8>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d004      	beq.n	8003ef8 <HAL_ADC_Start_DMA+0xd0>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a38      	ldr	r2, [pc, #224]	; (8003fd4 <HAL_ADC_Start_DMA+0x1ac>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d10d      	bne.n	8003f14 <HAL_ADC_Start_DMA+0xec>
 8003ef8:	4b35      	ldr	r3, [pc, #212]	; (8003fd0 <HAL_ADC_Start_DMA+0x1a8>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d007      	beq.n	8003f14 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f08:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003f0c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d006      	beq.n	8003f2e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f24:	f023 0206 	bic.w	r2, r3, #6
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	62da      	str	r2, [r3, #44]	; 0x2c
 8003f2c:	e002      	b.n	8003f34 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6a1b      	ldr	r3, [r3, #32]
 8003f40:	4a25      	ldr	r2, [pc, #148]	; (8003fd8 <HAL_ADC_Start_DMA+0x1b0>)
 8003f42:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6a1b      	ldr	r3, [r3, #32]
 8003f48:	4a24      	ldr	r2, [pc, #144]	; (8003fdc <HAL_ADC_Start_DMA+0x1b4>)
 8003f4a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6a1b      	ldr	r3, [r3, #32]
 8003f50:	4a23      	ldr	r2, [pc, #140]	; (8003fe0 <HAL_ADC_Start_DMA+0x1b8>)
 8003f52:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f06f 0202 	mvn.w	r2, #2
 8003f5c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	689a      	ldr	r2, [r3, #8]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f6c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6a18      	ldr	r0, [r3, #32]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	334c      	adds	r3, #76	; 0x4c
 8003f78:	4619      	mov	r1, r3
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f000 fbf1 	bl	8004764 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003f8c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003f90:	d108      	bne.n	8003fa4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	689a      	ldr	r2, [r3, #8]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003fa0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003fa2:	e00f      	b.n	8003fc4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689a      	ldr	r2, [r3, #8]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003fb2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003fb4:	e006      	b.n	8003fc4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8003fbe:	e001      	b.n	8003fc4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003fc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3718      	adds	r7, #24
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	40012400 	.word	0x40012400
 8003fd4:	40012800 	.word	0x40012800
 8003fd8:	0800432f 	.word	0x0800432f
 8003fdc:	080043ab 	.word	0x080043ab
 8003fe0:	080043c7 	.word	0x080043c7

08003fe4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bc80      	pop	{r7}
 8003ff4:	4770      	bx	lr

08003ff6 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003ff6:	b480      	push	{r7}
 8003ff8:	b083      	sub	sp, #12
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003ffe:	bf00      	nop
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	bc80      	pop	{r7}
 8004006:	4770      	bx	lr

08004008 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004012:	2300      	movs	r3, #0
 8004014:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004016:	2300      	movs	r3, #0
 8004018:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004020:	2b01      	cmp	r3, #1
 8004022:	d101      	bne.n	8004028 <HAL_ADC_ConfigChannel+0x20>
 8004024:	2302      	movs	r3, #2
 8004026:	e0dc      	b.n	80041e2 <HAL_ADC_ConfigChannel+0x1da>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	2b06      	cmp	r3, #6
 8004036:	d81c      	bhi.n	8004072 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	4613      	mov	r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	4413      	add	r3, r2
 8004048:	3b05      	subs	r3, #5
 800404a:	221f      	movs	r2, #31
 800404c:	fa02 f303 	lsl.w	r3, r2, r3
 8004050:	43db      	mvns	r3, r3
 8004052:	4019      	ands	r1, r3
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	6818      	ldr	r0, [r3, #0]
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	4613      	mov	r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	4413      	add	r3, r2
 8004062:	3b05      	subs	r3, #5
 8004064:	fa00 f203 	lsl.w	r2, r0, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	635a      	str	r2, [r3, #52]	; 0x34
 8004070:	e03c      	b.n	80040ec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	2b0c      	cmp	r3, #12
 8004078:	d81c      	bhi.n	80040b4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685a      	ldr	r2, [r3, #4]
 8004084:	4613      	mov	r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	4413      	add	r3, r2
 800408a:	3b23      	subs	r3, #35	; 0x23
 800408c:	221f      	movs	r2, #31
 800408e:	fa02 f303 	lsl.w	r3, r2, r3
 8004092:	43db      	mvns	r3, r3
 8004094:	4019      	ands	r1, r3
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	6818      	ldr	r0, [r3, #0]
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	4613      	mov	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4413      	add	r3, r2
 80040a4:	3b23      	subs	r3, #35	; 0x23
 80040a6:	fa00 f203 	lsl.w	r2, r0, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	631a      	str	r2, [r3, #48]	; 0x30
 80040b2:	e01b      	b.n	80040ec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	685a      	ldr	r2, [r3, #4]
 80040be:	4613      	mov	r3, r2
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	4413      	add	r3, r2
 80040c4:	3b41      	subs	r3, #65	; 0x41
 80040c6:	221f      	movs	r2, #31
 80040c8:	fa02 f303 	lsl.w	r3, r2, r3
 80040cc:	43db      	mvns	r3, r3
 80040ce:	4019      	ands	r1, r3
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	6818      	ldr	r0, [r3, #0]
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	4613      	mov	r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	4413      	add	r3, r2
 80040de:	3b41      	subs	r3, #65	; 0x41
 80040e0:	fa00 f203 	lsl.w	r2, r0, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	430a      	orrs	r2, r1
 80040ea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2b09      	cmp	r3, #9
 80040f2:	d91c      	bls.n	800412e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68d9      	ldr	r1, [r3, #12]
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	4613      	mov	r3, r2
 8004100:	005b      	lsls	r3, r3, #1
 8004102:	4413      	add	r3, r2
 8004104:	3b1e      	subs	r3, #30
 8004106:	2207      	movs	r2, #7
 8004108:	fa02 f303 	lsl.w	r3, r2, r3
 800410c:	43db      	mvns	r3, r3
 800410e:	4019      	ands	r1, r3
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	6898      	ldr	r0, [r3, #8]
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	4613      	mov	r3, r2
 800411a:	005b      	lsls	r3, r3, #1
 800411c:	4413      	add	r3, r2
 800411e:	3b1e      	subs	r3, #30
 8004120:	fa00 f203 	lsl.w	r2, r0, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	430a      	orrs	r2, r1
 800412a:	60da      	str	r2, [r3, #12]
 800412c:	e019      	b.n	8004162 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6919      	ldr	r1, [r3, #16]
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	4613      	mov	r3, r2
 800413a:	005b      	lsls	r3, r3, #1
 800413c:	4413      	add	r3, r2
 800413e:	2207      	movs	r2, #7
 8004140:	fa02 f303 	lsl.w	r3, r2, r3
 8004144:	43db      	mvns	r3, r3
 8004146:	4019      	ands	r1, r3
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	6898      	ldr	r0, [r3, #8]
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	4613      	mov	r3, r2
 8004152:	005b      	lsls	r3, r3, #1
 8004154:	4413      	add	r3, r2
 8004156:	fa00 f203 	lsl.w	r2, r0, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	430a      	orrs	r2, r1
 8004160:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2b10      	cmp	r3, #16
 8004168:	d003      	beq.n	8004172 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800416e:	2b11      	cmp	r3, #17
 8004170:	d132      	bne.n	80041d8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a1d      	ldr	r2, [pc, #116]	; (80041ec <HAL_ADC_ConfigChannel+0x1e4>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d125      	bne.n	80041c8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d126      	bne.n	80041d8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	689a      	ldr	r2, [r3, #8]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004198:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2b10      	cmp	r3, #16
 80041a0:	d11a      	bne.n	80041d8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80041a2:	4b13      	ldr	r3, [pc, #76]	; (80041f0 <HAL_ADC_ConfigChannel+0x1e8>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a13      	ldr	r2, [pc, #76]	; (80041f4 <HAL_ADC_ConfigChannel+0x1ec>)
 80041a8:	fba2 2303 	umull	r2, r3, r2, r3
 80041ac:	0c9a      	lsrs	r2, r3, #18
 80041ae:	4613      	mov	r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4413      	add	r3, r2
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80041b8:	e002      	b.n	80041c0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	3b01      	subs	r3, #1
 80041be:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1f9      	bne.n	80041ba <HAL_ADC_ConfigChannel+0x1b2>
 80041c6:	e007      	b.n	80041d8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041cc:	f043 0220 	orr.w	r2, r3, #32
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80041e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3714      	adds	r7, #20
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bc80      	pop	{r7}
 80041ea:	4770      	bx	lr
 80041ec:	40012400 	.word	0x40012400
 80041f0:	20000000 	.word	0x20000000
 80041f4:	431bde83 	.word	0x431bde83

080041f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004200:	2300      	movs	r3, #0
 8004202:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004204:	2300      	movs	r3, #0
 8004206:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b01      	cmp	r3, #1
 8004214:	d040      	beq.n	8004298 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689a      	ldr	r2, [r3, #8]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f042 0201 	orr.w	r2, r2, #1
 8004224:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004226:	4b1f      	ldr	r3, [pc, #124]	; (80042a4 <ADC_Enable+0xac>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a1f      	ldr	r2, [pc, #124]	; (80042a8 <ADC_Enable+0xb0>)
 800422c:	fba2 2303 	umull	r2, r3, r2, r3
 8004230:	0c9b      	lsrs	r3, r3, #18
 8004232:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004234:	e002      	b.n	800423c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	3b01      	subs	r3, #1
 800423a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1f9      	bne.n	8004236 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004242:	f7ff fccf 	bl	8003be4 <HAL_GetTick>
 8004246:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004248:	e01f      	b.n	800428a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800424a:	f7ff fccb 	bl	8003be4 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	2b02      	cmp	r3, #2
 8004256:	d918      	bls.n	800428a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b01      	cmp	r3, #1
 8004264:	d011      	beq.n	800428a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426a:	f043 0210 	orr.w	r2, r3, #16
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004276:	f043 0201 	orr.w	r2, r3, #1
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e007      	b.n	800429a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	2b01      	cmp	r3, #1
 8004296:	d1d8      	bne.n	800424a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	20000000 	.word	0x20000000
 80042a8:	431bde83 	.word	0x431bde83

080042ac <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042b4:	2300      	movs	r3, #0
 80042b6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d12e      	bne.n	8004324 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689a      	ldr	r2, [r3, #8]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 0201 	bic.w	r2, r2, #1
 80042d4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80042d6:	f7ff fc85 	bl	8003be4 <HAL_GetTick>
 80042da:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80042dc:	e01b      	b.n	8004316 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80042de:	f7ff fc81 	bl	8003be4 <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d914      	bls.n	8004316 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d10d      	bne.n	8004316 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fe:	f043 0210 	orr.w	r2, r3, #16
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430a:	f043 0201 	orr.w	r2, r3, #1
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e007      	b.n	8004326 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f003 0301 	and.w	r3, r3, #1
 8004320:	2b01      	cmp	r3, #1
 8004322:	d0dc      	beq.n	80042de <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800432e:	b580      	push	{r7, lr}
 8004330:	b084      	sub	sp, #16
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004340:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004344:	2b00      	cmp	r3, #0
 8004346:	d127      	bne.n	8004398 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800435e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004362:	d115      	bne.n	8004390 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004368:	2b00      	cmp	r3, #0
 800436a:	d111      	bne.n	8004390 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004370:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d105      	bne.n	8004390 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004388:	f043 0201 	orr.w	r2, r3, #1
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f7fe f91b 	bl	80025cc <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8004396:	e004      	b.n	80043a2 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6a1b      	ldr	r3, [r3, #32]
 800439c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	4798      	blx	r3
}
 80043a2:	bf00      	nop
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80043aa:	b580      	push	{r7, lr}
 80043ac:	b084      	sub	sp, #16
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80043b8:	68f8      	ldr	r0, [r7, #12]
 80043ba:	f7ff fe13 	bl	8003fe4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80043be:	bf00      	nop
 80043c0:	3710      	adds	r7, #16
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b084      	sub	sp, #16
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e4:	f043 0204 	orr.w	r2, r3, #4
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80043ec:	68f8      	ldr	r0, [r7, #12]
 80043ee:	f7ff fe02 	bl	8003ff6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80043f2:	bf00      	nop
 80043f4:	3710      	adds	r7, #16
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
	...

080043fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f003 0307 	and.w	r3, r3, #7
 800440a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800440c:	4b0c      	ldr	r3, [pc, #48]	; (8004440 <__NVIC_SetPriorityGrouping+0x44>)
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004412:	68ba      	ldr	r2, [r7, #8]
 8004414:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004418:	4013      	ands	r3, r2
 800441a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004424:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800442c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800442e:	4a04      	ldr	r2, [pc, #16]	; (8004440 <__NVIC_SetPriorityGrouping+0x44>)
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	60d3      	str	r3, [r2, #12]
}
 8004434:	bf00      	nop
 8004436:	3714      	adds	r7, #20
 8004438:	46bd      	mov	sp, r7
 800443a:	bc80      	pop	{r7}
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	e000ed00 	.word	0xe000ed00

08004444 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004444:	b480      	push	{r7}
 8004446:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004448:	4b04      	ldr	r3, [pc, #16]	; (800445c <__NVIC_GetPriorityGrouping+0x18>)
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	0a1b      	lsrs	r3, r3, #8
 800444e:	f003 0307 	and.w	r3, r3, #7
}
 8004452:	4618      	mov	r0, r3
 8004454:	46bd      	mov	sp, r7
 8004456:	bc80      	pop	{r7}
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	e000ed00 	.word	0xe000ed00

08004460 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	4603      	mov	r3, r0
 8004468:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800446a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800446e:	2b00      	cmp	r3, #0
 8004470:	db0b      	blt.n	800448a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004472:	79fb      	ldrb	r3, [r7, #7]
 8004474:	f003 021f 	and.w	r2, r3, #31
 8004478:	4906      	ldr	r1, [pc, #24]	; (8004494 <__NVIC_EnableIRQ+0x34>)
 800447a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800447e:	095b      	lsrs	r3, r3, #5
 8004480:	2001      	movs	r0, #1
 8004482:	fa00 f202 	lsl.w	r2, r0, r2
 8004486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800448a:	bf00      	nop
 800448c:	370c      	adds	r7, #12
 800448e:	46bd      	mov	sp, r7
 8004490:	bc80      	pop	{r7}
 8004492:	4770      	bx	lr
 8004494:	e000e100 	.word	0xe000e100

08004498 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	4603      	mov	r3, r0
 80044a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	db12      	blt.n	80044d0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044aa:	79fb      	ldrb	r3, [r7, #7]
 80044ac:	f003 021f 	and.w	r2, r3, #31
 80044b0:	490a      	ldr	r1, [pc, #40]	; (80044dc <__NVIC_DisableIRQ+0x44>)
 80044b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044b6:	095b      	lsrs	r3, r3, #5
 80044b8:	2001      	movs	r0, #1
 80044ba:	fa00 f202 	lsl.w	r2, r0, r2
 80044be:	3320      	adds	r3, #32
 80044c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80044c4:	f3bf 8f4f 	dsb	sy
}
 80044c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80044ca:	f3bf 8f6f 	isb	sy
}
 80044ce:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bc80      	pop	{r7}
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	e000e100 	.word	0xe000e100

080044e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	4603      	mov	r3, r0
 80044e8:	6039      	str	r1, [r7, #0]
 80044ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	db0a      	blt.n	800450a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	b2da      	uxtb	r2, r3
 80044f8:	490c      	ldr	r1, [pc, #48]	; (800452c <__NVIC_SetPriority+0x4c>)
 80044fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044fe:	0112      	lsls	r2, r2, #4
 8004500:	b2d2      	uxtb	r2, r2
 8004502:	440b      	add	r3, r1
 8004504:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004508:	e00a      	b.n	8004520 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	b2da      	uxtb	r2, r3
 800450e:	4908      	ldr	r1, [pc, #32]	; (8004530 <__NVIC_SetPriority+0x50>)
 8004510:	79fb      	ldrb	r3, [r7, #7]
 8004512:	f003 030f 	and.w	r3, r3, #15
 8004516:	3b04      	subs	r3, #4
 8004518:	0112      	lsls	r2, r2, #4
 800451a:	b2d2      	uxtb	r2, r2
 800451c:	440b      	add	r3, r1
 800451e:	761a      	strb	r2, [r3, #24]
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	bc80      	pop	{r7}
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	e000e100 	.word	0xe000e100
 8004530:	e000ed00 	.word	0xe000ed00

08004534 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004534:	b480      	push	{r7}
 8004536:	b089      	sub	sp, #36	; 0x24
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f003 0307 	and.w	r3, r3, #7
 8004546:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	f1c3 0307 	rsb	r3, r3, #7
 800454e:	2b04      	cmp	r3, #4
 8004550:	bf28      	it	cs
 8004552:	2304      	movcs	r3, #4
 8004554:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	3304      	adds	r3, #4
 800455a:	2b06      	cmp	r3, #6
 800455c:	d902      	bls.n	8004564 <NVIC_EncodePriority+0x30>
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	3b03      	subs	r3, #3
 8004562:	e000      	b.n	8004566 <NVIC_EncodePriority+0x32>
 8004564:	2300      	movs	r3, #0
 8004566:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004568:	f04f 32ff 	mov.w	r2, #4294967295
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	fa02 f303 	lsl.w	r3, r2, r3
 8004572:	43da      	mvns	r2, r3
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	401a      	ands	r2, r3
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800457c:	f04f 31ff 	mov.w	r1, #4294967295
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	fa01 f303 	lsl.w	r3, r1, r3
 8004586:	43d9      	mvns	r1, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800458c:	4313      	orrs	r3, r2
         );
}
 800458e:	4618      	mov	r0, r3
 8004590:	3724      	adds	r7, #36	; 0x24
 8004592:	46bd      	mov	sp, r7
 8004594:	bc80      	pop	{r7}
 8004596:	4770      	bx	lr

08004598 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004598:	b480      	push	{r7}
 800459a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800459c:	f3bf 8f4f 	dsb	sy
}
 80045a0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80045a2:	4b06      	ldr	r3, [pc, #24]	; (80045bc <__NVIC_SystemReset+0x24>)
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80045aa:	4904      	ldr	r1, [pc, #16]	; (80045bc <__NVIC_SystemReset+0x24>)
 80045ac:	4b04      	ldr	r3, [pc, #16]	; (80045c0 <__NVIC_SystemReset+0x28>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80045b2:	f3bf 8f4f 	dsb	sy
}
 80045b6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80045b8:	bf00      	nop
 80045ba:	e7fd      	b.n	80045b8 <__NVIC_SystemReset+0x20>
 80045bc:	e000ed00 	.word	0xe000ed00
 80045c0:	05fa0004 	.word	0x05fa0004

080045c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	3b01      	subs	r3, #1
 80045d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045d4:	d301      	bcc.n	80045da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045d6:	2301      	movs	r3, #1
 80045d8:	e00f      	b.n	80045fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045da:	4a0a      	ldr	r2, [pc, #40]	; (8004604 <SysTick_Config+0x40>)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	3b01      	subs	r3, #1
 80045e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045e2:	210f      	movs	r1, #15
 80045e4:	f04f 30ff 	mov.w	r0, #4294967295
 80045e8:	f7ff ff7a 	bl	80044e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045ec:	4b05      	ldr	r3, [pc, #20]	; (8004604 <SysTick_Config+0x40>)
 80045ee:	2200      	movs	r2, #0
 80045f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045f2:	4b04      	ldr	r3, [pc, #16]	; (8004604 <SysTick_Config+0x40>)
 80045f4:	2207      	movs	r2, #7
 80045f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3708      	adds	r7, #8
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	e000e010 	.word	0xe000e010

08004608 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f7ff fef3 	bl	80043fc <__NVIC_SetPriorityGrouping>
}
 8004616:	bf00      	nop
 8004618:	3708      	adds	r7, #8
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}

0800461e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800461e:	b580      	push	{r7, lr}
 8004620:	b086      	sub	sp, #24
 8004622:	af00      	add	r7, sp, #0
 8004624:	4603      	mov	r3, r0
 8004626:	60b9      	str	r1, [r7, #8]
 8004628:	607a      	str	r2, [r7, #4]
 800462a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800462c:	2300      	movs	r3, #0
 800462e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004630:	f7ff ff08 	bl	8004444 <__NVIC_GetPriorityGrouping>
 8004634:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	68b9      	ldr	r1, [r7, #8]
 800463a:	6978      	ldr	r0, [r7, #20]
 800463c:	f7ff ff7a 	bl	8004534 <NVIC_EncodePriority>
 8004640:	4602      	mov	r2, r0
 8004642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004646:	4611      	mov	r1, r2
 8004648:	4618      	mov	r0, r3
 800464a:	f7ff ff49 	bl	80044e0 <__NVIC_SetPriority>
}
 800464e:	bf00      	nop
 8004650:	3718      	adds	r7, #24
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b082      	sub	sp, #8
 800465a:	af00      	add	r7, sp, #0
 800465c:	4603      	mov	r3, r0
 800465e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004664:	4618      	mov	r0, r3
 8004666:	f7ff fefb 	bl	8004460 <__NVIC_EnableIRQ>
}
 800466a:	bf00      	nop
 800466c:	3708      	adds	r7, #8
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004672:	b580      	push	{r7, lr}
 8004674:	b082      	sub	sp, #8
 8004676:	af00      	add	r7, sp, #0
 8004678:	4603      	mov	r3, r0
 800467a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800467c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004680:	4618      	mov	r0, r3
 8004682:	f7ff ff09 	bl	8004498 <__NVIC_DisableIRQ>
}
 8004686:	bf00      	nop
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004692:	f7ff ff81 	bl	8004598 <__NVIC_SystemReset>

08004696 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b082      	sub	sp, #8
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f7ff ff90 	bl	80045c4 <SysTick_Config>
 80046a4:	4603      	mov	r3, r0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3708      	adds	r7, #8
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
	...

080046b0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b085      	sub	sp, #20
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80046b8:	2300      	movs	r3, #0
 80046ba:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e043      	b.n	800474e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	461a      	mov	r2, r3
 80046cc:	4b22      	ldr	r3, [pc, #136]	; (8004758 <HAL_DMA_Init+0xa8>)
 80046ce:	4413      	add	r3, r2
 80046d0:	4a22      	ldr	r2, [pc, #136]	; (800475c <HAL_DMA_Init+0xac>)
 80046d2:	fba2 2303 	umull	r2, r3, r2, r3
 80046d6:	091b      	lsrs	r3, r3, #4
 80046d8:	009a      	lsls	r2, r3, #2
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a1f      	ldr	r2, [pc, #124]	; (8004760 <HAL_DMA_Init+0xb0>)
 80046e2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2202      	movs	r2, #2
 80046e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80046fa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80046fe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004708:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004714:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004720:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	69db      	ldr	r3, [r3, #28]
 8004726:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	4313      	orrs	r3, r2
 800472c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3714      	adds	r7, #20
 8004752:	46bd      	mov	sp, r7
 8004754:	bc80      	pop	{r7}
 8004756:	4770      	bx	lr
 8004758:	bffdfff8 	.word	0xbffdfff8
 800475c:	cccccccd 	.word	0xcccccccd
 8004760:	40020000 	.word	0x40020000

08004764 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b086      	sub	sp, #24
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]
 8004770:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004772:	2300      	movs	r3, #0
 8004774:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f893 3020 	ldrb.w	r3, [r3, #32]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d101      	bne.n	8004784 <HAL_DMA_Start_IT+0x20>
 8004780:	2302      	movs	r3, #2
 8004782:	e04a      	b.n	800481a <HAL_DMA_Start_IT+0xb6>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004792:	2b01      	cmp	r3, #1
 8004794:	d13a      	bne.n	800480c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2202      	movs	r2, #2
 800479a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f022 0201 	bic.w	r2, r2, #1
 80047b2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	68b9      	ldr	r1, [r7, #8]
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f000 f9e8 	bl	8004b90 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d008      	beq.n	80047da <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f042 020e 	orr.w	r2, r2, #14
 80047d6:	601a      	str	r2, [r3, #0]
 80047d8:	e00f      	b.n	80047fa <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f022 0204 	bic.w	r2, r2, #4
 80047e8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f042 020a 	orr.w	r2, r2, #10
 80047f8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f042 0201 	orr.w	r2, r2, #1
 8004808:	601a      	str	r2, [r3, #0]
 800480a:	e005      	b.n	8004818 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004814:	2302      	movs	r3, #2
 8004816:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004818:	7dfb      	ldrb	r3, [r7, #23]
}
 800481a:	4618      	mov	r0, r3
 800481c:	3718      	adds	r7, #24
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004822:	b480      	push	{r7}
 8004824:	b085      	sub	sp, #20
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800482a:	2300      	movs	r3, #0
 800482c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004834:	2b02      	cmp	r3, #2
 8004836:	d008      	beq.n	800484a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2204      	movs	r2, #4
 800483c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e020      	b.n	800488c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f022 020e 	bic.w	r2, r2, #14
 8004858:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f022 0201 	bic.w	r2, r2, #1
 8004868:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004872:	2101      	movs	r1, #1
 8004874:	fa01 f202 	lsl.w	r2, r1, r2
 8004878:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800488a:	7bfb      	ldrb	r3, [r7, #15]
}
 800488c:	4618      	mov	r0, r3
 800488e:	3714      	adds	r7, #20
 8004890:	46bd      	mov	sp, r7
 8004892:	bc80      	pop	{r7}
 8004894:	4770      	bx	lr
	...

08004898 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048a0:	2300      	movs	r3, #0
 80048a2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d005      	beq.n	80048ba <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2204      	movs	r2, #4
 80048b2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	73fb      	strb	r3, [r7, #15]
 80048b8:	e051      	b.n	800495e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f022 020e 	bic.w	r2, r2, #14
 80048c8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f022 0201 	bic.w	r2, r2, #1
 80048d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a22      	ldr	r2, [pc, #136]	; (8004968 <HAL_DMA_Abort_IT+0xd0>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d029      	beq.n	8004938 <HAL_DMA_Abort_IT+0xa0>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a20      	ldr	r2, [pc, #128]	; (800496c <HAL_DMA_Abort_IT+0xd4>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d022      	beq.n	8004934 <HAL_DMA_Abort_IT+0x9c>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a1f      	ldr	r2, [pc, #124]	; (8004970 <HAL_DMA_Abort_IT+0xd8>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d01a      	beq.n	800492e <HAL_DMA_Abort_IT+0x96>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a1d      	ldr	r2, [pc, #116]	; (8004974 <HAL_DMA_Abort_IT+0xdc>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d012      	beq.n	8004928 <HAL_DMA_Abort_IT+0x90>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a1c      	ldr	r2, [pc, #112]	; (8004978 <HAL_DMA_Abort_IT+0xe0>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d00a      	beq.n	8004922 <HAL_DMA_Abort_IT+0x8a>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a1a      	ldr	r2, [pc, #104]	; (800497c <HAL_DMA_Abort_IT+0xe4>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d102      	bne.n	800491c <HAL_DMA_Abort_IT+0x84>
 8004916:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800491a:	e00e      	b.n	800493a <HAL_DMA_Abort_IT+0xa2>
 800491c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004920:	e00b      	b.n	800493a <HAL_DMA_Abort_IT+0xa2>
 8004922:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004926:	e008      	b.n	800493a <HAL_DMA_Abort_IT+0xa2>
 8004928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800492c:	e005      	b.n	800493a <HAL_DMA_Abort_IT+0xa2>
 800492e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004932:	e002      	b.n	800493a <HAL_DMA_Abort_IT+0xa2>
 8004934:	2310      	movs	r3, #16
 8004936:	e000      	b.n	800493a <HAL_DMA_Abort_IT+0xa2>
 8004938:	2301      	movs	r3, #1
 800493a:	4a11      	ldr	r2, [pc, #68]	; (8004980 <HAL_DMA_Abort_IT+0xe8>)
 800493c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2201      	movs	r2, #1
 8004942:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004952:	2b00      	cmp	r3, #0
 8004954:	d003      	beq.n	800495e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	4798      	blx	r3
    } 
  }
  return status;
 800495e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004960:	4618      	mov	r0, r3
 8004962:	3710      	adds	r7, #16
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	40020008 	.word	0x40020008
 800496c:	4002001c 	.word	0x4002001c
 8004970:	40020030 	.word	0x40020030
 8004974:	40020044 	.word	0x40020044
 8004978:	40020058 	.word	0x40020058
 800497c:	4002006c 	.word	0x4002006c
 8004980:	40020000 	.word	0x40020000

08004984 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a0:	2204      	movs	r2, #4
 80049a2:	409a      	lsls	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	4013      	ands	r3, r2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d04f      	beq.n	8004a4c <HAL_DMA_IRQHandler+0xc8>
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	f003 0304 	and.w	r3, r3, #4
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d04a      	beq.n	8004a4c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0320 	and.w	r3, r3, #32
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d107      	bne.n	80049d4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f022 0204 	bic.w	r2, r2, #4
 80049d2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a66      	ldr	r2, [pc, #408]	; (8004b74 <HAL_DMA_IRQHandler+0x1f0>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d029      	beq.n	8004a32 <HAL_DMA_IRQHandler+0xae>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a65      	ldr	r2, [pc, #404]	; (8004b78 <HAL_DMA_IRQHandler+0x1f4>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d022      	beq.n	8004a2e <HAL_DMA_IRQHandler+0xaa>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a63      	ldr	r2, [pc, #396]	; (8004b7c <HAL_DMA_IRQHandler+0x1f8>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d01a      	beq.n	8004a28 <HAL_DMA_IRQHandler+0xa4>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a62      	ldr	r2, [pc, #392]	; (8004b80 <HAL_DMA_IRQHandler+0x1fc>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d012      	beq.n	8004a22 <HAL_DMA_IRQHandler+0x9e>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a60      	ldr	r2, [pc, #384]	; (8004b84 <HAL_DMA_IRQHandler+0x200>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d00a      	beq.n	8004a1c <HAL_DMA_IRQHandler+0x98>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a5f      	ldr	r2, [pc, #380]	; (8004b88 <HAL_DMA_IRQHandler+0x204>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d102      	bne.n	8004a16 <HAL_DMA_IRQHandler+0x92>
 8004a10:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004a14:	e00e      	b.n	8004a34 <HAL_DMA_IRQHandler+0xb0>
 8004a16:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004a1a:	e00b      	b.n	8004a34 <HAL_DMA_IRQHandler+0xb0>
 8004a1c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004a20:	e008      	b.n	8004a34 <HAL_DMA_IRQHandler+0xb0>
 8004a22:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004a26:	e005      	b.n	8004a34 <HAL_DMA_IRQHandler+0xb0>
 8004a28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a2c:	e002      	b.n	8004a34 <HAL_DMA_IRQHandler+0xb0>
 8004a2e:	2340      	movs	r3, #64	; 0x40
 8004a30:	e000      	b.n	8004a34 <HAL_DMA_IRQHandler+0xb0>
 8004a32:	2304      	movs	r3, #4
 8004a34:	4a55      	ldr	r2, [pc, #340]	; (8004b8c <HAL_DMA_IRQHandler+0x208>)
 8004a36:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f000 8094 	beq.w	8004b6a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004a4a:	e08e      	b.n	8004b6a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a50:	2202      	movs	r2, #2
 8004a52:	409a      	lsls	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	4013      	ands	r3, r2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d056      	beq.n	8004b0a <HAL_DMA_IRQHandler+0x186>
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	f003 0302 	and.w	r3, r3, #2
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d051      	beq.n	8004b0a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0320 	and.w	r3, r3, #32
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d10b      	bne.n	8004a8c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f022 020a 	bic.w	r2, r2, #10
 8004a82:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a38      	ldr	r2, [pc, #224]	; (8004b74 <HAL_DMA_IRQHandler+0x1f0>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d029      	beq.n	8004aea <HAL_DMA_IRQHandler+0x166>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a37      	ldr	r2, [pc, #220]	; (8004b78 <HAL_DMA_IRQHandler+0x1f4>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d022      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0x162>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a35      	ldr	r2, [pc, #212]	; (8004b7c <HAL_DMA_IRQHandler+0x1f8>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d01a      	beq.n	8004ae0 <HAL_DMA_IRQHandler+0x15c>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a34      	ldr	r2, [pc, #208]	; (8004b80 <HAL_DMA_IRQHandler+0x1fc>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d012      	beq.n	8004ada <HAL_DMA_IRQHandler+0x156>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a32      	ldr	r2, [pc, #200]	; (8004b84 <HAL_DMA_IRQHandler+0x200>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d00a      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0x150>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a31      	ldr	r2, [pc, #196]	; (8004b88 <HAL_DMA_IRQHandler+0x204>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d102      	bne.n	8004ace <HAL_DMA_IRQHandler+0x14a>
 8004ac8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004acc:	e00e      	b.n	8004aec <HAL_DMA_IRQHandler+0x168>
 8004ace:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ad2:	e00b      	b.n	8004aec <HAL_DMA_IRQHandler+0x168>
 8004ad4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ad8:	e008      	b.n	8004aec <HAL_DMA_IRQHandler+0x168>
 8004ada:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ade:	e005      	b.n	8004aec <HAL_DMA_IRQHandler+0x168>
 8004ae0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ae4:	e002      	b.n	8004aec <HAL_DMA_IRQHandler+0x168>
 8004ae6:	2320      	movs	r3, #32
 8004ae8:	e000      	b.n	8004aec <HAL_DMA_IRQHandler+0x168>
 8004aea:	2302      	movs	r3, #2
 8004aec:	4a27      	ldr	r2, [pc, #156]	; (8004b8c <HAL_DMA_IRQHandler+0x208>)
 8004aee:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d034      	beq.n	8004b6a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004b08:	e02f      	b.n	8004b6a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0e:	2208      	movs	r2, #8
 8004b10:	409a      	lsls	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	4013      	ands	r3, r2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d028      	beq.n	8004b6c <HAL_DMA_IRQHandler+0x1e8>
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	f003 0308 	and.w	r3, r3, #8
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d023      	beq.n	8004b6c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f022 020e 	bic.w	r2, r2, #14
 8004b32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b3c:	2101      	movs	r1, #1
 8004b3e:	fa01 f202 	lsl.w	r2, r1, r2
 8004b42:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d004      	beq.n	8004b6c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	4798      	blx	r3
    }
  }
  return;
 8004b6a:	bf00      	nop
 8004b6c:	bf00      	nop
}
 8004b6e:	3710      	adds	r7, #16
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	40020008 	.word	0x40020008
 8004b78:	4002001c 	.word	0x4002001c
 8004b7c:	40020030 	.word	0x40020030
 8004b80:	40020044 	.word	0x40020044
 8004b84:	40020058 	.word	0x40020058
 8004b88:	4002006c 	.word	0x4002006c
 8004b8c:	40020000 	.word	0x40020000

08004b90 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
 8004b9c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba6:	2101      	movs	r1, #1
 8004ba8:	fa01 f202 	lsl.w	r2, r1, r2
 8004bac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	2b10      	cmp	r3, #16
 8004bbc:	d108      	bne.n	8004bd0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68ba      	ldr	r2, [r7, #8]
 8004bcc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004bce:	e007      	b.n	8004be0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68ba      	ldr	r2, [r7, #8]
 8004bd6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	60da      	str	r2, [r3, #12]
}
 8004be0:	bf00      	nop
 8004be2:	3714      	adds	r7, #20
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bc80      	pop	{r7}
 8004be8:	4770      	bx	lr
	...

08004bec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b08b      	sub	sp, #44	; 0x2c
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004bfe:	e169      	b.n	8004ed4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004c00:	2201      	movs	r2, #1
 8004c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c04:	fa02 f303 	lsl.w	r3, r2, r3
 8004c08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	69fa      	ldr	r2, [r7, #28]
 8004c10:	4013      	ands	r3, r2
 8004c12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004c14:	69ba      	ldr	r2, [r7, #24]
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	f040 8158 	bne.w	8004ece <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	4a9a      	ldr	r2, [pc, #616]	; (8004e8c <HAL_GPIO_Init+0x2a0>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d05e      	beq.n	8004ce6 <HAL_GPIO_Init+0xfa>
 8004c28:	4a98      	ldr	r2, [pc, #608]	; (8004e8c <HAL_GPIO_Init+0x2a0>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d875      	bhi.n	8004d1a <HAL_GPIO_Init+0x12e>
 8004c2e:	4a98      	ldr	r2, [pc, #608]	; (8004e90 <HAL_GPIO_Init+0x2a4>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d058      	beq.n	8004ce6 <HAL_GPIO_Init+0xfa>
 8004c34:	4a96      	ldr	r2, [pc, #600]	; (8004e90 <HAL_GPIO_Init+0x2a4>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d86f      	bhi.n	8004d1a <HAL_GPIO_Init+0x12e>
 8004c3a:	4a96      	ldr	r2, [pc, #600]	; (8004e94 <HAL_GPIO_Init+0x2a8>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d052      	beq.n	8004ce6 <HAL_GPIO_Init+0xfa>
 8004c40:	4a94      	ldr	r2, [pc, #592]	; (8004e94 <HAL_GPIO_Init+0x2a8>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d869      	bhi.n	8004d1a <HAL_GPIO_Init+0x12e>
 8004c46:	4a94      	ldr	r2, [pc, #592]	; (8004e98 <HAL_GPIO_Init+0x2ac>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d04c      	beq.n	8004ce6 <HAL_GPIO_Init+0xfa>
 8004c4c:	4a92      	ldr	r2, [pc, #584]	; (8004e98 <HAL_GPIO_Init+0x2ac>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d863      	bhi.n	8004d1a <HAL_GPIO_Init+0x12e>
 8004c52:	4a92      	ldr	r2, [pc, #584]	; (8004e9c <HAL_GPIO_Init+0x2b0>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d046      	beq.n	8004ce6 <HAL_GPIO_Init+0xfa>
 8004c58:	4a90      	ldr	r2, [pc, #576]	; (8004e9c <HAL_GPIO_Init+0x2b0>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d85d      	bhi.n	8004d1a <HAL_GPIO_Init+0x12e>
 8004c5e:	2b12      	cmp	r3, #18
 8004c60:	d82a      	bhi.n	8004cb8 <HAL_GPIO_Init+0xcc>
 8004c62:	2b12      	cmp	r3, #18
 8004c64:	d859      	bhi.n	8004d1a <HAL_GPIO_Init+0x12e>
 8004c66:	a201      	add	r2, pc, #4	; (adr r2, 8004c6c <HAL_GPIO_Init+0x80>)
 8004c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c6c:	08004ce7 	.word	0x08004ce7
 8004c70:	08004cc1 	.word	0x08004cc1
 8004c74:	08004cd3 	.word	0x08004cd3
 8004c78:	08004d15 	.word	0x08004d15
 8004c7c:	08004d1b 	.word	0x08004d1b
 8004c80:	08004d1b 	.word	0x08004d1b
 8004c84:	08004d1b 	.word	0x08004d1b
 8004c88:	08004d1b 	.word	0x08004d1b
 8004c8c:	08004d1b 	.word	0x08004d1b
 8004c90:	08004d1b 	.word	0x08004d1b
 8004c94:	08004d1b 	.word	0x08004d1b
 8004c98:	08004d1b 	.word	0x08004d1b
 8004c9c:	08004d1b 	.word	0x08004d1b
 8004ca0:	08004d1b 	.word	0x08004d1b
 8004ca4:	08004d1b 	.word	0x08004d1b
 8004ca8:	08004d1b 	.word	0x08004d1b
 8004cac:	08004d1b 	.word	0x08004d1b
 8004cb0:	08004cc9 	.word	0x08004cc9
 8004cb4:	08004cdd 	.word	0x08004cdd
 8004cb8:	4a79      	ldr	r2, [pc, #484]	; (8004ea0 <HAL_GPIO_Init+0x2b4>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d013      	beq.n	8004ce6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004cbe:	e02c      	b.n	8004d1a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	623b      	str	r3, [r7, #32]
          break;
 8004cc6:	e029      	b.n	8004d1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	3304      	adds	r3, #4
 8004cce:	623b      	str	r3, [r7, #32]
          break;
 8004cd0:	e024      	b.n	8004d1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	3308      	adds	r3, #8
 8004cd8:	623b      	str	r3, [r7, #32]
          break;
 8004cda:	e01f      	b.n	8004d1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	330c      	adds	r3, #12
 8004ce2:	623b      	str	r3, [r7, #32]
          break;
 8004ce4:	e01a      	b.n	8004d1c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d102      	bne.n	8004cf4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004cee:	2304      	movs	r3, #4
 8004cf0:	623b      	str	r3, [r7, #32]
          break;
 8004cf2:	e013      	b.n	8004d1c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d105      	bne.n	8004d08 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004cfc:	2308      	movs	r3, #8
 8004cfe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	69fa      	ldr	r2, [r7, #28]
 8004d04:	611a      	str	r2, [r3, #16]
          break;
 8004d06:	e009      	b.n	8004d1c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004d08:	2308      	movs	r3, #8
 8004d0a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	69fa      	ldr	r2, [r7, #28]
 8004d10:	615a      	str	r2, [r3, #20]
          break;
 8004d12:	e003      	b.n	8004d1c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004d14:	2300      	movs	r3, #0
 8004d16:	623b      	str	r3, [r7, #32]
          break;
 8004d18:	e000      	b.n	8004d1c <HAL_GPIO_Init+0x130>
          break;
 8004d1a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	2bff      	cmp	r3, #255	; 0xff
 8004d20:	d801      	bhi.n	8004d26 <HAL_GPIO_Init+0x13a>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	e001      	b.n	8004d2a <HAL_GPIO_Init+0x13e>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	3304      	adds	r3, #4
 8004d2a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	2bff      	cmp	r3, #255	; 0xff
 8004d30:	d802      	bhi.n	8004d38 <HAL_GPIO_Init+0x14c>
 8004d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	e002      	b.n	8004d3e <HAL_GPIO_Init+0x152>
 8004d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3a:	3b08      	subs	r3, #8
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	210f      	movs	r1, #15
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	fa01 f303 	lsl.w	r3, r1, r3
 8004d4c:	43db      	mvns	r3, r3
 8004d4e:	401a      	ands	r2, r3
 8004d50:	6a39      	ldr	r1, [r7, #32]
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	fa01 f303 	lsl.w	r3, r1, r3
 8004d58:	431a      	orrs	r2, r3
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	f000 80b1 	beq.w	8004ece <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004d6c:	4b4d      	ldr	r3, [pc, #308]	; (8004ea4 <HAL_GPIO_Init+0x2b8>)
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	4a4c      	ldr	r2, [pc, #304]	; (8004ea4 <HAL_GPIO_Init+0x2b8>)
 8004d72:	f043 0301 	orr.w	r3, r3, #1
 8004d76:	6193      	str	r3, [r2, #24]
 8004d78:	4b4a      	ldr	r3, [pc, #296]	; (8004ea4 <HAL_GPIO_Init+0x2b8>)
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	f003 0301 	and.w	r3, r3, #1
 8004d80:	60bb      	str	r3, [r7, #8]
 8004d82:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004d84:	4a48      	ldr	r2, [pc, #288]	; (8004ea8 <HAL_GPIO_Init+0x2bc>)
 8004d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d88:	089b      	lsrs	r3, r3, #2
 8004d8a:	3302      	adds	r3, #2
 8004d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d90:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d94:	f003 0303 	and.w	r3, r3, #3
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	220f      	movs	r2, #15
 8004d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004da0:	43db      	mvns	r3, r3
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	4013      	ands	r3, r2
 8004da6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4a40      	ldr	r2, [pc, #256]	; (8004eac <HAL_GPIO_Init+0x2c0>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d013      	beq.n	8004dd8 <HAL_GPIO_Init+0x1ec>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a3f      	ldr	r2, [pc, #252]	; (8004eb0 <HAL_GPIO_Init+0x2c4>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d00d      	beq.n	8004dd4 <HAL_GPIO_Init+0x1e8>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a3e      	ldr	r2, [pc, #248]	; (8004eb4 <HAL_GPIO_Init+0x2c8>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d007      	beq.n	8004dd0 <HAL_GPIO_Init+0x1e4>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a3d      	ldr	r2, [pc, #244]	; (8004eb8 <HAL_GPIO_Init+0x2cc>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d101      	bne.n	8004dcc <HAL_GPIO_Init+0x1e0>
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e006      	b.n	8004dda <HAL_GPIO_Init+0x1ee>
 8004dcc:	2304      	movs	r3, #4
 8004dce:	e004      	b.n	8004dda <HAL_GPIO_Init+0x1ee>
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	e002      	b.n	8004dda <HAL_GPIO_Init+0x1ee>
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e000      	b.n	8004dda <HAL_GPIO_Init+0x1ee>
 8004dd8:	2300      	movs	r3, #0
 8004dda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ddc:	f002 0203 	and.w	r2, r2, #3
 8004de0:	0092      	lsls	r2, r2, #2
 8004de2:	4093      	lsls	r3, r2
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004dea:	492f      	ldr	r1, [pc, #188]	; (8004ea8 <HAL_GPIO_Init+0x2bc>)
 8004dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dee:	089b      	lsrs	r3, r3, #2
 8004df0:	3302      	adds	r3, #2
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d006      	beq.n	8004e12 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004e04:	4b2d      	ldr	r3, [pc, #180]	; (8004ebc <HAL_GPIO_Init+0x2d0>)
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	492c      	ldr	r1, [pc, #176]	; (8004ebc <HAL_GPIO_Init+0x2d0>)
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	600b      	str	r3, [r1, #0]
 8004e10:	e006      	b.n	8004e20 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004e12:	4b2a      	ldr	r3, [pc, #168]	; (8004ebc <HAL_GPIO_Init+0x2d0>)
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	43db      	mvns	r3, r3
 8004e1a:	4928      	ldr	r1, [pc, #160]	; (8004ebc <HAL_GPIO_Init+0x2d0>)
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d006      	beq.n	8004e3a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004e2c:	4b23      	ldr	r3, [pc, #140]	; (8004ebc <HAL_GPIO_Init+0x2d0>)
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	4922      	ldr	r1, [pc, #136]	; (8004ebc <HAL_GPIO_Init+0x2d0>)
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	604b      	str	r3, [r1, #4]
 8004e38:	e006      	b.n	8004e48 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004e3a:	4b20      	ldr	r3, [pc, #128]	; (8004ebc <HAL_GPIO_Init+0x2d0>)
 8004e3c:	685a      	ldr	r2, [r3, #4]
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	43db      	mvns	r3, r3
 8004e42:	491e      	ldr	r1, [pc, #120]	; (8004ebc <HAL_GPIO_Init+0x2d0>)
 8004e44:	4013      	ands	r3, r2
 8004e46:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d006      	beq.n	8004e62 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004e54:	4b19      	ldr	r3, [pc, #100]	; (8004ebc <HAL_GPIO_Init+0x2d0>)
 8004e56:	689a      	ldr	r2, [r3, #8]
 8004e58:	4918      	ldr	r1, [pc, #96]	; (8004ebc <HAL_GPIO_Init+0x2d0>)
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	608b      	str	r3, [r1, #8]
 8004e60:	e006      	b.n	8004e70 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004e62:	4b16      	ldr	r3, [pc, #88]	; (8004ebc <HAL_GPIO_Init+0x2d0>)
 8004e64:	689a      	ldr	r2, [r3, #8]
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	43db      	mvns	r3, r3
 8004e6a:	4914      	ldr	r1, [pc, #80]	; (8004ebc <HAL_GPIO_Init+0x2d0>)
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d021      	beq.n	8004ec0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004e7c:	4b0f      	ldr	r3, [pc, #60]	; (8004ebc <HAL_GPIO_Init+0x2d0>)
 8004e7e:	68da      	ldr	r2, [r3, #12]
 8004e80:	490e      	ldr	r1, [pc, #56]	; (8004ebc <HAL_GPIO_Init+0x2d0>)
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	60cb      	str	r3, [r1, #12]
 8004e88:	e021      	b.n	8004ece <HAL_GPIO_Init+0x2e2>
 8004e8a:	bf00      	nop
 8004e8c:	10320000 	.word	0x10320000
 8004e90:	10310000 	.word	0x10310000
 8004e94:	10220000 	.word	0x10220000
 8004e98:	10210000 	.word	0x10210000
 8004e9c:	10120000 	.word	0x10120000
 8004ea0:	10110000 	.word	0x10110000
 8004ea4:	40021000 	.word	0x40021000
 8004ea8:	40010000 	.word	0x40010000
 8004eac:	40010800 	.word	0x40010800
 8004eb0:	40010c00 	.word	0x40010c00
 8004eb4:	40011000 	.word	0x40011000
 8004eb8:	40011400 	.word	0x40011400
 8004ebc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004ec0:	4b0b      	ldr	r3, [pc, #44]	; (8004ef0 <HAL_GPIO_Init+0x304>)
 8004ec2:	68da      	ldr	r2, [r3, #12]
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	43db      	mvns	r3, r3
 8004ec8:	4909      	ldr	r1, [pc, #36]	; (8004ef0 <HAL_GPIO_Init+0x304>)
 8004eca:	4013      	ands	r3, r2
 8004ecc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eda:	fa22 f303 	lsr.w	r3, r2, r3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	f47f ae8e 	bne.w	8004c00 <HAL_GPIO_Init+0x14>
  }
}
 8004ee4:	bf00      	nop
 8004ee6:	bf00      	nop
 8004ee8:	372c      	adds	r7, #44	; 0x2c
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bc80      	pop	{r7}
 8004eee:	4770      	bx	lr
 8004ef0:	40010400 	.word	0x40010400

08004ef4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	460b      	mov	r3, r1
 8004efe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	689a      	ldr	r2, [r3, #8]
 8004f04:	887b      	ldrh	r3, [r7, #2]
 8004f06:	4013      	ands	r3, r2
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d002      	beq.n	8004f12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	73fb      	strb	r3, [r7, #15]
 8004f10:	e001      	b.n	8004f16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004f12:	2300      	movs	r3, #0
 8004f14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3714      	adds	r7, #20
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bc80      	pop	{r7}
 8004f20:	4770      	bx	lr

08004f22 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f22:	b480      	push	{r7}
 8004f24:	b083      	sub	sp, #12
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	807b      	strh	r3, [r7, #2]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f32:	787b      	ldrb	r3, [r7, #1]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d003      	beq.n	8004f40 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f38:	887a      	ldrh	r2, [r7, #2]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004f3e:	e003      	b.n	8004f48 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004f40:	887b      	ldrh	r3, [r7, #2]
 8004f42:	041a      	lsls	r2, r3, #16
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	611a      	str	r2, [r3, #16]
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bc80      	pop	{r7}
 8004f50:	4770      	bx	lr
	...

08004f54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004f5e:	4b08      	ldr	r3, [pc, #32]	; (8004f80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f60:	695a      	ldr	r2, [r3, #20]
 8004f62:	88fb      	ldrh	r3, [r7, #6]
 8004f64:	4013      	ands	r3, r2
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d006      	beq.n	8004f78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004f6a:	4a05      	ldr	r2, [pc, #20]	; (8004f80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f6c:	88fb      	ldrh	r3, [r7, #6]
 8004f6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004f70:	88fb      	ldrh	r3, [r7, #6]
 8004f72:	4618      	mov	r0, r3
 8004f74:	f7fd fa36 	bl	80023e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004f78:	bf00      	nop
 8004f7a:	3708      	adds	r7, #8
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	40010400 	.word	0x40010400

08004f84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d101      	bne.n	8004f96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e12b      	b.n	80051ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d106      	bne.n	8004fb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f7fe fb00 	bl	80035b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2224      	movs	r2, #36	; 0x24
 8004fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f022 0201 	bic.w	r2, r2, #1
 8004fc6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004fd6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004fe6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004fe8:	f001 fd12 	bl	8006a10 <HAL_RCC_GetPCLK1Freq>
 8004fec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	4a81      	ldr	r2, [pc, #516]	; (80051f8 <HAL_I2C_Init+0x274>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d807      	bhi.n	8005008 <HAL_I2C_Init+0x84>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	4a80      	ldr	r2, [pc, #512]	; (80051fc <HAL_I2C_Init+0x278>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	bf94      	ite	ls
 8005000:	2301      	movls	r3, #1
 8005002:	2300      	movhi	r3, #0
 8005004:	b2db      	uxtb	r3, r3
 8005006:	e006      	b.n	8005016 <HAL_I2C_Init+0x92>
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	4a7d      	ldr	r2, [pc, #500]	; (8005200 <HAL_I2C_Init+0x27c>)
 800500c:	4293      	cmp	r3, r2
 800500e:	bf94      	ite	ls
 8005010:	2301      	movls	r3, #1
 8005012:	2300      	movhi	r3, #0
 8005014:	b2db      	uxtb	r3, r3
 8005016:	2b00      	cmp	r3, #0
 8005018:	d001      	beq.n	800501e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e0e7      	b.n	80051ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	4a78      	ldr	r2, [pc, #480]	; (8005204 <HAL_I2C_Init+0x280>)
 8005022:	fba2 2303 	umull	r2, r3, r2, r3
 8005026:	0c9b      	lsrs	r3, r3, #18
 8005028:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68ba      	ldr	r2, [r7, #8]
 800503a:	430a      	orrs	r2, r1
 800503c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	6a1b      	ldr	r3, [r3, #32]
 8005044:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	4a6a      	ldr	r2, [pc, #424]	; (80051f8 <HAL_I2C_Init+0x274>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d802      	bhi.n	8005058 <HAL_I2C_Init+0xd4>
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	3301      	adds	r3, #1
 8005056:	e009      	b.n	800506c <HAL_I2C_Init+0xe8>
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800505e:	fb02 f303 	mul.w	r3, r2, r3
 8005062:	4a69      	ldr	r2, [pc, #420]	; (8005208 <HAL_I2C_Init+0x284>)
 8005064:	fba2 2303 	umull	r2, r3, r2, r3
 8005068:	099b      	lsrs	r3, r3, #6
 800506a:	3301      	adds	r3, #1
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	6812      	ldr	r2, [r2, #0]
 8005070:	430b      	orrs	r3, r1
 8005072:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	69db      	ldr	r3, [r3, #28]
 800507a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800507e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	495c      	ldr	r1, [pc, #368]	; (80051f8 <HAL_I2C_Init+0x274>)
 8005088:	428b      	cmp	r3, r1
 800508a:	d819      	bhi.n	80050c0 <HAL_I2C_Init+0x13c>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	1e59      	subs	r1, r3, #1
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	005b      	lsls	r3, r3, #1
 8005096:	fbb1 f3f3 	udiv	r3, r1, r3
 800509a:	1c59      	adds	r1, r3, #1
 800509c:	f640 73fc 	movw	r3, #4092	; 0xffc
 80050a0:	400b      	ands	r3, r1
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00a      	beq.n	80050bc <HAL_I2C_Init+0x138>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	1e59      	subs	r1, r3, #1
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	005b      	lsls	r3, r3, #1
 80050b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80050b4:	3301      	adds	r3, #1
 80050b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050ba:	e051      	b.n	8005160 <HAL_I2C_Init+0x1dc>
 80050bc:	2304      	movs	r3, #4
 80050be:	e04f      	b.n	8005160 <HAL_I2C_Init+0x1dc>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d111      	bne.n	80050ec <HAL_I2C_Init+0x168>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	1e58      	subs	r0, r3, #1
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6859      	ldr	r1, [r3, #4]
 80050d0:	460b      	mov	r3, r1
 80050d2:	005b      	lsls	r3, r3, #1
 80050d4:	440b      	add	r3, r1
 80050d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80050da:	3301      	adds	r3, #1
 80050dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	bf0c      	ite	eq
 80050e4:	2301      	moveq	r3, #1
 80050e6:	2300      	movne	r3, #0
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	e012      	b.n	8005112 <HAL_I2C_Init+0x18e>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	1e58      	subs	r0, r3, #1
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6859      	ldr	r1, [r3, #4]
 80050f4:	460b      	mov	r3, r1
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	440b      	add	r3, r1
 80050fa:	0099      	lsls	r1, r3, #2
 80050fc:	440b      	add	r3, r1
 80050fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005102:	3301      	adds	r3, #1
 8005104:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005108:	2b00      	cmp	r3, #0
 800510a:	bf0c      	ite	eq
 800510c:	2301      	moveq	r3, #1
 800510e:	2300      	movne	r3, #0
 8005110:	b2db      	uxtb	r3, r3
 8005112:	2b00      	cmp	r3, #0
 8005114:	d001      	beq.n	800511a <HAL_I2C_Init+0x196>
 8005116:	2301      	movs	r3, #1
 8005118:	e022      	b.n	8005160 <HAL_I2C_Init+0x1dc>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d10e      	bne.n	8005140 <HAL_I2C_Init+0x1bc>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	1e58      	subs	r0, r3, #1
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6859      	ldr	r1, [r3, #4]
 800512a:	460b      	mov	r3, r1
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	440b      	add	r3, r1
 8005130:	fbb0 f3f3 	udiv	r3, r0, r3
 8005134:	3301      	adds	r3, #1
 8005136:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800513a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800513e:	e00f      	b.n	8005160 <HAL_I2C_Init+0x1dc>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	1e58      	subs	r0, r3, #1
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6859      	ldr	r1, [r3, #4]
 8005148:	460b      	mov	r3, r1
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	440b      	add	r3, r1
 800514e:	0099      	lsls	r1, r3, #2
 8005150:	440b      	add	r3, r1
 8005152:	fbb0 f3f3 	udiv	r3, r0, r3
 8005156:	3301      	adds	r3, #1
 8005158:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800515c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005160:	6879      	ldr	r1, [r7, #4]
 8005162:	6809      	ldr	r1, [r1, #0]
 8005164:	4313      	orrs	r3, r2
 8005166:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	69da      	ldr	r2, [r3, #28]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	431a      	orrs	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	430a      	orrs	r2, r1
 8005182:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800518e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	6911      	ldr	r1, [r2, #16]
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	68d2      	ldr	r2, [r2, #12]
 800519a:	4311      	orrs	r1, r2
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	6812      	ldr	r2, [r2, #0]
 80051a0:	430b      	orrs	r3, r1
 80051a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	695a      	ldr	r2, [r3, #20]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	431a      	orrs	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	430a      	orrs	r2, r1
 80051be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f042 0201 	orr.w	r2, r2, #1
 80051ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2220      	movs	r2, #32
 80051da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	000186a0 	.word	0x000186a0
 80051fc:	001e847f 	.word	0x001e847f
 8005200:	003d08ff 	.word	0x003d08ff
 8005204:	431bde83 	.word	0x431bde83
 8005208:	10624dd3 	.word	0x10624dd3

0800520c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b088      	sub	sp, #32
 8005210:	af02      	add	r7, sp, #8
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	4608      	mov	r0, r1
 8005216:	4611      	mov	r1, r2
 8005218:	461a      	mov	r2, r3
 800521a:	4603      	mov	r3, r0
 800521c:	817b      	strh	r3, [r7, #10]
 800521e:	460b      	mov	r3, r1
 8005220:	813b      	strh	r3, [r7, #8]
 8005222:	4613      	mov	r3, r2
 8005224:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005226:	f7fe fcdd 	bl	8003be4 <HAL_GetTick>
 800522a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005232:	b2db      	uxtb	r3, r3
 8005234:	2b20      	cmp	r3, #32
 8005236:	f040 80d9 	bne.w	80053ec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	9300      	str	r3, [sp, #0]
 800523e:	2319      	movs	r3, #25
 8005240:	2201      	movs	r2, #1
 8005242:	496d      	ldr	r1, [pc, #436]	; (80053f8 <HAL_I2C_Mem_Write+0x1ec>)
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	f000 fdef 	bl	8005e28 <I2C_WaitOnFlagUntilTimeout>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d001      	beq.n	8005254 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005250:	2302      	movs	r3, #2
 8005252:	e0cc      	b.n	80053ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800525a:	2b01      	cmp	r3, #1
 800525c:	d101      	bne.n	8005262 <HAL_I2C_Mem_Write+0x56>
 800525e:	2302      	movs	r3, #2
 8005260:	e0c5      	b.n	80053ee <HAL_I2C_Mem_Write+0x1e2>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2201      	movs	r2, #1
 8005266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0301 	and.w	r3, r3, #1
 8005274:	2b01      	cmp	r3, #1
 8005276:	d007      	beq.n	8005288 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f042 0201 	orr.w	r2, r2, #1
 8005286:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005296:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2221      	movs	r2, #33	; 0x21
 800529c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2240      	movs	r2, #64	; 0x40
 80052a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2200      	movs	r2, #0
 80052ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6a3a      	ldr	r2, [r7, #32]
 80052b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80052b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052be:	b29a      	uxth	r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	4a4d      	ldr	r2, [pc, #308]	; (80053fc <HAL_I2C_Mem_Write+0x1f0>)
 80052c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80052ca:	88f8      	ldrh	r0, [r7, #6]
 80052cc:	893a      	ldrh	r2, [r7, #8]
 80052ce:	8979      	ldrh	r1, [r7, #10]
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	9301      	str	r3, [sp, #4]
 80052d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d6:	9300      	str	r3, [sp, #0]
 80052d8:	4603      	mov	r3, r0
 80052da:	68f8      	ldr	r0, [r7, #12]
 80052dc:	f000 fc26 	bl	8005b2c <I2C_RequestMemoryWrite>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d052      	beq.n	800538c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e081      	b.n	80053ee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052ee:	68f8      	ldr	r0, [r7, #12]
 80052f0:	f000 fe70 	bl	8005fd4 <I2C_WaitOnTXEFlagUntilTimeout>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00d      	beq.n	8005316 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fe:	2b04      	cmp	r3, #4
 8005300:	d107      	bne.n	8005312 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005310:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e06b      	b.n	80053ee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531a:	781a      	ldrb	r2, [r3, #0]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005326:	1c5a      	adds	r2, r3, #1
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005330:	3b01      	subs	r3, #1
 8005332:	b29a      	uxth	r2, r3
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800533c:	b29b      	uxth	r3, r3
 800533e:	3b01      	subs	r3, #1
 8005340:	b29a      	uxth	r2, r3
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	695b      	ldr	r3, [r3, #20]
 800534c:	f003 0304 	and.w	r3, r3, #4
 8005350:	2b04      	cmp	r3, #4
 8005352:	d11b      	bne.n	800538c <HAL_I2C_Mem_Write+0x180>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005358:	2b00      	cmp	r3, #0
 800535a:	d017      	beq.n	800538c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005360:	781a      	ldrb	r2, [r3, #0]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536c:	1c5a      	adds	r2, r3, #1
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005376:	3b01      	subs	r3, #1
 8005378:	b29a      	uxth	r2, r3
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005382:	b29b      	uxth	r3, r3
 8005384:	3b01      	subs	r3, #1
 8005386:	b29a      	uxth	r2, r3
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005390:	2b00      	cmp	r3, #0
 8005392:	d1aa      	bne.n	80052ea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f000 fe5c 	bl	8006056 <I2C_WaitOnBTFFlagUntilTimeout>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00d      	beq.n	80053c0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a8:	2b04      	cmp	r3, #4
 80053aa:	d107      	bne.n	80053bc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053ba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e016      	b.n	80053ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2220      	movs	r2, #32
 80053d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80053e8:	2300      	movs	r3, #0
 80053ea:	e000      	b.n	80053ee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80053ec:	2302      	movs	r3, #2
  }
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3718      	adds	r7, #24
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	00100002 	.word	0x00100002
 80053fc:	ffff0000 	.word	0xffff0000

08005400 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b08c      	sub	sp, #48	; 0x30
 8005404:	af02      	add	r7, sp, #8
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	4608      	mov	r0, r1
 800540a:	4611      	mov	r1, r2
 800540c:	461a      	mov	r2, r3
 800540e:	4603      	mov	r3, r0
 8005410:	817b      	strh	r3, [r7, #10]
 8005412:	460b      	mov	r3, r1
 8005414:	813b      	strh	r3, [r7, #8]
 8005416:	4613      	mov	r3, r2
 8005418:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800541a:	2300      	movs	r3, #0
 800541c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800541e:	f7fe fbe1 	bl	8003be4 <HAL_GetTick>
 8005422:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800542a:	b2db      	uxtb	r3, r3
 800542c:	2b20      	cmp	r3, #32
 800542e:	f040 8244 	bne.w	80058ba <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005434:	9300      	str	r3, [sp, #0]
 8005436:	2319      	movs	r3, #25
 8005438:	2201      	movs	r2, #1
 800543a:	4982      	ldr	r1, [pc, #520]	; (8005644 <HAL_I2C_Mem_Read+0x244>)
 800543c:	68f8      	ldr	r0, [r7, #12]
 800543e:	f000 fcf3 	bl	8005e28 <I2C_WaitOnFlagUntilTimeout>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d001      	beq.n	800544c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8005448:	2302      	movs	r3, #2
 800544a:	e237      	b.n	80058bc <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005452:	2b01      	cmp	r3, #1
 8005454:	d101      	bne.n	800545a <HAL_I2C_Mem_Read+0x5a>
 8005456:	2302      	movs	r3, #2
 8005458:	e230      	b.n	80058bc <HAL_I2C_Mem_Read+0x4bc>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2201      	movs	r2, #1
 800545e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0301 	and.w	r3, r3, #1
 800546c:	2b01      	cmp	r3, #1
 800546e:	d007      	beq.n	8005480 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f042 0201 	orr.w	r2, r2, #1
 800547e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800548e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2222      	movs	r2, #34	; 0x22
 8005494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2240      	movs	r2, #64	; 0x40
 800549c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80054b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	4a62      	ldr	r2, [pc, #392]	; (8005648 <HAL_I2C_Mem_Read+0x248>)
 80054c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80054c2:	88f8      	ldrh	r0, [r7, #6]
 80054c4:	893a      	ldrh	r2, [r7, #8]
 80054c6:	8979      	ldrh	r1, [r7, #10]
 80054c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ca:	9301      	str	r3, [sp, #4]
 80054cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ce:	9300      	str	r3, [sp, #0]
 80054d0:	4603      	mov	r3, r0
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	f000 fbc0 	bl	8005c58 <I2C_RequestMemoryRead>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d001      	beq.n	80054e2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e1ec      	b.n	80058bc <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d113      	bne.n	8005512 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054ea:	2300      	movs	r3, #0
 80054ec:	61fb      	str	r3, [r7, #28]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	695b      	ldr	r3, [r3, #20]
 80054f4:	61fb      	str	r3, [r7, #28]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	61fb      	str	r3, [r7, #28]
 80054fe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800550e:	601a      	str	r2, [r3, #0]
 8005510:	e1c0      	b.n	8005894 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005516:	2b01      	cmp	r3, #1
 8005518:	d11e      	bne.n	8005558 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005528:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800552a:	b672      	cpsid	i
}
 800552c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800552e:	2300      	movs	r3, #0
 8005530:	61bb      	str	r3, [r7, #24]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	695b      	ldr	r3, [r3, #20]
 8005538:	61bb      	str	r3, [r7, #24]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	61bb      	str	r3, [r7, #24]
 8005542:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005552:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005554:	b662      	cpsie	i
}
 8005556:	e035      	b.n	80055c4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800555c:	2b02      	cmp	r3, #2
 800555e:	d11e      	bne.n	800559e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800556e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005570:	b672      	cpsid	i
}
 8005572:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005574:	2300      	movs	r3, #0
 8005576:	617b      	str	r3, [r7, #20]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	617b      	str	r3, [r7, #20]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	617b      	str	r3, [r7, #20]
 8005588:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005598:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800559a:	b662      	cpsie	i
}
 800559c:	e012      	b.n	80055c4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055ac:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055ae:	2300      	movs	r3, #0
 80055b0:	613b      	str	r3, [r7, #16]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	695b      	ldr	r3, [r3, #20]
 80055b8:	613b      	str	r3, [r7, #16]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	699b      	ldr	r3, [r3, #24]
 80055c0:	613b      	str	r3, [r7, #16]
 80055c2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80055c4:	e166      	b.n	8005894 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055ca:	2b03      	cmp	r3, #3
 80055cc:	f200 811f 	bhi.w	800580e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d123      	bne.n	8005620 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80055dc:	68f8      	ldr	r0, [r7, #12]
 80055de:	f000 fd7b 	bl	80060d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d001      	beq.n	80055ec <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e167      	b.n	80058bc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	691a      	ldr	r2, [r3, #16]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f6:	b2d2      	uxtb	r2, r2
 80055f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fe:	1c5a      	adds	r2, r3, #1
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005608:	3b01      	subs	r3, #1
 800560a:	b29a      	uxth	r2, r3
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005614:	b29b      	uxth	r3, r3
 8005616:	3b01      	subs	r3, #1
 8005618:	b29a      	uxth	r2, r3
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800561e:	e139      	b.n	8005894 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005624:	2b02      	cmp	r3, #2
 8005626:	d152      	bne.n	80056ce <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562a:	9300      	str	r3, [sp, #0]
 800562c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800562e:	2200      	movs	r2, #0
 8005630:	4906      	ldr	r1, [pc, #24]	; (800564c <HAL_I2C_Mem_Read+0x24c>)
 8005632:	68f8      	ldr	r0, [r7, #12]
 8005634:	f000 fbf8 	bl	8005e28 <I2C_WaitOnFlagUntilTimeout>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d008      	beq.n	8005650 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e13c      	b.n	80058bc <HAL_I2C_Mem_Read+0x4bc>
 8005642:	bf00      	nop
 8005644:	00100002 	.word	0x00100002
 8005648:	ffff0000 	.word	0xffff0000
 800564c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005650:	b672      	cpsid	i
}
 8005652:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005662:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	691a      	ldr	r2, [r3, #16]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566e:	b2d2      	uxtb	r2, r2
 8005670:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005676:	1c5a      	adds	r2, r3, #1
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005680:	3b01      	subs	r3, #1
 8005682:	b29a      	uxth	r2, r3
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800568c:	b29b      	uxth	r3, r3
 800568e:	3b01      	subs	r3, #1
 8005690:	b29a      	uxth	r2, r3
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005696:	b662      	cpsie	i
}
 8005698:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	691a      	ldr	r2, [r3, #16]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a4:	b2d2      	uxtb	r2, r2
 80056a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ac:	1c5a      	adds	r2, r3, #1
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056b6:	3b01      	subs	r3, #1
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	3b01      	subs	r3, #1
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80056cc:	e0e2      	b.n	8005894 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80056ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d0:	9300      	str	r3, [sp, #0]
 80056d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d4:	2200      	movs	r2, #0
 80056d6:	497b      	ldr	r1, [pc, #492]	; (80058c4 <HAL_I2C_Mem_Read+0x4c4>)
 80056d8:	68f8      	ldr	r0, [r7, #12]
 80056da:	f000 fba5 	bl	8005e28 <I2C_WaitOnFlagUntilTimeout>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d001      	beq.n	80056e8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e0e9      	b.n	80058bc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80056f8:	b672      	cpsid	i
}
 80056fa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	691a      	ldr	r2, [r3, #16]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005706:	b2d2      	uxtb	r2, r2
 8005708:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570e:	1c5a      	adds	r2, r3, #1
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005718:	3b01      	subs	r3, #1
 800571a:	b29a      	uxth	r2, r3
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005724:	b29b      	uxth	r3, r3
 8005726:	3b01      	subs	r3, #1
 8005728:	b29a      	uxth	r2, r3
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800572e:	4b66      	ldr	r3, [pc, #408]	; (80058c8 <HAL_I2C_Mem_Read+0x4c8>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	08db      	lsrs	r3, r3, #3
 8005734:	4a65      	ldr	r2, [pc, #404]	; (80058cc <HAL_I2C_Mem_Read+0x4cc>)
 8005736:	fba2 2303 	umull	r2, r3, r2, r3
 800573a:	0a1a      	lsrs	r2, r3, #8
 800573c:	4613      	mov	r3, r2
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	4413      	add	r3, r2
 8005742:	00da      	lsls	r2, r3, #3
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005748:	6a3b      	ldr	r3, [r7, #32]
 800574a:	3b01      	subs	r3, #1
 800574c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800574e:	6a3b      	ldr	r3, [r7, #32]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d118      	bne.n	8005786 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2220      	movs	r2, #32
 800575e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576e:	f043 0220 	orr.w	r2, r3, #32
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005776:	b662      	cpsie	i
}
 8005778:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e09a      	b.n	80058bc <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	695b      	ldr	r3, [r3, #20]
 800578c:	f003 0304 	and.w	r3, r3, #4
 8005790:	2b04      	cmp	r3, #4
 8005792:	d1d9      	bne.n	8005748 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	691a      	ldr	r2, [r3, #16]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ae:	b2d2      	uxtb	r2, r2
 80057b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b6:	1c5a      	adds	r2, r3, #1
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057c0:	3b01      	subs	r3, #1
 80057c2:	b29a      	uxth	r2, r3
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	3b01      	subs	r3, #1
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80057d6:	b662      	cpsie	i
}
 80057d8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	691a      	ldr	r2, [r3, #16]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e4:	b2d2      	uxtb	r2, r2
 80057e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ec:	1c5a      	adds	r2, r3, #1
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057f6:	3b01      	subs	r3, #1
 80057f8:	b29a      	uxth	r2, r3
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005802:	b29b      	uxth	r3, r3
 8005804:	3b01      	subs	r3, #1
 8005806:	b29a      	uxth	r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800580c:	e042      	b.n	8005894 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800580e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005810:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005812:	68f8      	ldr	r0, [r7, #12]
 8005814:	f000 fc60 	bl	80060d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d001      	beq.n	8005822 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e04c      	b.n	80058bc <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	691a      	ldr	r2, [r3, #16]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582c:	b2d2      	uxtb	r2, r2
 800582e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005834:	1c5a      	adds	r2, r3, #1
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800583e:	3b01      	subs	r3, #1
 8005840:	b29a      	uxth	r2, r3
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800584a:	b29b      	uxth	r3, r3
 800584c:	3b01      	subs	r3, #1
 800584e:	b29a      	uxth	r2, r3
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	f003 0304 	and.w	r3, r3, #4
 800585e:	2b04      	cmp	r3, #4
 8005860:	d118      	bne.n	8005894 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	691a      	ldr	r2, [r3, #16]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586c:	b2d2      	uxtb	r2, r2
 800586e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005874:	1c5a      	adds	r2, r3, #1
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800587e:	3b01      	subs	r3, #1
 8005880:	b29a      	uxth	r2, r3
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800588a:	b29b      	uxth	r3, r3
 800588c:	3b01      	subs	r3, #1
 800588e:	b29a      	uxth	r2, r3
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005898:	2b00      	cmp	r3, #0
 800589a:	f47f ae94 	bne.w	80055c6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2220      	movs	r2, #32
 80058a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80058b6:	2300      	movs	r3, #0
 80058b8:	e000      	b.n	80058bc <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80058ba:	2302      	movs	r3, #2
  }
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3728      	adds	r7, #40	; 0x28
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	00010004 	.word	0x00010004
 80058c8:	20000000 	.word	0x20000000
 80058cc:	14f8b589 	.word	0x14f8b589

080058d0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b08a      	sub	sp, #40	; 0x28
 80058d4:	af02      	add	r7, sp, #8
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	607a      	str	r2, [r7, #4]
 80058da:	603b      	str	r3, [r7, #0]
 80058dc:	460b      	mov	r3, r1
 80058de:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80058e0:	f7fe f980 	bl	8003be4 <HAL_GetTick>
 80058e4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80058e6:	2301      	movs	r3, #1
 80058e8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	2b20      	cmp	r3, #32
 80058f4:	f040 8111 	bne.w	8005b1a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	9300      	str	r3, [sp, #0]
 80058fc:	2319      	movs	r3, #25
 80058fe:	2201      	movs	r2, #1
 8005900:	4988      	ldr	r1, [pc, #544]	; (8005b24 <HAL_I2C_IsDeviceReady+0x254>)
 8005902:	68f8      	ldr	r0, [r7, #12]
 8005904:	f000 fa90 	bl	8005e28 <I2C_WaitOnFlagUntilTimeout>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d001      	beq.n	8005912 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800590e:	2302      	movs	r3, #2
 8005910:	e104      	b.n	8005b1c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005918:	2b01      	cmp	r3, #1
 800591a:	d101      	bne.n	8005920 <HAL_I2C_IsDeviceReady+0x50>
 800591c:	2302      	movs	r3, #2
 800591e:	e0fd      	b.n	8005b1c <HAL_I2C_IsDeviceReady+0x24c>
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0301 	and.w	r3, r3, #1
 8005932:	2b01      	cmp	r3, #1
 8005934:	d007      	beq.n	8005946 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f042 0201 	orr.w	r2, r2, #1
 8005944:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005954:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2224      	movs	r2, #36	; 0x24
 800595a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2200      	movs	r2, #0
 8005962:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	4a70      	ldr	r2, [pc, #448]	; (8005b28 <HAL_I2C_IsDeviceReady+0x258>)
 8005968:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005978:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	9300      	str	r3, [sp, #0]
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	2200      	movs	r2, #0
 8005982:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	f000 fa4e 	bl	8005e28 <I2C_WaitOnFlagUntilTimeout>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00d      	beq.n	80059ae <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800599c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059a0:	d103      	bne.n	80059aa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059a8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e0b6      	b.n	8005b1c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80059ae:	897b      	ldrh	r3, [r7, #10]
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	461a      	mov	r2, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80059bc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80059be:	f7fe f911 	bl	8003be4 <HAL_GetTick>
 80059c2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	f003 0302 	and.w	r3, r3, #2
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	bf0c      	ite	eq
 80059d2:	2301      	moveq	r3, #1
 80059d4:	2300      	movne	r3, #0
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	695b      	ldr	r3, [r3, #20]
 80059e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059e8:	bf0c      	ite	eq
 80059ea:	2301      	moveq	r3, #1
 80059ec:	2300      	movne	r3, #0
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80059f2:	e025      	b.n	8005a40 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80059f4:	f7fe f8f6 	bl	8003be4 <HAL_GetTick>
 80059f8:	4602      	mov	r2, r0
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	683a      	ldr	r2, [r7, #0]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d302      	bcc.n	8005a0a <HAL_I2C_IsDeviceReady+0x13a>
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d103      	bne.n	8005a12 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	22a0      	movs	r2, #160	; 0xa0
 8005a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	695b      	ldr	r3, [r3, #20]
 8005a18:	f003 0302 	and.w	r3, r3, #2
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	bf0c      	ite	eq
 8005a20:	2301      	moveq	r3, #1
 8005a22:	2300      	movne	r3, #0
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a36:	bf0c      	ite	eq
 8005a38:	2301      	moveq	r3, #1
 8005a3a:	2300      	movne	r3, #0
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	2ba0      	cmp	r3, #160	; 0xa0
 8005a4a:	d005      	beq.n	8005a58 <HAL_I2C_IsDeviceReady+0x188>
 8005a4c:	7dfb      	ldrb	r3, [r7, #23]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d102      	bne.n	8005a58 <HAL_I2C_IsDeviceReady+0x188>
 8005a52:	7dbb      	ldrb	r3, [r7, #22]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d0cd      	beq.n	80059f4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	f003 0302 	and.w	r3, r3, #2
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d129      	bne.n	8005ac2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a7c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a7e:	2300      	movs	r3, #0
 8005a80:	613b      	str	r3, [r7, #16]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	695b      	ldr	r3, [r3, #20]
 8005a88:	613b      	str	r3, [r7, #16]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	699b      	ldr	r3, [r3, #24]
 8005a90:	613b      	str	r3, [r7, #16]
 8005a92:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	9300      	str	r3, [sp, #0]
 8005a98:	2319      	movs	r3, #25
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	4921      	ldr	r1, [pc, #132]	; (8005b24 <HAL_I2C_IsDeviceReady+0x254>)
 8005a9e:	68f8      	ldr	r0, [r7, #12]
 8005aa0:	f000 f9c2 	bl	8005e28 <I2C_WaitOnFlagUntilTimeout>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d001      	beq.n	8005aae <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e036      	b.n	8005b1c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2220      	movs	r2, #32
 8005ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	e02c      	b.n	8005b1c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ad0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ada:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	9300      	str	r3, [sp, #0]
 8005ae0:	2319      	movs	r3, #25
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	490f      	ldr	r1, [pc, #60]	; (8005b24 <HAL_I2C_IsDeviceReady+0x254>)
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	f000 f99e 	bl	8005e28 <I2C_WaitOnFlagUntilTimeout>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d001      	beq.n	8005af6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e012      	b.n	8005b1c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	3301      	adds	r3, #1
 8005afa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005afc:	69ba      	ldr	r2, [r7, #24]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	f4ff af32 	bcc.w	800596a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2220      	movs	r2, #32
 8005b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e000      	b.n	8005b1c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005b1a:	2302      	movs	r3, #2
  }
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3720      	adds	r7, #32
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	00100002 	.word	0x00100002
 8005b28:	ffff0000 	.word	0xffff0000

08005b2c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b088      	sub	sp, #32
 8005b30:	af02      	add	r7, sp, #8
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	4608      	mov	r0, r1
 8005b36:	4611      	mov	r1, r2
 8005b38:	461a      	mov	r2, r3
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	817b      	strh	r3, [r7, #10]
 8005b3e:	460b      	mov	r3, r1
 8005b40:	813b      	strh	r3, [r7, #8]
 8005b42:	4613      	mov	r3, r2
 8005b44:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b58:	9300      	str	r3, [sp, #0]
 8005b5a:	6a3b      	ldr	r3, [r7, #32]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b62:	68f8      	ldr	r0, [r7, #12]
 8005b64:	f000 f960 	bl	8005e28 <I2C_WaitOnFlagUntilTimeout>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00d      	beq.n	8005b8a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b7c:	d103      	bne.n	8005b86 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b84:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005b86:	2303      	movs	r3, #3
 8005b88:	e05f      	b.n	8005c4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b8a:	897b      	ldrh	r3, [r7, #10]
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	461a      	mov	r2, r3
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005b98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9c:	6a3a      	ldr	r2, [r7, #32]
 8005b9e:	492d      	ldr	r1, [pc, #180]	; (8005c54 <I2C_RequestMemoryWrite+0x128>)
 8005ba0:	68f8      	ldr	r0, [r7, #12]
 8005ba2:	f000 f998 	bl	8005ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d001      	beq.n	8005bb0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e04c      	b.n	8005c4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	617b      	str	r3, [r7, #20]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	695b      	ldr	r3, [r3, #20]
 8005bba:	617b      	str	r3, [r7, #20]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	699b      	ldr	r3, [r3, #24]
 8005bc2:	617b      	str	r3, [r7, #20]
 8005bc4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bc8:	6a39      	ldr	r1, [r7, #32]
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	f000 fa02 	bl	8005fd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00d      	beq.n	8005bf2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bda:	2b04      	cmp	r3, #4
 8005bdc:	d107      	bne.n	8005bee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e02b      	b.n	8005c4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005bf2:	88fb      	ldrh	r3, [r7, #6]
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d105      	bne.n	8005c04 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005bf8:	893b      	ldrh	r3, [r7, #8]
 8005bfa:	b2da      	uxtb	r2, r3
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	611a      	str	r2, [r3, #16]
 8005c02:	e021      	b.n	8005c48 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005c04:	893b      	ldrh	r3, [r7, #8]
 8005c06:	0a1b      	lsrs	r3, r3, #8
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	b2da      	uxtb	r2, r3
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c14:	6a39      	ldr	r1, [r7, #32]
 8005c16:	68f8      	ldr	r0, [r7, #12]
 8005c18:	f000 f9dc 	bl	8005fd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00d      	beq.n	8005c3e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c26:	2b04      	cmp	r3, #4
 8005c28:	d107      	bne.n	8005c3a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c38:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e005      	b.n	8005c4a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c3e:	893b      	ldrh	r3, [r7, #8]
 8005c40:	b2da      	uxtb	r2, r3
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3718      	adds	r7, #24
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	00010002 	.word	0x00010002

08005c58 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b088      	sub	sp, #32
 8005c5c:	af02      	add	r7, sp, #8
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	4608      	mov	r0, r1
 8005c62:	4611      	mov	r1, r2
 8005c64:	461a      	mov	r2, r3
 8005c66:	4603      	mov	r3, r0
 8005c68:	817b      	strh	r3, [r7, #10]
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	813b      	strh	r3, [r7, #8]
 8005c6e:	4613      	mov	r3, r2
 8005c70:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c80:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c94:	9300      	str	r3, [sp, #0]
 8005c96:	6a3b      	ldr	r3, [r7, #32]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c9e:	68f8      	ldr	r0, [r7, #12]
 8005ca0:	f000 f8c2 	bl	8005e28 <I2C_WaitOnFlagUntilTimeout>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00d      	beq.n	8005cc6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cb8:	d103      	bne.n	8005cc2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cc0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	e0aa      	b.n	8005e1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005cc6:	897b      	ldrh	r3, [r7, #10]
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	461a      	mov	r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005cd4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd8:	6a3a      	ldr	r2, [r7, #32]
 8005cda:	4952      	ldr	r1, [pc, #328]	; (8005e24 <I2C_RequestMemoryRead+0x1cc>)
 8005cdc:	68f8      	ldr	r0, [r7, #12]
 8005cde:	f000 f8fa 	bl	8005ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d001      	beq.n	8005cec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e097      	b.n	8005e1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cec:	2300      	movs	r3, #0
 8005cee:	617b      	str	r3, [r7, #20]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	695b      	ldr	r3, [r3, #20]
 8005cf6:	617b      	str	r3, [r7, #20]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	699b      	ldr	r3, [r3, #24]
 8005cfe:	617b      	str	r3, [r7, #20]
 8005d00:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d04:	6a39      	ldr	r1, [r7, #32]
 8005d06:	68f8      	ldr	r0, [r7, #12]
 8005d08:	f000 f964 	bl	8005fd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00d      	beq.n	8005d2e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d16:	2b04      	cmp	r3, #4
 8005d18:	d107      	bne.n	8005d2a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d28:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e076      	b.n	8005e1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d2e:	88fb      	ldrh	r3, [r7, #6]
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d105      	bne.n	8005d40 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d34:	893b      	ldrh	r3, [r7, #8]
 8005d36:	b2da      	uxtb	r2, r3
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	611a      	str	r2, [r3, #16]
 8005d3e:	e021      	b.n	8005d84 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005d40:	893b      	ldrh	r3, [r7, #8]
 8005d42:	0a1b      	lsrs	r3, r3, #8
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	b2da      	uxtb	r2, r3
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d50:	6a39      	ldr	r1, [r7, #32]
 8005d52:	68f8      	ldr	r0, [r7, #12]
 8005d54:	f000 f93e 	bl	8005fd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d00d      	beq.n	8005d7a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d62:	2b04      	cmp	r3, #4
 8005d64:	d107      	bne.n	8005d76 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d74:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e050      	b.n	8005e1c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d7a:	893b      	ldrh	r3, [r7, #8]
 8005d7c:	b2da      	uxtb	r2, r3
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d86:	6a39      	ldr	r1, [r7, #32]
 8005d88:	68f8      	ldr	r0, [r7, #12]
 8005d8a:	f000 f923 	bl	8005fd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d00d      	beq.n	8005db0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d98:	2b04      	cmp	r3, #4
 8005d9a:	d107      	bne.n	8005dac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005daa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e035      	b.n	8005e1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005dbe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc2:	9300      	str	r3, [sp, #0]
 8005dc4:	6a3b      	ldr	r3, [r7, #32]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005dcc:	68f8      	ldr	r0, [r7, #12]
 8005dce:	f000 f82b 	bl	8005e28 <I2C_WaitOnFlagUntilTimeout>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d00d      	beq.n	8005df4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005de2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005de6:	d103      	bne.n	8005df0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e013      	b.n	8005e1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005df4:	897b      	ldrh	r3, [r7, #10]
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	f043 0301 	orr.w	r3, r3, #1
 8005dfc:	b2da      	uxtb	r2, r3
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e06:	6a3a      	ldr	r2, [r7, #32]
 8005e08:	4906      	ldr	r1, [pc, #24]	; (8005e24 <I2C_RequestMemoryRead+0x1cc>)
 8005e0a:	68f8      	ldr	r0, [r7, #12]
 8005e0c:	f000 f863 	bl	8005ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d001      	beq.n	8005e1a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e000      	b.n	8005e1c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3718      	adds	r7, #24
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	00010002 	.word	0x00010002

08005e28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	603b      	str	r3, [r7, #0]
 8005e34:	4613      	mov	r3, r2
 8005e36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e38:	e025      	b.n	8005e86 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e40:	d021      	beq.n	8005e86 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e42:	f7fd fecf 	bl	8003be4 <HAL_GetTick>
 8005e46:	4602      	mov	r2, r0
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	683a      	ldr	r2, [r7, #0]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d302      	bcc.n	8005e58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d116      	bne.n	8005e86 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2220      	movs	r2, #32
 8005e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e72:	f043 0220 	orr.w	r2, r3, #32
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e023      	b.n	8005ece <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	0c1b      	lsrs	r3, r3, #16
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d10d      	bne.n	8005eac <I2C_WaitOnFlagUntilTimeout+0x84>
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	43da      	mvns	r2, r3
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	bf0c      	ite	eq
 8005ea2:	2301      	moveq	r3, #1
 8005ea4:	2300      	movne	r3, #0
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	e00c      	b.n	8005ec6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	699b      	ldr	r3, [r3, #24]
 8005eb2:	43da      	mvns	r2, r3
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	bf0c      	ite	eq
 8005ebe:	2301      	moveq	r3, #1
 8005ec0:	2300      	movne	r3, #0
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	79fb      	ldrb	r3, [r7, #7]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d0b6      	beq.n	8005e3a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3710      	adds	r7, #16
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b084      	sub	sp, #16
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	60f8      	str	r0, [r7, #12]
 8005ede:	60b9      	str	r1, [r7, #8]
 8005ee0:	607a      	str	r2, [r7, #4]
 8005ee2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ee4:	e051      	b.n	8005f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	695b      	ldr	r3, [r3, #20]
 8005eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ef0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ef4:	d123      	bne.n	8005f3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f04:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f0e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2200      	movs	r2, #0
 8005f14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2220      	movs	r2, #32
 8005f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2a:	f043 0204 	orr.w	r2, r3, #4
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e046      	b.n	8005fcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f44:	d021      	beq.n	8005f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f46:	f7fd fe4d 	bl	8003be4 <HAL_GetTick>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d302      	bcc.n	8005f5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d116      	bne.n	8005f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2220      	movs	r2, #32
 8005f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f76:	f043 0220 	orr.w	r2, r3, #32
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e020      	b.n	8005fcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	0c1b      	lsrs	r3, r3, #16
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d10c      	bne.n	8005fae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	695b      	ldr	r3, [r3, #20]
 8005f9a:	43da      	mvns	r2, r3
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	bf14      	ite	ne
 8005fa6:	2301      	movne	r3, #1
 8005fa8:	2300      	moveq	r3, #0
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	e00b      	b.n	8005fc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	699b      	ldr	r3, [r3, #24]
 8005fb4:	43da      	mvns	r2, r3
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	4013      	ands	r3, r2
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	bf14      	ite	ne
 8005fc0:	2301      	movne	r3, #1
 8005fc2:	2300      	moveq	r3, #0
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d18d      	bne.n	8005ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005fca:	2300      	movs	r3, #0
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3710      	adds	r7, #16
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	60b9      	str	r1, [r7, #8]
 8005fde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005fe0:	e02d      	b.n	800603e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005fe2:	68f8      	ldr	r0, [r7, #12]
 8005fe4:	f000 f8ce 	bl	8006184 <I2C_IsAcknowledgeFailed>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d001      	beq.n	8005ff2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e02d      	b.n	800604e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff8:	d021      	beq.n	800603e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ffa:	f7fd fdf3 	bl	8003be4 <HAL_GetTick>
 8005ffe:	4602      	mov	r2, r0
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	68ba      	ldr	r2, [r7, #8]
 8006006:	429a      	cmp	r2, r3
 8006008:	d302      	bcc.n	8006010 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d116      	bne.n	800603e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2200      	movs	r2, #0
 8006014:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2220      	movs	r2, #32
 800601a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2200      	movs	r2, #0
 8006022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602a:	f043 0220 	orr.w	r2, r3, #32
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2200      	movs	r2, #0
 8006036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e007      	b.n	800604e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	695b      	ldr	r3, [r3, #20]
 8006044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006048:	2b80      	cmp	r3, #128	; 0x80
 800604a:	d1ca      	bne.n	8005fe2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3710      	adds	r7, #16
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}

08006056 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006056:	b580      	push	{r7, lr}
 8006058:	b084      	sub	sp, #16
 800605a:	af00      	add	r7, sp, #0
 800605c:	60f8      	str	r0, [r7, #12]
 800605e:	60b9      	str	r1, [r7, #8]
 8006060:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006062:	e02d      	b.n	80060c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f000 f88d 	bl	8006184 <I2C_IsAcknowledgeFailed>
 800606a:	4603      	mov	r3, r0
 800606c:	2b00      	cmp	r3, #0
 800606e:	d001      	beq.n	8006074 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e02d      	b.n	80060d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800607a:	d021      	beq.n	80060c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800607c:	f7fd fdb2 	bl	8003be4 <HAL_GetTick>
 8006080:	4602      	mov	r2, r0
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	68ba      	ldr	r2, [r7, #8]
 8006088:	429a      	cmp	r2, r3
 800608a:	d302      	bcc.n	8006092 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d116      	bne.n	80060c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2200      	movs	r2, #0
 8006096:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2220      	movs	r2, #32
 800609c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ac:	f043 0220 	orr.w	r2, r3, #32
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	e007      	b.n	80060d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	695b      	ldr	r3, [r3, #20]
 80060c6:	f003 0304 	and.w	r3, r3, #4
 80060ca:	2b04      	cmp	r3, #4
 80060cc:	d1ca      	bne.n	8006064 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80060ce:	2300      	movs	r3, #0
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3710      	adds	r7, #16
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80060e4:	e042      	b.n	800616c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	695b      	ldr	r3, [r3, #20]
 80060ec:	f003 0310 	and.w	r3, r3, #16
 80060f0:	2b10      	cmp	r3, #16
 80060f2:	d119      	bne.n	8006128 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f06f 0210 	mvn.w	r2, #16
 80060fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2200      	movs	r2, #0
 8006102:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2220      	movs	r2, #32
 8006108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2200      	movs	r2, #0
 8006110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2200      	movs	r2, #0
 8006120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	e029      	b.n	800617c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006128:	f7fd fd5c 	bl	8003be4 <HAL_GetTick>
 800612c:	4602      	mov	r2, r0
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	68ba      	ldr	r2, [r7, #8]
 8006134:	429a      	cmp	r2, r3
 8006136:	d302      	bcc.n	800613e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d116      	bne.n	800616c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2200      	movs	r2, #0
 8006142:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2220      	movs	r2, #32
 8006148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006158:	f043 0220 	orr.w	r2, r3, #32
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2200      	movs	r2, #0
 8006164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	e007      	b.n	800617c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	695b      	ldr	r3, [r3, #20]
 8006172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006176:	2b40      	cmp	r3, #64	; 0x40
 8006178:	d1b5      	bne.n	80060e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	4618      	mov	r0, r3
 800617e:	3710      	adds	r7, #16
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	695b      	ldr	r3, [r3, #20]
 8006192:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006196:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800619a:	d11b      	bne.n	80061d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80061a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2220      	movs	r2, #32
 80061b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c0:	f043 0204 	orr.w	r2, r3, #4
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	e000      	b.n	80061d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	370c      	adds	r7, #12
 80061da:	46bd      	mov	sp, r7
 80061dc:	bc80      	pop	{r7}
 80061de:	4770      	bx	lr

080061e0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80061e0:	b480      	push	{r7}
 80061e2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80061e4:	4b03      	ldr	r3, [pc, #12]	; (80061f4 <HAL_PWR_EnableBkUpAccess+0x14>)
 80061e6:	2201      	movs	r2, #1
 80061e8:	601a      	str	r2, [r3, #0]
}
 80061ea:	bf00      	nop
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bc80      	pop	{r7}
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop
 80061f4:	420e0020 	.word	0x420e0020

080061f8 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	460b      	mov	r3, r1
 8006202:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006204:	4b09      	ldr	r3, [pc, #36]	; (800622c <HAL_PWR_EnterSLEEPMode+0x34>)
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	4a08      	ldr	r2, [pc, #32]	; (800622c <HAL_PWR_EnterSLEEPMode+0x34>)
 800620a:	f023 0304 	bic.w	r3, r3, #4
 800620e:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8006210:	78fb      	ldrb	r3, [r7, #3]
 8006212:	2b01      	cmp	r3, #1
 8006214:	d101      	bne.n	800621a <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8006216:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8006218:	e002      	b.n	8006220 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 800621a:	bf40      	sev
    __WFE();
 800621c:	bf20      	wfe
    __WFE();
 800621e:	bf20      	wfe
}
 8006220:	bf00      	nop
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	bc80      	pop	{r7}
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop
 800622c:	e000ed00 	.word	0xe000ed00

08006230 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8006230:	b480      	push	{r7}
 8006232:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8006234:	4b04      	ldr	r3, [pc, #16]	; (8006248 <HAL_PWR_EnableSleepOnExit+0x18>)
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	4a03      	ldr	r2, [pc, #12]	; (8006248 <HAL_PWR_EnableSleepOnExit+0x18>)
 800623a:	f043 0302 	orr.w	r3, r3, #2
 800623e:	6113      	str	r3, [r2, #16]
}
 8006240:	bf00      	nop
 8006242:	46bd      	mov	sp, r7
 8006244:	bc80      	pop	{r7}
 8006246:	4770      	bx	lr
 8006248:	e000ed00 	.word	0xe000ed00

0800624c <HAL_PWR_DisableSleepOnExit>:
  * @note Clears SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
  *       re-enters SLEEP mode when an interruption handling is over.          
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 800624c:	b480      	push	{r7}
 800624e:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8006250:	4b04      	ldr	r3, [pc, #16]	; (8006264 <HAL_PWR_DisableSleepOnExit+0x18>)
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	4a03      	ldr	r2, [pc, #12]	; (8006264 <HAL_PWR_DisableSleepOnExit+0x18>)
 8006256:	f023 0302 	bic.w	r3, r3, #2
 800625a:	6113      	str	r3, [r2, #16]
}
 800625c:	bf00      	nop
 800625e:	46bd      	mov	sp, r7
 8006260:	bc80      	pop	{r7}
 8006262:	4770      	bx	lr
 8006264:	e000ed00 	.word	0xe000ed00

08006268 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b086      	sub	sp, #24
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d101      	bne.n	800627a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e272      	b.n	8006760 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 0301 	and.w	r3, r3, #1
 8006282:	2b00      	cmp	r3, #0
 8006284:	f000 8087 	beq.w	8006396 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006288:	4b92      	ldr	r3, [pc, #584]	; (80064d4 <HAL_RCC_OscConfig+0x26c>)
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	f003 030c 	and.w	r3, r3, #12
 8006290:	2b04      	cmp	r3, #4
 8006292:	d00c      	beq.n	80062ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006294:	4b8f      	ldr	r3, [pc, #572]	; (80064d4 <HAL_RCC_OscConfig+0x26c>)
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	f003 030c 	and.w	r3, r3, #12
 800629c:	2b08      	cmp	r3, #8
 800629e:	d112      	bne.n	80062c6 <HAL_RCC_OscConfig+0x5e>
 80062a0:	4b8c      	ldr	r3, [pc, #560]	; (80064d4 <HAL_RCC_OscConfig+0x26c>)
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062ac:	d10b      	bne.n	80062c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062ae:	4b89      	ldr	r3, [pc, #548]	; (80064d4 <HAL_RCC_OscConfig+0x26c>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d06c      	beq.n	8006394 <HAL_RCC_OscConfig+0x12c>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d168      	bne.n	8006394 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	e24c      	b.n	8006760 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062ce:	d106      	bne.n	80062de <HAL_RCC_OscConfig+0x76>
 80062d0:	4b80      	ldr	r3, [pc, #512]	; (80064d4 <HAL_RCC_OscConfig+0x26c>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a7f      	ldr	r2, [pc, #508]	; (80064d4 <HAL_RCC_OscConfig+0x26c>)
 80062d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062da:	6013      	str	r3, [r2, #0]
 80062dc:	e02e      	b.n	800633c <HAL_RCC_OscConfig+0xd4>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d10c      	bne.n	8006300 <HAL_RCC_OscConfig+0x98>
 80062e6:	4b7b      	ldr	r3, [pc, #492]	; (80064d4 <HAL_RCC_OscConfig+0x26c>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a7a      	ldr	r2, [pc, #488]	; (80064d4 <HAL_RCC_OscConfig+0x26c>)
 80062ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062f0:	6013      	str	r3, [r2, #0]
 80062f2:	4b78      	ldr	r3, [pc, #480]	; (80064d4 <HAL_RCC_OscConfig+0x26c>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a77      	ldr	r2, [pc, #476]	; (80064d4 <HAL_RCC_OscConfig+0x26c>)
 80062f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062fc:	6013      	str	r3, [r2, #0]
 80062fe:	e01d      	b.n	800633c <HAL_RCC_OscConfig+0xd4>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006308:	d10c      	bne.n	8006324 <HAL_RCC_OscConfig+0xbc>
 800630a:	4b72      	ldr	r3, [pc, #456]	; (80064d4 <HAL_RCC_OscConfig+0x26c>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a71      	ldr	r2, [pc, #452]	; (80064d4 <HAL_RCC_OscConfig+0x26c>)
 8006310:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006314:	6013      	str	r3, [r2, #0]
 8006316:	4b6f      	ldr	r3, [pc, #444]	; (80064d4 <HAL_RCC_OscConfig+0x26c>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a6e      	ldr	r2, [pc, #440]	; (80064d4 <HAL_RCC_OscConfig+0x26c>)
 800631c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006320:	6013      	str	r3, [r2, #0]
 8006322:	e00b      	b.n	800633c <HAL_RCC_OscConfig+0xd4>
 8006324:	4b6b      	ldr	r3, [pc, #428]	; (80064d4 <HAL_RCC_OscConfig+0x26c>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a6a      	ldr	r2, [pc, #424]	; (80064d4 <HAL_RCC_OscConfig+0x26c>)
 800632a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800632e:	6013      	str	r3, [r2, #0]
 8006330:	4b68      	ldr	r3, [pc, #416]	; (80064d4 <HAL_RCC_OscConfig+0x26c>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a67      	ldr	r2, [pc, #412]	; (80064d4 <HAL_RCC_OscConfig+0x26c>)
 8006336:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800633a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d013      	beq.n	800636c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006344:	f7fd fc4e 	bl	8003be4 <HAL_GetTick>
 8006348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800634a:	e008      	b.n	800635e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800634c:	f7fd fc4a 	bl	8003be4 <HAL_GetTick>
 8006350:	4602      	mov	r2, r0
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	2b64      	cmp	r3, #100	; 0x64
 8006358:	d901      	bls.n	800635e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800635a:	2303      	movs	r3, #3
 800635c:	e200      	b.n	8006760 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800635e:	4b5d      	ldr	r3, [pc, #372]	; (80064d4 <HAL_RCC_OscConfig+0x26c>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006366:	2b00      	cmp	r3, #0
 8006368:	d0f0      	beq.n	800634c <HAL_RCC_OscConfig+0xe4>
 800636a:	e014      	b.n	8006396 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800636c:	f7fd fc3a 	bl	8003be4 <HAL_GetTick>
 8006370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006372:	e008      	b.n	8006386 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006374:	f7fd fc36 	bl	8003be4 <HAL_GetTick>
 8006378:	4602      	mov	r2, r0
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	2b64      	cmp	r3, #100	; 0x64
 8006380:	d901      	bls.n	8006386 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	e1ec      	b.n	8006760 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006386:	4b53      	ldr	r3, [pc, #332]	; (80064d4 <HAL_RCC_OscConfig+0x26c>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1f0      	bne.n	8006374 <HAL_RCC_OscConfig+0x10c>
 8006392:	e000      	b.n	8006396 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006394:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 0302 	and.w	r3, r3, #2
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d063      	beq.n	800646a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80063a2:	4b4c      	ldr	r3, [pc, #304]	; (80064d4 <HAL_RCC_OscConfig+0x26c>)
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	f003 030c 	and.w	r3, r3, #12
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00b      	beq.n	80063c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80063ae:	4b49      	ldr	r3, [pc, #292]	; (80064d4 <HAL_RCC_OscConfig+0x26c>)
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	f003 030c 	and.w	r3, r3, #12
 80063b6:	2b08      	cmp	r3, #8
 80063b8:	d11c      	bne.n	80063f4 <HAL_RCC_OscConfig+0x18c>
 80063ba:	4b46      	ldr	r3, [pc, #280]	; (80064d4 <HAL_RCC_OscConfig+0x26c>)
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d116      	bne.n	80063f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063c6:	4b43      	ldr	r3, [pc, #268]	; (80064d4 <HAL_RCC_OscConfig+0x26c>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 0302 	and.w	r3, r3, #2
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d005      	beq.n	80063de <HAL_RCC_OscConfig+0x176>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d001      	beq.n	80063de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e1c0      	b.n	8006760 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063de:	4b3d      	ldr	r3, [pc, #244]	; (80064d4 <HAL_RCC_OscConfig+0x26c>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	695b      	ldr	r3, [r3, #20]
 80063ea:	00db      	lsls	r3, r3, #3
 80063ec:	4939      	ldr	r1, [pc, #228]	; (80064d4 <HAL_RCC_OscConfig+0x26c>)
 80063ee:	4313      	orrs	r3, r2
 80063f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063f2:	e03a      	b.n	800646a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d020      	beq.n	800643e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063fc:	4b36      	ldr	r3, [pc, #216]	; (80064d8 <HAL_RCC_OscConfig+0x270>)
 80063fe:	2201      	movs	r2, #1
 8006400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006402:	f7fd fbef 	bl	8003be4 <HAL_GetTick>
 8006406:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006408:	e008      	b.n	800641c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800640a:	f7fd fbeb 	bl	8003be4 <HAL_GetTick>
 800640e:	4602      	mov	r2, r0
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	2b02      	cmp	r3, #2
 8006416:	d901      	bls.n	800641c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006418:	2303      	movs	r3, #3
 800641a:	e1a1      	b.n	8006760 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800641c:	4b2d      	ldr	r3, [pc, #180]	; (80064d4 <HAL_RCC_OscConfig+0x26c>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 0302 	and.w	r3, r3, #2
 8006424:	2b00      	cmp	r3, #0
 8006426:	d0f0      	beq.n	800640a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006428:	4b2a      	ldr	r3, [pc, #168]	; (80064d4 <HAL_RCC_OscConfig+0x26c>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	695b      	ldr	r3, [r3, #20]
 8006434:	00db      	lsls	r3, r3, #3
 8006436:	4927      	ldr	r1, [pc, #156]	; (80064d4 <HAL_RCC_OscConfig+0x26c>)
 8006438:	4313      	orrs	r3, r2
 800643a:	600b      	str	r3, [r1, #0]
 800643c:	e015      	b.n	800646a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800643e:	4b26      	ldr	r3, [pc, #152]	; (80064d8 <HAL_RCC_OscConfig+0x270>)
 8006440:	2200      	movs	r2, #0
 8006442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006444:	f7fd fbce 	bl	8003be4 <HAL_GetTick>
 8006448:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800644a:	e008      	b.n	800645e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800644c:	f7fd fbca 	bl	8003be4 <HAL_GetTick>
 8006450:	4602      	mov	r2, r0
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	1ad3      	subs	r3, r2, r3
 8006456:	2b02      	cmp	r3, #2
 8006458:	d901      	bls.n	800645e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800645a:	2303      	movs	r3, #3
 800645c:	e180      	b.n	8006760 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800645e:	4b1d      	ldr	r3, [pc, #116]	; (80064d4 <HAL_RCC_OscConfig+0x26c>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 0302 	and.w	r3, r3, #2
 8006466:	2b00      	cmp	r3, #0
 8006468:	d1f0      	bne.n	800644c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0308 	and.w	r3, r3, #8
 8006472:	2b00      	cmp	r3, #0
 8006474:	d03a      	beq.n	80064ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	699b      	ldr	r3, [r3, #24]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d019      	beq.n	80064b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800647e:	4b17      	ldr	r3, [pc, #92]	; (80064dc <HAL_RCC_OscConfig+0x274>)
 8006480:	2201      	movs	r2, #1
 8006482:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006484:	f7fd fbae 	bl	8003be4 <HAL_GetTick>
 8006488:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800648a:	e008      	b.n	800649e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800648c:	f7fd fbaa 	bl	8003be4 <HAL_GetTick>
 8006490:	4602      	mov	r2, r0
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	2b02      	cmp	r3, #2
 8006498:	d901      	bls.n	800649e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800649a:	2303      	movs	r3, #3
 800649c:	e160      	b.n	8006760 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800649e:	4b0d      	ldr	r3, [pc, #52]	; (80064d4 <HAL_RCC_OscConfig+0x26c>)
 80064a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a2:	f003 0302 	and.w	r3, r3, #2
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d0f0      	beq.n	800648c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80064aa:	2001      	movs	r0, #1
 80064ac:	f000 fad8 	bl	8006a60 <RCC_Delay>
 80064b0:	e01c      	b.n	80064ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064b2:	4b0a      	ldr	r3, [pc, #40]	; (80064dc <HAL_RCC_OscConfig+0x274>)
 80064b4:	2200      	movs	r2, #0
 80064b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064b8:	f7fd fb94 	bl	8003be4 <HAL_GetTick>
 80064bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064be:	e00f      	b.n	80064e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064c0:	f7fd fb90 	bl	8003be4 <HAL_GetTick>
 80064c4:	4602      	mov	r2, r0
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	1ad3      	subs	r3, r2, r3
 80064ca:	2b02      	cmp	r3, #2
 80064cc:	d908      	bls.n	80064e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80064ce:	2303      	movs	r3, #3
 80064d0:	e146      	b.n	8006760 <HAL_RCC_OscConfig+0x4f8>
 80064d2:	bf00      	nop
 80064d4:	40021000 	.word	0x40021000
 80064d8:	42420000 	.word	0x42420000
 80064dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064e0:	4b92      	ldr	r3, [pc, #584]	; (800672c <HAL_RCC_OscConfig+0x4c4>)
 80064e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e4:	f003 0302 	and.w	r3, r3, #2
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d1e9      	bne.n	80064c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 0304 	and.w	r3, r3, #4
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f000 80a6 	beq.w	8006646 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064fa:	2300      	movs	r3, #0
 80064fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064fe:	4b8b      	ldr	r3, [pc, #556]	; (800672c <HAL_RCC_OscConfig+0x4c4>)
 8006500:	69db      	ldr	r3, [r3, #28]
 8006502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006506:	2b00      	cmp	r3, #0
 8006508:	d10d      	bne.n	8006526 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800650a:	4b88      	ldr	r3, [pc, #544]	; (800672c <HAL_RCC_OscConfig+0x4c4>)
 800650c:	69db      	ldr	r3, [r3, #28]
 800650e:	4a87      	ldr	r2, [pc, #540]	; (800672c <HAL_RCC_OscConfig+0x4c4>)
 8006510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006514:	61d3      	str	r3, [r2, #28]
 8006516:	4b85      	ldr	r3, [pc, #532]	; (800672c <HAL_RCC_OscConfig+0x4c4>)
 8006518:	69db      	ldr	r3, [r3, #28]
 800651a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800651e:	60bb      	str	r3, [r7, #8]
 8006520:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006522:	2301      	movs	r3, #1
 8006524:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006526:	4b82      	ldr	r3, [pc, #520]	; (8006730 <HAL_RCC_OscConfig+0x4c8>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800652e:	2b00      	cmp	r3, #0
 8006530:	d118      	bne.n	8006564 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006532:	4b7f      	ldr	r3, [pc, #508]	; (8006730 <HAL_RCC_OscConfig+0x4c8>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a7e      	ldr	r2, [pc, #504]	; (8006730 <HAL_RCC_OscConfig+0x4c8>)
 8006538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800653c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800653e:	f7fd fb51 	bl	8003be4 <HAL_GetTick>
 8006542:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006544:	e008      	b.n	8006558 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006546:	f7fd fb4d 	bl	8003be4 <HAL_GetTick>
 800654a:	4602      	mov	r2, r0
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	1ad3      	subs	r3, r2, r3
 8006550:	2b64      	cmp	r3, #100	; 0x64
 8006552:	d901      	bls.n	8006558 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006554:	2303      	movs	r3, #3
 8006556:	e103      	b.n	8006760 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006558:	4b75      	ldr	r3, [pc, #468]	; (8006730 <HAL_RCC_OscConfig+0x4c8>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006560:	2b00      	cmp	r3, #0
 8006562:	d0f0      	beq.n	8006546 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	2b01      	cmp	r3, #1
 800656a:	d106      	bne.n	800657a <HAL_RCC_OscConfig+0x312>
 800656c:	4b6f      	ldr	r3, [pc, #444]	; (800672c <HAL_RCC_OscConfig+0x4c4>)
 800656e:	6a1b      	ldr	r3, [r3, #32]
 8006570:	4a6e      	ldr	r2, [pc, #440]	; (800672c <HAL_RCC_OscConfig+0x4c4>)
 8006572:	f043 0301 	orr.w	r3, r3, #1
 8006576:	6213      	str	r3, [r2, #32]
 8006578:	e02d      	b.n	80065d6 <HAL_RCC_OscConfig+0x36e>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d10c      	bne.n	800659c <HAL_RCC_OscConfig+0x334>
 8006582:	4b6a      	ldr	r3, [pc, #424]	; (800672c <HAL_RCC_OscConfig+0x4c4>)
 8006584:	6a1b      	ldr	r3, [r3, #32]
 8006586:	4a69      	ldr	r2, [pc, #420]	; (800672c <HAL_RCC_OscConfig+0x4c4>)
 8006588:	f023 0301 	bic.w	r3, r3, #1
 800658c:	6213      	str	r3, [r2, #32]
 800658e:	4b67      	ldr	r3, [pc, #412]	; (800672c <HAL_RCC_OscConfig+0x4c4>)
 8006590:	6a1b      	ldr	r3, [r3, #32]
 8006592:	4a66      	ldr	r2, [pc, #408]	; (800672c <HAL_RCC_OscConfig+0x4c4>)
 8006594:	f023 0304 	bic.w	r3, r3, #4
 8006598:	6213      	str	r3, [r2, #32]
 800659a:	e01c      	b.n	80065d6 <HAL_RCC_OscConfig+0x36e>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	2b05      	cmp	r3, #5
 80065a2:	d10c      	bne.n	80065be <HAL_RCC_OscConfig+0x356>
 80065a4:	4b61      	ldr	r3, [pc, #388]	; (800672c <HAL_RCC_OscConfig+0x4c4>)
 80065a6:	6a1b      	ldr	r3, [r3, #32]
 80065a8:	4a60      	ldr	r2, [pc, #384]	; (800672c <HAL_RCC_OscConfig+0x4c4>)
 80065aa:	f043 0304 	orr.w	r3, r3, #4
 80065ae:	6213      	str	r3, [r2, #32]
 80065b0:	4b5e      	ldr	r3, [pc, #376]	; (800672c <HAL_RCC_OscConfig+0x4c4>)
 80065b2:	6a1b      	ldr	r3, [r3, #32]
 80065b4:	4a5d      	ldr	r2, [pc, #372]	; (800672c <HAL_RCC_OscConfig+0x4c4>)
 80065b6:	f043 0301 	orr.w	r3, r3, #1
 80065ba:	6213      	str	r3, [r2, #32]
 80065bc:	e00b      	b.n	80065d6 <HAL_RCC_OscConfig+0x36e>
 80065be:	4b5b      	ldr	r3, [pc, #364]	; (800672c <HAL_RCC_OscConfig+0x4c4>)
 80065c0:	6a1b      	ldr	r3, [r3, #32]
 80065c2:	4a5a      	ldr	r2, [pc, #360]	; (800672c <HAL_RCC_OscConfig+0x4c4>)
 80065c4:	f023 0301 	bic.w	r3, r3, #1
 80065c8:	6213      	str	r3, [r2, #32]
 80065ca:	4b58      	ldr	r3, [pc, #352]	; (800672c <HAL_RCC_OscConfig+0x4c4>)
 80065cc:	6a1b      	ldr	r3, [r3, #32]
 80065ce:	4a57      	ldr	r2, [pc, #348]	; (800672c <HAL_RCC_OscConfig+0x4c4>)
 80065d0:	f023 0304 	bic.w	r3, r3, #4
 80065d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d015      	beq.n	800660a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065de:	f7fd fb01 	bl	8003be4 <HAL_GetTick>
 80065e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065e4:	e00a      	b.n	80065fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065e6:	f7fd fafd 	bl	8003be4 <HAL_GetTick>
 80065ea:	4602      	mov	r2, r0
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	1ad3      	subs	r3, r2, r3
 80065f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d901      	bls.n	80065fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e0b1      	b.n	8006760 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065fc:	4b4b      	ldr	r3, [pc, #300]	; (800672c <HAL_RCC_OscConfig+0x4c4>)
 80065fe:	6a1b      	ldr	r3, [r3, #32]
 8006600:	f003 0302 	and.w	r3, r3, #2
 8006604:	2b00      	cmp	r3, #0
 8006606:	d0ee      	beq.n	80065e6 <HAL_RCC_OscConfig+0x37e>
 8006608:	e014      	b.n	8006634 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800660a:	f7fd faeb 	bl	8003be4 <HAL_GetTick>
 800660e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006610:	e00a      	b.n	8006628 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006612:	f7fd fae7 	bl	8003be4 <HAL_GetTick>
 8006616:	4602      	mov	r2, r0
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	1ad3      	subs	r3, r2, r3
 800661c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006620:	4293      	cmp	r3, r2
 8006622:	d901      	bls.n	8006628 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006624:	2303      	movs	r3, #3
 8006626:	e09b      	b.n	8006760 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006628:	4b40      	ldr	r3, [pc, #256]	; (800672c <HAL_RCC_OscConfig+0x4c4>)
 800662a:	6a1b      	ldr	r3, [r3, #32]
 800662c:	f003 0302 	and.w	r3, r3, #2
 8006630:	2b00      	cmp	r3, #0
 8006632:	d1ee      	bne.n	8006612 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006634:	7dfb      	ldrb	r3, [r7, #23]
 8006636:	2b01      	cmp	r3, #1
 8006638:	d105      	bne.n	8006646 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800663a:	4b3c      	ldr	r3, [pc, #240]	; (800672c <HAL_RCC_OscConfig+0x4c4>)
 800663c:	69db      	ldr	r3, [r3, #28]
 800663e:	4a3b      	ldr	r2, [pc, #236]	; (800672c <HAL_RCC_OscConfig+0x4c4>)
 8006640:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006644:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	69db      	ldr	r3, [r3, #28]
 800664a:	2b00      	cmp	r3, #0
 800664c:	f000 8087 	beq.w	800675e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006650:	4b36      	ldr	r3, [pc, #216]	; (800672c <HAL_RCC_OscConfig+0x4c4>)
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	f003 030c 	and.w	r3, r3, #12
 8006658:	2b08      	cmp	r3, #8
 800665a:	d061      	beq.n	8006720 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	69db      	ldr	r3, [r3, #28]
 8006660:	2b02      	cmp	r3, #2
 8006662:	d146      	bne.n	80066f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006664:	4b33      	ldr	r3, [pc, #204]	; (8006734 <HAL_RCC_OscConfig+0x4cc>)
 8006666:	2200      	movs	r2, #0
 8006668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800666a:	f7fd fabb 	bl	8003be4 <HAL_GetTick>
 800666e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006670:	e008      	b.n	8006684 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006672:	f7fd fab7 	bl	8003be4 <HAL_GetTick>
 8006676:	4602      	mov	r2, r0
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	1ad3      	subs	r3, r2, r3
 800667c:	2b02      	cmp	r3, #2
 800667e:	d901      	bls.n	8006684 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006680:	2303      	movs	r3, #3
 8006682:	e06d      	b.n	8006760 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006684:	4b29      	ldr	r3, [pc, #164]	; (800672c <HAL_RCC_OscConfig+0x4c4>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800668c:	2b00      	cmp	r3, #0
 800668e:	d1f0      	bne.n	8006672 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6a1b      	ldr	r3, [r3, #32]
 8006694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006698:	d108      	bne.n	80066ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800669a:	4b24      	ldr	r3, [pc, #144]	; (800672c <HAL_RCC_OscConfig+0x4c4>)
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	4921      	ldr	r1, [pc, #132]	; (800672c <HAL_RCC_OscConfig+0x4c4>)
 80066a8:	4313      	orrs	r3, r2
 80066aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80066ac:	4b1f      	ldr	r3, [pc, #124]	; (800672c <HAL_RCC_OscConfig+0x4c4>)
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6a19      	ldr	r1, [r3, #32]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066bc:	430b      	orrs	r3, r1
 80066be:	491b      	ldr	r1, [pc, #108]	; (800672c <HAL_RCC_OscConfig+0x4c4>)
 80066c0:	4313      	orrs	r3, r2
 80066c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066c4:	4b1b      	ldr	r3, [pc, #108]	; (8006734 <HAL_RCC_OscConfig+0x4cc>)
 80066c6:	2201      	movs	r2, #1
 80066c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066ca:	f7fd fa8b 	bl	8003be4 <HAL_GetTick>
 80066ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80066d0:	e008      	b.n	80066e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066d2:	f7fd fa87 	bl	8003be4 <HAL_GetTick>
 80066d6:	4602      	mov	r2, r0
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	1ad3      	subs	r3, r2, r3
 80066dc:	2b02      	cmp	r3, #2
 80066de:	d901      	bls.n	80066e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80066e0:	2303      	movs	r3, #3
 80066e2:	e03d      	b.n	8006760 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80066e4:	4b11      	ldr	r3, [pc, #68]	; (800672c <HAL_RCC_OscConfig+0x4c4>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d0f0      	beq.n	80066d2 <HAL_RCC_OscConfig+0x46a>
 80066f0:	e035      	b.n	800675e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066f2:	4b10      	ldr	r3, [pc, #64]	; (8006734 <HAL_RCC_OscConfig+0x4cc>)
 80066f4:	2200      	movs	r2, #0
 80066f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066f8:	f7fd fa74 	bl	8003be4 <HAL_GetTick>
 80066fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80066fe:	e008      	b.n	8006712 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006700:	f7fd fa70 	bl	8003be4 <HAL_GetTick>
 8006704:	4602      	mov	r2, r0
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	2b02      	cmp	r3, #2
 800670c:	d901      	bls.n	8006712 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800670e:	2303      	movs	r3, #3
 8006710:	e026      	b.n	8006760 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006712:	4b06      	ldr	r3, [pc, #24]	; (800672c <HAL_RCC_OscConfig+0x4c4>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800671a:	2b00      	cmp	r3, #0
 800671c:	d1f0      	bne.n	8006700 <HAL_RCC_OscConfig+0x498>
 800671e:	e01e      	b.n	800675e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	69db      	ldr	r3, [r3, #28]
 8006724:	2b01      	cmp	r3, #1
 8006726:	d107      	bne.n	8006738 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e019      	b.n	8006760 <HAL_RCC_OscConfig+0x4f8>
 800672c:	40021000 	.word	0x40021000
 8006730:	40007000 	.word	0x40007000
 8006734:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006738:	4b0b      	ldr	r3, [pc, #44]	; (8006768 <HAL_RCC_OscConfig+0x500>)
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6a1b      	ldr	r3, [r3, #32]
 8006748:	429a      	cmp	r2, r3
 800674a:	d106      	bne.n	800675a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006756:	429a      	cmp	r2, r3
 8006758:	d001      	beq.n	800675e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e000      	b.n	8006760 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	3718      	adds	r7, #24
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}
 8006768:	40021000 	.word	0x40021000

0800676c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d101      	bne.n	8006780 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e0d0      	b.n	8006922 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006780:	4b6a      	ldr	r3, [pc, #424]	; (800692c <HAL_RCC_ClockConfig+0x1c0>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 0307 	and.w	r3, r3, #7
 8006788:	683a      	ldr	r2, [r7, #0]
 800678a:	429a      	cmp	r2, r3
 800678c:	d910      	bls.n	80067b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800678e:	4b67      	ldr	r3, [pc, #412]	; (800692c <HAL_RCC_ClockConfig+0x1c0>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f023 0207 	bic.w	r2, r3, #7
 8006796:	4965      	ldr	r1, [pc, #404]	; (800692c <HAL_RCC_ClockConfig+0x1c0>)
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	4313      	orrs	r3, r2
 800679c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800679e:	4b63      	ldr	r3, [pc, #396]	; (800692c <HAL_RCC_ClockConfig+0x1c0>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 0307 	and.w	r3, r3, #7
 80067a6:	683a      	ldr	r2, [r7, #0]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d001      	beq.n	80067b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	e0b8      	b.n	8006922 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 0302 	and.w	r3, r3, #2
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d020      	beq.n	80067fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0304 	and.w	r3, r3, #4
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d005      	beq.n	80067d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80067c8:	4b59      	ldr	r3, [pc, #356]	; (8006930 <HAL_RCC_ClockConfig+0x1c4>)
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	4a58      	ldr	r2, [pc, #352]	; (8006930 <HAL_RCC_ClockConfig+0x1c4>)
 80067ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80067d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 0308 	and.w	r3, r3, #8
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d005      	beq.n	80067ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80067e0:	4b53      	ldr	r3, [pc, #332]	; (8006930 <HAL_RCC_ClockConfig+0x1c4>)
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	4a52      	ldr	r2, [pc, #328]	; (8006930 <HAL_RCC_ClockConfig+0x1c4>)
 80067e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80067ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067ec:	4b50      	ldr	r3, [pc, #320]	; (8006930 <HAL_RCC_ClockConfig+0x1c4>)
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	494d      	ldr	r1, [pc, #308]	; (8006930 <HAL_RCC_ClockConfig+0x1c4>)
 80067fa:	4313      	orrs	r3, r2
 80067fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 0301 	and.w	r3, r3, #1
 8006806:	2b00      	cmp	r3, #0
 8006808:	d040      	beq.n	800688c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	2b01      	cmp	r3, #1
 8006810:	d107      	bne.n	8006822 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006812:	4b47      	ldr	r3, [pc, #284]	; (8006930 <HAL_RCC_ClockConfig+0x1c4>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800681a:	2b00      	cmp	r3, #0
 800681c:	d115      	bne.n	800684a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e07f      	b.n	8006922 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	2b02      	cmp	r3, #2
 8006828:	d107      	bne.n	800683a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800682a:	4b41      	ldr	r3, [pc, #260]	; (8006930 <HAL_RCC_ClockConfig+0x1c4>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006832:	2b00      	cmp	r3, #0
 8006834:	d109      	bne.n	800684a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e073      	b.n	8006922 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800683a:	4b3d      	ldr	r3, [pc, #244]	; (8006930 <HAL_RCC_ClockConfig+0x1c4>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 0302 	and.w	r3, r3, #2
 8006842:	2b00      	cmp	r3, #0
 8006844:	d101      	bne.n	800684a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e06b      	b.n	8006922 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800684a:	4b39      	ldr	r3, [pc, #228]	; (8006930 <HAL_RCC_ClockConfig+0x1c4>)
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	f023 0203 	bic.w	r2, r3, #3
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	4936      	ldr	r1, [pc, #216]	; (8006930 <HAL_RCC_ClockConfig+0x1c4>)
 8006858:	4313      	orrs	r3, r2
 800685a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800685c:	f7fd f9c2 	bl	8003be4 <HAL_GetTick>
 8006860:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006862:	e00a      	b.n	800687a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006864:	f7fd f9be 	bl	8003be4 <HAL_GetTick>
 8006868:	4602      	mov	r2, r0
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006872:	4293      	cmp	r3, r2
 8006874:	d901      	bls.n	800687a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006876:	2303      	movs	r3, #3
 8006878:	e053      	b.n	8006922 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800687a:	4b2d      	ldr	r3, [pc, #180]	; (8006930 <HAL_RCC_ClockConfig+0x1c4>)
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	f003 020c 	and.w	r2, r3, #12
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	429a      	cmp	r2, r3
 800688a:	d1eb      	bne.n	8006864 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800688c:	4b27      	ldr	r3, [pc, #156]	; (800692c <HAL_RCC_ClockConfig+0x1c0>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 0307 	and.w	r3, r3, #7
 8006894:	683a      	ldr	r2, [r7, #0]
 8006896:	429a      	cmp	r2, r3
 8006898:	d210      	bcs.n	80068bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800689a:	4b24      	ldr	r3, [pc, #144]	; (800692c <HAL_RCC_ClockConfig+0x1c0>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f023 0207 	bic.w	r2, r3, #7
 80068a2:	4922      	ldr	r1, [pc, #136]	; (800692c <HAL_RCC_ClockConfig+0x1c0>)
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068aa:	4b20      	ldr	r3, [pc, #128]	; (800692c <HAL_RCC_ClockConfig+0x1c0>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 0307 	and.w	r3, r3, #7
 80068b2:	683a      	ldr	r2, [r7, #0]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d001      	beq.n	80068bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e032      	b.n	8006922 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 0304 	and.w	r3, r3, #4
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d008      	beq.n	80068da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068c8:	4b19      	ldr	r3, [pc, #100]	; (8006930 <HAL_RCC_ClockConfig+0x1c4>)
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	4916      	ldr	r1, [pc, #88]	; (8006930 <HAL_RCC_ClockConfig+0x1c4>)
 80068d6:	4313      	orrs	r3, r2
 80068d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 0308 	and.w	r3, r3, #8
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d009      	beq.n	80068fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80068e6:	4b12      	ldr	r3, [pc, #72]	; (8006930 <HAL_RCC_ClockConfig+0x1c4>)
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	691b      	ldr	r3, [r3, #16]
 80068f2:	00db      	lsls	r3, r3, #3
 80068f4:	490e      	ldr	r1, [pc, #56]	; (8006930 <HAL_RCC_ClockConfig+0x1c4>)
 80068f6:	4313      	orrs	r3, r2
 80068f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80068fa:	f000 f821 	bl	8006940 <HAL_RCC_GetSysClockFreq>
 80068fe:	4602      	mov	r2, r0
 8006900:	4b0b      	ldr	r3, [pc, #44]	; (8006930 <HAL_RCC_ClockConfig+0x1c4>)
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	091b      	lsrs	r3, r3, #4
 8006906:	f003 030f 	and.w	r3, r3, #15
 800690a:	490a      	ldr	r1, [pc, #40]	; (8006934 <HAL_RCC_ClockConfig+0x1c8>)
 800690c:	5ccb      	ldrb	r3, [r1, r3]
 800690e:	fa22 f303 	lsr.w	r3, r2, r3
 8006912:	4a09      	ldr	r2, [pc, #36]	; (8006938 <HAL_RCC_ClockConfig+0x1cc>)
 8006914:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006916:	4b09      	ldr	r3, [pc, #36]	; (800693c <HAL_RCC_ClockConfig+0x1d0>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4618      	mov	r0, r3
 800691c:	f7fd f920 	bl	8003b60 <HAL_InitTick>

  return HAL_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3710      	adds	r7, #16
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	40022000 	.word	0x40022000
 8006930:	40021000 	.word	0x40021000
 8006934:	0800dac8 	.word	0x0800dac8
 8006938:	20000000 	.word	0x20000000
 800693c:	20000004 	.word	0x20000004

08006940 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006940:	b490      	push	{r4, r7}
 8006942:	b08a      	sub	sp, #40	; 0x28
 8006944:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006946:	4b29      	ldr	r3, [pc, #164]	; (80069ec <HAL_RCC_GetSysClockFreq+0xac>)
 8006948:	1d3c      	adds	r4, r7, #4
 800694a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800694c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006950:	f240 2301 	movw	r3, #513	; 0x201
 8006954:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006956:	2300      	movs	r3, #0
 8006958:	61fb      	str	r3, [r7, #28]
 800695a:	2300      	movs	r3, #0
 800695c:	61bb      	str	r3, [r7, #24]
 800695e:	2300      	movs	r3, #0
 8006960:	627b      	str	r3, [r7, #36]	; 0x24
 8006962:	2300      	movs	r3, #0
 8006964:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006966:	2300      	movs	r3, #0
 8006968:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800696a:	4b21      	ldr	r3, [pc, #132]	; (80069f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	f003 030c 	and.w	r3, r3, #12
 8006976:	2b04      	cmp	r3, #4
 8006978:	d002      	beq.n	8006980 <HAL_RCC_GetSysClockFreq+0x40>
 800697a:	2b08      	cmp	r3, #8
 800697c:	d003      	beq.n	8006986 <HAL_RCC_GetSysClockFreq+0x46>
 800697e:	e02b      	b.n	80069d8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006980:	4b1c      	ldr	r3, [pc, #112]	; (80069f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006982:	623b      	str	r3, [r7, #32]
      break;
 8006984:	e02b      	b.n	80069de <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	0c9b      	lsrs	r3, r3, #18
 800698a:	f003 030f 	and.w	r3, r3, #15
 800698e:	3328      	adds	r3, #40	; 0x28
 8006990:	443b      	add	r3, r7
 8006992:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006996:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d012      	beq.n	80069c8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80069a2:	4b13      	ldr	r3, [pc, #76]	; (80069f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	0c5b      	lsrs	r3, r3, #17
 80069a8:	f003 0301 	and.w	r3, r3, #1
 80069ac:	3328      	adds	r3, #40	; 0x28
 80069ae:	443b      	add	r3, r7
 80069b0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80069b4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	4a0e      	ldr	r2, [pc, #56]	; (80069f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80069ba:	fb03 f202 	mul.w	r2, r3, r2
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069c4:	627b      	str	r3, [r7, #36]	; 0x24
 80069c6:	e004      	b.n	80069d2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	4a0b      	ldr	r2, [pc, #44]	; (80069f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80069cc:	fb02 f303 	mul.w	r3, r2, r3
 80069d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80069d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d4:	623b      	str	r3, [r7, #32]
      break;
 80069d6:	e002      	b.n	80069de <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80069d8:	4b06      	ldr	r3, [pc, #24]	; (80069f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80069da:	623b      	str	r3, [r7, #32]
      break;
 80069dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80069de:	6a3b      	ldr	r3, [r7, #32]
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3728      	adds	r7, #40	; 0x28
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bc90      	pop	{r4, r7}
 80069e8:	4770      	bx	lr
 80069ea:	bf00      	nop
 80069ec:	0800daa8 	.word	0x0800daa8
 80069f0:	40021000 	.word	0x40021000
 80069f4:	007a1200 	.word	0x007a1200
 80069f8:	003d0900 	.word	0x003d0900

080069fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069fc:	b480      	push	{r7}
 80069fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a00:	4b02      	ldr	r3, [pc, #8]	; (8006a0c <HAL_RCC_GetHCLKFreq+0x10>)
 8006a02:	681b      	ldr	r3, [r3, #0]
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bc80      	pop	{r7}
 8006a0a:	4770      	bx	lr
 8006a0c:	20000000 	.word	0x20000000

08006a10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006a14:	f7ff fff2 	bl	80069fc <HAL_RCC_GetHCLKFreq>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	4b05      	ldr	r3, [pc, #20]	; (8006a30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	0a1b      	lsrs	r3, r3, #8
 8006a20:	f003 0307 	and.w	r3, r3, #7
 8006a24:	4903      	ldr	r1, [pc, #12]	; (8006a34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a26:	5ccb      	ldrb	r3, [r1, r3]
 8006a28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	bd80      	pop	{r7, pc}
 8006a30:	40021000 	.word	0x40021000
 8006a34:	0800dad8 	.word	0x0800dad8

08006a38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006a3c:	f7ff ffde 	bl	80069fc <HAL_RCC_GetHCLKFreq>
 8006a40:	4602      	mov	r2, r0
 8006a42:	4b05      	ldr	r3, [pc, #20]	; (8006a58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	0adb      	lsrs	r3, r3, #11
 8006a48:	f003 0307 	and.w	r3, r3, #7
 8006a4c:	4903      	ldr	r1, [pc, #12]	; (8006a5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a4e:	5ccb      	ldrb	r3, [r1, r3]
 8006a50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	bd80      	pop	{r7, pc}
 8006a58:	40021000 	.word	0x40021000
 8006a5c:	0800dad8 	.word	0x0800dad8

08006a60 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b085      	sub	sp, #20
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006a68:	4b0a      	ldr	r3, [pc, #40]	; (8006a94 <RCC_Delay+0x34>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a0a      	ldr	r2, [pc, #40]	; (8006a98 <RCC_Delay+0x38>)
 8006a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a72:	0a5b      	lsrs	r3, r3, #9
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	fb02 f303 	mul.w	r3, r2, r3
 8006a7a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006a7c:	bf00      	nop
  }
  while (Delay --);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	1e5a      	subs	r2, r3, #1
 8006a82:	60fa      	str	r2, [r7, #12]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d1f9      	bne.n	8006a7c <RCC_Delay+0x1c>
}
 8006a88:	bf00      	nop
 8006a8a:	bf00      	nop
 8006a8c:	3714      	adds	r7, #20
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bc80      	pop	{r7}
 8006a92:	4770      	bx	lr
 8006a94:	20000000 	.word	0x20000000
 8006a98:	10624dd3 	.word	0x10624dd3

08006a9c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b086      	sub	sp, #24
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	613b      	str	r3, [r7, #16]
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 0301 	and.w	r3, r3, #1
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d07d      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006abc:	4b4f      	ldr	r3, [pc, #316]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006abe:	69db      	ldr	r3, [r3, #28]
 8006ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d10d      	bne.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ac8:	4b4c      	ldr	r3, [pc, #304]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006aca:	69db      	ldr	r3, [r3, #28]
 8006acc:	4a4b      	ldr	r2, [pc, #300]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ad2:	61d3      	str	r3, [r2, #28]
 8006ad4:	4b49      	ldr	r3, [pc, #292]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ad6:	69db      	ldr	r3, [r3, #28]
 8006ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006adc:	60bb      	str	r3, [r7, #8]
 8006ade:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ae4:	4b46      	ldr	r3, [pc, #280]	; (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d118      	bne.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006af0:	4b43      	ldr	r3, [pc, #268]	; (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a42      	ldr	r2, [pc, #264]	; (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006af6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006afa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006afc:	f7fd f872 	bl	8003be4 <HAL_GetTick>
 8006b00:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b02:	e008      	b.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b04:	f7fd f86e 	bl	8003be4 <HAL_GetTick>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	1ad3      	subs	r3, r2, r3
 8006b0e:	2b64      	cmp	r3, #100	; 0x64
 8006b10:	d901      	bls.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006b12:	2303      	movs	r3, #3
 8006b14:	e06d      	b.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b16:	4b3a      	ldr	r3, [pc, #232]	; (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d0f0      	beq.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006b22:	4b36      	ldr	r3, [pc, #216]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b24:	6a1b      	ldr	r3, [r3, #32]
 8006b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b2a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d02e      	beq.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d027      	beq.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006b40:	4b2e      	ldr	r3, [pc, #184]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b42:	6a1b      	ldr	r3, [r3, #32]
 8006b44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b48:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006b4a:	4b2e      	ldr	r3, [pc, #184]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006b50:	4b2c      	ldr	r3, [pc, #176]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006b52:	2200      	movs	r2, #0
 8006b54:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006b56:	4a29      	ldr	r2, [pc, #164]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f003 0301 	and.w	r3, r3, #1
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d014      	beq.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b66:	f7fd f83d 	bl	8003be4 <HAL_GetTick>
 8006b6a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b6c:	e00a      	b.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b6e:	f7fd f839 	bl	8003be4 <HAL_GetTick>
 8006b72:	4602      	mov	r2, r0
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d901      	bls.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006b80:	2303      	movs	r3, #3
 8006b82:	e036      	b.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b84:	4b1d      	ldr	r3, [pc, #116]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b86:	6a1b      	ldr	r3, [r3, #32]
 8006b88:	f003 0302 	and.w	r3, r3, #2
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d0ee      	beq.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b90:	4b1a      	ldr	r3, [pc, #104]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b92:	6a1b      	ldr	r3, [r3, #32]
 8006b94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	4917      	ldr	r1, [pc, #92]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006ba2:	7dfb      	ldrb	r3, [r7, #23]
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d105      	bne.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ba8:	4b14      	ldr	r3, [pc, #80]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006baa:	69db      	ldr	r3, [r3, #28]
 8006bac:	4a13      	ldr	r2, [pc, #76]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bb2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f003 0302 	and.w	r3, r3, #2
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d008      	beq.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006bc0:	4b0e      	ldr	r3, [pc, #56]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	490b      	ldr	r1, [pc, #44]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 0310 	and.w	r3, r3, #16
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d008      	beq.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006bde:	4b07      	ldr	r3, [pc, #28]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	4904      	ldr	r1, [pc, #16]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bec:	4313      	orrs	r3, r2
 8006bee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3718      	adds	r7, #24
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	40021000 	.word	0x40021000
 8006c00:	40007000 	.word	0x40007000
 8006c04:	42420440 	.word	0x42420440

08006c08 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006c08:	b590      	push	{r4, r7, lr}
 8006c0a:	b08d      	sub	sp, #52	; 0x34
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006c10:	4b58      	ldr	r3, [pc, #352]	; (8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8006c12:	f107 040c 	add.w	r4, r7, #12
 8006c16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006c18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006c1c:	f240 2301 	movw	r3, #513	; 0x201
 8006c20:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006c22:	2300      	movs	r3, #0
 8006c24:	627b      	str	r3, [r7, #36]	; 0x24
 8006c26:	2300      	movs	r3, #0
 8006c28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	61fb      	str	r3, [r7, #28]
 8006c32:	2300      	movs	r3, #0
 8006c34:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2b10      	cmp	r3, #16
 8006c3a:	d00a      	beq.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2b10      	cmp	r3, #16
 8006c40:	f200 808e 	bhi.w	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d049      	beq.n	8006cde <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2b02      	cmp	r3, #2
 8006c4e:	d079      	beq.n	8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8006c50:	e086      	b.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8006c52:	4b49      	ldr	r3, [pc, #292]	; (8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006c58:	4b47      	ldr	r3, [pc, #284]	; (8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d07f      	beq.n	8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	0c9b      	lsrs	r3, r3, #18
 8006c68:	f003 030f 	and.w	r3, r3, #15
 8006c6c:	3330      	adds	r3, #48	; 0x30
 8006c6e:	443b      	add	r3, r7
 8006c70:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006c74:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d017      	beq.n	8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006c80:	4b3d      	ldr	r3, [pc, #244]	; (8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	0c5b      	lsrs	r3, r3, #17
 8006c86:	f003 0301 	and.w	r3, r3, #1
 8006c8a:	3330      	adds	r3, #48	; 0x30
 8006c8c:	443b      	add	r3, r7
 8006c8e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006c92:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006c94:	69fb      	ldr	r3, [r7, #28]
 8006c96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00d      	beq.n	8006cba <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006c9e:	4a37      	ldr	r2, [pc, #220]	; (8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8006ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca2:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ca6:	6a3b      	ldr	r3, [r7, #32]
 8006ca8:	fb02 f303 	mul.w	r3, r2, r3
 8006cac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cae:	e004      	b.n	8006cba <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006cb0:	6a3b      	ldr	r3, [r7, #32]
 8006cb2:	4a33      	ldr	r2, [pc, #204]	; (8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006cb4:	fb02 f303 	mul.w	r3, r2, r3
 8006cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006cba:	4b2f      	ldr	r3, [pc, #188]	; (8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006cc6:	d102      	bne.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8006cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cca:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006ccc:	e04a      	b.n	8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8006cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd0:	005b      	lsls	r3, r3, #1
 8006cd2:	4a2c      	ldr	r2, [pc, #176]	; (8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8006cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8006cd8:	085b      	lsrs	r3, r3, #1
 8006cda:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006cdc:	e042      	b.n	8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8006cde:	4b26      	ldr	r3, [pc, #152]	; (8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006ce0:	6a1b      	ldr	r3, [r3, #32]
 8006ce2:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cee:	d108      	bne.n	8006d02 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	f003 0302 	and.w	r3, r3, #2
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d003      	beq.n	8006d02 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8006cfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d00:	e01f      	b.n	8006d42 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d0c:	d109      	bne.n	8006d22 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8006d0e:	4b1a      	ldr	r3, [pc, #104]	; (8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d12:	f003 0302 	and.w	r3, r3, #2
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d003      	beq.n	8006d22 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8006d1a:	f649 4340 	movw	r3, #40000	; 0x9c40
 8006d1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d20:	e00f      	b.n	8006d42 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006d22:	69fb      	ldr	r3, [r7, #28]
 8006d24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d2c:	d11c      	bne.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8006d2e:	4b12      	ldr	r3, [pc, #72]	; (8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d016      	beq.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8006d3a:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006d3e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006d40:	e012      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8006d42:	e011      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006d44:	f7ff fe78 	bl	8006a38 <HAL_RCC_GetPCLK2Freq>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	4b0b      	ldr	r3, [pc, #44]	; (8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	0b9b      	lsrs	r3, r3, #14
 8006d50:	f003 0303 	and.w	r3, r3, #3
 8006d54:	3301      	adds	r3, #1
 8006d56:	005b      	lsls	r3, r3, #1
 8006d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d5c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006d5e:	e004      	b.n	8006d6a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8006d60:	bf00      	nop
 8006d62:	e002      	b.n	8006d6a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8006d64:	bf00      	nop
 8006d66:	e000      	b.n	8006d6a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8006d68:	bf00      	nop
    }
  }
  return (frequency);
 8006d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3734      	adds	r7, #52	; 0x34
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd90      	pop	{r4, r7, pc}
 8006d74:	0800dab8 	.word	0x0800dab8
 8006d78:	40021000 	.word	0x40021000
 8006d7c:	007a1200 	.word	0x007a1200
 8006d80:	003d0900 	.word	0x003d0900
 8006d84:	aaaaaaab 	.word	0xaaaaaaab

08006d88 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8006d90:	2300      	movs	r3, #0
 8006d92:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d101      	bne.n	8006d9e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e084      	b.n	8006ea8 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	7c5b      	ldrb	r3, [r3, #17]
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d105      	bne.n	8006db4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f7fc fc3c 	bl	800362c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2202      	movs	r2, #2
 8006db8:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 f9c8 	bl	8007150 <HAL_RTC_WaitForSynchro>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d004      	beq.n	8006dd0 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2204      	movs	r2, #4
 8006dca:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e06b      	b.n	8006ea8 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 fa81 	bl	80072d8 <RTC_EnterInitMode>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d004      	beq.n	8006de6 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2204      	movs	r2, #4
 8006de0:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	e060      	b.n	8006ea8 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	685a      	ldr	r2, [r3, #4]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f022 0207 	bic.w	r2, r2, #7
 8006df4:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d005      	beq.n	8006e0a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8006dfe:	4b2c      	ldr	r3, [pc, #176]	; (8006eb0 <HAL_RTC_Init+0x128>)
 8006e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e02:	4a2b      	ldr	r2, [pc, #172]	; (8006eb0 <HAL_RTC_Init+0x128>)
 8006e04:	f023 0301 	bic.w	r3, r3, #1
 8006e08:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8006e0a:	4b29      	ldr	r3, [pc, #164]	; (8006eb0 <HAL_RTC_Init+0x128>)
 8006e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e0e:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	4926      	ldr	r1, [pc, #152]	; (8006eb0 <HAL_RTC_Init+0x128>)
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e24:	d003      	beq.n	8006e2e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	60fb      	str	r3, [r7, #12]
 8006e2c:	e00e      	b.n	8006e4c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8006e2e:	2001      	movs	r0, #1
 8006e30:	f7ff feea 	bl	8006c08 <HAL_RCCEx_GetPeriphCLKFreq>
 8006e34:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d104      	bne.n	8006e46 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2204      	movs	r2, #4
 8006e40:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e030      	b.n	8006ea8 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	3b01      	subs	r3, #1
 8006e4a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	f023 010f 	bic.w	r1, r3, #15
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	0c1a      	lsrs	r2, r3, #16
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	430a      	orrs	r2, r1
 8006e60:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	0c1b      	lsrs	r3, r3, #16
 8006e6a:	041b      	lsls	r3, r3, #16
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	b291      	uxth	r1, r2
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	6812      	ldr	r2, [r2, #0]
 8006e74:	430b      	orrs	r3, r1
 8006e76:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f000 fa55 	bl	8007328 <RTC_ExitInitMode>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d004      	beq.n	8006e8e <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2204      	movs	r2, #4
 8006e88:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e00c      	b.n	8006ea8 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2201      	movs	r2, #1
 8006e98:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8006ea6:	2300      	movs	r3, #0
  }
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3710      	adds	r7, #16
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}
 8006eb0:	40006c00 	.word	0x40006c00

08006eb4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006eb4:	b590      	push	{r4, r7, lr}
 8006eb6:	b087      	sub	sp, #28
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	617b      	str	r3, [r7, #20]
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d002      	beq.n	8006ed4 <HAL_RTC_SetTime+0x20>
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d101      	bne.n	8006ed8 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e080      	b.n	8006fda <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	7c1b      	ldrb	r3, [r3, #16]
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d101      	bne.n	8006ee4 <HAL_RTC_SetTime+0x30>
 8006ee0:	2302      	movs	r3, #2
 8006ee2:	e07a      	b.n	8006fda <HAL_RTC_SetTime+0x126>
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2202      	movs	r2, #2
 8006eee:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d113      	bne.n	8006f1e <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	461a      	mov	r2, r3
 8006efc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8006f00:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	785b      	ldrb	r3, [r3, #1]
 8006f08:	4619      	mov	r1, r3
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	011b      	lsls	r3, r3, #4
 8006f0e:	1a5b      	subs	r3, r3, r1
 8006f10:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8006f12:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8006f14:	68ba      	ldr	r2, [r7, #8]
 8006f16:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8006f18:	4413      	add	r3, r2
 8006f1a:	617b      	str	r3, [r7, #20]
 8006f1c:	e01e      	b.n	8006f5c <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	4618      	mov	r0, r3
 8006f24:	f000 fa28 	bl	8007378 <RTC_Bcd2ToByte>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8006f30:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	785b      	ldrb	r3, [r3, #1]
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f000 fa1d 	bl	8007378 <RTC_Bcd2ToByte>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	461a      	mov	r2, r3
 8006f42:	4613      	mov	r3, r2
 8006f44:	011b      	lsls	r3, r3, #4
 8006f46:	1a9b      	subs	r3, r3, r2
 8006f48:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8006f4a:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	789b      	ldrb	r3, [r3, #2]
 8006f50:	4618      	mov	r0, r3
 8006f52:	f000 fa11 	bl	8007378 <RTC_Bcd2ToByte>
 8006f56:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8006f58:	4423      	add	r3, r4
 8006f5a:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8006f5c:	6979      	ldr	r1, [r7, #20]
 8006f5e:	68f8      	ldr	r0, [r7, #12]
 8006f60:	f000 f953 	bl	800720a <RTC_WriteTimeCounter>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d007      	beq.n	8006f7a <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2204      	movs	r2, #4
 8006f6e:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2200      	movs	r2, #0
 8006f74:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	e02f      	b.n	8006fda <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	685a      	ldr	r2, [r3, #4]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f022 0205 	bic.w	r2, r2, #5
 8006f88:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8006f8a:	68f8      	ldr	r0, [r7, #12]
 8006f8c:	f000 f964 	bl	8007258 <RTC_ReadAlarmCounter>
 8006f90:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f98:	d018      	beq.n	8006fcc <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8006f9a:	693a      	ldr	r2, [r7, #16]
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d214      	bcs.n	8006fcc <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8006fa8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006fac:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006fae:	6939      	ldr	r1, [r7, #16]
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f000 f96a 	bl	800728a <RTC_WriteAlarmCounter>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d007      	beq.n	8006fcc <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2204      	movs	r2, #4
 8006fc0:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e006      	b.n	8006fda <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8006fd8:	2300      	movs	r3, #0
  }
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	371c      	adds	r7, #28
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd90      	pop	{r4, r7, pc}
	...

08006fe4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b088      	sub	sp, #32
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	61fb      	str	r3, [r7, #28]
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	61bb      	str	r3, [r7, #24]
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d002      	beq.n	8007008 <HAL_RTC_SetDate+0x24>
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d101      	bne.n	800700c <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	e097      	b.n	800713c <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	7c1b      	ldrb	r3, [r3, #16]
 8007010:	2b01      	cmp	r3, #1
 8007012:	d101      	bne.n	8007018 <HAL_RTC_SetDate+0x34>
 8007014:	2302      	movs	r3, #2
 8007016:	e091      	b.n	800713c <HAL_RTC_SetDate+0x158>
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2201      	movs	r2, #1
 800701c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2202      	movs	r2, #2
 8007022:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d10c      	bne.n	8007044 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	78da      	ldrb	r2, [r3, #3]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	785a      	ldrb	r2, [r3, #1]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	789a      	ldrb	r2, [r3, #2]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	739a      	strb	r2, [r3, #14]
 8007042:	e01a      	b.n	800707a <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	78db      	ldrb	r3, [r3, #3]
 8007048:	4618      	mov	r0, r3
 800704a:	f000 f995 	bl	8007378 <RTC_Bcd2ToByte>
 800704e:	4603      	mov	r3, r0
 8007050:	461a      	mov	r2, r3
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	785b      	ldrb	r3, [r3, #1]
 800705a:	4618      	mov	r0, r3
 800705c:	f000 f98c 	bl	8007378 <RTC_Bcd2ToByte>
 8007060:	4603      	mov	r3, r0
 8007062:	461a      	mov	r2, r3
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	789b      	ldrb	r3, [r3, #2]
 800706c:	4618      	mov	r0, r3
 800706e:	f000 f983 	bl	8007378 <RTC_Bcd2ToByte>
 8007072:	4603      	mov	r3, r0
 8007074:	461a      	mov	r2, r3
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	7bdb      	ldrb	r3, [r3, #15]
 800707e:	4618      	mov	r0, r3
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	7b59      	ldrb	r1, [r3, #13]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	7b9b      	ldrb	r3, [r3, #14]
 8007088:	461a      	mov	r2, r3
 800708a:	f000 f993 	bl	80073b4 <RTC_WeekDayNum>
 800708e:	4603      	mov	r3, r0
 8007090:	461a      	mov	r2, r3
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	7b1a      	ldrb	r2, [r3, #12]
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800709e:	68f8      	ldr	r0, [r7, #12]
 80070a0:	f000 f883 	bl	80071aa <RTC_ReadTimeCounter>
 80070a4:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80070a6:	69fb      	ldr	r3, [r7, #28]
 80070a8:	4a26      	ldr	r2, [pc, #152]	; (8007144 <HAL_RTC_SetDate+0x160>)
 80070aa:	fba2 2303 	umull	r2, r3, r2, r3
 80070ae:	0adb      	lsrs	r3, r3, #11
 80070b0:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	2b18      	cmp	r3, #24
 80070b6:	d93a      	bls.n	800712e <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	4a23      	ldr	r2, [pc, #140]	; (8007148 <HAL_RTC_SetDate+0x164>)
 80070bc:	fba2 2303 	umull	r2, r3, r2, r3
 80070c0:	091b      	lsrs	r3, r3, #4
 80070c2:	4a22      	ldr	r2, [pc, #136]	; (800714c <HAL_RTC_SetDate+0x168>)
 80070c4:	fb02 f303 	mul.w	r3, r2, r3
 80070c8:	69fa      	ldr	r2, [r7, #28]
 80070ca:	1ad3      	subs	r3, r2, r3
 80070cc:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80070ce:	69f9      	ldr	r1, [r7, #28]
 80070d0:	68f8      	ldr	r0, [r7, #12]
 80070d2:	f000 f89a 	bl	800720a <RTC_WriteTimeCounter>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d007      	beq.n	80070ec <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2204      	movs	r2, #4
 80070e0:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2200      	movs	r2, #0
 80070e6:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	e027      	b.n	800713c <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	f000 f8b3 	bl	8007258 <RTC_ReadAlarmCounter>
 80070f2:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070fa:	d018      	beq.n	800712e <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80070fc:	69ba      	ldr	r2, [r7, #24]
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	429a      	cmp	r2, r3
 8007102:	d214      	bcs.n	800712e <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8007104:	69bb      	ldr	r3, [r7, #24]
 8007106:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800710a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800710e:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8007110:	69b9      	ldr	r1, [r7, #24]
 8007112:	68f8      	ldr	r0, [r7, #12]
 8007114:	f000 f8b9 	bl	800728a <RTC_WriteAlarmCounter>
 8007118:	4603      	mov	r3, r0
 800711a:	2b00      	cmp	r3, #0
 800711c:	d007      	beq.n	800712e <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2204      	movs	r2, #4
 8007122:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2200      	movs	r2, #0
 8007128:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	e006      	b.n	800713c <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2201      	movs	r2, #1
 8007132:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2200      	movs	r2, #0
 8007138:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800713a:	2300      	movs	r3, #0
}
 800713c:	4618      	mov	r0, r3
 800713e:	3720      	adds	r7, #32
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}
 8007144:	91a2b3c5 	.word	0x91a2b3c5
 8007148:	aaaaaaab 	.word	0xaaaaaaab
 800714c:	00015180 	.word	0x00015180

08007150 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007158:	2300      	movs	r3, #0
 800715a:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d101      	bne.n	8007166 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	e01d      	b.n	80071a2 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	685a      	ldr	r2, [r3, #4]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f022 0208 	bic.w	r2, r2, #8
 8007174:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8007176:	f7fc fd35 	bl	8003be4 <HAL_GetTick>
 800717a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800717c:	e009      	b.n	8007192 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800717e:	f7fc fd31 	bl	8003be4 <HAL_GetTick>
 8007182:	4602      	mov	r2, r0
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	1ad3      	subs	r3, r2, r3
 8007188:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800718c:	d901      	bls.n	8007192 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800718e:	2303      	movs	r3, #3
 8007190:	e007      	b.n	80071a2 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	f003 0308 	and.w	r3, r3, #8
 800719c:	2b00      	cmp	r3, #0
 800719e:	d0ee      	beq.n	800717e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80071a0:	2300      	movs	r3, #0
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3710      	adds	r7, #16
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}

080071aa <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80071aa:	b480      	push	{r7}
 80071ac:	b087      	sub	sp, #28
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80071b2:	2300      	movs	r3, #0
 80071b4:	827b      	strh	r3, [r7, #18]
 80071b6:	2300      	movs	r3, #0
 80071b8:	823b      	strh	r3, [r7, #16]
 80071ba:	2300      	movs	r3, #0
 80071bc:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80071be:	2300      	movs	r3, #0
 80071c0:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	699b      	ldr	r3, [r3, #24]
 80071c8:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	69db      	ldr	r3, [r3, #28]
 80071d0:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	699b      	ldr	r3, [r3, #24]
 80071d8:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80071da:	8a7a      	ldrh	r2, [r7, #18]
 80071dc:	8a3b      	ldrh	r3, [r7, #16]
 80071de:	429a      	cmp	r2, r3
 80071e0:	d008      	beq.n	80071f4 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80071e2:	8a3b      	ldrh	r3, [r7, #16]
 80071e4:	041a      	lsls	r2, r3, #16
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	69db      	ldr	r3, [r3, #28]
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	4313      	orrs	r3, r2
 80071f0:	617b      	str	r3, [r7, #20]
 80071f2:	e004      	b.n	80071fe <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80071f4:	8a7b      	ldrh	r3, [r7, #18]
 80071f6:	041a      	lsls	r2, r3, #16
 80071f8:	89fb      	ldrh	r3, [r7, #14]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80071fe:	697b      	ldr	r3, [r7, #20]
}
 8007200:	4618      	mov	r0, r3
 8007202:	371c      	adds	r7, #28
 8007204:	46bd      	mov	sp, r7
 8007206:	bc80      	pop	{r7}
 8007208:	4770      	bx	lr

0800720a <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800720a:	b580      	push	{r7, lr}
 800720c:	b084      	sub	sp, #16
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
 8007212:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007214:	2300      	movs	r3, #0
 8007216:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 f85d 	bl	80072d8 <RTC_EnterInitMode>
 800721e:	4603      	mov	r3, r0
 8007220:	2b00      	cmp	r3, #0
 8007222:	d002      	beq.n	800722a <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8007224:	2301      	movs	r3, #1
 8007226:	73fb      	strb	r3, [r7, #15]
 8007228:	e011      	b.n	800724e <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	683a      	ldr	r2, [r7, #0]
 8007230:	0c12      	lsrs	r2, r2, #16
 8007232:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	683a      	ldr	r2, [r7, #0]
 800723a:	b292      	uxth	r2, r2
 800723c:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 f872 	bl	8007328 <RTC_ExitInitMode>
 8007244:	4603      	mov	r3, r0
 8007246:	2b00      	cmp	r3, #0
 8007248:	d001      	beq.n	800724e <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800724e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007250:	4618      	mov	r0, r3
 8007252:	3710      	adds	r7, #16
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8007258:	b480      	push	{r7}
 800725a:	b085      	sub	sp, #20
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8007260:	2300      	movs	r3, #0
 8007262:	81fb      	strh	r3, [r7, #14]
 8007264:	2300      	movs	r3, #0
 8007266:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	6a1b      	ldr	r3, [r3, #32]
 800726e:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007276:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8007278:	89fb      	ldrh	r3, [r7, #14]
 800727a:	041a      	lsls	r2, r3, #16
 800727c:	89bb      	ldrh	r3, [r7, #12]
 800727e:	4313      	orrs	r3, r2
}
 8007280:	4618      	mov	r0, r3
 8007282:	3714      	adds	r7, #20
 8007284:	46bd      	mov	sp, r7
 8007286:	bc80      	pop	{r7}
 8007288:	4770      	bx	lr

0800728a <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800728a:	b580      	push	{r7, lr}
 800728c:	b084      	sub	sp, #16
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
 8007292:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007294:	2300      	movs	r3, #0
 8007296:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 f81d 	bl	80072d8 <RTC_EnterInitMode>
 800729e:	4603      	mov	r3, r0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d002      	beq.n	80072aa <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80072a4:	2301      	movs	r3, #1
 80072a6:	73fb      	strb	r3, [r7, #15]
 80072a8:	e011      	b.n	80072ce <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	683a      	ldr	r2, [r7, #0]
 80072b0:	0c12      	lsrs	r2, r2, #16
 80072b2:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	683a      	ldr	r2, [r7, #0]
 80072ba:	b292      	uxth	r2, r2
 80072bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 f832 	bl	8007328 <RTC_ExitInitMode>
 80072c4:	4603      	mov	r3, r0
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d001      	beq.n	80072ce <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80072ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3710      	adds	r7, #16
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b084      	sub	sp, #16
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80072e0:	2300      	movs	r3, #0
 80072e2:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80072e4:	f7fc fc7e 	bl	8003be4 <HAL_GetTick>
 80072e8:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80072ea:	e009      	b.n	8007300 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80072ec:	f7fc fc7a 	bl	8003be4 <HAL_GetTick>
 80072f0:	4602      	mov	r2, r0
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	1ad3      	subs	r3, r2, r3
 80072f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80072fa:	d901      	bls.n	8007300 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80072fc:	2303      	movs	r3, #3
 80072fe:	e00f      	b.n	8007320 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	f003 0320 	and.w	r3, r3, #32
 800730a:	2b00      	cmp	r3, #0
 800730c:	d0ee      	beq.n	80072ec <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	685a      	ldr	r2, [r3, #4]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f042 0210 	orr.w	r2, r2, #16
 800731c:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800731e:	2300      	movs	r3, #0
}
 8007320:	4618      	mov	r0, r3
 8007322:	3710      	adds	r7, #16
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007330:	2300      	movs	r3, #0
 8007332:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	685a      	ldr	r2, [r3, #4]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f022 0210 	bic.w	r2, r2, #16
 8007342:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8007344:	f7fc fc4e 	bl	8003be4 <HAL_GetTick>
 8007348:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800734a:	e009      	b.n	8007360 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800734c:	f7fc fc4a 	bl	8003be4 <HAL_GetTick>
 8007350:	4602      	mov	r2, r0
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	1ad3      	subs	r3, r2, r3
 8007356:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800735a:	d901      	bls.n	8007360 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800735c:	2303      	movs	r3, #3
 800735e:	e007      	b.n	8007370 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	f003 0320 	and.w	r3, r3, #32
 800736a:	2b00      	cmp	r3, #0
 800736c:	d0ee      	beq.n	800734c <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800736e:	2300      	movs	r3, #0
}
 8007370:	4618      	mov	r0, r3
 8007372:	3710      	adds	r7, #16
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007378:	b480      	push	{r7}
 800737a:	b085      	sub	sp, #20
 800737c:	af00      	add	r7, sp, #0
 800737e:	4603      	mov	r3, r0
 8007380:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8007382:	2300      	movs	r3, #0
 8007384:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8007386:	79fb      	ldrb	r3, [r7, #7]
 8007388:	091b      	lsrs	r3, r3, #4
 800738a:	b2db      	uxtb	r3, r3
 800738c:	461a      	mov	r2, r3
 800738e:	4613      	mov	r3, r2
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	4413      	add	r3, r2
 8007394:	005b      	lsls	r3, r3, #1
 8007396:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8007398:	79fb      	ldrb	r3, [r7, #7]
 800739a:	f003 030f 	and.w	r3, r3, #15
 800739e:	b2da      	uxtb	r2, r3
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	4413      	add	r3, r2
 80073a6:	b2db      	uxtb	r3, r3
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3714      	adds	r7, #20
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bc80      	pop	{r7}
 80073b0:	4770      	bx	lr
	...

080073b4 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b085      	sub	sp, #20
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	460b      	mov	r3, r1
 80073be:	70fb      	strb	r3, [r7, #3]
 80073c0:	4613      	mov	r3, r2
 80073c2:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80073c4:	2300      	movs	r3, #0
 80073c6:	60bb      	str	r3, [r7, #8]
 80073c8:	2300      	movs	r3, #0
 80073ca:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80073d2:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80073d4:	78fb      	ldrb	r3, [r7, #3]
 80073d6:	2b02      	cmp	r3, #2
 80073d8:	d82d      	bhi.n	8007436 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80073da:	78fa      	ldrb	r2, [r7, #3]
 80073dc:	4613      	mov	r3, r2
 80073de:	005b      	lsls	r3, r3, #1
 80073e0:	4413      	add	r3, r2
 80073e2:	00db      	lsls	r3, r3, #3
 80073e4:	1a9b      	subs	r3, r3, r2
 80073e6:	4a2c      	ldr	r2, [pc, #176]	; (8007498 <RTC_WeekDayNum+0xe4>)
 80073e8:	fba2 2303 	umull	r2, r3, r2, r3
 80073ec:	085a      	lsrs	r2, r3, #1
 80073ee:	78bb      	ldrb	r3, [r7, #2]
 80073f0:	441a      	add	r2, r3
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	441a      	add	r2, r3
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	3b01      	subs	r3, #1
 80073fa:	089b      	lsrs	r3, r3, #2
 80073fc:	441a      	add	r2, r3
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	3b01      	subs	r3, #1
 8007402:	4926      	ldr	r1, [pc, #152]	; (800749c <RTC_WeekDayNum+0xe8>)
 8007404:	fba1 1303 	umull	r1, r3, r1, r3
 8007408:	095b      	lsrs	r3, r3, #5
 800740a:	1ad2      	subs	r2, r2, r3
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	3b01      	subs	r3, #1
 8007410:	4922      	ldr	r1, [pc, #136]	; (800749c <RTC_WeekDayNum+0xe8>)
 8007412:	fba1 1303 	umull	r1, r3, r1, r3
 8007416:	09db      	lsrs	r3, r3, #7
 8007418:	4413      	add	r3, r2
 800741a:	1d1a      	adds	r2, r3, #4
 800741c:	4b20      	ldr	r3, [pc, #128]	; (80074a0 <RTC_WeekDayNum+0xec>)
 800741e:	fba3 1302 	umull	r1, r3, r3, r2
 8007422:	1ad1      	subs	r1, r2, r3
 8007424:	0849      	lsrs	r1, r1, #1
 8007426:	440b      	add	r3, r1
 8007428:	0899      	lsrs	r1, r3, #2
 800742a:	460b      	mov	r3, r1
 800742c:	00db      	lsls	r3, r3, #3
 800742e:	1a5b      	subs	r3, r3, r1
 8007430:	1ad3      	subs	r3, r2, r3
 8007432:	60fb      	str	r3, [r7, #12]
 8007434:	e029      	b.n	800748a <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8007436:	78fa      	ldrb	r2, [r7, #3]
 8007438:	4613      	mov	r3, r2
 800743a:	005b      	lsls	r3, r3, #1
 800743c:	4413      	add	r3, r2
 800743e:	00db      	lsls	r3, r3, #3
 8007440:	1a9b      	subs	r3, r3, r2
 8007442:	4a15      	ldr	r2, [pc, #84]	; (8007498 <RTC_WeekDayNum+0xe4>)
 8007444:	fba2 2303 	umull	r2, r3, r2, r3
 8007448:	085a      	lsrs	r2, r3, #1
 800744a:	78bb      	ldrb	r3, [r7, #2]
 800744c:	441a      	add	r2, r3
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	441a      	add	r2, r3
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	089b      	lsrs	r3, r3, #2
 8007456:	441a      	add	r2, r3
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	4910      	ldr	r1, [pc, #64]	; (800749c <RTC_WeekDayNum+0xe8>)
 800745c:	fba1 1303 	umull	r1, r3, r1, r3
 8007460:	095b      	lsrs	r3, r3, #5
 8007462:	1ad2      	subs	r2, r2, r3
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	490d      	ldr	r1, [pc, #52]	; (800749c <RTC_WeekDayNum+0xe8>)
 8007468:	fba1 1303 	umull	r1, r3, r1, r3
 800746c:	09db      	lsrs	r3, r3, #7
 800746e:	4413      	add	r3, r2
 8007470:	1c9a      	adds	r2, r3, #2
 8007472:	4b0b      	ldr	r3, [pc, #44]	; (80074a0 <RTC_WeekDayNum+0xec>)
 8007474:	fba3 1302 	umull	r1, r3, r3, r2
 8007478:	1ad1      	subs	r1, r2, r3
 800747a:	0849      	lsrs	r1, r1, #1
 800747c:	440b      	add	r3, r1
 800747e:	0899      	lsrs	r1, r3, #2
 8007480:	460b      	mov	r3, r1
 8007482:	00db      	lsls	r3, r3, #3
 8007484:	1a5b      	subs	r3, r3, r1
 8007486:	1ad3      	subs	r3, r2, r3
 8007488:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	b2db      	uxtb	r3, r3
}
 800748e:	4618      	mov	r0, r3
 8007490:	3714      	adds	r7, #20
 8007492:	46bd      	mov	sp, r7
 8007494:	bc80      	pop	{r7}
 8007496:	4770      	bx	lr
 8007498:	38e38e39 	.word	0x38e38e39
 800749c:	51eb851f 	.word	0x51eb851f
 80074a0:	24924925 	.word	0x24924925

080074a4 <HAL_RTCEx_SetTamper>:
  * @param  sTamper: Pointer to Tamper Structure.
  * @note   Tamper can be enabled only if ASOE and CCO bit are reset
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTamper(RTC_HandleTypeDef *hrtc, RTC_TamperTypeDef *sTamper)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
  /* Check input parameters */
  if ((hrtc == NULL) || (sTamper == NULL))
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d002      	beq.n	80074ba <HAL_RTCEx_SetTamper+0x16>
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d101      	bne.n	80074be <HAL_RTCEx_SetTamper+0x1a>
  {
    return HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	e02c      	b.n	8007518 <HAL_RTCEx_SetTamper+0x74>
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER(sTamper->Tamper));
  assert_param(IS_RTC_TAMPER_TRIGGER(sTamper->Trigger));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	7c1b      	ldrb	r3, [r3, #16]
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d101      	bne.n	80074ca <HAL_RTCEx_SetTamper+0x26>
 80074c6:	2302      	movs	r3, #2
 80074c8:	e026      	b.n	8007518 <HAL_RTCEx_SetTamper+0x74>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2201      	movs	r2, #1
 80074ce:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2202      	movs	r2, #2
 80074d4:	745a      	strb	r2, [r3, #17]

  if (HAL_IS_BIT_SET(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE)))
 80074d6:	4b13      	ldr	r3, [pc, #76]	; (8007524 <HAL_RTCEx_SetTamper+0x80>)
 80074d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074da:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d007      	beq.n	80074f2 <HAL_RTCEx_SetTamper+0x4e>
  {
    hrtc->State = HAL_RTC_STATE_ERROR;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2204      	movs	r2, #4
 80074e6:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	e012      	b.n	8007518 <HAL_RTCEx_SetTamper+0x74>
  }

  MODIFY_REG(BKP->CR, (BKP_CR_TPE | BKP_CR_TPAL), (sTamper->Tamper | (sTamper->Trigger)));
 80074f2:	4b0c      	ldr	r3, [pc, #48]	; (8007524 <HAL_RTCEx_SetTamper+0x80>)
 80074f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074f6:	f023 0203 	bic.w	r2, r3, #3
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	6819      	ldr	r1, [r3, #0]
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	430b      	orrs	r3, r1
 8007504:	4907      	ldr	r1, [pc, #28]	; (8007524 <HAL_RTCEx_SetTamper+0x80>)
 8007506:	4313      	orrs	r3, r2
 8007508:	630b      	str	r3, [r1, #48]	; 0x30

  hrtc->State = HAL_RTC_STATE_READY;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2201      	movs	r2, #1
 800750e:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8007516:	2300      	movs	r3, #0
}
 8007518:	4618      	mov	r0, r3
 800751a:	370c      	adds	r7, #12
 800751c:	46bd      	mov	sp, r7
 800751e:	bc80      	pop	{r7}
 8007520:	4770      	bx	lr
 8007522:	bf00      	nop
 8007524:	40006c00 	.word	0x40006c00

08007528 <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f003 0301 	and.w	r3, r3, #1
 800753a:	2b00      	cmp	r3, #0
 800753c:	d027      	beq.n	800758e <HAL_RTCEx_RTCIRQHandler+0x66>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	f003 0301 	and.w	r3, r3, #1
 8007548:	2b00      	cmp	r3, #0
 800754a:	d020      	beq.n	800758e <HAL_RTCEx_RTCIRQHandler+0x66>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	f003 0304 	and.w	r3, r3, #4
 8007556:	2b00      	cmp	r3, #0
 8007558:	d00b      	beq.n	8007572 <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 f824 	bl	80075a8 <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f06f 0204 	mvn.w	r2, #4
 8007568:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2204      	movs	r2, #4
 800756e:	745a      	strb	r2, [r3, #17]
 8007570:	e005      	b.n	800757e <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 f80f 	bl	8007596 <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	685a      	ldr	r2, [r3, #4]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f022 0201 	bic.w	r2, r2, #1
 800758c:	605a      	str	r2, [r3, #4]
    }
  }
}
 800758e:	bf00      	nop
 8007590:	3708      	adds	r7, #8
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}

08007596 <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007596:	b480      	push	{r7}
 8007598:	b083      	sub	sp, #12
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 800759e:	bf00      	nop
 80075a0:	370c      	adds	r7, #12
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bc80      	pop	{r7}
 80075a6:	4770      	bx	lr

080075a8 <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 80075b0:	bf00      	nop
 80075b2:	370c      	adds	r7, #12
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bc80      	pop	{r7}
 80075b8:	4770      	bx	lr

080075ba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b082      	sub	sp, #8
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d101      	bne.n	80075cc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80075c8:	2301      	movs	r3, #1
 80075ca:	e041      	b.n	8007650 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d106      	bne.n	80075e6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f7fc f84f 	bl	8003684 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2202      	movs	r2, #2
 80075ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	3304      	adds	r3, #4
 80075f6:	4619      	mov	r1, r3
 80075f8:	4610      	mov	r0, r2
 80075fa:	f000 fa9d 	bl	8007b38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2201      	movs	r2, #1
 8007602:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2201      	movs	r2, #1
 800760a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2201      	movs	r2, #1
 8007612:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2201      	movs	r2, #1
 800761a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2201      	movs	r2, #1
 8007622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2201      	movs	r2, #1
 800762a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2201      	movs	r2, #1
 8007632:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2201      	movs	r2, #1
 800763a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2201      	movs	r2, #1
 8007642:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2201      	movs	r2, #1
 800764a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800764e:	2300      	movs	r3, #0
}
 8007650:	4618      	mov	r0, r3
 8007652:	3708      	adds	r7, #8
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007658:	b480      	push	{r7}
 800765a:	b085      	sub	sp, #20
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007666:	b2db      	uxtb	r3, r3
 8007668:	2b01      	cmp	r3, #1
 800766a:	d001      	beq.n	8007670 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800766c:	2301      	movs	r3, #1
 800766e:	e03a      	b.n	80076e6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2202      	movs	r2, #2
 8007674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	68da      	ldr	r2, [r3, #12]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f042 0201 	orr.w	r2, r2, #1
 8007686:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a18      	ldr	r2, [pc, #96]	; (80076f0 <HAL_TIM_Base_Start_IT+0x98>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d00e      	beq.n	80076b0 <HAL_TIM_Base_Start_IT+0x58>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800769a:	d009      	beq.n	80076b0 <HAL_TIM_Base_Start_IT+0x58>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a14      	ldr	r2, [pc, #80]	; (80076f4 <HAL_TIM_Base_Start_IT+0x9c>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d004      	beq.n	80076b0 <HAL_TIM_Base_Start_IT+0x58>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a13      	ldr	r2, [pc, #76]	; (80076f8 <HAL_TIM_Base_Start_IT+0xa0>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d111      	bne.n	80076d4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	f003 0307 	and.w	r3, r3, #7
 80076ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2b06      	cmp	r3, #6
 80076c0:	d010      	beq.n	80076e4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f042 0201 	orr.w	r2, r2, #1
 80076d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076d2:	e007      	b.n	80076e4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f042 0201 	orr.w	r2, r2, #1
 80076e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80076e4:	2300      	movs	r3, #0
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3714      	adds	r7, #20
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bc80      	pop	{r7}
 80076ee:	4770      	bx	lr
 80076f0:	40012c00 	.word	0x40012c00
 80076f4:	40000400 	.word	0x40000400
 80076f8:	40000800 	.word	0x40000800

080076fc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b083      	sub	sp, #12
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	68da      	ldr	r2, [r3, #12]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f022 0201 	bic.w	r2, r2, #1
 8007712:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	6a1a      	ldr	r2, [r3, #32]
 800771a:	f241 1311 	movw	r3, #4369	; 0x1111
 800771e:	4013      	ands	r3, r2
 8007720:	2b00      	cmp	r3, #0
 8007722:	d10f      	bne.n	8007744 <HAL_TIM_Base_Stop_IT+0x48>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	6a1a      	ldr	r2, [r3, #32]
 800772a:	f240 4344 	movw	r3, #1092	; 0x444
 800772e:	4013      	ands	r3, r2
 8007730:	2b00      	cmp	r3, #0
 8007732:	d107      	bne.n	8007744 <HAL_TIM_Base_Stop_IT+0x48>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f022 0201 	bic.w	r2, r2, #1
 8007742:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800774c:	2300      	movs	r3, #0
}
 800774e:	4618      	mov	r0, r3
 8007750:	370c      	adds	r7, #12
 8007752:	46bd      	mov	sp, r7
 8007754:	bc80      	pop	{r7}
 8007756:	4770      	bx	lr

08007758 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	691b      	ldr	r3, [r3, #16]
 8007766:	f003 0302 	and.w	r3, r3, #2
 800776a:	2b02      	cmp	r3, #2
 800776c:	d122      	bne.n	80077b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	f003 0302 	and.w	r3, r3, #2
 8007778:	2b02      	cmp	r3, #2
 800777a:	d11b      	bne.n	80077b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f06f 0202 	mvn.w	r2, #2
 8007784:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2201      	movs	r2, #1
 800778a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	699b      	ldr	r3, [r3, #24]
 8007792:	f003 0303 	and.w	r3, r3, #3
 8007796:	2b00      	cmp	r3, #0
 8007798:	d003      	beq.n	80077a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 f9b1 	bl	8007b02 <HAL_TIM_IC_CaptureCallback>
 80077a0:	e005      	b.n	80077ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 f9a4 	bl	8007af0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 f9b3 	bl	8007b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	691b      	ldr	r3, [r3, #16]
 80077ba:	f003 0304 	and.w	r3, r3, #4
 80077be:	2b04      	cmp	r3, #4
 80077c0:	d122      	bne.n	8007808 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	68db      	ldr	r3, [r3, #12]
 80077c8:	f003 0304 	and.w	r3, r3, #4
 80077cc:	2b04      	cmp	r3, #4
 80077ce:	d11b      	bne.n	8007808 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f06f 0204 	mvn.w	r2, #4
 80077d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2202      	movs	r2, #2
 80077de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	699b      	ldr	r3, [r3, #24]
 80077e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d003      	beq.n	80077f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 f987 	bl	8007b02 <HAL_TIM_IC_CaptureCallback>
 80077f4:	e005      	b.n	8007802 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 f97a 	bl	8007af0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 f989 	bl	8007b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	691b      	ldr	r3, [r3, #16]
 800780e:	f003 0308 	and.w	r3, r3, #8
 8007812:	2b08      	cmp	r3, #8
 8007814:	d122      	bne.n	800785c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	68db      	ldr	r3, [r3, #12]
 800781c:	f003 0308 	and.w	r3, r3, #8
 8007820:	2b08      	cmp	r3, #8
 8007822:	d11b      	bne.n	800785c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f06f 0208 	mvn.w	r2, #8
 800782c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2204      	movs	r2, #4
 8007832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	69db      	ldr	r3, [r3, #28]
 800783a:	f003 0303 	and.w	r3, r3, #3
 800783e:	2b00      	cmp	r3, #0
 8007840:	d003      	beq.n	800784a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 f95d 	bl	8007b02 <HAL_TIM_IC_CaptureCallback>
 8007848:	e005      	b.n	8007856 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 f950 	bl	8007af0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 f95f 	bl	8007b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	f003 0310 	and.w	r3, r3, #16
 8007866:	2b10      	cmp	r3, #16
 8007868:	d122      	bne.n	80078b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	f003 0310 	and.w	r3, r3, #16
 8007874:	2b10      	cmp	r3, #16
 8007876:	d11b      	bne.n	80078b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f06f 0210 	mvn.w	r2, #16
 8007880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2208      	movs	r2, #8
 8007886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	69db      	ldr	r3, [r3, #28]
 800788e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007892:	2b00      	cmp	r3, #0
 8007894:	d003      	beq.n	800789e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 f933 	bl	8007b02 <HAL_TIM_IC_CaptureCallback>
 800789c:	e005      	b.n	80078aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 f926 	bl	8007af0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 f935 	bl	8007b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	691b      	ldr	r3, [r3, #16]
 80078b6:	f003 0301 	and.w	r3, r3, #1
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d10e      	bne.n	80078dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	68db      	ldr	r3, [r3, #12]
 80078c4:	f003 0301 	and.w	r3, r3, #1
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d107      	bne.n	80078dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f06f 0201 	mvn.w	r2, #1
 80078d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f7fa ff1a 	bl	8002710 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	691b      	ldr	r3, [r3, #16]
 80078e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078e6:	2b80      	cmp	r3, #128	; 0x80
 80078e8:	d10e      	bne.n	8007908 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	68db      	ldr	r3, [r3, #12]
 80078f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078f4:	2b80      	cmp	r3, #128	; 0x80
 80078f6:	d107      	bne.n	8007908 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 fa77 	bl	8007df6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	691b      	ldr	r3, [r3, #16]
 800790e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007912:	2b40      	cmp	r3, #64	; 0x40
 8007914:	d10e      	bne.n	8007934 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	68db      	ldr	r3, [r3, #12]
 800791c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007920:	2b40      	cmp	r3, #64	; 0x40
 8007922:	d107      	bne.n	8007934 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800792c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 f8f9 	bl	8007b26 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	f003 0320 	and.w	r3, r3, #32
 800793e:	2b20      	cmp	r3, #32
 8007940:	d10e      	bne.n	8007960 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	68db      	ldr	r3, [r3, #12]
 8007948:	f003 0320 	and.w	r3, r3, #32
 800794c:	2b20      	cmp	r3, #32
 800794e:	d107      	bne.n	8007960 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f06f 0220 	mvn.w	r2, #32
 8007958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 fa42 	bl	8007de4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007960:	bf00      	nop
 8007962:	3708      	adds	r7, #8
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007978:	2b01      	cmp	r3, #1
 800797a:	d101      	bne.n	8007980 <HAL_TIM_ConfigClockSource+0x18>
 800797c:	2302      	movs	r3, #2
 800797e:	e0b3      	b.n	8007ae8 <HAL_TIM_ConfigClockSource+0x180>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2201      	movs	r2, #1
 8007984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2202      	movs	r2, #2
 800798c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800799e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80079a6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	68fa      	ldr	r2, [r7, #12]
 80079ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079b8:	d03e      	beq.n	8007a38 <HAL_TIM_ConfigClockSource+0xd0>
 80079ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079be:	f200 8087 	bhi.w	8007ad0 <HAL_TIM_ConfigClockSource+0x168>
 80079c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079c6:	f000 8085 	beq.w	8007ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80079ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079ce:	d87f      	bhi.n	8007ad0 <HAL_TIM_ConfigClockSource+0x168>
 80079d0:	2b70      	cmp	r3, #112	; 0x70
 80079d2:	d01a      	beq.n	8007a0a <HAL_TIM_ConfigClockSource+0xa2>
 80079d4:	2b70      	cmp	r3, #112	; 0x70
 80079d6:	d87b      	bhi.n	8007ad0 <HAL_TIM_ConfigClockSource+0x168>
 80079d8:	2b60      	cmp	r3, #96	; 0x60
 80079da:	d050      	beq.n	8007a7e <HAL_TIM_ConfigClockSource+0x116>
 80079dc:	2b60      	cmp	r3, #96	; 0x60
 80079de:	d877      	bhi.n	8007ad0 <HAL_TIM_ConfigClockSource+0x168>
 80079e0:	2b50      	cmp	r3, #80	; 0x50
 80079e2:	d03c      	beq.n	8007a5e <HAL_TIM_ConfigClockSource+0xf6>
 80079e4:	2b50      	cmp	r3, #80	; 0x50
 80079e6:	d873      	bhi.n	8007ad0 <HAL_TIM_ConfigClockSource+0x168>
 80079e8:	2b40      	cmp	r3, #64	; 0x40
 80079ea:	d058      	beq.n	8007a9e <HAL_TIM_ConfigClockSource+0x136>
 80079ec:	2b40      	cmp	r3, #64	; 0x40
 80079ee:	d86f      	bhi.n	8007ad0 <HAL_TIM_ConfigClockSource+0x168>
 80079f0:	2b30      	cmp	r3, #48	; 0x30
 80079f2:	d064      	beq.n	8007abe <HAL_TIM_ConfigClockSource+0x156>
 80079f4:	2b30      	cmp	r3, #48	; 0x30
 80079f6:	d86b      	bhi.n	8007ad0 <HAL_TIM_ConfigClockSource+0x168>
 80079f8:	2b20      	cmp	r3, #32
 80079fa:	d060      	beq.n	8007abe <HAL_TIM_ConfigClockSource+0x156>
 80079fc:	2b20      	cmp	r3, #32
 80079fe:	d867      	bhi.n	8007ad0 <HAL_TIM_ConfigClockSource+0x168>
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d05c      	beq.n	8007abe <HAL_TIM_ConfigClockSource+0x156>
 8007a04:	2b10      	cmp	r3, #16
 8007a06:	d05a      	beq.n	8007abe <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007a08:	e062      	b.n	8007ad0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6818      	ldr	r0, [r3, #0]
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	6899      	ldr	r1, [r3, #8]
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	685a      	ldr	r2, [r3, #4]
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	68db      	ldr	r3, [r3, #12]
 8007a1a:	f000 f966 	bl	8007cea <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007a2c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	609a      	str	r2, [r3, #8]
      break;
 8007a36:	e04e      	b.n	8007ad6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6818      	ldr	r0, [r3, #0]
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	6899      	ldr	r1, [r3, #8]
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	685a      	ldr	r2, [r3, #4]
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	f000 f94f 	bl	8007cea <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	689a      	ldr	r2, [r3, #8]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a5a:	609a      	str	r2, [r3, #8]
      break;
 8007a5c:	e03b      	b.n	8007ad6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6818      	ldr	r0, [r3, #0]
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	6859      	ldr	r1, [r3, #4]
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	68db      	ldr	r3, [r3, #12]
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	f000 f8c6 	bl	8007bfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	2150      	movs	r1, #80	; 0x50
 8007a76:	4618      	mov	r0, r3
 8007a78:	f000 f91d 	bl	8007cb6 <TIM_ITRx_SetConfig>
      break;
 8007a7c:	e02b      	b.n	8007ad6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6818      	ldr	r0, [r3, #0]
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	6859      	ldr	r1, [r3, #4]
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	68db      	ldr	r3, [r3, #12]
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	f000 f8e4 	bl	8007c58 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	2160      	movs	r1, #96	; 0x60
 8007a96:	4618      	mov	r0, r3
 8007a98:	f000 f90d 	bl	8007cb6 <TIM_ITRx_SetConfig>
      break;
 8007a9c:	e01b      	b.n	8007ad6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6818      	ldr	r0, [r3, #0]
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	6859      	ldr	r1, [r3, #4]
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	461a      	mov	r2, r3
 8007aac:	f000 f8a6 	bl	8007bfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	2140      	movs	r1, #64	; 0x40
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f000 f8fd 	bl	8007cb6 <TIM_ITRx_SetConfig>
      break;
 8007abc:	e00b      	b.n	8007ad6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	4610      	mov	r0, r2
 8007aca:	f000 f8f4 	bl	8007cb6 <TIM_ITRx_SetConfig>
        break;
 8007ace:	e002      	b.n	8007ad6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007ad0:	bf00      	nop
 8007ad2:	e000      	b.n	8007ad6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007ad4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2201      	movs	r2, #1
 8007ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ae6:	2300      	movs	r3, #0
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3710      	adds	r7, #16
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007af8:	bf00      	nop
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bc80      	pop	{r7}
 8007b00:	4770      	bx	lr

08007b02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b02:	b480      	push	{r7}
 8007b04:	b083      	sub	sp, #12
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b0a:	bf00      	nop
 8007b0c:	370c      	adds	r7, #12
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bc80      	pop	{r7}
 8007b12:	4770      	bx	lr

08007b14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b1c:	bf00      	nop
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bc80      	pop	{r7}
 8007b24:	4770      	bx	lr

08007b26 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b26:	b480      	push	{r7}
 8007b28:	b083      	sub	sp, #12
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b2e:	bf00      	nop
 8007b30:	370c      	adds	r7, #12
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bc80      	pop	{r7}
 8007b36:	4770      	bx	lr

08007b38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b085      	sub	sp, #20
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	4a29      	ldr	r2, [pc, #164]	; (8007bf0 <TIM_Base_SetConfig+0xb8>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d00b      	beq.n	8007b68 <TIM_Base_SetConfig+0x30>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b56:	d007      	beq.n	8007b68 <TIM_Base_SetConfig+0x30>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	4a26      	ldr	r2, [pc, #152]	; (8007bf4 <TIM_Base_SetConfig+0xbc>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d003      	beq.n	8007b68 <TIM_Base_SetConfig+0x30>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	4a25      	ldr	r2, [pc, #148]	; (8007bf8 <TIM_Base_SetConfig+0xc0>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d108      	bne.n	8007b7a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	68fa      	ldr	r2, [r7, #12]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	4a1c      	ldr	r2, [pc, #112]	; (8007bf0 <TIM_Base_SetConfig+0xb8>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d00b      	beq.n	8007b9a <TIM_Base_SetConfig+0x62>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b88:	d007      	beq.n	8007b9a <TIM_Base_SetConfig+0x62>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4a19      	ldr	r2, [pc, #100]	; (8007bf4 <TIM_Base_SetConfig+0xbc>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d003      	beq.n	8007b9a <TIM_Base_SetConfig+0x62>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	4a18      	ldr	r2, [pc, #96]	; (8007bf8 <TIM_Base_SetConfig+0xc0>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d108      	bne.n	8007bac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ba0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	68db      	ldr	r3, [r3, #12]
 8007ba6:	68fa      	ldr	r2, [r7, #12]
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	695b      	ldr	r3, [r3, #20]
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	68fa      	ldr	r2, [r7, #12]
 8007bbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	689a      	ldr	r2, [r3, #8]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	4a07      	ldr	r2, [pc, #28]	; (8007bf0 <TIM_Base_SetConfig+0xb8>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d103      	bne.n	8007be0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	691a      	ldr	r2, [r3, #16]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2201      	movs	r2, #1
 8007be4:	615a      	str	r2, [r3, #20]
}
 8007be6:	bf00      	nop
 8007be8:	3714      	adds	r7, #20
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bc80      	pop	{r7}
 8007bee:	4770      	bx	lr
 8007bf0:	40012c00 	.word	0x40012c00
 8007bf4:	40000400 	.word	0x40000400
 8007bf8:	40000800 	.word	0x40000800

08007bfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b087      	sub	sp, #28
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	60b9      	str	r1, [r7, #8]
 8007c06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6a1b      	ldr	r3, [r3, #32]
 8007c0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	6a1b      	ldr	r3, [r3, #32]
 8007c12:	f023 0201 	bic.w	r2, r3, #1
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	699b      	ldr	r3, [r3, #24]
 8007c1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	011b      	lsls	r3, r3, #4
 8007c2c:	693a      	ldr	r2, [r7, #16]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	f023 030a 	bic.w	r3, r3, #10
 8007c38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007c3a:	697a      	ldr	r2, [r7, #20]
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	693a      	ldr	r2, [r7, #16]
 8007c46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	697a      	ldr	r2, [r7, #20]
 8007c4c:	621a      	str	r2, [r3, #32]
}
 8007c4e:	bf00      	nop
 8007c50:	371c      	adds	r7, #28
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bc80      	pop	{r7}
 8007c56:	4770      	bx	lr

08007c58 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b087      	sub	sp, #28
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	60b9      	str	r1, [r7, #8]
 8007c62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	6a1b      	ldr	r3, [r3, #32]
 8007c68:	f023 0210 	bic.w	r2, r3, #16
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	699b      	ldr	r3, [r3, #24]
 8007c74:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	6a1b      	ldr	r3, [r3, #32]
 8007c7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c82:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	031b      	lsls	r3, r3, #12
 8007c88:	697a      	ldr	r2, [r7, #20]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007c94:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	011b      	lsls	r3, r3, #4
 8007c9a:	693a      	ldr	r2, [r7, #16]
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	697a      	ldr	r2, [r7, #20]
 8007ca4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	693a      	ldr	r2, [r7, #16]
 8007caa:	621a      	str	r2, [r3, #32]
}
 8007cac:	bf00      	nop
 8007cae:	371c      	adds	r7, #28
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bc80      	pop	{r7}
 8007cb4:	4770      	bx	lr

08007cb6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007cb6:	b480      	push	{r7}
 8007cb8:	b085      	sub	sp, #20
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
 8007cbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ccc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007cce:	683a      	ldr	r2, [r7, #0]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	f043 0307 	orr.w	r3, r3, #7
 8007cd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	68fa      	ldr	r2, [r7, #12]
 8007cde:	609a      	str	r2, [r3, #8]
}
 8007ce0:	bf00      	nop
 8007ce2:	3714      	adds	r7, #20
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bc80      	pop	{r7}
 8007ce8:	4770      	bx	lr

08007cea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007cea:	b480      	push	{r7}
 8007cec:	b087      	sub	sp, #28
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	60f8      	str	r0, [r7, #12]
 8007cf2:	60b9      	str	r1, [r7, #8]
 8007cf4:	607a      	str	r2, [r7, #4]
 8007cf6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d04:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	021a      	lsls	r2, r3, #8
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	431a      	orrs	r2, r3
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	4313      	orrs	r3, r2
 8007d12:	697a      	ldr	r2, [r7, #20]
 8007d14:	4313      	orrs	r3, r2
 8007d16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	697a      	ldr	r2, [r7, #20]
 8007d1c:	609a      	str	r2, [r3, #8]
}
 8007d1e:	bf00      	nop
 8007d20:	371c      	adds	r7, #28
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bc80      	pop	{r7}
 8007d26:	4770      	bx	lr

08007d28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b085      	sub	sp, #20
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d101      	bne.n	8007d40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d3c:	2302      	movs	r3, #2
 8007d3e:	e046      	b.n	8007dce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2201      	movs	r2, #1
 8007d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2202      	movs	r2, #2
 8007d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	68fa      	ldr	r2, [r7, #12]
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	68fa      	ldr	r2, [r7, #12]
 8007d78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a16      	ldr	r2, [pc, #88]	; (8007dd8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d00e      	beq.n	8007da2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d8c:	d009      	beq.n	8007da2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a12      	ldr	r2, [pc, #72]	; (8007ddc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d004      	beq.n	8007da2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a10      	ldr	r2, [pc, #64]	; (8007de0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d10c      	bne.n	8007dbc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007da8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	68ba      	ldr	r2, [r7, #8]
 8007db0:	4313      	orrs	r3, r2
 8007db2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	68ba      	ldr	r2, [r7, #8]
 8007dba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3714      	adds	r7, #20
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bc80      	pop	{r7}
 8007dd6:	4770      	bx	lr
 8007dd8:	40012c00 	.word	0x40012c00
 8007ddc:	40000400 	.word	0x40000400
 8007de0:	40000800 	.word	0x40000800

08007de4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b083      	sub	sp, #12
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007dec:	bf00      	nop
 8007dee:	370c      	adds	r7, #12
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bc80      	pop	{r7}
 8007df4:	4770      	bx	lr

08007df6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007df6:	b480      	push	{r7}
 8007df8:	b083      	sub	sp, #12
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007dfe:	bf00      	nop
 8007e00:	370c      	adds	r7, #12
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bc80      	pop	{r7}
 8007e06:	4770      	bx	lr

08007e08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d101      	bne.n	8007e1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	e03f      	b.n	8007e9a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d106      	bne.n	8007e34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f7fb fc84 	bl	800373c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2224      	movs	r2, #36	; 0x24
 8007e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	68da      	ldr	r2, [r3, #12]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 fde3 	bl	8008a18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	691a      	ldr	r2, [r3, #16]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	695a      	ldr	r2, [r3, #20]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	68da      	ldr	r2, [r3, #12]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2220      	movs	r2, #32
 8007e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2220      	movs	r2, #32
 8007e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007e98:	2300      	movs	r3, #0
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3708      	adds	r7, #8
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ea2:	b580      	push	{r7, lr}
 8007ea4:	b08a      	sub	sp, #40	; 0x28
 8007ea6:	af02      	add	r7, sp, #8
 8007ea8:	60f8      	str	r0, [r7, #12]
 8007eaa:	60b9      	str	r1, [r7, #8]
 8007eac:	603b      	str	r3, [r7, #0]
 8007eae:	4613      	mov	r3, r2
 8007eb0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	2b20      	cmp	r3, #32
 8007ec0:	d17c      	bne.n	8007fbc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d002      	beq.n	8007ece <HAL_UART_Transmit+0x2c>
 8007ec8:	88fb      	ldrh	r3, [r7, #6]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d101      	bne.n	8007ed2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e075      	b.n	8007fbe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d101      	bne.n	8007ee0 <HAL_UART_Transmit+0x3e>
 8007edc:	2302      	movs	r3, #2
 8007ede:	e06e      	b.n	8007fbe <HAL_UART_Transmit+0x11c>
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2200      	movs	r2, #0
 8007eec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2221      	movs	r2, #33	; 0x21
 8007ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ef6:	f7fb fe75 	bl	8003be4 <HAL_GetTick>
 8007efa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	88fa      	ldrh	r2, [r7, #6]
 8007f00:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	88fa      	ldrh	r2, [r7, #6]
 8007f06:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f10:	d108      	bne.n	8007f24 <HAL_UART_Transmit+0x82>
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	691b      	ldr	r3, [r3, #16]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d104      	bne.n	8007f24 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	61bb      	str	r3, [r7, #24]
 8007f22:	e003      	b.n	8007f2c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007f34:	e02a      	b.n	8007f8c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	9300      	str	r3, [sp, #0]
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	2180      	movs	r1, #128	; 0x80
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	f000 fb54 	bl	80085ee <UART_WaitOnFlagUntilTimeout>
 8007f46:	4603      	mov	r3, r0
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d001      	beq.n	8007f50 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007f4c:	2303      	movs	r3, #3
 8007f4e:	e036      	b.n	8007fbe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007f50:	69fb      	ldr	r3, [r7, #28]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d10b      	bne.n	8007f6e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f56:	69bb      	ldr	r3, [r7, #24]
 8007f58:	881b      	ldrh	r3, [r3, #0]
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007f66:	69bb      	ldr	r3, [r7, #24]
 8007f68:	3302      	adds	r3, #2
 8007f6a:	61bb      	str	r3, [r7, #24]
 8007f6c:	e007      	b.n	8007f7e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f6e:	69fb      	ldr	r3, [r7, #28]
 8007f70:	781a      	ldrb	r2, [r3, #0]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007f78:	69fb      	ldr	r3, [r7, #28]
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	3b01      	subs	r3, #1
 8007f86:	b29a      	uxth	r2, r3
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d1cf      	bne.n	8007f36 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	9300      	str	r3, [sp, #0]
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	2140      	movs	r1, #64	; 0x40
 8007fa0:	68f8      	ldr	r0, [r7, #12]
 8007fa2:	f000 fb24 	bl	80085ee <UART_WaitOnFlagUntilTimeout>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d001      	beq.n	8007fb0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007fac:	2303      	movs	r3, #3
 8007fae:	e006      	b.n	8007fbe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2220      	movs	r2, #32
 8007fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	e000      	b.n	8007fbe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007fbc:	2302      	movs	r3, #2
  }
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3720      	adds	r7, #32
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}

08007fc6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007fc6:	b580      	push	{r7, lr}
 8007fc8:	b084      	sub	sp, #16
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	60f8      	str	r0, [r7, #12]
 8007fce:	60b9      	str	r1, [r7, #8]
 8007fd0:	4613      	mov	r3, r2
 8007fd2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	2b20      	cmp	r3, #32
 8007fde:	d11d      	bne.n	800801c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d002      	beq.n	8007fec <HAL_UART_Receive_DMA+0x26>
 8007fe6:	88fb      	ldrh	r3, [r7, #6]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d101      	bne.n	8007ff0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007fec:	2301      	movs	r3, #1
 8007fee:	e016      	b.n	800801e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d101      	bne.n	8007ffe <HAL_UART_Receive_DMA+0x38>
 8007ffa:	2302      	movs	r3, #2
 8007ffc:	e00f      	b.n	800801e <HAL_UART_Receive_DMA+0x58>
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2201      	movs	r2, #1
 8008002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2200      	movs	r2, #0
 800800a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800800c:	88fb      	ldrh	r3, [r7, #6]
 800800e:	461a      	mov	r2, r3
 8008010:	68b9      	ldr	r1, [r7, #8]
 8008012:	68f8      	ldr	r0, [r7, #12]
 8008014:	f000 fb36 	bl	8008684 <UART_Start_Receive_DMA>
 8008018:	4603      	mov	r3, r0
 800801a:	e000      	b.n	800801e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800801c:	2302      	movs	r3, #2
  }
}
 800801e:	4618      	mov	r0, r3
 8008020:	3710      	adds	r7, #16
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}

08008026 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8008026:	b580      	push	{r7, lr}
 8008028:	b084      	sub	sp, #16
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800802e:	2300      	movs	r3, #0
 8008030:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	695b      	ldr	r3, [r3, #20]
 8008038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800803c:	2b00      	cmp	r3, #0
 800803e:	bf14      	ite	ne
 8008040:	2301      	movne	r3, #1
 8008042:	2300      	moveq	r3, #0
 8008044:	b2db      	uxtb	r3, r3
 8008046:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800804e:	b2db      	uxtb	r3, r3
 8008050:	2b21      	cmp	r3, #33	; 0x21
 8008052:	d116      	bne.n	8008082 <HAL_UART_DMAStop+0x5c>
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d013      	beq.n	8008082 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	695a      	ldr	r2, [r3, #20]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008068:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800806e:	2b00      	cmp	r3, #0
 8008070:	d004      	beq.n	800807c <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008076:	4618      	mov	r0, r3
 8008078:	f7fc fbd3 	bl	8004822 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 fb65 	bl	800874c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	695b      	ldr	r3, [r3, #20]
 8008088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800808c:	2b00      	cmp	r3, #0
 800808e:	bf14      	ite	ne
 8008090:	2301      	movne	r3, #1
 8008092:	2300      	moveq	r3, #0
 8008094:	b2db      	uxtb	r3, r3
 8008096:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	2b22      	cmp	r3, #34	; 0x22
 80080a2:	d116      	bne.n	80080d2 <HAL_UART_DMAStop+0xac>
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d013      	beq.n	80080d2 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	695a      	ldr	r2, [r3, #20]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080b8:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d004      	beq.n	80080cc <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c6:	4618      	mov	r0, r3
 80080c8:	f7fc fbab 	bl	8004822 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 fb52 	bl	8008776 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80080d2:	2300      	movs	r3, #0
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3710      	adds	r7, #16
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}

080080dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b08a      	sub	sp, #40	; 0x28
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	68db      	ldr	r3, [r3, #12]
 80080f2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	695b      	ldr	r3, [r3, #20]
 80080fa:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80080fc:	2300      	movs	r3, #0
 80080fe:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8008100:	2300      	movs	r3, #0
 8008102:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008106:	f003 030f 	and.w	r3, r3, #15
 800810a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800810c:	69bb      	ldr	r3, [r7, #24]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d10d      	bne.n	800812e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008114:	f003 0320 	and.w	r3, r3, #32
 8008118:	2b00      	cmp	r3, #0
 800811a:	d008      	beq.n	800812e <HAL_UART_IRQHandler+0x52>
 800811c:	6a3b      	ldr	r3, [r7, #32]
 800811e:	f003 0320 	and.w	r3, r3, #32
 8008122:	2b00      	cmp	r3, #0
 8008124:	d003      	beq.n	800812e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 fbcc 	bl	80088c4 <UART_Receive_IT>
      return;
 800812c:	e17b      	b.n	8008426 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800812e:	69bb      	ldr	r3, [r7, #24]
 8008130:	2b00      	cmp	r3, #0
 8008132:	f000 80b1 	beq.w	8008298 <HAL_UART_IRQHandler+0x1bc>
 8008136:	69fb      	ldr	r3, [r7, #28]
 8008138:	f003 0301 	and.w	r3, r3, #1
 800813c:	2b00      	cmp	r3, #0
 800813e:	d105      	bne.n	800814c <HAL_UART_IRQHandler+0x70>
 8008140:	6a3b      	ldr	r3, [r7, #32]
 8008142:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008146:	2b00      	cmp	r3, #0
 8008148:	f000 80a6 	beq.w	8008298 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800814c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814e:	f003 0301 	and.w	r3, r3, #1
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00a      	beq.n	800816c <HAL_UART_IRQHandler+0x90>
 8008156:	6a3b      	ldr	r3, [r7, #32]
 8008158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800815c:	2b00      	cmp	r3, #0
 800815e:	d005      	beq.n	800816c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008164:	f043 0201 	orr.w	r2, r3, #1
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800816c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816e:	f003 0304 	and.w	r3, r3, #4
 8008172:	2b00      	cmp	r3, #0
 8008174:	d00a      	beq.n	800818c <HAL_UART_IRQHandler+0xb0>
 8008176:	69fb      	ldr	r3, [r7, #28]
 8008178:	f003 0301 	and.w	r3, r3, #1
 800817c:	2b00      	cmp	r3, #0
 800817e:	d005      	beq.n	800818c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008184:	f043 0202 	orr.w	r2, r3, #2
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800818c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818e:	f003 0302 	and.w	r3, r3, #2
 8008192:	2b00      	cmp	r3, #0
 8008194:	d00a      	beq.n	80081ac <HAL_UART_IRQHandler+0xd0>
 8008196:	69fb      	ldr	r3, [r7, #28]
 8008198:	f003 0301 	and.w	r3, r3, #1
 800819c:	2b00      	cmp	r3, #0
 800819e:	d005      	beq.n	80081ac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081a4:	f043 0204 	orr.w	r2, r3, #4
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80081ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ae:	f003 0308 	and.w	r3, r3, #8
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d00f      	beq.n	80081d6 <HAL_UART_IRQHandler+0xfa>
 80081b6:	6a3b      	ldr	r3, [r7, #32]
 80081b8:	f003 0320 	and.w	r3, r3, #32
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d104      	bne.n	80081ca <HAL_UART_IRQHandler+0xee>
 80081c0:	69fb      	ldr	r3, [r7, #28]
 80081c2:	f003 0301 	and.w	r3, r3, #1
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d005      	beq.n	80081d6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ce:	f043 0208 	orr.w	r2, r3, #8
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081da:	2b00      	cmp	r3, #0
 80081dc:	f000 811e 	beq.w	800841c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80081e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e2:	f003 0320 	and.w	r3, r3, #32
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d007      	beq.n	80081fa <HAL_UART_IRQHandler+0x11e>
 80081ea:	6a3b      	ldr	r3, [r7, #32]
 80081ec:	f003 0320 	and.w	r3, r3, #32
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d002      	beq.n	80081fa <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 fb65 	bl	80088c4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	695b      	ldr	r3, [r3, #20]
 8008200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008204:	2b00      	cmp	r3, #0
 8008206:	bf14      	ite	ne
 8008208:	2301      	movne	r3, #1
 800820a:	2300      	moveq	r3, #0
 800820c:	b2db      	uxtb	r3, r3
 800820e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008214:	f003 0308 	and.w	r3, r3, #8
 8008218:	2b00      	cmp	r3, #0
 800821a:	d102      	bne.n	8008222 <HAL_UART_IRQHandler+0x146>
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d031      	beq.n	8008286 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 faa7 	bl	8008776 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	695b      	ldr	r3, [r3, #20]
 800822e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008232:	2b00      	cmp	r3, #0
 8008234:	d023      	beq.n	800827e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	695a      	ldr	r2, [r3, #20]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008244:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800824a:	2b00      	cmp	r3, #0
 800824c:	d013      	beq.n	8008276 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008252:	4a76      	ldr	r2, [pc, #472]	; (800842c <HAL_UART_IRQHandler+0x350>)
 8008254:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800825a:	4618      	mov	r0, r3
 800825c:	f7fc fb1c 	bl	8004898 <HAL_DMA_Abort_IT>
 8008260:	4603      	mov	r3, r0
 8008262:	2b00      	cmp	r3, #0
 8008264:	d016      	beq.n	8008294 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800826a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008270:	4610      	mov	r0, r2
 8008272:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008274:	e00e      	b.n	8008294 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 f8f5 	bl	8008466 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800827c:	e00a      	b.n	8008294 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 f8f1 	bl	8008466 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008284:	e006      	b.n	8008294 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 f8ed 	bl	8008466 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008292:	e0c3      	b.n	800841c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008294:	bf00      	nop
    return;
 8008296:	e0c1      	b.n	800841c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800829c:	2b01      	cmp	r3, #1
 800829e:	f040 80a1 	bne.w	80083e4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80082a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a4:	f003 0310 	and.w	r3, r3, #16
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	f000 809b 	beq.w	80083e4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80082ae:	6a3b      	ldr	r3, [r7, #32]
 80082b0:	f003 0310 	and.w	r3, r3, #16
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	f000 8095 	beq.w	80083e4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80082ba:	2300      	movs	r3, #0
 80082bc:	60fb      	str	r3, [r7, #12]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	60fb      	str	r3, [r7, #12]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	60fb      	str	r3, [r7, #12]
 80082ce:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	695b      	ldr	r3, [r3, #20]
 80082d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d04e      	beq.n	800837c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80082e8:	8a3b      	ldrh	r3, [r7, #16]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	f000 8098 	beq.w	8008420 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80082f4:	8a3a      	ldrh	r2, [r7, #16]
 80082f6:	429a      	cmp	r2, r3
 80082f8:	f080 8092 	bcs.w	8008420 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	8a3a      	ldrh	r2, [r7, #16]
 8008300:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008306:	699b      	ldr	r3, [r3, #24]
 8008308:	2b20      	cmp	r3, #32
 800830a:	d02b      	beq.n	8008364 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	68da      	ldr	r2, [r3, #12]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800831a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	695a      	ldr	r2, [r3, #20]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f022 0201 	bic.w	r2, r2, #1
 800832a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	695a      	ldr	r2, [r3, #20]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800833a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2220      	movs	r2, #32
 8008340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2200      	movs	r2, #0
 8008348:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	68da      	ldr	r2, [r3, #12]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f022 0210 	bic.w	r2, r2, #16
 8008358:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800835e:	4618      	mov	r0, r3
 8008360:	f7fc fa5f 	bl	8004822 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800836c:	b29b      	uxth	r3, r3
 800836e:	1ad3      	subs	r3, r2, r3
 8008370:	b29b      	uxth	r3, r3
 8008372:	4619      	mov	r1, r3
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 f87f 	bl	8008478 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800837a:	e051      	b.n	8008420 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008384:	b29b      	uxth	r3, r3
 8008386:	1ad3      	subs	r3, r2, r3
 8008388:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800838e:	b29b      	uxth	r3, r3
 8008390:	2b00      	cmp	r3, #0
 8008392:	d047      	beq.n	8008424 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8008394:	8a7b      	ldrh	r3, [r7, #18]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d044      	beq.n	8008424 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	68da      	ldr	r2, [r3, #12]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80083a8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	695a      	ldr	r2, [r3, #20]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f022 0201 	bic.w	r2, r2, #1
 80083b8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2220      	movs	r2, #32
 80083be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2200      	movs	r2, #0
 80083c6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	68da      	ldr	r2, [r3, #12]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f022 0210 	bic.w	r2, r2, #16
 80083d6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80083d8:	8a7b      	ldrh	r3, [r7, #18]
 80083da:	4619      	mov	r1, r3
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f000 f84b 	bl	8008478 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80083e2:	e01f      	b.n	8008424 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80083e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d008      	beq.n	8008400 <HAL_UART_IRQHandler+0x324>
 80083ee:	6a3b      	ldr	r3, [r7, #32]
 80083f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d003      	beq.n	8008400 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 f9fc 	bl	80087f6 <UART_Transmit_IT>
    return;
 80083fe:	e012      	b.n	8008426 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008406:	2b00      	cmp	r3, #0
 8008408:	d00d      	beq.n	8008426 <HAL_UART_IRQHandler+0x34a>
 800840a:	6a3b      	ldr	r3, [r7, #32]
 800840c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008410:	2b00      	cmp	r3, #0
 8008412:	d008      	beq.n	8008426 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 fa3d 	bl	8008894 <UART_EndTransmit_IT>
    return;
 800841a:	e004      	b.n	8008426 <HAL_UART_IRQHandler+0x34a>
    return;
 800841c:	bf00      	nop
 800841e:	e002      	b.n	8008426 <HAL_UART_IRQHandler+0x34a>
      return;
 8008420:	bf00      	nop
 8008422:	e000      	b.n	8008426 <HAL_UART_IRQHandler+0x34a>
      return;
 8008424:	bf00      	nop
  }
}
 8008426:	3728      	adds	r7, #40	; 0x28
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}
 800842c:	080087cf 	.word	0x080087cf

08008430 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008430:	b480      	push	{r7}
 8008432:	b083      	sub	sp, #12
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008438:	bf00      	nop
 800843a:	370c      	adds	r7, #12
 800843c:	46bd      	mov	sp, r7
 800843e:	bc80      	pop	{r7}
 8008440:	4770      	bx	lr

08008442 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008442:	b480      	push	{r7}
 8008444:	b083      	sub	sp, #12
 8008446:	af00      	add	r7, sp, #0
 8008448:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800844a:	bf00      	nop
 800844c:	370c      	adds	r7, #12
 800844e:	46bd      	mov	sp, r7
 8008450:	bc80      	pop	{r7}
 8008452:	4770      	bx	lr

08008454 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008454:	b480      	push	{r7}
 8008456:	b083      	sub	sp, #12
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800845c:	bf00      	nop
 800845e:	370c      	adds	r7, #12
 8008460:	46bd      	mov	sp, r7
 8008462:	bc80      	pop	{r7}
 8008464:	4770      	bx	lr

08008466 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008466:	b480      	push	{r7}
 8008468:	b083      	sub	sp, #12
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800846e:	bf00      	nop
 8008470:	370c      	adds	r7, #12
 8008472:	46bd      	mov	sp, r7
 8008474:	bc80      	pop	{r7}
 8008476:	4770      	bx	lr

08008478 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008478:	b480      	push	{r7}
 800847a:	b083      	sub	sp, #12
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	460b      	mov	r3, r1
 8008482:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008484:	bf00      	nop
 8008486:	370c      	adds	r7, #12
 8008488:	46bd      	mov	sp, r7
 800848a:	bc80      	pop	{r7}
 800848c:	4770      	bx	lr

0800848e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800848e:	b580      	push	{r7, lr}
 8008490:	b084      	sub	sp, #16
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800849a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f003 0320 	and.w	r3, r3, #32
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d12a      	bne.n	8008500 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2200      	movs	r2, #0
 80084ae:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	68da      	ldr	r2, [r3, #12]
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80084be:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	695a      	ldr	r2, [r3, #20]
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f022 0201 	bic.w	r2, r2, #1
 80084ce:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	695a      	ldr	r2, [r3, #20]
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084de:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2220      	movs	r2, #32
 80084e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d107      	bne.n	8008500 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	68da      	ldr	r2, [r3, #12]
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f022 0210 	bic.w	r2, r2, #16
 80084fe:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008504:	2b01      	cmp	r3, #1
 8008506:	d106      	bne.n	8008516 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800850c:	4619      	mov	r1, r3
 800850e:	68f8      	ldr	r0, [r7, #12]
 8008510:	f7ff ffb2 	bl	8008478 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008514:	e002      	b.n	800851c <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8008516:	68f8      	ldr	r0, [r7, #12]
 8008518:	f7ff ff93 	bl	8008442 <HAL_UART_RxCpltCallback>
}
 800851c:	bf00      	nop
 800851e:	3710      	adds	r7, #16
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008530:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008536:	2b01      	cmp	r3, #1
 8008538:	d108      	bne.n	800854c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800853e:	085b      	lsrs	r3, r3, #1
 8008540:	b29b      	uxth	r3, r3
 8008542:	4619      	mov	r1, r3
 8008544:	68f8      	ldr	r0, [r7, #12]
 8008546:	f7ff ff97 	bl	8008478 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800854a:	e002      	b.n	8008552 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800854c:	68f8      	ldr	r0, [r7, #12]
 800854e:	f7ff ff81 	bl	8008454 <HAL_UART_RxHalfCpltCallback>
}
 8008552:	bf00      	nop
 8008554:	3710      	adds	r7, #16
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}

0800855a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800855a:	b580      	push	{r7, lr}
 800855c:	b084      	sub	sp, #16
 800855e:	af00      	add	r7, sp, #0
 8008560:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008562:	2300      	movs	r3, #0
 8008564:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800856a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	695b      	ldr	r3, [r3, #20]
 8008572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008576:	2b00      	cmp	r3, #0
 8008578:	bf14      	ite	ne
 800857a:	2301      	movne	r3, #1
 800857c:	2300      	moveq	r3, #0
 800857e:	b2db      	uxtb	r3, r3
 8008580:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008588:	b2db      	uxtb	r3, r3
 800858a:	2b21      	cmp	r3, #33	; 0x21
 800858c:	d108      	bne.n	80085a0 <UART_DMAError+0x46>
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d005      	beq.n	80085a0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	2200      	movs	r2, #0
 8008598:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800859a:	68b8      	ldr	r0, [r7, #8]
 800859c:	f000 f8d6 	bl	800874c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	695b      	ldr	r3, [r3, #20]
 80085a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	bf14      	ite	ne
 80085ae:	2301      	movne	r3, #1
 80085b0:	2300      	moveq	r3, #0
 80085b2:	b2db      	uxtb	r3, r3
 80085b4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80085bc:	b2db      	uxtb	r3, r3
 80085be:	2b22      	cmp	r3, #34	; 0x22
 80085c0:	d108      	bne.n	80085d4 <UART_DMAError+0x7a>
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d005      	beq.n	80085d4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	2200      	movs	r2, #0
 80085cc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80085ce:	68b8      	ldr	r0, [r7, #8]
 80085d0:	f000 f8d1 	bl	8008776 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d8:	f043 0210 	orr.w	r2, r3, #16
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80085e0:	68b8      	ldr	r0, [r7, #8]
 80085e2:	f7ff ff40 	bl	8008466 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085e6:	bf00      	nop
 80085e8:	3710      	adds	r7, #16
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}

080085ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80085ee:	b580      	push	{r7, lr}
 80085f0:	b084      	sub	sp, #16
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	60f8      	str	r0, [r7, #12]
 80085f6:	60b9      	str	r1, [r7, #8]
 80085f8:	603b      	str	r3, [r7, #0]
 80085fa:	4613      	mov	r3, r2
 80085fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085fe:	e02c      	b.n	800865a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008600:	69bb      	ldr	r3, [r7, #24]
 8008602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008606:	d028      	beq.n	800865a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008608:	69bb      	ldr	r3, [r7, #24]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d007      	beq.n	800861e <UART_WaitOnFlagUntilTimeout+0x30>
 800860e:	f7fb fae9 	bl	8003be4 <HAL_GetTick>
 8008612:	4602      	mov	r2, r0
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	1ad3      	subs	r3, r2, r3
 8008618:	69ba      	ldr	r2, [r7, #24]
 800861a:	429a      	cmp	r2, r3
 800861c:	d21d      	bcs.n	800865a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	68da      	ldr	r2, [r3, #12]
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800862c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	695a      	ldr	r2, [r3, #20]
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f022 0201 	bic.w	r2, r2, #1
 800863c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2220      	movs	r2, #32
 8008642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2220      	movs	r2, #32
 800864a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2200      	movs	r2, #0
 8008652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008656:	2303      	movs	r3, #3
 8008658:	e00f      	b.n	800867a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	681a      	ldr	r2, [r3, #0]
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	4013      	ands	r3, r2
 8008664:	68ba      	ldr	r2, [r7, #8]
 8008666:	429a      	cmp	r2, r3
 8008668:	bf0c      	ite	eq
 800866a:	2301      	moveq	r3, #1
 800866c:	2300      	movne	r3, #0
 800866e:	b2db      	uxtb	r3, r3
 8008670:	461a      	mov	r2, r3
 8008672:	79fb      	ldrb	r3, [r7, #7]
 8008674:	429a      	cmp	r2, r3
 8008676:	d0c3      	beq.n	8008600 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008678:	2300      	movs	r3, #0
}
 800867a:	4618      	mov	r0, r3
 800867c:	3710      	adds	r7, #16
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
	...

08008684 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b086      	sub	sp, #24
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	4613      	mov	r3, r2
 8008690:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008692:	68ba      	ldr	r2, [r7, #8]
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	88fa      	ldrh	r2, [r7, #6]
 800869c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2200      	movs	r2, #0
 80086a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2222      	movs	r2, #34	; 0x22
 80086a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086b0:	4a23      	ldr	r2, [pc, #140]	; (8008740 <UART_Start_Receive_DMA+0xbc>)
 80086b2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086b8:	4a22      	ldr	r2, [pc, #136]	; (8008744 <UART_Start_Receive_DMA+0xc0>)
 80086ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086c0:	4a21      	ldr	r2, [pc, #132]	; (8008748 <UART_Start_Receive_DMA+0xc4>)
 80086c2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086c8:	2200      	movs	r2, #0
 80086ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80086cc:	f107 0308 	add.w	r3, r7, #8
 80086d0:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	3304      	adds	r3, #4
 80086dc:	4619      	mov	r1, r3
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	88fb      	ldrh	r3, [r7, #6]
 80086e4:	f7fc f83e 	bl	8004764 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80086e8:	2300      	movs	r3, #0
 80086ea:	613b      	str	r3, [r7, #16]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	613b      	str	r3, [r7, #16]
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	613b      	str	r3, [r7, #16]
 80086fc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2200      	movs	r2, #0
 8008702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	68da      	ldr	r2, [r3, #12]
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008714:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	695a      	ldr	r2, [r3, #20]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f042 0201 	orr.w	r2, r2, #1
 8008724:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	695a      	ldr	r2, [r3, #20]
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008734:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8008736:	2300      	movs	r3, #0
}
 8008738:	4618      	mov	r0, r3
 800873a:	3718      	adds	r7, #24
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}
 8008740:	0800848f 	.word	0x0800848f
 8008744:	08008525 	.word	0x08008525
 8008748:	0800855b 	.word	0x0800855b

0800874c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800874c:	b480      	push	{r7}
 800874e:	b083      	sub	sp, #12
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	68da      	ldr	r2, [r3, #12]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008762:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2220      	movs	r2, #32
 8008768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800876c:	bf00      	nop
 800876e:	370c      	adds	r7, #12
 8008770:	46bd      	mov	sp, r7
 8008772:	bc80      	pop	{r7}
 8008774:	4770      	bx	lr

08008776 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008776:	b480      	push	{r7}
 8008778:	b083      	sub	sp, #12
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	68da      	ldr	r2, [r3, #12]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800878c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	695a      	ldr	r2, [r3, #20]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f022 0201 	bic.w	r2, r2, #1
 800879c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	d107      	bne.n	80087b6 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	68da      	ldr	r2, [r3, #12]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f022 0210 	bic.w	r2, r2, #16
 80087b4:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2220      	movs	r2, #32
 80087ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2200      	movs	r2, #0
 80087c2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80087c4:	bf00      	nop
 80087c6:	370c      	adds	r7, #12
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bc80      	pop	{r7}
 80087cc:	4770      	bx	lr

080087ce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80087ce:	b580      	push	{r7, lr}
 80087d0:	b084      	sub	sp, #16
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2200      	movs	r2, #0
 80087e0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2200      	movs	r2, #0
 80087e6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087e8:	68f8      	ldr	r0, [r7, #12]
 80087ea:	f7ff fe3c 	bl	8008466 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087ee:	bf00      	nop
 80087f0:	3710      	adds	r7, #16
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}

080087f6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80087f6:	b480      	push	{r7}
 80087f8:	b085      	sub	sp, #20
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008804:	b2db      	uxtb	r3, r3
 8008806:	2b21      	cmp	r3, #33	; 0x21
 8008808:	d13e      	bne.n	8008888 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	689b      	ldr	r3, [r3, #8]
 800880e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008812:	d114      	bne.n	800883e <UART_Transmit_IT+0x48>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	691b      	ldr	r3, [r3, #16]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d110      	bne.n	800883e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6a1b      	ldr	r3, [r3, #32]
 8008820:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	881b      	ldrh	r3, [r3, #0]
 8008826:	461a      	mov	r2, r3
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008830:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6a1b      	ldr	r3, [r3, #32]
 8008836:	1c9a      	adds	r2, r3, #2
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	621a      	str	r2, [r3, #32]
 800883c:	e008      	b.n	8008850 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6a1b      	ldr	r3, [r3, #32]
 8008842:	1c59      	adds	r1, r3, #1
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	6211      	str	r1, [r2, #32]
 8008848:	781a      	ldrb	r2, [r3, #0]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008854:	b29b      	uxth	r3, r3
 8008856:	3b01      	subs	r3, #1
 8008858:	b29b      	uxth	r3, r3
 800885a:	687a      	ldr	r2, [r7, #4]
 800885c:	4619      	mov	r1, r3
 800885e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008860:	2b00      	cmp	r3, #0
 8008862:	d10f      	bne.n	8008884 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	68da      	ldr	r2, [r3, #12]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008872:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	68da      	ldr	r2, [r3, #12]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008882:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008884:	2300      	movs	r3, #0
 8008886:	e000      	b.n	800888a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008888:	2302      	movs	r3, #2
  }
}
 800888a:	4618      	mov	r0, r3
 800888c:	3714      	adds	r7, #20
 800888e:	46bd      	mov	sp, r7
 8008890:	bc80      	pop	{r7}
 8008892:	4770      	bx	lr

08008894 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b082      	sub	sp, #8
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	68da      	ldr	r2, [r3, #12]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088aa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2220      	movs	r2, #32
 80088b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f7ff fdbb 	bl	8008430 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80088ba:	2300      	movs	r3, #0
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3708      	adds	r7, #8
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b086      	sub	sp, #24
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80088d2:	b2db      	uxtb	r3, r3
 80088d4:	2b22      	cmp	r3, #34	; 0x22
 80088d6:	f040 8099 	bne.w	8008a0c <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088e2:	d117      	bne.n	8008914 <UART_Receive_IT+0x50>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	691b      	ldr	r3, [r3, #16]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d113      	bne.n	8008914 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80088ec:	2300      	movs	r3, #0
 80088ee:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f4:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008902:	b29a      	uxth	r2, r3
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800890c:	1c9a      	adds	r2, r3, #2
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	629a      	str	r2, [r3, #40]	; 0x28
 8008912:	e026      	b.n	8008962 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008918:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800891a:	2300      	movs	r3, #0
 800891c:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	689b      	ldr	r3, [r3, #8]
 8008922:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008926:	d007      	beq.n	8008938 <UART_Receive_IT+0x74>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d10a      	bne.n	8008946 <UART_Receive_IT+0x82>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	691b      	ldr	r3, [r3, #16]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d106      	bne.n	8008946 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	b2da      	uxtb	r2, r3
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	701a      	strb	r2, [r3, #0]
 8008944:	e008      	b.n	8008958 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	b2db      	uxtb	r3, r3
 800894e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008952:	b2da      	uxtb	r2, r3
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800895c:	1c5a      	adds	r2, r3, #1
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008966:	b29b      	uxth	r3, r3
 8008968:	3b01      	subs	r3, #1
 800896a:	b29b      	uxth	r3, r3
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	4619      	mov	r1, r3
 8008970:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008972:	2b00      	cmp	r3, #0
 8008974:	d148      	bne.n	8008a08 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	68da      	ldr	r2, [r3, #12]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f022 0220 	bic.w	r2, r2, #32
 8008984:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	68da      	ldr	r2, [r3, #12]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008994:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	695a      	ldr	r2, [r3, #20]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f022 0201 	bic.w	r2, r2, #1
 80089a4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2220      	movs	r2, #32
 80089aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	d123      	bne.n	80089fe <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2200      	movs	r2, #0
 80089ba:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	68da      	ldr	r2, [r3, #12]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f022 0210 	bic.w	r2, r2, #16
 80089ca:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f003 0310 	and.w	r3, r3, #16
 80089d6:	2b10      	cmp	r3, #16
 80089d8:	d10a      	bne.n	80089f0 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80089da:	2300      	movs	r3, #0
 80089dc:	60fb      	str	r3, [r7, #12]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	60fb      	str	r3, [r7, #12]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	60fb      	str	r3, [r7, #12]
 80089ee:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80089f4:	4619      	mov	r1, r3
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f7ff fd3e 	bl	8008478 <HAL_UARTEx_RxEventCallback>
 80089fc:	e002      	b.n	8008a04 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f7ff fd1f 	bl	8008442 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008a04:	2300      	movs	r3, #0
 8008a06:	e002      	b.n	8008a0e <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	e000      	b.n	8008a0e <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8008a0c:	2302      	movs	r3, #2
  }
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3718      	adds	r7, #24
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}
	...

08008a18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b084      	sub	sp, #16
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	691b      	ldr	r3, [r3, #16]
 8008a26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	68da      	ldr	r2, [r3, #12]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	430a      	orrs	r2, r1
 8008a34:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	689a      	ldr	r2, [r3, #8]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	691b      	ldr	r3, [r3, #16]
 8008a3e:	431a      	orrs	r2, r3
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	695b      	ldr	r3, [r3, #20]
 8008a44:	4313      	orrs	r3, r2
 8008a46:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	68db      	ldr	r3, [r3, #12]
 8008a4e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008a52:	f023 030c 	bic.w	r3, r3, #12
 8008a56:	687a      	ldr	r2, [r7, #4]
 8008a58:	6812      	ldr	r2, [r2, #0]
 8008a5a:	68b9      	ldr	r1, [r7, #8]
 8008a5c:	430b      	orrs	r3, r1
 8008a5e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	695b      	ldr	r3, [r3, #20]
 8008a66:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	699a      	ldr	r2, [r3, #24]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	430a      	orrs	r2, r1
 8008a74:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a2c      	ldr	r2, [pc, #176]	; (8008b2c <UART_SetConfig+0x114>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d103      	bne.n	8008a88 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008a80:	f7fd ffda 	bl	8006a38 <HAL_RCC_GetPCLK2Freq>
 8008a84:	60f8      	str	r0, [r7, #12]
 8008a86:	e002      	b.n	8008a8e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008a88:	f7fd ffc2 	bl	8006a10 <HAL_RCC_GetPCLK1Freq>
 8008a8c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008a8e:	68fa      	ldr	r2, [r7, #12]
 8008a90:	4613      	mov	r3, r2
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	4413      	add	r3, r2
 8008a96:	009a      	lsls	r2, r3, #2
 8008a98:	441a      	add	r2, r3
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	009b      	lsls	r3, r3, #2
 8008aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008aa4:	4a22      	ldr	r2, [pc, #136]	; (8008b30 <UART_SetConfig+0x118>)
 8008aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8008aaa:	095b      	lsrs	r3, r3, #5
 8008aac:	0119      	lsls	r1, r3, #4
 8008aae:	68fa      	ldr	r2, [r7, #12]
 8008ab0:	4613      	mov	r3, r2
 8008ab2:	009b      	lsls	r3, r3, #2
 8008ab4:	4413      	add	r3, r2
 8008ab6:	009a      	lsls	r2, r3, #2
 8008ab8:	441a      	add	r2, r3
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	fbb2 f2f3 	udiv	r2, r2, r3
 8008ac4:	4b1a      	ldr	r3, [pc, #104]	; (8008b30 <UART_SetConfig+0x118>)
 8008ac6:	fba3 0302 	umull	r0, r3, r3, r2
 8008aca:	095b      	lsrs	r3, r3, #5
 8008acc:	2064      	movs	r0, #100	; 0x64
 8008ace:	fb00 f303 	mul.w	r3, r0, r3
 8008ad2:	1ad3      	subs	r3, r2, r3
 8008ad4:	011b      	lsls	r3, r3, #4
 8008ad6:	3332      	adds	r3, #50	; 0x32
 8008ad8:	4a15      	ldr	r2, [pc, #84]	; (8008b30 <UART_SetConfig+0x118>)
 8008ada:	fba2 2303 	umull	r2, r3, r2, r3
 8008ade:	095b      	lsrs	r3, r3, #5
 8008ae0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ae4:	4419      	add	r1, r3
 8008ae6:	68fa      	ldr	r2, [r7, #12]
 8008ae8:	4613      	mov	r3, r2
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	4413      	add	r3, r2
 8008aee:	009a      	lsls	r2, r3, #2
 8008af0:	441a      	add	r2, r3
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	009b      	lsls	r3, r3, #2
 8008af8:	fbb2 f2f3 	udiv	r2, r2, r3
 8008afc:	4b0c      	ldr	r3, [pc, #48]	; (8008b30 <UART_SetConfig+0x118>)
 8008afe:	fba3 0302 	umull	r0, r3, r3, r2
 8008b02:	095b      	lsrs	r3, r3, #5
 8008b04:	2064      	movs	r0, #100	; 0x64
 8008b06:	fb00 f303 	mul.w	r3, r0, r3
 8008b0a:	1ad3      	subs	r3, r2, r3
 8008b0c:	011b      	lsls	r3, r3, #4
 8008b0e:	3332      	adds	r3, #50	; 0x32
 8008b10:	4a07      	ldr	r2, [pc, #28]	; (8008b30 <UART_SetConfig+0x118>)
 8008b12:	fba2 2303 	umull	r2, r3, r2, r3
 8008b16:	095b      	lsrs	r3, r3, #5
 8008b18:	f003 020f 	and.w	r2, r3, #15
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	440a      	add	r2, r1
 8008b22:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008b24:	bf00      	nop
 8008b26:	3710      	adds	r7, #16
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}
 8008b2c:	40013800 	.word	0x40013800
 8008b30:	51eb851f 	.word	0x51eb851f

08008b34 <_ZdlPvj>:
 8008b34:	f000 b811 	b.w	8008b5a <_ZdlPv>

08008b38 <_Znwj>:
 8008b38:	2801      	cmp	r0, #1
 8008b3a:	bf38      	it	cc
 8008b3c:	2001      	movcc	r0, #1
 8008b3e:	b510      	push	{r4, lr}
 8008b40:	4604      	mov	r4, r0
 8008b42:	4620      	mov	r0, r4
 8008b44:	f000 fa06 	bl	8008f54 <malloc>
 8008b48:	b930      	cbnz	r0, 8008b58 <_Znwj+0x20>
 8008b4a:	f000 f809 	bl	8008b60 <_ZSt15get_new_handlerv>
 8008b4e:	b908      	cbnz	r0, 8008b54 <_Znwj+0x1c>
 8008b50:	f000 f9ca 	bl	8008ee8 <abort>
 8008b54:	4780      	blx	r0
 8008b56:	e7f4      	b.n	8008b42 <_Znwj+0xa>
 8008b58:	bd10      	pop	{r4, pc}

08008b5a <_ZdlPv>:
 8008b5a:	f000 ba03 	b.w	8008f64 <free>
	...

08008b60 <_ZSt15get_new_handlerv>:
 8008b60:	4b02      	ldr	r3, [pc, #8]	; (8008b6c <_ZSt15get_new_handlerv+0xc>)
 8008b62:	6818      	ldr	r0, [r3, #0]
 8008b64:	f3bf 8f5b 	dmb	ish
 8008b68:	4770      	bx	lr
 8008b6a:	bf00      	nop
 8008b6c:	200007f8 	.word	0x200007f8

08008b70 <logf>:
 8008b70:	b538      	push	{r3, r4, r5, lr}
 8008b72:	4604      	mov	r4, r0
 8008b74:	f000 f83e 	bl	8008bf4 <__ieee754_logf>
 8008b78:	4621      	mov	r1, r4
 8008b7a:	4605      	mov	r5, r0
 8008b7c:	4620      	mov	r0, r4
 8008b7e:	f7f8 fac7 	bl	8001110 <__aeabi_fcmpun>
 8008b82:	b970      	cbnz	r0, 8008ba2 <logf+0x32>
 8008b84:	2100      	movs	r1, #0
 8008b86:	4620      	mov	r0, r4
 8008b88:	f7f8 fab8 	bl	80010fc <__aeabi_fcmpgt>
 8008b8c:	b948      	cbnz	r0, 8008ba2 <logf+0x32>
 8008b8e:	2100      	movs	r1, #0
 8008b90:	4620      	mov	r0, r4
 8008b92:	f7f8 fa8b 	bl	80010ac <__aeabi_fcmpeq>
 8008b96:	b130      	cbz	r0, 8008ba6 <logf+0x36>
 8008b98:	f000 f9b2 	bl	8008f00 <__errno>
 8008b9c:	2322      	movs	r3, #34	; 0x22
 8008b9e:	4d06      	ldr	r5, [pc, #24]	; (8008bb8 <logf+0x48>)
 8008ba0:	6003      	str	r3, [r0, #0]
 8008ba2:	4628      	mov	r0, r5
 8008ba4:	bd38      	pop	{r3, r4, r5, pc}
 8008ba6:	f000 f9ab 	bl	8008f00 <__errno>
 8008baa:	2321      	movs	r3, #33	; 0x21
 8008bac:	6003      	str	r3, [r0, #0]
 8008bae:	4803      	ldr	r0, [pc, #12]	; (8008bbc <logf+0x4c>)
 8008bb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bb4:	f000 b994 	b.w	8008ee0 <nanf>
 8008bb8:	ff800000 	.word	0xff800000
 8008bbc:	0800df80 	.word	0x0800df80

08008bc0 <sqrtf>:
 8008bc0:	b538      	push	{r3, r4, r5, lr}
 8008bc2:	4605      	mov	r5, r0
 8008bc4:	f000 f93a 	bl	8008e3c <__ieee754_sqrtf>
 8008bc8:	4629      	mov	r1, r5
 8008bca:	4604      	mov	r4, r0
 8008bcc:	4628      	mov	r0, r5
 8008bce:	f7f8 fa9f 	bl	8001110 <__aeabi_fcmpun>
 8008bd2:	b968      	cbnz	r0, 8008bf0 <sqrtf+0x30>
 8008bd4:	2100      	movs	r1, #0
 8008bd6:	4628      	mov	r0, r5
 8008bd8:	f7f8 fa72 	bl	80010c0 <__aeabi_fcmplt>
 8008bdc:	b140      	cbz	r0, 8008bf0 <sqrtf+0x30>
 8008bde:	f000 f98f 	bl	8008f00 <__errno>
 8008be2:	2321      	movs	r3, #33	; 0x21
 8008be4:	2100      	movs	r1, #0
 8008be6:	6003      	str	r3, [r0, #0]
 8008be8:	4608      	mov	r0, r1
 8008bea:	f7f8 f97f 	bl	8000eec <__aeabi_fdiv>
 8008bee:	4604      	mov	r4, r0
 8008bf0:	4620      	mov	r0, r4
 8008bf2:	bd38      	pop	{r3, r4, r5, pc}

08008bf4 <__ieee754_logf>:
 8008bf4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8008bf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bfc:	4601      	mov	r1, r0
 8008bfe:	4603      	mov	r3, r0
 8008c00:	d106      	bne.n	8008c10 <__ieee754_logf+0x1c>
 8008c02:	2100      	movs	r1, #0
 8008c04:	f04f 404c 	mov.w	r0, #3422552064	; 0xcc000000
 8008c08:	f7f8 f970 	bl	8000eec <__aeabi_fdiv>
 8008c0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c10:	2800      	cmp	r0, #0
 8008c12:	da03      	bge.n	8008c1c <__ieee754_logf+0x28>
 8008c14:	f7f7 ffac 	bl	8000b70 <__aeabi_fsub>
 8008c18:	2100      	movs	r1, #0
 8008c1a:	e7f5      	b.n	8008c08 <__ieee754_logf+0x14>
 8008c1c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8008c20:	db02      	blt.n	8008c28 <__ieee754_logf+0x34>
 8008c22:	f7f7 ffa7 	bl	8000b74 <__addsf3>
 8008c26:	e7f1      	b.n	8008c0c <__ieee754_logf+0x18>
 8008c28:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8008c2c:	da35      	bge.n	8008c9a <__ieee754_logf+0xa6>
 8008c2e:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8008c32:	f7f8 f8a7 	bl	8000d84 <__aeabi_fmul>
 8008c36:	f06f 0218 	mvn.w	r2, #24
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	f3c3 0416 	ubfx	r4, r3, #0, #23
 8008c40:	15de      	asrs	r6, r3, #23
 8008c42:	4b71      	ldr	r3, [pc, #452]	; (8008e08 <__ieee754_logf+0x214>)
 8008c44:	3e7f      	subs	r6, #127	; 0x7f
 8008c46:	4423      	add	r3, r4
 8008c48:	f403 0000 	and.w	r0, r3, #8388608	; 0x800000
 8008c4c:	f080 507e 	eor.w	r0, r0, #1065353216	; 0x3f800000
 8008c50:	4416      	add	r6, r2
 8008c52:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008c56:	4320      	orrs	r0, r4
 8008c58:	eb06 56d3 	add.w	r6, r6, r3, lsr #23
 8008c5c:	f7f7 ff88 	bl	8000b70 <__aeabi_fsub>
 8008c60:	4b6a      	ldr	r3, [pc, #424]	; (8008e0c <__ieee754_logf+0x218>)
 8008c62:	f104 020f 	add.w	r2, r4, #15
 8008c66:	4013      	ands	r3, r2
 8008c68:	4605      	mov	r5, r0
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d13a      	bne.n	8008ce4 <__ieee754_logf+0xf0>
 8008c6e:	2100      	movs	r1, #0
 8008c70:	f7f8 fa1c 	bl	80010ac <__aeabi_fcmpeq>
 8008c74:	b198      	cbz	r0, 8008c9e <__ieee754_logf+0xaa>
 8008c76:	2e00      	cmp	r6, #0
 8008c78:	f000 80c4 	beq.w	8008e04 <__ieee754_logf+0x210>
 8008c7c:	4630      	mov	r0, r6
 8008c7e:	f7f8 f82d 	bl	8000cdc <__aeabi_i2f>
 8008c82:	4963      	ldr	r1, [pc, #396]	; (8008e10 <__ieee754_logf+0x21c>)
 8008c84:	4605      	mov	r5, r0
 8008c86:	f7f8 f87d 	bl	8000d84 <__aeabi_fmul>
 8008c8a:	4962      	ldr	r1, [pc, #392]	; (8008e14 <__ieee754_logf+0x220>)
 8008c8c:	4604      	mov	r4, r0
 8008c8e:	4628      	mov	r0, r5
 8008c90:	f7f8 f878 	bl	8000d84 <__aeabi_fmul>
 8008c94:	4601      	mov	r1, r0
 8008c96:	4620      	mov	r0, r4
 8008c98:	e7c3      	b.n	8008c22 <__ieee754_logf+0x2e>
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	e7ce      	b.n	8008c3c <__ieee754_logf+0x48>
 8008c9e:	495e      	ldr	r1, [pc, #376]	; (8008e18 <__ieee754_logf+0x224>)
 8008ca0:	4628      	mov	r0, r5
 8008ca2:	f7f8 f86f 	bl	8000d84 <__aeabi_fmul>
 8008ca6:	4601      	mov	r1, r0
 8008ca8:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8008cac:	f7f7 ff60 	bl	8000b70 <__aeabi_fsub>
 8008cb0:	4629      	mov	r1, r5
 8008cb2:	4604      	mov	r4, r0
 8008cb4:	4628      	mov	r0, r5
 8008cb6:	f7f8 f865 	bl	8000d84 <__aeabi_fmul>
 8008cba:	4601      	mov	r1, r0
 8008cbc:	4620      	mov	r0, r4
 8008cbe:	f7f8 f861 	bl	8000d84 <__aeabi_fmul>
 8008cc2:	4604      	mov	r4, r0
 8008cc4:	b90e      	cbnz	r6, 8008cca <__ieee754_logf+0xd6>
 8008cc6:	4621      	mov	r1, r4
 8008cc8:	e06f      	b.n	8008daa <__ieee754_logf+0x1b6>
 8008cca:	4630      	mov	r0, r6
 8008ccc:	f7f8 f806 	bl	8000cdc <__aeabi_i2f>
 8008cd0:	494f      	ldr	r1, [pc, #316]	; (8008e10 <__ieee754_logf+0x21c>)
 8008cd2:	4607      	mov	r7, r0
 8008cd4:	f7f8 f856 	bl	8000d84 <__aeabi_fmul>
 8008cd8:	4606      	mov	r6, r0
 8008cda:	4638      	mov	r0, r7
 8008cdc:	494d      	ldr	r1, [pc, #308]	; (8008e14 <__ieee754_logf+0x220>)
 8008cde:	f7f8 f851 	bl	8000d84 <__aeabi_fmul>
 8008ce2:	e072      	b.n	8008dca <__ieee754_logf+0x1d6>
 8008ce4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008ce8:	f7f7 ff44 	bl	8000b74 <__addsf3>
 8008cec:	4601      	mov	r1, r0
 8008cee:	4628      	mov	r0, r5
 8008cf0:	f7f8 f8fc 	bl	8000eec <__aeabi_fdiv>
 8008cf4:	4681      	mov	r9, r0
 8008cf6:	4630      	mov	r0, r6
 8008cf8:	f7f7 fff0 	bl	8000cdc <__aeabi_i2f>
 8008cfc:	4649      	mov	r1, r9
 8008cfe:	4680      	mov	r8, r0
 8008d00:	4648      	mov	r0, r9
 8008d02:	f7f8 f83f 	bl	8000d84 <__aeabi_fmul>
 8008d06:	4601      	mov	r1, r0
 8008d08:	4683      	mov	fp, r0
 8008d0a:	f7f8 f83b 	bl	8000d84 <__aeabi_fmul>
 8008d0e:	4607      	mov	r7, r0
 8008d10:	4942      	ldr	r1, [pc, #264]	; (8008e1c <__ieee754_logf+0x228>)
 8008d12:	f7f8 f837 	bl	8000d84 <__aeabi_fmul>
 8008d16:	4942      	ldr	r1, [pc, #264]	; (8008e20 <__ieee754_logf+0x22c>)
 8008d18:	f7f7 ff2c 	bl	8000b74 <__addsf3>
 8008d1c:	4639      	mov	r1, r7
 8008d1e:	f7f8 f831 	bl	8000d84 <__aeabi_fmul>
 8008d22:	4940      	ldr	r1, [pc, #256]	; (8008e24 <__ieee754_logf+0x230>)
 8008d24:	f7f7 ff26 	bl	8000b74 <__addsf3>
 8008d28:	4639      	mov	r1, r7
 8008d2a:	f7f8 f82b 	bl	8000d84 <__aeabi_fmul>
 8008d2e:	493e      	ldr	r1, [pc, #248]	; (8008e28 <__ieee754_logf+0x234>)
 8008d30:	f7f7 ff20 	bl	8000b74 <__addsf3>
 8008d34:	4659      	mov	r1, fp
 8008d36:	f7f8 f825 	bl	8000d84 <__aeabi_fmul>
 8008d3a:	493c      	ldr	r1, [pc, #240]	; (8008e2c <__ieee754_logf+0x238>)
 8008d3c:	4683      	mov	fp, r0
 8008d3e:	4638      	mov	r0, r7
 8008d40:	f7f8 f820 	bl	8000d84 <__aeabi_fmul>
 8008d44:	493a      	ldr	r1, [pc, #232]	; (8008e30 <__ieee754_logf+0x23c>)
 8008d46:	f7f7 ff15 	bl	8000b74 <__addsf3>
 8008d4a:	4639      	mov	r1, r7
 8008d4c:	f7f8 f81a 	bl	8000d84 <__aeabi_fmul>
 8008d50:	4938      	ldr	r1, [pc, #224]	; (8008e34 <__ieee754_logf+0x240>)
 8008d52:	f7f7 ff0f 	bl	8000b74 <__addsf3>
 8008d56:	4639      	mov	r1, r7
 8008d58:	f7f8 f814 	bl	8000d84 <__aeabi_fmul>
 8008d5c:	4601      	mov	r1, r0
 8008d5e:	4658      	mov	r0, fp
 8008d60:	f7f7 ff08 	bl	8000b74 <__addsf3>
 8008d64:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 8008e38 <__ieee754_logf+0x244>
 8008d68:	f5c4 1357 	rsb	r3, r4, #3522560	; 0x35c000
 8008d6c:	44a2      	add	sl, r4
 8008d6e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008d72:	ea43 030a 	orr.w	r3, r3, sl
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	4607      	mov	r7, r0
 8008d7a:	dd30      	ble.n	8008dde <__ieee754_logf+0x1ea>
 8008d7c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8008d80:	4628      	mov	r0, r5
 8008d82:	f7f7 ffff 	bl	8000d84 <__aeabi_fmul>
 8008d86:	4629      	mov	r1, r5
 8008d88:	f7f7 fffc 	bl	8000d84 <__aeabi_fmul>
 8008d8c:	4601      	mov	r1, r0
 8008d8e:	4604      	mov	r4, r0
 8008d90:	4638      	mov	r0, r7
 8008d92:	f7f7 feef 	bl	8000b74 <__addsf3>
 8008d96:	4649      	mov	r1, r9
 8008d98:	f7f7 fff4 	bl	8000d84 <__aeabi_fmul>
 8008d9c:	4607      	mov	r7, r0
 8008d9e:	b946      	cbnz	r6, 8008db2 <__ieee754_logf+0x1be>
 8008da0:	4601      	mov	r1, r0
 8008da2:	4620      	mov	r0, r4
 8008da4:	f7f7 fee4 	bl	8000b70 <__aeabi_fsub>
 8008da8:	4601      	mov	r1, r0
 8008daa:	4628      	mov	r0, r5
 8008dac:	f7f7 fee0 	bl	8000b70 <__aeabi_fsub>
 8008db0:	e72c      	b.n	8008c0c <__ieee754_logf+0x18>
 8008db2:	4917      	ldr	r1, [pc, #92]	; (8008e10 <__ieee754_logf+0x21c>)
 8008db4:	4640      	mov	r0, r8
 8008db6:	f7f7 ffe5 	bl	8000d84 <__aeabi_fmul>
 8008dba:	4916      	ldr	r1, [pc, #88]	; (8008e14 <__ieee754_logf+0x220>)
 8008dbc:	4606      	mov	r6, r0
 8008dbe:	4640      	mov	r0, r8
 8008dc0:	f7f7 ffe0 	bl	8000d84 <__aeabi_fmul>
 8008dc4:	4639      	mov	r1, r7
 8008dc6:	f7f7 fed5 	bl	8000b74 <__addsf3>
 8008dca:	4601      	mov	r1, r0
 8008dcc:	4620      	mov	r0, r4
 8008dce:	f7f7 fecf 	bl	8000b70 <__aeabi_fsub>
 8008dd2:	4629      	mov	r1, r5
 8008dd4:	f7f7 fecc 	bl	8000b70 <__aeabi_fsub>
 8008dd8:	4601      	mov	r1, r0
 8008dda:	4630      	mov	r0, r6
 8008ddc:	e7e6      	b.n	8008dac <__ieee754_logf+0x1b8>
 8008dde:	4601      	mov	r1, r0
 8008de0:	4628      	mov	r0, r5
 8008de2:	f7f7 fec5 	bl	8000b70 <__aeabi_fsub>
 8008de6:	4649      	mov	r1, r9
 8008de8:	f7f7 ffcc 	bl	8000d84 <__aeabi_fmul>
 8008dec:	4604      	mov	r4, r0
 8008dee:	2e00      	cmp	r6, #0
 8008df0:	f43f af69 	beq.w	8008cc6 <__ieee754_logf+0xd2>
 8008df4:	4906      	ldr	r1, [pc, #24]	; (8008e10 <__ieee754_logf+0x21c>)
 8008df6:	4640      	mov	r0, r8
 8008df8:	f7f7 ffc4 	bl	8000d84 <__aeabi_fmul>
 8008dfc:	4905      	ldr	r1, [pc, #20]	; (8008e14 <__ieee754_logf+0x220>)
 8008dfe:	4606      	mov	r6, r0
 8008e00:	4640      	mov	r0, r8
 8008e02:	e76c      	b.n	8008cde <__ieee754_logf+0xea>
 8008e04:	2000      	movs	r0, #0
 8008e06:	e701      	b.n	8008c0c <__ieee754_logf+0x18>
 8008e08:	004afb20 	.word	0x004afb20
 8008e0c:	007ffff0 	.word	0x007ffff0
 8008e10:	3f317180 	.word	0x3f317180
 8008e14:	3717f7d1 	.word	0x3717f7d1
 8008e18:	3eaaaaab 	.word	0x3eaaaaab
 8008e1c:	3e178897 	.word	0x3e178897
 8008e20:	3e3a3325 	.word	0x3e3a3325
 8008e24:	3e924925 	.word	0x3e924925
 8008e28:	3f2aaaab 	.word	0x3f2aaaab
 8008e2c:	3e1cd04f 	.word	0x3e1cd04f
 8008e30:	3e638e29 	.word	0x3e638e29
 8008e34:	3ecccccd 	.word	0x3ecccccd
 8008e38:	ffcf5c30 	.word	0xffcf5c30

08008e3c <__ieee754_sqrtf>:
 8008e3c:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8008e40:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008e44:	b570      	push	{r4, r5, r6, lr}
 8008e46:	4603      	mov	r3, r0
 8008e48:	4604      	mov	r4, r0
 8008e4a:	d309      	bcc.n	8008e60 <__ieee754_sqrtf+0x24>
 8008e4c:	4601      	mov	r1, r0
 8008e4e:	f7f7 ff99 	bl	8000d84 <__aeabi_fmul>
 8008e52:	4601      	mov	r1, r0
 8008e54:	4620      	mov	r0, r4
 8008e56:	f7f7 fe8d 	bl	8000b74 <__addsf3>
 8008e5a:	4604      	mov	r4, r0
 8008e5c:	4620      	mov	r0, r4
 8008e5e:	bd70      	pop	{r4, r5, r6, pc}
 8008e60:	2a00      	cmp	r2, #0
 8008e62:	d0fb      	beq.n	8008e5c <__ieee754_sqrtf+0x20>
 8008e64:	2800      	cmp	r0, #0
 8008e66:	da06      	bge.n	8008e76 <__ieee754_sqrtf+0x3a>
 8008e68:	4601      	mov	r1, r0
 8008e6a:	f7f7 fe81 	bl	8000b70 <__aeabi_fsub>
 8008e6e:	4601      	mov	r1, r0
 8008e70:	f7f8 f83c 	bl	8000eec <__aeabi_fdiv>
 8008e74:	e7f1      	b.n	8008e5a <__ieee754_sqrtf+0x1e>
 8008e76:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 8008e7a:	ea4f 51e0 	mov.w	r1, r0, asr #23
 8008e7e:	d029      	beq.n	8008ed4 <__ieee754_sqrtf+0x98>
 8008e80:	f3c3 0216 	ubfx	r2, r3, #0, #23
 8008e84:	07cb      	lsls	r3, r1, #31
 8008e86:	f04f 0300 	mov.w	r3, #0
 8008e8a:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 8008e8e:	f04f 0419 	mov.w	r4, #25
 8008e92:	461e      	mov	r6, r3
 8008e94:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8008e98:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8008e9c:	bf58      	it	pl
 8008e9e:	0052      	lslpl	r2, r2, #1
 8008ea0:	1040      	asrs	r0, r0, #1
 8008ea2:	0052      	lsls	r2, r2, #1
 8008ea4:	1875      	adds	r5, r6, r1
 8008ea6:	4295      	cmp	r5, r2
 8008ea8:	bfde      	ittt	le
 8008eaa:	186e      	addle	r6, r5, r1
 8008eac:	1b52      	suble	r2, r2, r5
 8008eae:	185b      	addle	r3, r3, r1
 8008eb0:	3c01      	subs	r4, #1
 8008eb2:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008eb6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008eba:	d1f3      	bne.n	8008ea4 <__ieee754_sqrtf+0x68>
 8008ebc:	b112      	cbz	r2, 8008ec4 <__ieee754_sqrtf+0x88>
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	f023 0301 	bic.w	r3, r3, #1
 8008ec4:	105c      	asrs	r4, r3, #1
 8008ec6:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8008eca:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 8008ece:	e7c5      	b.n	8008e5c <__ieee754_sqrtf+0x20>
 8008ed0:	005b      	lsls	r3, r3, #1
 8008ed2:	3201      	adds	r2, #1
 8008ed4:	0218      	lsls	r0, r3, #8
 8008ed6:	d5fb      	bpl.n	8008ed0 <__ieee754_sqrtf+0x94>
 8008ed8:	3a01      	subs	r2, #1
 8008eda:	1a89      	subs	r1, r1, r2
 8008edc:	e7d0      	b.n	8008e80 <__ieee754_sqrtf+0x44>
	...

08008ee0 <nanf>:
 8008ee0:	4800      	ldr	r0, [pc, #0]	; (8008ee4 <nanf+0x4>)
 8008ee2:	4770      	bx	lr
 8008ee4:	7fc00000 	.word	0x7fc00000

08008ee8 <abort>:
 8008ee8:	2006      	movs	r0, #6
 8008eea:	b508      	push	{r3, lr}
 8008eec:	f000 fe5a 	bl	8009ba4 <raise>
 8008ef0:	2001      	movs	r0, #1
 8008ef2:	f7fa fd66 	bl	80039c2 <_exit>

08008ef6 <atoi>:
 8008ef6:	220a      	movs	r2, #10
 8008ef8:	2100      	movs	r1, #0
 8008efa:	f001 bdbf 	b.w	800aa7c <strtol>
	...

08008f00 <__errno>:
 8008f00:	4b01      	ldr	r3, [pc, #4]	; (8008f08 <__errno+0x8>)
 8008f02:	6818      	ldr	r0, [r3, #0]
 8008f04:	4770      	bx	lr
 8008f06:	bf00      	nop
 8008f08:	2000000c 	.word	0x2000000c

08008f0c <__libc_init_array>:
 8008f0c:	b570      	push	{r4, r5, r6, lr}
 8008f0e:	2600      	movs	r6, #0
 8008f10:	4d0c      	ldr	r5, [pc, #48]	; (8008f44 <__libc_init_array+0x38>)
 8008f12:	4c0d      	ldr	r4, [pc, #52]	; (8008f48 <__libc_init_array+0x3c>)
 8008f14:	1b64      	subs	r4, r4, r5
 8008f16:	10a4      	asrs	r4, r4, #2
 8008f18:	42a6      	cmp	r6, r4
 8008f1a:	d109      	bne.n	8008f30 <__libc_init_array+0x24>
 8008f1c:	f004 fb78 	bl	800d610 <_init>
 8008f20:	2600      	movs	r6, #0
 8008f22:	4d0a      	ldr	r5, [pc, #40]	; (8008f4c <__libc_init_array+0x40>)
 8008f24:	4c0a      	ldr	r4, [pc, #40]	; (8008f50 <__libc_init_array+0x44>)
 8008f26:	1b64      	subs	r4, r4, r5
 8008f28:	10a4      	asrs	r4, r4, #2
 8008f2a:	42a6      	cmp	r6, r4
 8008f2c:	d105      	bne.n	8008f3a <__libc_init_array+0x2e>
 8008f2e:	bd70      	pop	{r4, r5, r6, pc}
 8008f30:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f34:	4798      	blx	r3
 8008f36:	3601      	adds	r6, #1
 8008f38:	e7ee      	b.n	8008f18 <__libc_init_array+0xc>
 8008f3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f3e:	4798      	blx	r3
 8008f40:	3601      	adds	r6, #1
 8008f42:	e7f2      	b.n	8008f2a <__libc_init_array+0x1e>
 8008f44:	0800df84 	.word	0x0800df84
 8008f48:	0800df84 	.word	0x0800df84
 8008f4c:	0800df84 	.word	0x0800df84
 8008f50:	0800df8c 	.word	0x0800df8c

08008f54 <malloc>:
 8008f54:	4b02      	ldr	r3, [pc, #8]	; (8008f60 <malloc+0xc>)
 8008f56:	4601      	mov	r1, r0
 8008f58:	6818      	ldr	r0, [r3, #0]
 8008f5a:	f000 b889 	b.w	8009070 <_malloc_r>
 8008f5e:	bf00      	nop
 8008f60:	2000000c 	.word	0x2000000c

08008f64 <free>:
 8008f64:	4b02      	ldr	r3, [pc, #8]	; (8008f70 <free+0xc>)
 8008f66:	4601      	mov	r1, r0
 8008f68:	6818      	ldr	r0, [r3, #0]
 8008f6a:	f000 b819 	b.w	8008fa0 <_free_r>
 8008f6e:	bf00      	nop
 8008f70:	2000000c 	.word	0x2000000c

08008f74 <memcpy>:
 8008f74:	440a      	add	r2, r1
 8008f76:	4291      	cmp	r1, r2
 8008f78:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f7c:	d100      	bne.n	8008f80 <memcpy+0xc>
 8008f7e:	4770      	bx	lr
 8008f80:	b510      	push	{r4, lr}
 8008f82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f86:	4291      	cmp	r1, r2
 8008f88:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f8c:	d1f9      	bne.n	8008f82 <memcpy+0xe>
 8008f8e:	bd10      	pop	{r4, pc}

08008f90 <memset>:
 8008f90:	4603      	mov	r3, r0
 8008f92:	4402      	add	r2, r0
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d100      	bne.n	8008f9a <memset+0xa>
 8008f98:	4770      	bx	lr
 8008f9a:	f803 1b01 	strb.w	r1, [r3], #1
 8008f9e:	e7f9      	b.n	8008f94 <memset+0x4>

08008fa0 <_free_r>:
 8008fa0:	b538      	push	{r3, r4, r5, lr}
 8008fa2:	4605      	mov	r5, r0
 8008fa4:	2900      	cmp	r1, #0
 8008fa6:	d040      	beq.n	800902a <_free_r+0x8a>
 8008fa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fac:	1f0c      	subs	r4, r1, #4
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	bfb8      	it	lt
 8008fb2:	18e4      	addlt	r4, r4, r3
 8008fb4:	f003 fa4c 	bl	800c450 <__malloc_lock>
 8008fb8:	4a1c      	ldr	r2, [pc, #112]	; (800902c <_free_r+0x8c>)
 8008fba:	6813      	ldr	r3, [r2, #0]
 8008fbc:	b933      	cbnz	r3, 8008fcc <_free_r+0x2c>
 8008fbe:	6063      	str	r3, [r4, #4]
 8008fc0:	6014      	str	r4, [r2, #0]
 8008fc2:	4628      	mov	r0, r5
 8008fc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fc8:	f003 ba48 	b.w	800c45c <__malloc_unlock>
 8008fcc:	42a3      	cmp	r3, r4
 8008fce:	d908      	bls.n	8008fe2 <_free_r+0x42>
 8008fd0:	6820      	ldr	r0, [r4, #0]
 8008fd2:	1821      	adds	r1, r4, r0
 8008fd4:	428b      	cmp	r3, r1
 8008fd6:	bf01      	itttt	eq
 8008fd8:	6819      	ldreq	r1, [r3, #0]
 8008fda:	685b      	ldreq	r3, [r3, #4]
 8008fdc:	1809      	addeq	r1, r1, r0
 8008fde:	6021      	streq	r1, [r4, #0]
 8008fe0:	e7ed      	b.n	8008fbe <_free_r+0x1e>
 8008fe2:	461a      	mov	r2, r3
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	b10b      	cbz	r3, 8008fec <_free_r+0x4c>
 8008fe8:	42a3      	cmp	r3, r4
 8008fea:	d9fa      	bls.n	8008fe2 <_free_r+0x42>
 8008fec:	6811      	ldr	r1, [r2, #0]
 8008fee:	1850      	adds	r0, r2, r1
 8008ff0:	42a0      	cmp	r0, r4
 8008ff2:	d10b      	bne.n	800900c <_free_r+0x6c>
 8008ff4:	6820      	ldr	r0, [r4, #0]
 8008ff6:	4401      	add	r1, r0
 8008ff8:	1850      	adds	r0, r2, r1
 8008ffa:	4283      	cmp	r3, r0
 8008ffc:	6011      	str	r1, [r2, #0]
 8008ffe:	d1e0      	bne.n	8008fc2 <_free_r+0x22>
 8009000:	6818      	ldr	r0, [r3, #0]
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	4401      	add	r1, r0
 8009006:	6011      	str	r1, [r2, #0]
 8009008:	6053      	str	r3, [r2, #4]
 800900a:	e7da      	b.n	8008fc2 <_free_r+0x22>
 800900c:	d902      	bls.n	8009014 <_free_r+0x74>
 800900e:	230c      	movs	r3, #12
 8009010:	602b      	str	r3, [r5, #0]
 8009012:	e7d6      	b.n	8008fc2 <_free_r+0x22>
 8009014:	6820      	ldr	r0, [r4, #0]
 8009016:	1821      	adds	r1, r4, r0
 8009018:	428b      	cmp	r3, r1
 800901a:	bf01      	itttt	eq
 800901c:	6819      	ldreq	r1, [r3, #0]
 800901e:	685b      	ldreq	r3, [r3, #4]
 8009020:	1809      	addeq	r1, r1, r0
 8009022:	6021      	streq	r1, [r4, #0]
 8009024:	6063      	str	r3, [r4, #4]
 8009026:	6054      	str	r4, [r2, #4]
 8009028:	e7cb      	b.n	8008fc2 <_free_r+0x22>
 800902a:	bd38      	pop	{r3, r4, r5, pc}
 800902c:	200007fc 	.word	0x200007fc

08009030 <sbrk_aligned>:
 8009030:	b570      	push	{r4, r5, r6, lr}
 8009032:	4e0e      	ldr	r6, [pc, #56]	; (800906c <sbrk_aligned+0x3c>)
 8009034:	460c      	mov	r4, r1
 8009036:	6831      	ldr	r1, [r6, #0]
 8009038:	4605      	mov	r5, r0
 800903a:	b911      	cbnz	r1, 8009042 <sbrk_aligned+0x12>
 800903c:	f000 fd7a 	bl	8009b34 <_sbrk_r>
 8009040:	6030      	str	r0, [r6, #0]
 8009042:	4621      	mov	r1, r4
 8009044:	4628      	mov	r0, r5
 8009046:	f000 fd75 	bl	8009b34 <_sbrk_r>
 800904a:	1c43      	adds	r3, r0, #1
 800904c:	d00a      	beq.n	8009064 <sbrk_aligned+0x34>
 800904e:	1cc4      	adds	r4, r0, #3
 8009050:	f024 0403 	bic.w	r4, r4, #3
 8009054:	42a0      	cmp	r0, r4
 8009056:	d007      	beq.n	8009068 <sbrk_aligned+0x38>
 8009058:	1a21      	subs	r1, r4, r0
 800905a:	4628      	mov	r0, r5
 800905c:	f000 fd6a 	bl	8009b34 <_sbrk_r>
 8009060:	3001      	adds	r0, #1
 8009062:	d101      	bne.n	8009068 <sbrk_aligned+0x38>
 8009064:	f04f 34ff 	mov.w	r4, #4294967295
 8009068:	4620      	mov	r0, r4
 800906a:	bd70      	pop	{r4, r5, r6, pc}
 800906c:	20000800 	.word	0x20000800

08009070 <_malloc_r>:
 8009070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009074:	1ccd      	adds	r5, r1, #3
 8009076:	f025 0503 	bic.w	r5, r5, #3
 800907a:	3508      	adds	r5, #8
 800907c:	2d0c      	cmp	r5, #12
 800907e:	bf38      	it	cc
 8009080:	250c      	movcc	r5, #12
 8009082:	2d00      	cmp	r5, #0
 8009084:	4607      	mov	r7, r0
 8009086:	db01      	blt.n	800908c <_malloc_r+0x1c>
 8009088:	42a9      	cmp	r1, r5
 800908a:	d905      	bls.n	8009098 <_malloc_r+0x28>
 800908c:	230c      	movs	r3, #12
 800908e:	2600      	movs	r6, #0
 8009090:	603b      	str	r3, [r7, #0]
 8009092:	4630      	mov	r0, r6
 8009094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009098:	4e2e      	ldr	r6, [pc, #184]	; (8009154 <_malloc_r+0xe4>)
 800909a:	f003 f9d9 	bl	800c450 <__malloc_lock>
 800909e:	6833      	ldr	r3, [r6, #0]
 80090a0:	461c      	mov	r4, r3
 80090a2:	bb34      	cbnz	r4, 80090f2 <_malloc_r+0x82>
 80090a4:	4629      	mov	r1, r5
 80090a6:	4638      	mov	r0, r7
 80090a8:	f7ff ffc2 	bl	8009030 <sbrk_aligned>
 80090ac:	1c43      	adds	r3, r0, #1
 80090ae:	4604      	mov	r4, r0
 80090b0:	d14d      	bne.n	800914e <_malloc_r+0xde>
 80090b2:	6834      	ldr	r4, [r6, #0]
 80090b4:	4626      	mov	r6, r4
 80090b6:	2e00      	cmp	r6, #0
 80090b8:	d140      	bne.n	800913c <_malloc_r+0xcc>
 80090ba:	6823      	ldr	r3, [r4, #0]
 80090bc:	4631      	mov	r1, r6
 80090be:	4638      	mov	r0, r7
 80090c0:	eb04 0803 	add.w	r8, r4, r3
 80090c4:	f000 fd36 	bl	8009b34 <_sbrk_r>
 80090c8:	4580      	cmp	r8, r0
 80090ca:	d13a      	bne.n	8009142 <_malloc_r+0xd2>
 80090cc:	6821      	ldr	r1, [r4, #0]
 80090ce:	3503      	adds	r5, #3
 80090d0:	1a6d      	subs	r5, r5, r1
 80090d2:	f025 0503 	bic.w	r5, r5, #3
 80090d6:	3508      	adds	r5, #8
 80090d8:	2d0c      	cmp	r5, #12
 80090da:	bf38      	it	cc
 80090dc:	250c      	movcc	r5, #12
 80090de:	4638      	mov	r0, r7
 80090e0:	4629      	mov	r1, r5
 80090e2:	f7ff ffa5 	bl	8009030 <sbrk_aligned>
 80090e6:	3001      	adds	r0, #1
 80090e8:	d02b      	beq.n	8009142 <_malloc_r+0xd2>
 80090ea:	6823      	ldr	r3, [r4, #0]
 80090ec:	442b      	add	r3, r5
 80090ee:	6023      	str	r3, [r4, #0]
 80090f0:	e00e      	b.n	8009110 <_malloc_r+0xa0>
 80090f2:	6822      	ldr	r2, [r4, #0]
 80090f4:	1b52      	subs	r2, r2, r5
 80090f6:	d41e      	bmi.n	8009136 <_malloc_r+0xc6>
 80090f8:	2a0b      	cmp	r2, #11
 80090fa:	d916      	bls.n	800912a <_malloc_r+0xba>
 80090fc:	1961      	adds	r1, r4, r5
 80090fe:	42a3      	cmp	r3, r4
 8009100:	6025      	str	r5, [r4, #0]
 8009102:	bf18      	it	ne
 8009104:	6059      	strne	r1, [r3, #4]
 8009106:	6863      	ldr	r3, [r4, #4]
 8009108:	bf08      	it	eq
 800910a:	6031      	streq	r1, [r6, #0]
 800910c:	5162      	str	r2, [r4, r5]
 800910e:	604b      	str	r3, [r1, #4]
 8009110:	4638      	mov	r0, r7
 8009112:	f104 060b 	add.w	r6, r4, #11
 8009116:	f003 f9a1 	bl	800c45c <__malloc_unlock>
 800911a:	f026 0607 	bic.w	r6, r6, #7
 800911e:	1d23      	adds	r3, r4, #4
 8009120:	1af2      	subs	r2, r6, r3
 8009122:	d0b6      	beq.n	8009092 <_malloc_r+0x22>
 8009124:	1b9b      	subs	r3, r3, r6
 8009126:	50a3      	str	r3, [r4, r2]
 8009128:	e7b3      	b.n	8009092 <_malloc_r+0x22>
 800912a:	6862      	ldr	r2, [r4, #4]
 800912c:	42a3      	cmp	r3, r4
 800912e:	bf0c      	ite	eq
 8009130:	6032      	streq	r2, [r6, #0]
 8009132:	605a      	strne	r2, [r3, #4]
 8009134:	e7ec      	b.n	8009110 <_malloc_r+0xa0>
 8009136:	4623      	mov	r3, r4
 8009138:	6864      	ldr	r4, [r4, #4]
 800913a:	e7b2      	b.n	80090a2 <_malloc_r+0x32>
 800913c:	4634      	mov	r4, r6
 800913e:	6876      	ldr	r6, [r6, #4]
 8009140:	e7b9      	b.n	80090b6 <_malloc_r+0x46>
 8009142:	230c      	movs	r3, #12
 8009144:	4638      	mov	r0, r7
 8009146:	603b      	str	r3, [r7, #0]
 8009148:	f003 f988 	bl	800c45c <__malloc_unlock>
 800914c:	e7a1      	b.n	8009092 <_malloc_r+0x22>
 800914e:	6025      	str	r5, [r4, #0]
 8009150:	e7de      	b.n	8009110 <_malloc_r+0xa0>
 8009152:	bf00      	nop
 8009154:	200007fc 	.word	0x200007fc

08009158 <__cvt>:
 8009158:	2b00      	cmp	r3, #0
 800915a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800915e:	461f      	mov	r7, r3
 8009160:	bfbb      	ittet	lt
 8009162:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8009166:	461f      	movlt	r7, r3
 8009168:	2300      	movge	r3, #0
 800916a:	232d      	movlt	r3, #45	; 0x2d
 800916c:	b088      	sub	sp, #32
 800916e:	4614      	mov	r4, r2
 8009170:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009172:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009174:	7013      	strb	r3, [r2, #0]
 8009176:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009178:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800917c:	f023 0820 	bic.w	r8, r3, #32
 8009180:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009184:	d005      	beq.n	8009192 <__cvt+0x3a>
 8009186:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800918a:	d100      	bne.n	800918e <__cvt+0x36>
 800918c:	3501      	adds	r5, #1
 800918e:	2302      	movs	r3, #2
 8009190:	e000      	b.n	8009194 <__cvt+0x3c>
 8009192:	2303      	movs	r3, #3
 8009194:	aa07      	add	r2, sp, #28
 8009196:	9204      	str	r2, [sp, #16]
 8009198:	aa06      	add	r2, sp, #24
 800919a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800919e:	e9cd 3500 	strd	r3, r5, [sp]
 80091a2:	4622      	mov	r2, r4
 80091a4:	463b      	mov	r3, r7
 80091a6:	f001 fdbf 	bl	800ad28 <_dtoa_r>
 80091aa:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80091ae:	4606      	mov	r6, r0
 80091b0:	d102      	bne.n	80091b8 <__cvt+0x60>
 80091b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80091b4:	07db      	lsls	r3, r3, #31
 80091b6:	d522      	bpl.n	80091fe <__cvt+0xa6>
 80091b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80091bc:	eb06 0905 	add.w	r9, r6, r5
 80091c0:	d110      	bne.n	80091e4 <__cvt+0x8c>
 80091c2:	7833      	ldrb	r3, [r6, #0]
 80091c4:	2b30      	cmp	r3, #48	; 0x30
 80091c6:	d10a      	bne.n	80091de <__cvt+0x86>
 80091c8:	2200      	movs	r2, #0
 80091ca:	2300      	movs	r3, #0
 80091cc:	4620      	mov	r0, r4
 80091ce:	4639      	mov	r1, r7
 80091d0:	f7f7 fbea 	bl	80009a8 <__aeabi_dcmpeq>
 80091d4:	b918      	cbnz	r0, 80091de <__cvt+0x86>
 80091d6:	f1c5 0501 	rsb	r5, r5, #1
 80091da:	f8ca 5000 	str.w	r5, [sl]
 80091de:	f8da 3000 	ldr.w	r3, [sl]
 80091e2:	4499      	add	r9, r3
 80091e4:	2200      	movs	r2, #0
 80091e6:	2300      	movs	r3, #0
 80091e8:	4620      	mov	r0, r4
 80091ea:	4639      	mov	r1, r7
 80091ec:	f7f7 fbdc 	bl	80009a8 <__aeabi_dcmpeq>
 80091f0:	b108      	cbz	r0, 80091f6 <__cvt+0x9e>
 80091f2:	f8cd 901c 	str.w	r9, [sp, #28]
 80091f6:	2230      	movs	r2, #48	; 0x30
 80091f8:	9b07      	ldr	r3, [sp, #28]
 80091fa:	454b      	cmp	r3, r9
 80091fc:	d307      	bcc.n	800920e <__cvt+0xb6>
 80091fe:	4630      	mov	r0, r6
 8009200:	9b07      	ldr	r3, [sp, #28]
 8009202:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009204:	1b9b      	subs	r3, r3, r6
 8009206:	6013      	str	r3, [r2, #0]
 8009208:	b008      	add	sp, #32
 800920a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800920e:	1c59      	adds	r1, r3, #1
 8009210:	9107      	str	r1, [sp, #28]
 8009212:	701a      	strb	r2, [r3, #0]
 8009214:	e7f0      	b.n	80091f8 <__cvt+0xa0>

08009216 <__exponent>:
 8009216:	4603      	mov	r3, r0
 8009218:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800921a:	2900      	cmp	r1, #0
 800921c:	f803 2b02 	strb.w	r2, [r3], #2
 8009220:	bfb6      	itet	lt
 8009222:	222d      	movlt	r2, #45	; 0x2d
 8009224:	222b      	movge	r2, #43	; 0x2b
 8009226:	4249      	neglt	r1, r1
 8009228:	2909      	cmp	r1, #9
 800922a:	7042      	strb	r2, [r0, #1]
 800922c:	dd2b      	ble.n	8009286 <__exponent+0x70>
 800922e:	f10d 0407 	add.w	r4, sp, #7
 8009232:	46a4      	mov	ip, r4
 8009234:	270a      	movs	r7, #10
 8009236:	fb91 f6f7 	sdiv	r6, r1, r7
 800923a:	460a      	mov	r2, r1
 800923c:	46a6      	mov	lr, r4
 800923e:	fb07 1516 	mls	r5, r7, r6, r1
 8009242:	2a63      	cmp	r2, #99	; 0x63
 8009244:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8009248:	4631      	mov	r1, r6
 800924a:	f104 34ff 	add.w	r4, r4, #4294967295
 800924e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009252:	dcf0      	bgt.n	8009236 <__exponent+0x20>
 8009254:	3130      	adds	r1, #48	; 0x30
 8009256:	f1ae 0502 	sub.w	r5, lr, #2
 800925a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800925e:	4629      	mov	r1, r5
 8009260:	1c44      	adds	r4, r0, #1
 8009262:	4561      	cmp	r1, ip
 8009264:	d30a      	bcc.n	800927c <__exponent+0x66>
 8009266:	f10d 0209 	add.w	r2, sp, #9
 800926a:	eba2 020e 	sub.w	r2, r2, lr
 800926e:	4565      	cmp	r5, ip
 8009270:	bf88      	it	hi
 8009272:	2200      	movhi	r2, #0
 8009274:	4413      	add	r3, r2
 8009276:	1a18      	subs	r0, r3, r0
 8009278:	b003      	add	sp, #12
 800927a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800927c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009280:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009284:	e7ed      	b.n	8009262 <__exponent+0x4c>
 8009286:	2330      	movs	r3, #48	; 0x30
 8009288:	3130      	adds	r1, #48	; 0x30
 800928a:	7083      	strb	r3, [r0, #2]
 800928c:	70c1      	strb	r1, [r0, #3]
 800928e:	1d03      	adds	r3, r0, #4
 8009290:	e7f1      	b.n	8009276 <__exponent+0x60>
	...

08009294 <_printf_float>:
 8009294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009298:	b091      	sub	sp, #68	; 0x44
 800929a:	460c      	mov	r4, r1
 800929c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80092a0:	4616      	mov	r6, r2
 80092a2:	461f      	mov	r7, r3
 80092a4:	4605      	mov	r5, r0
 80092a6:	f003 f847 	bl	800c338 <_localeconv_r>
 80092aa:	6803      	ldr	r3, [r0, #0]
 80092ac:	4618      	mov	r0, r3
 80092ae:	9309      	str	r3, [sp, #36]	; 0x24
 80092b0:	f7f6 ff4e 	bl	8000150 <strlen>
 80092b4:	2300      	movs	r3, #0
 80092b6:	930e      	str	r3, [sp, #56]	; 0x38
 80092b8:	f8d8 3000 	ldr.w	r3, [r8]
 80092bc:	900a      	str	r0, [sp, #40]	; 0x28
 80092be:	3307      	adds	r3, #7
 80092c0:	f023 0307 	bic.w	r3, r3, #7
 80092c4:	f103 0208 	add.w	r2, r3, #8
 80092c8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80092cc:	f8d4 b000 	ldr.w	fp, [r4]
 80092d0:	f8c8 2000 	str.w	r2, [r8]
 80092d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80092dc:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80092e0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80092e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80092e6:	f04f 32ff 	mov.w	r2, #4294967295
 80092ea:	4640      	mov	r0, r8
 80092ec:	4b9c      	ldr	r3, [pc, #624]	; (8009560 <_printf_float+0x2cc>)
 80092ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80092f0:	f7f7 fb8c 	bl	8000a0c <__aeabi_dcmpun>
 80092f4:	bb70      	cbnz	r0, 8009354 <_printf_float+0xc0>
 80092f6:	f04f 32ff 	mov.w	r2, #4294967295
 80092fa:	4640      	mov	r0, r8
 80092fc:	4b98      	ldr	r3, [pc, #608]	; (8009560 <_printf_float+0x2cc>)
 80092fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009300:	f7f7 fb66 	bl	80009d0 <__aeabi_dcmple>
 8009304:	bb30      	cbnz	r0, 8009354 <_printf_float+0xc0>
 8009306:	2200      	movs	r2, #0
 8009308:	2300      	movs	r3, #0
 800930a:	4640      	mov	r0, r8
 800930c:	4651      	mov	r1, sl
 800930e:	f7f7 fb55 	bl	80009bc <__aeabi_dcmplt>
 8009312:	b110      	cbz	r0, 800931a <_printf_float+0x86>
 8009314:	232d      	movs	r3, #45	; 0x2d
 8009316:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800931a:	4b92      	ldr	r3, [pc, #584]	; (8009564 <_printf_float+0x2d0>)
 800931c:	4892      	ldr	r0, [pc, #584]	; (8009568 <_printf_float+0x2d4>)
 800931e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009322:	bf94      	ite	ls
 8009324:	4698      	movls	r8, r3
 8009326:	4680      	movhi	r8, r0
 8009328:	2303      	movs	r3, #3
 800932a:	f04f 0a00 	mov.w	sl, #0
 800932e:	6123      	str	r3, [r4, #16]
 8009330:	f02b 0304 	bic.w	r3, fp, #4
 8009334:	6023      	str	r3, [r4, #0]
 8009336:	4633      	mov	r3, r6
 8009338:	4621      	mov	r1, r4
 800933a:	4628      	mov	r0, r5
 800933c:	9700      	str	r7, [sp, #0]
 800933e:	aa0f      	add	r2, sp, #60	; 0x3c
 8009340:	f000 f9d4 	bl	80096ec <_printf_common>
 8009344:	3001      	adds	r0, #1
 8009346:	f040 8090 	bne.w	800946a <_printf_float+0x1d6>
 800934a:	f04f 30ff 	mov.w	r0, #4294967295
 800934e:	b011      	add	sp, #68	; 0x44
 8009350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009354:	4642      	mov	r2, r8
 8009356:	4653      	mov	r3, sl
 8009358:	4640      	mov	r0, r8
 800935a:	4651      	mov	r1, sl
 800935c:	f7f7 fb56 	bl	8000a0c <__aeabi_dcmpun>
 8009360:	b148      	cbz	r0, 8009376 <_printf_float+0xe2>
 8009362:	f1ba 0f00 	cmp.w	sl, #0
 8009366:	bfb8      	it	lt
 8009368:	232d      	movlt	r3, #45	; 0x2d
 800936a:	4880      	ldr	r0, [pc, #512]	; (800956c <_printf_float+0x2d8>)
 800936c:	bfb8      	it	lt
 800936e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009372:	4b7f      	ldr	r3, [pc, #508]	; (8009570 <_printf_float+0x2dc>)
 8009374:	e7d3      	b.n	800931e <_printf_float+0x8a>
 8009376:	6863      	ldr	r3, [r4, #4]
 8009378:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800937c:	1c5a      	adds	r2, r3, #1
 800937e:	d142      	bne.n	8009406 <_printf_float+0x172>
 8009380:	2306      	movs	r3, #6
 8009382:	6063      	str	r3, [r4, #4]
 8009384:	2200      	movs	r2, #0
 8009386:	9206      	str	r2, [sp, #24]
 8009388:	aa0e      	add	r2, sp, #56	; 0x38
 800938a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800938e:	aa0d      	add	r2, sp, #52	; 0x34
 8009390:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8009394:	9203      	str	r2, [sp, #12]
 8009396:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800939a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800939e:	6023      	str	r3, [r4, #0]
 80093a0:	6863      	ldr	r3, [r4, #4]
 80093a2:	4642      	mov	r2, r8
 80093a4:	9300      	str	r3, [sp, #0]
 80093a6:	4628      	mov	r0, r5
 80093a8:	4653      	mov	r3, sl
 80093aa:	910b      	str	r1, [sp, #44]	; 0x2c
 80093ac:	f7ff fed4 	bl	8009158 <__cvt>
 80093b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80093b2:	4680      	mov	r8, r0
 80093b4:	2947      	cmp	r1, #71	; 0x47
 80093b6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80093b8:	d108      	bne.n	80093cc <_printf_float+0x138>
 80093ba:	1cc8      	adds	r0, r1, #3
 80093bc:	db02      	blt.n	80093c4 <_printf_float+0x130>
 80093be:	6863      	ldr	r3, [r4, #4]
 80093c0:	4299      	cmp	r1, r3
 80093c2:	dd40      	ble.n	8009446 <_printf_float+0x1b2>
 80093c4:	f1a9 0902 	sub.w	r9, r9, #2
 80093c8:	fa5f f989 	uxtb.w	r9, r9
 80093cc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80093d0:	d81f      	bhi.n	8009412 <_printf_float+0x17e>
 80093d2:	464a      	mov	r2, r9
 80093d4:	3901      	subs	r1, #1
 80093d6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80093da:	910d      	str	r1, [sp, #52]	; 0x34
 80093dc:	f7ff ff1b 	bl	8009216 <__exponent>
 80093e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80093e2:	4682      	mov	sl, r0
 80093e4:	1813      	adds	r3, r2, r0
 80093e6:	2a01      	cmp	r2, #1
 80093e8:	6123      	str	r3, [r4, #16]
 80093ea:	dc02      	bgt.n	80093f2 <_printf_float+0x15e>
 80093ec:	6822      	ldr	r2, [r4, #0]
 80093ee:	07d2      	lsls	r2, r2, #31
 80093f0:	d501      	bpl.n	80093f6 <_printf_float+0x162>
 80093f2:	3301      	adds	r3, #1
 80093f4:	6123      	str	r3, [r4, #16]
 80093f6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d09b      	beq.n	8009336 <_printf_float+0xa2>
 80093fe:	232d      	movs	r3, #45	; 0x2d
 8009400:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009404:	e797      	b.n	8009336 <_printf_float+0xa2>
 8009406:	2947      	cmp	r1, #71	; 0x47
 8009408:	d1bc      	bne.n	8009384 <_printf_float+0xf0>
 800940a:	2b00      	cmp	r3, #0
 800940c:	d1ba      	bne.n	8009384 <_printf_float+0xf0>
 800940e:	2301      	movs	r3, #1
 8009410:	e7b7      	b.n	8009382 <_printf_float+0xee>
 8009412:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009416:	d118      	bne.n	800944a <_printf_float+0x1b6>
 8009418:	2900      	cmp	r1, #0
 800941a:	6863      	ldr	r3, [r4, #4]
 800941c:	dd0b      	ble.n	8009436 <_printf_float+0x1a2>
 800941e:	6121      	str	r1, [r4, #16]
 8009420:	b913      	cbnz	r3, 8009428 <_printf_float+0x194>
 8009422:	6822      	ldr	r2, [r4, #0]
 8009424:	07d0      	lsls	r0, r2, #31
 8009426:	d502      	bpl.n	800942e <_printf_float+0x19a>
 8009428:	3301      	adds	r3, #1
 800942a:	440b      	add	r3, r1
 800942c:	6123      	str	r3, [r4, #16]
 800942e:	f04f 0a00 	mov.w	sl, #0
 8009432:	65a1      	str	r1, [r4, #88]	; 0x58
 8009434:	e7df      	b.n	80093f6 <_printf_float+0x162>
 8009436:	b913      	cbnz	r3, 800943e <_printf_float+0x1aa>
 8009438:	6822      	ldr	r2, [r4, #0]
 800943a:	07d2      	lsls	r2, r2, #31
 800943c:	d501      	bpl.n	8009442 <_printf_float+0x1ae>
 800943e:	3302      	adds	r3, #2
 8009440:	e7f4      	b.n	800942c <_printf_float+0x198>
 8009442:	2301      	movs	r3, #1
 8009444:	e7f2      	b.n	800942c <_printf_float+0x198>
 8009446:	f04f 0967 	mov.w	r9, #103	; 0x67
 800944a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800944c:	4299      	cmp	r1, r3
 800944e:	db05      	blt.n	800945c <_printf_float+0x1c8>
 8009450:	6823      	ldr	r3, [r4, #0]
 8009452:	6121      	str	r1, [r4, #16]
 8009454:	07d8      	lsls	r0, r3, #31
 8009456:	d5ea      	bpl.n	800942e <_printf_float+0x19a>
 8009458:	1c4b      	adds	r3, r1, #1
 800945a:	e7e7      	b.n	800942c <_printf_float+0x198>
 800945c:	2900      	cmp	r1, #0
 800945e:	bfcc      	ite	gt
 8009460:	2201      	movgt	r2, #1
 8009462:	f1c1 0202 	rsble	r2, r1, #2
 8009466:	4413      	add	r3, r2
 8009468:	e7e0      	b.n	800942c <_printf_float+0x198>
 800946a:	6823      	ldr	r3, [r4, #0]
 800946c:	055a      	lsls	r2, r3, #21
 800946e:	d407      	bmi.n	8009480 <_printf_float+0x1ec>
 8009470:	6923      	ldr	r3, [r4, #16]
 8009472:	4642      	mov	r2, r8
 8009474:	4631      	mov	r1, r6
 8009476:	4628      	mov	r0, r5
 8009478:	47b8      	blx	r7
 800947a:	3001      	adds	r0, #1
 800947c:	d12b      	bne.n	80094d6 <_printf_float+0x242>
 800947e:	e764      	b.n	800934a <_printf_float+0xb6>
 8009480:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009484:	f240 80dd 	bls.w	8009642 <_printf_float+0x3ae>
 8009488:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800948c:	2200      	movs	r2, #0
 800948e:	2300      	movs	r3, #0
 8009490:	f7f7 fa8a 	bl	80009a8 <__aeabi_dcmpeq>
 8009494:	2800      	cmp	r0, #0
 8009496:	d033      	beq.n	8009500 <_printf_float+0x26c>
 8009498:	2301      	movs	r3, #1
 800949a:	4631      	mov	r1, r6
 800949c:	4628      	mov	r0, r5
 800949e:	4a35      	ldr	r2, [pc, #212]	; (8009574 <_printf_float+0x2e0>)
 80094a0:	47b8      	blx	r7
 80094a2:	3001      	adds	r0, #1
 80094a4:	f43f af51 	beq.w	800934a <_printf_float+0xb6>
 80094a8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80094ac:	429a      	cmp	r2, r3
 80094ae:	db02      	blt.n	80094b6 <_printf_float+0x222>
 80094b0:	6823      	ldr	r3, [r4, #0]
 80094b2:	07d8      	lsls	r0, r3, #31
 80094b4:	d50f      	bpl.n	80094d6 <_printf_float+0x242>
 80094b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80094ba:	4631      	mov	r1, r6
 80094bc:	4628      	mov	r0, r5
 80094be:	47b8      	blx	r7
 80094c0:	3001      	adds	r0, #1
 80094c2:	f43f af42 	beq.w	800934a <_printf_float+0xb6>
 80094c6:	f04f 0800 	mov.w	r8, #0
 80094ca:	f104 091a 	add.w	r9, r4, #26
 80094ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094d0:	3b01      	subs	r3, #1
 80094d2:	4543      	cmp	r3, r8
 80094d4:	dc09      	bgt.n	80094ea <_printf_float+0x256>
 80094d6:	6823      	ldr	r3, [r4, #0]
 80094d8:	079b      	lsls	r3, r3, #30
 80094da:	f100 8102 	bmi.w	80096e2 <_printf_float+0x44e>
 80094de:	68e0      	ldr	r0, [r4, #12]
 80094e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80094e2:	4298      	cmp	r0, r3
 80094e4:	bfb8      	it	lt
 80094e6:	4618      	movlt	r0, r3
 80094e8:	e731      	b.n	800934e <_printf_float+0xba>
 80094ea:	2301      	movs	r3, #1
 80094ec:	464a      	mov	r2, r9
 80094ee:	4631      	mov	r1, r6
 80094f0:	4628      	mov	r0, r5
 80094f2:	47b8      	blx	r7
 80094f4:	3001      	adds	r0, #1
 80094f6:	f43f af28 	beq.w	800934a <_printf_float+0xb6>
 80094fa:	f108 0801 	add.w	r8, r8, #1
 80094fe:	e7e6      	b.n	80094ce <_printf_float+0x23a>
 8009500:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009502:	2b00      	cmp	r3, #0
 8009504:	dc38      	bgt.n	8009578 <_printf_float+0x2e4>
 8009506:	2301      	movs	r3, #1
 8009508:	4631      	mov	r1, r6
 800950a:	4628      	mov	r0, r5
 800950c:	4a19      	ldr	r2, [pc, #100]	; (8009574 <_printf_float+0x2e0>)
 800950e:	47b8      	blx	r7
 8009510:	3001      	adds	r0, #1
 8009512:	f43f af1a 	beq.w	800934a <_printf_float+0xb6>
 8009516:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800951a:	4313      	orrs	r3, r2
 800951c:	d102      	bne.n	8009524 <_printf_float+0x290>
 800951e:	6823      	ldr	r3, [r4, #0]
 8009520:	07d9      	lsls	r1, r3, #31
 8009522:	d5d8      	bpl.n	80094d6 <_printf_float+0x242>
 8009524:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009528:	4631      	mov	r1, r6
 800952a:	4628      	mov	r0, r5
 800952c:	47b8      	blx	r7
 800952e:	3001      	adds	r0, #1
 8009530:	f43f af0b 	beq.w	800934a <_printf_float+0xb6>
 8009534:	f04f 0900 	mov.w	r9, #0
 8009538:	f104 0a1a 	add.w	sl, r4, #26
 800953c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800953e:	425b      	negs	r3, r3
 8009540:	454b      	cmp	r3, r9
 8009542:	dc01      	bgt.n	8009548 <_printf_float+0x2b4>
 8009544:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009546:	e794      	b.n	8009472 <_printf_float+0x1de>
 8009548:	2301      	movs	r3, #1
 800954a:	4652      	mov	r2, sl
 800954c:	4631      	mov	r1, r6
 800954e:	4628      	mov	r0, r5
 8009550:	47b8      	blx	r7
 8009552:	3001      	adds	r0, #1
 8009554:	f43f aef9 	beq.w	800934a <_printf_float+0xb6>
 8009558:	f109 0901 	add.w	r9, r9, #1
 800955c:	e7ee      	b.n	800953c <_printf_float+0x2a8>
 800955e:	bf00      	nop
 8009560:	7fefffff 	.word	0x7fefffff
 8009564:	0800dae4 	.word	0x0800dae4
 8009568:	0800dae8 	.word	0x0800dae8
 800956c:	0800daf0 	.word	0x0800daf0
 8009570:	0800daec 	.word	0x0800daec
 8009574:	0800daf4 	.word	0x0800daf4
 8009578:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800957a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800957c:	429a      	cmp	r2, r3
 800957e:	bfa8      	it	ge
 8009580:	461a      	movge	r2, r3
 8009582:	2a00      	cmp	r2, #0
 8009584:	4691      	mov	r9, r2
 8009586:	dc37      	bgt.n	80095f8 <_printf_float+0x364>
 8009588:	f04f 0b00 	mov.w	fp, #0
 800958c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009590:	f104 021a 	add.w	r2, r4, #26
 8009594:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009598:	ebaa 0309 	sub.w	r3, sl, r9
 800959c:	455b      	cmp	r3, fp
 800959e:	dc33      	bgt.n	8009608 <_printf_float+0x374>
 80095a0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80095a4:	429a      	cmp	r2, r3
 80095a6:	db3b      	blt.n	8009620 <_printf_float+0x38c>
 80095a8:	6823      	ldr	r3, [r4, #0]
 80095aa:	07da      	lsls	r2, r3, #31
 80095ac:	d438      	bmi.n	8009620 <_printf_float+0x38c>
 80095ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80095b0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80095b2:	eba3 020a 	sub.w	r2, r3, sl
 80095b6:	eba3 0901 	sub.w	r9, r3, r1
 80095ba:	4591      	cmp	r9, r2
 80095bc:	bfa8      	it	ge
 80095be:	4691      	movge	r9, r2
 80095c0:	f1b9 0f00 	cmp.w	r9, #0
 80095c4:	dc34      	bgt.n	8009630 <_printf_float+0x39c>
 80095c6:	f04f 0800 	mov.w	r8, #0
 80095ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80095ce:	f104 0a1a 	add.w	sl, r4, #26
 80095d2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80095d6:	1a9b      	subs	r3, r3, r2
 80095d8:	eba3 0309 	sub.w	r3, r3, r9
 80095dc:	4543      	cmp	r3, r8
 80095de:	f77f af7a 	ble.w	80094d6 <_printf_float+0x242>
 80095e2:	2301      	movs	r3, #1
 80095e4:	4652      	mov	r2, sl
 80095e6:	4631      	mov	r1, r6
 80095e8:	4628      	mov	r0, r5
 80095ea:	47b8      	blx	r7
 80095ec:	3001      	adds	r0, #1
 80095ee:	f43f aeac 	beq.w	800934a <_printf_float+0xb6>
 80095f2:	f108 0801 	add.w	r8, r8, #1
 80095f6:	e7ec      	b.n	80095d2 <_printf_float+0x33e>
 80095f8:	4613      	mov	r3, r2
 80095fa:	4631      	mov	r1, r6
 80095fc:	4642      	mov	r2, r8
 80095fe:	4628      	mov	r0, r5
 8009600:	47b8      	blx	r7
 8009602:	3001      	adds	r0, #1
 8009604:	d1c0      	bne.n	8009588 <_printf_float+0x2f4>
 8009606:	e6a0      	b.n	800934a <_printf_float+0xb6>
 8009608:	2301      	movs	r3, #1
 800960a:	4631      	mov	r1, r6
 800960c:	4628      	mov	r0, r5
 800960e:	920b      	str	r2, [sp, #44]	; 0x2c
 8009610:	47b8      	blx	r7
 8009612:	3001      	adds	r0, #1
 8009614:	f43f ae99 	beq.w	800934a <_printf_float+0xb6>
 8009618:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800961a:	f10b 0b01 	add.w	fp, fp, #1
 800961e:	e7b9      	b.n	8009594 <_printf_float+0x300>
 8009620:	4631      	mov	r1, r6
 8009622:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009626:	4628      	mov	r0, r5
 8009628:	47b8      	blx	r7
 800962a:	3001      	adds	r0, #1
 800962c:	d1bf      	bne.n	80095ae <_printf_float+0x31a>
 800962e:	e68c      	b.n	800934a <_printf_float+0xb6>
 8009630:	464b      	mov	r3, r9
 8009632:	4631      	mov	r1, r6
 8009634:	4628      	mov	r0, r5
 8009636:	eb08 020a 	add.w	r2, r8, sl
 800963a:	47b8      	blx	r7
 800963c:	3001      	adds	r0, #1
 800963e:	d1c2      	bne.n	80095c6 <_printf_float+0x332>
 8009640:	e683      	b.n	800934a <_printf_float+0xb6>
 8009642:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009644:	2a01      	cmp	r2, #1
 8009646:	dc01      	bgt.n	800964c <_printf_float+0x3b8>
 8009648:	07db      	lsls	r3, r3, #31
 800964a:	d537      	bpl.n	80096bc <_printf_float+0x428>
 800964c:	2301      	movs	r3, #1
 800964e:	4642      	mov	r2, r8
 8009650:	4631      	mov	r1, r6
 8009652:	4628      	mov	r0, r5
 8009654:	47b8      	blx	r7
 8009656:	3001      	adds	r0, #1
 8009658:	f43f ae77 	beq.w	800934a <_printf_float+0xb6>
 800965c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009660:	4631      	mov	r1, r6
 8009662:	4628      	mov	r0, r5
 8009664:	47b8      	blx	r7
 8009666:	3001      	adds	r0, #1
 8009668:	f43f ae6f 	beq.w	800934a <_printf_float+0xb6>
 800966c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009670:	2200      	movs	r2, #0
 8009672:	2300      	movs	r3, #0
 8009674:	f7f7 f998 	bl	80009a8 <__aeabi_dcmpeq>
 8009678:	b9d8      	cbnz	r0, 80096b2 <_printf_float+0x41e>
 800967a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800967c:	f108 0201 	add.w	r2, r8, #1
 8009680:	3b01      	subs	r3, #1
 8009682:	4631      	mov	r1, r6
 8009684:	4628      	mov	r0, r5
 8009686:	47b8      	blx	r7
 8009688:	3001      	adds	r0, #1
 800968a:	d10e      	bne.n	80096aa <_printf_float+0x416>
 800968c:	e65d      	b.n	800934a <_printf_float+0xb6>
 800968e:	2301      	movs	r3, #1
 8009690:	464a      	mov	r2, r9
 8009692:	4631      	mov	r1, r6
 8009694:	4628      	mov	r0, r5
 8009696:	47b8      	blx	r7
 8009698:	3001      	adds	r0, #1
 800969a:	f43f ae56 	beq.w	800934a <_printf_float+0xb6>
 800969e:	f108 0801 	add.w	r8, r8, #1
 80096a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096a4:	3b01      	subs	r3, #1
 80096a6:	4543      	cmp	r3, r8
 80096a8:	dcf1      	bgt.n	800968e <_printf_float+0x3fa>
 80096aa:	4653      	mov	r3, sl
 80096ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80096b0:	e6e0      	b.n	8009474 <_printf_float+0x1e0>
 80096b2:	f04f 0800 	mov.w	r8, #0
 80096b6:	f104 091a 	add.w	r9, r4, #26
 80096ba:	e7f2      	b.n	80096a2 <_printf_float+0x40e>
 80096bc:	2301      	movs	r3, #1
 80096be:	4642      	mov	r2, r8
 80096c0:	e7df      	b.n	8009682 <_printf_float+0x3ee>
 80096c2:	2301      	movs	r3, #1
 80096c4:	464a      	mov	r2, r9
 80096c6:	4631      	mov	r1, r6
 80096c8:	4628      	mov	r0, r5
 80096ca:	47b8      	blx	r7
 80096cc:	3001      	adds	r0, #1
 80096ce:	f43f ae3c 	beq.w	800934a <_printf_float+0xb6>
 80096d2:	f108 0801 	add.w	r8, r8, #1
 80096d6:	68e3      	ldr	r3, [r4, #12]
 80096d8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80096da:	1a5b      	subs	r3, r3, r1
 80096dc:	4543      	cmp	r3, r8
 80096de:	dcf0      	bgt.n	80096c2 <_printf_float+0x42e>
 80096e0:	e6fd      	b.n	80094de <_printf_float+0x24a>
 80096e2:	f04f 0800 	mov.w	r8, #0
 80096e6:	f104 0919 	add.w	r9, r4, #25
 80096ea:	e7f4      	b.n	80096d6 <_printf_float+0x442>

080096ec <_printf_common>:
 80096ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096f0:	4616      	mov	r6, r2
 80096f2:	4699      	mov	r9, r3
 80096f4:	688a      	ldr	r2, [r1, #8]
 80096f6:	690b      	ldr	r3, [r1, #16]
 80096f8:	4607      	mov	r7, r0
 80096fa:	4293      	cmp	r3, r2
 80096fc:	bfb8      	it	lt
 80096fe:	4613      	movlt	r3, r2
 8009700:	6033      	str	r3, [r6, #0]
 8009702:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009706:	460c      	mov	r4, r1
 8009708:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800970c:	b10a      	cbz	r2, 8009712 <_printf_common+0x26>
 800970e:	3301      	adds	r3, #1
 8009710:	6033      	str	r3, [r6, #0]
 8009712:	6823      	ldr	r3, [r4, #0]
 8009714:	0699      	lsls	r1, r3, #26
 8009716:	bf42      	ittt	mi
 8009718:	6833      	ldrmi	r3, [r6, #0]
 800971a:	3302      	addmi	r3, #2
 800971c:	6033      	strmi	r3, [r6, #0]
 800971e:	6825      	ldr	r5, [r4, #0]
 8009720:	f015 0506 	ands.w	r5, r5, #6
 8009724:	d106      	bne.n	8009734 <_printf_common+0x48>
 8009726:	f104 0a19 	add.w	sl, r4, #25
 800972a:	68e3      	ldr	r3, [r4, #12]
 800972c:	6832      	ldr	r2, [r6, #0]
 800972e:	1a9b      	subs	r3, r3, r2
 8009730:	42ab      	cmp	r3, r5
 8009732:	dc28      	bgt.n	8009786 <_printf_common+0x9a>
 8009734:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009738:	1e13      	subs	r3, r2, #0
 800973a:	6822      	ldr	r2, [r4, #0]
 800973c:	bf18      	it	ne
 800973e:	2301      	movne	r3, #1
 8009740:	0692      	lsls	r2, r2, #26
 8009742:	d42d      	bmi.n	80097a0 <_printf_common+0xb4>
 8009744:	4649      	mov	r1, r9
 8009746:	4638      	mov	r0, r7
 8009748:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800974c:	47c0      	blx	r8
 800974e:	3001      	adds	r0, #1
 8009750:	d020      	beq.n	8009794 <_printf_common+0xa8>
 8009752:	6823      	ldr	r3, [r4, #0]
 8009754:	68e5      	ldr	r5, [r4, #12]
 8009756:	f003 0306 	and.w	r3, r3, #6
 800975a:	2b04      	cmp	r3, #4
 800975c:	bf18      	it	ne
 800975e:	2500      	movne	r5, #0
 8009760:	6832      	ldr	r2, [r6, #0]
 8009762:	f04f 0600 	mov.w	r6, #0
 8009766:	68a3      	ldr	r3, [r4, #8]
 8009768:	bf08      	it	eq
 800976a:	1aad      	subeq	r5, r5, r2
 800976c:	6922      	ldr	r2, [r4, #16]
 800976e:	bf08      	it	eq
 8009770:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009774:	4293      	cmp	r3, r2
 8009776:	bfc4      	itt	gt
 8009778:	1a9b      	subgt	r3, r3, r2
 800977a:	18ed      	addgt	r5, r5, r3
 800977c:	341a      	adds	r4, #26
 800977e:	42b5      	cmp	r5, r6
 8009780:	d11a      	bne.n	80097b8 <_printf_common+0xcc>
 8009782:	2000      	movs	r0, #0
 8009784:	e008      	b.n	8009798 <_printf_common+0xac>
 8009786:	2301      	movs	r3, #1
 8009788:	4652      	mov	r2, sl
 800978a:	4649      	mov	r1, r9
 800978c:	4638      	mov	r0, r7
 800978e:	47c0      	blx	r8
 8009790:	3001      	adds	r0, #1
 8009792:	d103      	bne.n	800979c <_printf_common+0xb0>
 8009794:	f04f 30ff 	mov.w	r0, #4294967295
 8009798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800979c:	3501      	adds	r5, #1
 800979e:	e7c4      	b.n	800972a <_printf_common+0x3e>
 80097a0:	2030      	movs	r0, #48	; 0x30
 80097a2:	18e1      	adds	r1, r4, r3
 80097a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80097a8:	1c5a      	adds	r2, r3, #1
 80097aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80097ae:	4422      	add	r2, r4
 80097b0:	3302      	adds	r3, #2
 80097b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80097b6:	e7c5      	b.n	8009744 <_printf_common+0x58>
 80097b8:	2301      	movs	r3, #1
 80097ba:	4622      	mov	r2, r4
 80097bc:	4649      	mov	r1, r9
 80097be:	4638      	mov	r0, r7
 80097c0:	47c0      	blx	r8
 80097c2:	3001      	adds	r0, #1
 80097c4:	d0e6      	beq.n	8009794 <_printf_common+0xa8>
 80097c6:	3601      	adds	r6, #1
 80097c8:	e7d9      	b.n	800977e <_printf_common+0x92>
	...

080097cc <_printf_i>:
 80097cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80097d0:	7e0f      	ldrb	r7, [r1, #24]
 80097d2:	4691      	mov	r9, r2
 80097d4:	2f78      	cmp	r7, #120	; 0x78
 80097d6:	4680      	mov	r8, r0
 80097d8:	460c      	mov	r4, r1
 80097da:	469a      	mov	sl, r3
 80097dc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80097de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80097e2:	d807      	bhi.n	80097f4 <_printf_i+0x28>
 80097e4:	2f62      	cmp	r7, #98	; 0x62
 80097e6:	d80a      	bhi.n	80097fe <_printf_i+0x32>
 80097e8:	2f00      	cmp	r7, #0
 80097ea:	f000 80d9 	beq.w	80099a0 <_printf_i+0x1d4>
 80097ee:	2f58      	cmp	r7, #88	; 0x58
 80097f0:	f000 80a4 	beq.w	800993c <_printf_i+0x170>
 80097f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80097f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80097fc:	e03a      	b.n	8009874 <_printf_i+0xa8>
 80097fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009802:	2b15      	cmp	r3, #21
 8009804:	d8f6      	bhi.n	80097f4 <_printf_i+0x28>
 8009806:	a101      	add	r1, pc, #4	; (adr r1, 800980c <_printf_i+0x40>)
 8009808:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800980c:	08009865 	.word	0x08009865
 8009810:	08009879 	.word	0x08009879
 8009814:	080097f5 	.word	0x080097f5
 8009818:	080097f5 	.word	0x080097f5
 800981c:	080097f5 	.word	0x080097f5
 8009820:	080097f5 	.word	0x080097f5
 8009824:	08009879 	.word	0x08009879
 8009828:	080097f5 	.word	0x080097f5
 800982c:	080097f5 	.word	0x080097f5
 8009830:	080097f5 	.word	0x080097f5
 8009834:	080097f5 	.word	0x080097f5
 8009838:	08009987 	.word	0x08009987
 800983c:	080098a9 	.word	0x080098a9
 8009840:	08009969 	.word	0x08009969
 8009844:	080097f5 	.word	0x080097f5
 8009848:	080097f5 	.word	0x080097f5
 800984c:	080099a9 	.word	0x080099a9
 8009850:	080097f5 	.word	0x080097f5
 8009854:	080098a9 	.word	0x080098a9
 8009858:	080097f5 	.word	0x080097f5
 800985c:	080097f5 	.word	0x080097f5
 8009860:	08009971 	.word	0x08009971
 8009864:	682b      	ldr	r3, [r5, #0]
 8009866:	1d1a      	adds	r2, r3, #4
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	602a      	str	r2, [r5, #0]
 800986c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009870:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009874:	2301      	movs	r3, #1
 8009876:	e0a4      	b.n	80099c2 <_printf_i+0x1f6>
 8009878:	6820      	ldr	r0, [r4, #0]
 800987a:	6829      	ldr	r1, [r5, #0]
 800987c:	0606      	lsls	r6, r0, #24
 800987e:	f101 0304 	add.w	r3, r1, #4
 8009882:	d50a      	bpl.n	800989a <_printf_i+0xce>
 8009884:	680e      	ldr	r6, [r1, #0]
 8009886:	602b      	str	r3, [r5, #0]
 8009888:	2e00      	cmp	r6, #0
 800988a:	da03      	bge.n	8009894 <_printf_i+0xc8>
 800988c:	232d      	movs	r3, #45	; 0x2d
 800988e:	4276      	negs	r6, r6
 8009890:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009894:	230a      	movs	r3, #10
 8009896:	485e      	ldr	r0, [pc, #376]	; (8009a10 <_printf_i+0x244>)
 8009898:	e019      	b.n	80098ce <_printf_i+0x102>
 800989a:	680e      	ldr	r6, [r1, #0]
 800989c:	f010 0f40 	tst.w	r0, #64	; 0x40
 80098a0:	602b      	str	r3, [r5, #0]
 80098a2:	bf18      	it	ne
 80098a4:	b236      	sxthne	r6, r6
 80098a6:	e7ef      	b.n	8009888 <_printf_i+0xbc>
 80098a8:	682b      	ldr	r3, [r5, #0]
 80098aa:	6820      	ldr	r0, [r4, #0]
 80098ac:	1d19      	adds	r1, r3, #4
 80098ae:	6029      	str	r1, [r5, #0]
 80098b0:	0601      	lsls	r1, r0, #24
 80098b2:	d501      	bpl.n	80098b8 <_printf_i+0xec>
 80098b4:	681e      	ldr	r6, [r3, #0]
 80098b6:	e002      	b.n	80098be <_printf_i+0xf2>
 80098b8:	0646      	lsls	r6, r0, #25
 80098ba:	d5fb      	bpl.n	80098b4 <_printf_i+0xe8>
 80098bc:	881e      	ldrh	r6, [r3, #0]
 80098be:	2f6f      	cmp	r7, #111	; 0x6f
 80098c0:	bf0c      	ite	eq
 80098c2:	2308      	moveq	r3, #8
 80098c4:	230a      	movne	r3, #10
 80098c6:	4852      	ldr	r0, [pc, #328]	; (8009a10 <_printf_i+0x244>)
 80098c8:	2100      	movs	r1, #0
 80098ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80098ce:	6865      	ldr	r5, [r4, #4]
 80098d0:	2d00      	cmp	r5, #0
 80098d2:	bfa8      	it	ge
 80098d4:	6821      	ldrge	r1, [r4, #0]
 80098d6:	60a5      	str	r5, [r4, #8]
 80098d8:	bfa4      	itt	ge
 80098da:	f021 0104 	bicge.w	r1, r1, #4
 80098de:	6021      	strge	r1, [r4, #0]
 80098e0:	b90e      	cbnz	r6, 80098e6 <_printf_i+0x11a>
 80098e2:	2d00      	cmp	r5, #0
 80098e4:	d04d      	beq.n	8009982 <_printf_i+0x1b6>
 80098e6:	4615      	mov	r5, r2
 80098e8:	fbb6 f1f3 	udiv	r1, r6, r3
 80098ec:	fb03 6711 	mls	r7, r3, r1, r6
 80098f0:	5dc7      	ldrb	r7, [r0, r7]
 80098f2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80098f6:	4637      	mov	r7, r6
 80098f8:	42bb      	cmp	r3, r7
 80098fa:	460e      	mov	r6, r1
 80098fc:	d9f4      	bls.n	80098e8 <_printf_i+0x11c>
 80098fe:	2b08      	cmp	r3, #8
 8009900:	d10b      	bne.n	800991a <_printf_i+0x14e>
 8009902:	6823      	ldr	r3, [r4, #0]
 8009904:	07de      	lsls	r6, r3, #31
 8009906:	d508      	bpl.n	800991a <_printf_i+0x14e>
 8009908:	6923      	ldr	r3, [r4, #16]
 800990a:	6861      	ldr	r1, [r4, #4]
 800990c:	4299      	cmp	r1, r3
 800990e:	bfde      	ittt	le
 8009910:	2330      	movle	r3, #48	; 0x30
 8009912:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009916:	f105 35ff 	addle.w	r5, r5, #4294967295
 800991a:	1b52      	subs	r2, r2, r5
 800991c:	6122      	str	r2, [r4, #16]
 800991e:	464b      	mov	r3, r9
 8009920:	4621      	mov	r1, r4
 8009922:	4640      	mov	r0, r8
 8009924:	f8cd a000 	str.w	sl, [sp]
 8009928:	aa03      	add	r2, sp, #12
 800992a:	f7ff fedf 	bl	80096ec <_printf_common>
 800992e:	3001      	adds	r0, #1
 8009930:	d14c      	bne.n	80099cc <_printf_i+0x200>
 8009932:	f04f 30ff 	mov.w	r0, #4294967295
 8009936:	b004      	add	sp, #16
 8009938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800993c:	4834      	ldr	r0, [pc, #208]	; (8009a10 <_printf_i+0x244>)
 800993e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009942:	6829      	ldr	r1, [r5, #0]
 8009944:	6823      	ldr	r3, [r4, #0]
 8009946:	f851 6b04 	ldr.w	r6, [r1], #4
 800994a:	6029      	str	r1, [r5, #0]
 800994c:	061d      	lsls	r5, r3, #24
 800994e:	d514      	bpl.n	800997a <_printf_i+0x1ae>
 8009950:	07df      	lsls	r7, r3, #31
 8009952:	bf44      	itt	mi
 8009954:	f043 0320 	orrmi.w	r3, r3, #32
 8009958:	6023      	strmi	r3, [r4, #0]
 800995a:	b91e      	cbnz	r6, 8009964 <_printf_i+0x198>
 800995c:	6823      	ldr	r3, [r4, #0]
 800995e:	f023 0320 	bic.w	r3, r3, #32
 8009962:	6023      	str	r3, [r4, #0]
 8009964:	2310      	movs	r3, #16
 8009966:	e7af      	b.n	80098c8 <_printf_i+0xfc>
 8009968:	6823      	ldr	r3, [r4, #0]
 800996a:	f043 0320 	orr.w	r3, r3, #32
 800996e:	6023      	str	r3, [r4, #0]
 8009970:	2378      	movs	r3, #120	; 0x78
 8009972:	4828      	ldr	r0, [pc, #160]	; (8009a14 <_printf_i+0x248>)
 8009974:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009978:	e7e3      	b.n	8009942 <_printf_i+0x176>
 800997a:	0659      	lsls	r1, r3, #25
 800997c:	bf48      	it	mi
 800997e:	b2b6      	uxthmi	r6, r6
 8009980:	e7e6      	b.n	8009950 <_printf_i+0x184>
 8009982:	4615      	mov	r5, r2
 8009984:	e7bb      	b.n	80098fe <_printf_i+0x132>
 8009986:	682b      	ldr	r3, [r5, #0]
 8009988:	6826      	ldr	r6, [r4, #0]
 800998a:	1d18      	adds	r0, r3, #4
 800998c:	6961      	ldr	r1, [r4, #20]
 800998e:	6028      	str	r0, [r5, #0]
 8009990:	0635      	lsls	r5, r6, #24
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	d501      	bpl.n	800999a <_printf_i+0x1ce>
 8009996:	6019      	str	r1, [r3, #0]
 8009998:	e002      	b.n	80099a0 <_printf_i+0x1d4>
 800999a:	0670      	lsls	r0, r6, #25
 800999c:	d5fb      	bpl.n	8009996 <_printf_i+0x1ca>
 800999e:	8019      	strh	r1, [r3, #0]
 80099a0:	2300      	movs	r3, #0
 80099a2:	4615      	mov	r5, r2
 80099a4:	6123      	str	r3, [r4, #16]
 80099a6:	e7ba      	b.n	800991e <_printf_i+0x152>
 80099a8:	682b      	ldr	r3, [r5, #0]
 80099aa:	2100      	movs	r1, #0
 80099ac:	1d1a      	adds	r2, r3, #4
 80099ae:	602a      	str	r2, [r5, #0]
 80099b0:	681d      	ldr	r5, [r3, #0]
 80099b2:	6862      	ldr	r2, [r4, #4]
 80099b4:	4628      	mov	r0, r5
 80099b6:	f002 fd3d 	bl	800c434 <memchr>
 80099ba:	b108      	cbz	r0, 80099c0 <_printf_i+0x1f4>
 80099bc:	1b40      	subs	r0, r0, r5
 80099be:	6060      	str	r0, [r4, #4]
 80099c0:	6863      	ldr	r3, [r4, #4]
 80099c2:	6123      	str	r3, [r4, #16]
 80099c4:	2300      	movs	r3, #0
 80099c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099ca:	e7a8      	b.n	800991e <_printf_i+0x152>
 80099cc:	462a      	mov	r2, r5
 80099ce:	4649      	mov	r1, r9
 80099d0:	4640      	mov	r0, r8
 80099d2:	6923      	ldr	r3, [r4, #16]
 80099d4:	47d0      	blx	sl
 80099d6:	3001      	adds	r0, #1
 80099d8:	d0ab      	beq.n	8009932 <_printf_i+0x166>
 80099da:	6823      	ldr	r3, [r4, #0]
 80099dc:	079b      	lsls	r3, r3, #30
 80099de:	d413      	bmi.n	8009a08 <_printf_i+0x23c>
 80099e0:	68e0      	ldr	r0, [r4, #12]
 80099e2:	9b03      	ldr	r3, [sp, #12]
 80099e4:	4298      	cmp	r0, r3
 80099e6:	bfb8      	it	lt
 80099e8:	4618      	movlt	r0, r3
 80099ea:	e7a4      	b.n	8009936 <_printf_i+0x16a>
 80099ec:	2301      	movs	r3, #1
 80099ee:	4632      	mov	r2, r6
 80099f0:	4649      	mov	r1, r9
 80099f2:	4640      	mov	r0, r8
 80099f4:	47d0      	blx	sl
 80099f6:	3001      	adds	r0, #1
 80099f8:	d09b      	beq.n	8009932 <_printf_i+0x166>
 80099fa:	3501      	adds	r5, #1
 80099fc:	68e3      	ldr	r3, [r4, #12]
 80099fe:	9903      	ldr	r1, [sp, #12]
 8009a00:	1a5b      	subs	r3, r3, r1
 8009a02:	42ab      	cmp	r3, r5
 8009a04:	dcf2      	bgt.n	80099ec <_printf_i+0x220>
 8009a06:	e7eb      	b.n	80099e0 <_printf_i+0x214>
 8009a08:	2500      	movs	r5, #0
 8009a0a:	f104 0619 	add.w	r6, r4, #25
 8009a0e:	e7f5      	b.n	80099fc <_printf_i+0x230>
 8009a10:	0800daf6 	.word	0x0800daf6
 8009a14:	0800db07 	.word	0x0800db07

08009a18 <iprintf>:
 8009a18:	b40f      	push	{r0, r1, r2, r3}
 8009a1a:	4b0a      	ldr	r3, [pc, #40]	; (8009a44 <iprintf+0x2c>)
 8009a1c:	b513      	push	{r0, r1, r4, lr}
 8009a1e:	681c      	ldr	r4, [r3, #0]
 8009a20:	b124      	cbz	r4, 8009a2c <iprintf+0x14>
 8009a22:	69a3      	ldr	r3, [r4, #24]
 8009a24:	b913      	cbnz	r3, 8009a2c <iprintf+0x14>
 8009a26:	4620      	mov	r0, r4
 8009a28:	f002 f882 	bl	800bb30 <__sinit>
 8009a2c:	ab05      	add	r3, sp, #20
 8009a2e:	4620      	mov	r0, r4
 8009a30:	9a04      	ldr	r2, [sp, #16]
 8009a32:	68a1      	ldr	r1, [r4, #8]
 8009a34:	9301      	str	r3, [sp, #4]
 8009a36:	f003 fb67 	bl	800d108 <_vfiprintf_r>
 8009a3a:	b002      	add	sp, #8
 8009a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a40:	b004      	add	sp, #16
 8009a42:	4770      	bx	lr
 8009a44:	2000000c 	.word	0x2000000c

08009a48 <_puts_r>:
 8009a48:	b570      	push	{r4, r5, r6, lr}
 8009a4a:	460e      	mov	r6, r1
 8009a4c:	4605      	mov	r5, r0
 8009a4e:	b118      	cbz	r0, 8009a58 <_puts_r+0x10>
 8009a50:	6983      	ldr	r3, [r0, #24]
 8009a52:	b90b      	cbnz	r3, 8009a58 <_puts_r+0x10>
 8009a54:	f002 f86c 	bl	800bb30 <__sinit>
 8009a58:	69ab      	ldr	r3, [r5, #24]
 8009a5a:	68ac      	ldr	r4, [r5, #8]
 8009a5c:	b913      	cbnz	r3, 8009a64 <_puts_r+0x1c>
 8009a5e:	4628      	mov	r0, r5
 8009a60:	f002 f866 	bl	800bb30 <__sinit>
 8009a64:	4b2c      	ldr	r3, [pc, #176]	; (8009b18 <_puts_r+0xd0>)
 8009a66:	429c      	cmp	r4, r3
 8009a68:	d120      	bne.n	8009aac <_puts_r+0x64>
 8009a6a:	686c      	ldr	r4, [r5, #4]
 8009a6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a6e:	07db      	lsls	r3, r3, #31
 8009a70:	d405      	bmi.n	8009a7e <_puts_r+0x36>
 8009a72:	89a3      	ldrh	r3, [r4, #12]
 8009a74:	0598      	lsls	r0, r3, #22
 8009a76:	d402      	bmi.n	8009a7e <_puts_r+0x36>
 8009a78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a7a:	f002 fc62 	bl	800c342 <__retarget_lock_acquire_recursive>
 8009a7e:	89a3      	ldrh	r3, [r4, #12]
 8009a80:	0719      	lsls	r1, r3, #28
 8009a82:	d51d      	bpl.n	8009ac0 <_puts_r+0x78>
 8009a84:	6923      	ldr	r3, [r4, #16]
 8009a86:	b1db      	cbz	r3, 8009ac0 <_puts_r+0x78>
 8009a88:	3e01      	subs	r6, #1
 8009a8a:	68a3      	ldr	r3, [r4, #8]
 8009a8c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009a90:	3b01      	subs	r3, #1
 8009a92:	60a3      	str	r3, [r4, #8]
 8009a94:	bb39      	cbnz	r1, 8009ae6 <_puts_r+0x9e>
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	da38      	bge.n	8009b0c <_puts_r+0xc4>
 8009a9a:	4622      	mov	r2, r4
 8009a9c:	210a      	movs	r1, #10
 8009a9e:	4628      	mov	r0, r5
 8009aa0:	f000 fff6 	bl	800aa90 <__swbuf_r>
 8009aa4:	3001      	adds	r0, #1
 8009aa6:	d011      	beq.n	8009acc <_puts_r+0x84>
 8009aa8:	250a      	movs	r5, #10
 8009aaa:	e011      	b.n	8009ad0 <_puts_r+0x88>
 8009aac:	4b1b      	ldr	r3, [pc, #108]	; (8009b1c <_puts_r+0xd4>)
 8009aae:	429c      	cmp	r4, r3
 8009ab0:	d101      	bne.n	8009ab6 <_puts_r+0x6e>
 8009ab2:	68ac      	ldr	r4, [r5, #8]
 8009ab4:	e7da      	b.n	8009a6c <_puts_r+0x24>
 8009ab6:	4b1a      	ldr	r3, [pc, #104]	; (8009b20 <_puts_r+0xd8>)
 8009ab8:	429c      	cmp	r4, r3
 8009aba:	bf08      	it	eq
 8009abc:	68ec      	ldreq	r4, [r5, #12]
 8009abe:	e7d5      	b.n	8009a6c <_puts_r+0x24>
 8009ac0:	4621      	mov	r1, r4
 8009ac2:	4628      	mov	r0, r5
 8009ac4:	f001 f836 	bl	800ab34 <__swsetup_r>
 8009ac8:	2800      	cmp	r0, #0
 8009aca:	d0dd      	beq.n	8009a88 <_puts_r+0x40>
 8009acc:	f04f 35ff 	mov.w	r5, #4294967295
 8009ad0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ad2:	07da      	lsls	r2, r3, #31
 8009ad4:	d405      	bmi.n	8009ae2 <_puts_r+0x9a>
 8009ad6:	89a3      	ldrh	r3, [r4, #12]
 8009ad8:	059b      	lsls	r3, r3, #22
 8009ada:	d402      	bmi.n	8009ae2 <_puts_r+0x9a>
 8009adc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ade:	f002 fc31 	bl	800c344 <__retarget_lock_release_recursive>
 8009ae2:	4628      	mov	r0, r5
 8009ae4:	bd70      	pop	{r4, r5, r6, pc}
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	da04      	bge.n	8009af4 <_puts_r+0xac>
 8009aea:	69a2      	ldr	r2, [r4, #24]
 8009aec:	429a      	cmp	r2, r3
 8009aee:	dc06      	bgt.n	8009afe <_puts_r+0xb6>
 8009af0:	290a      	cmp	r1, #10
 8009af2:	d004      	beq.n	8009afe <_puts_r+0xb6>
 8009af4:	6823      	ldr	r3, [r4, #0]
 8009af6:	1c5a      	adds	r2, r3, #1
 8009af8:	6022      	str	r2, [r4, #0]
 8009afa:	7019      	strb	r1, [r3, #0]
 8009afc:	e7c5      	b.n	8009a8a <_puts_r+0x42>
 8009afe:	4622      	mov	r2, r4
 8009b00:	4628      	mov	r0, r5
 8009b02:	f000 ffc5 	bl	800aa90 <__swbuf_r>
 8009b06:	3001      	adds	r0, #1
 8009b08:	d1bf      	bne.n	8009a8a <_puts_r+0x42>
 8009b0a:	e7df      	b.n	8009acc <_puts_r+0x84>
 8009b0c:	250a      	movs	r5, #10
 8009b0e:	6823      	ldr	r3, [r4, #0]
 8009b10:	1c5a      	adds	r2, r3, #1
 8009b12:	6022      	str	r2, [r4, #0]
 8009b14:	701d      	strb	r5, [r3, #0]
 8009b16:	e7db      	b.n	8009ad0 <_puts_r+0x88>
 8009b18:	0800dd1c 	.word	0x0800dd1c
 8009b1c:	0800dd3c 	.word	0x0800dd3c
 8009b20:	0800dcfc 	.word	0x0800dcfc

08009b24 <puts>:
 8009b24:	4b02      	ldr	r3, [pc, #8]	; (8009b30 <puts+0xc>)
 8009b26:	4601      	mov	r1, r0
 8009b28:	6818      	ldr	r0, [r3, #0]
 8009b2a:	f7ff bf8d 	b.w	8009a48 <_puts_r>
 8009b2e:	bf00      	nop
 8009b30:	2000000c 	.word	0x2000000c

08009b34 <_sbrk_r>:
 8009b34:	b538      	push	{r3, r4, r5, lr}
 8009b36:	2300      	movs	r3, #0
 8009b38:	4d05      	ldr	r5, [pc, #20]	; (8009b50 <_sbrk_r+0x1c>)
 8009b3a:	4604      	mov	r4, r0
 8009b3c:	4608      	mov	r0, r1
 8009b3e:	602b      	str	r3, [r5, #0]
 8009b40:	f7f9 ff96 	bl	8003a70 <_sbrk>
 8009b44:	1c43      	adds	r3, r0, #1
 8009b46:	d102      	bne.n	8009b4e <_sbrk_r+0x1a>
 8009b48:	682b      	ldr	r3, [r5, #0]
 8009b4a:	b103      	cbz	r3, 8009b4e <_sbrk_r+0x1a>
 8009b4c:	6023      	str	r3, [r4, #0]
 8009b4e:	bd38      	pop	{r3, r4, r5, pc}
 8009b50:	20000808 	.word	0x20000808

08009b54 <_raise_r>:
 8009b54:	291f      	cmp	r1, #31
 8009b56:	b538      	push	{r3, r4, r5, lr}
 8009b58:	4604      	mov	r4, r0
 8009b5a:	460d      	mov	r5, r1
 8009b5c:	d904      	bls.n	8009b68 <_raise_r+0x14>
 8009b5e:	2316      	movs	r3, #22
 8009b60:	6003      	str	r3, [r0, #0]
 8009b62:	f04f 30ff 	mov.w	r0, #4294967295
 8009b66:	bd38      	pop	{r3, r4, r5, pc}
 8009b68:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009b6a:	b112      	cbz	r2, 8009b72 <_raise_r+0x1e>
 8009b6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009b70:	b94b      	cbnz	r3, 8009b86 <_raise_r+0x32>
 8009b72:	4620      	mov	r0, r4
 8009b74:	f000 f830 	bl	8009bd8 <_getpid_r>
 8009b78:	462a      	mov	r2, r5
 8009b7a:	4601      	mov	r1, r0
 8009b7c:	4620      	mov	r0, r4
 8009b7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b82:	f000 b817 	b.w	8009bb4 <_kill_r>
 8009b86:	2b01      	cmp	r3, #1
 8009b88:	d00a      	beq.n	8009ba0 <_raise_r+0x4c>
 8009b8a:	1c59      	adds	r1, r3, #1
 8009b8c:	d103      	bne.n	8009b96 <_raise_r+0x42>
 8009b8e:	2316      	movs	r3, #22
 8009b90:	6003      	str	r3, [r0, #0]
 8009b92:	2001      	movs	r0, #1
 8009b94:	e7e7      	b.n	8009b66 <_raise_r+0x12>
 8009b96:	2400      	movs	r4, #0
 8009b98:	4628      	mov	r0, r5
 8009b9a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009b9e:	4798      	blx	r3
 8009ba0:	2000      	movs	r0, #0
 8009ba2:	e7e0      	b.n	8009b66 <_raise_r+0x12>

08009ba4 <raise>:
 8009ba4:	4b02      	ldr	r3, [pc, #8]	; (8009bb0 <raise+0xc>)
 8009ba6:	4601      	mov	r1, r0
 8009ba8:	6818      	ldr	r0, [r3, #0]
 8009baa:	f7ff bfd3 	b.w	8009b54 <_raise_r>
 8009bae:	bf00      	nop
 8009bb0:	2000000c 	.word	0x2000000c

08009bb4 <_kill_r>:
 8009bb4:	b538      	push	{r3, r4, r5, lr}
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	4d06      	ldr	r5, [pc, #24]	; (8009bd4 <_kill_r+0x20>)
 8009bba:	4604      	mov	r4, r0
 8009bbc:	4608      	mov	r0, r1
 8009bbe:	4611      	mov	r1, r2
 8009bc0:	602b      	str	r3, [r5, #0]
 8009bc2:	f7f9 feee 	bl	80039a2 <_kill>
 8009bc6:	1c43      	adds	r3, r0, #1
 8009bc8:	d102      	bne.n	8009bd0 <_kill_r+0x1c>
 8009bca:	682b      	ldr	r3, [r5, #0]
 8009bcc:	b103      	cbz	r3, 8009bd0 <_kill_r+0x1c>
 8009bce:	6023      	str	r3, [r4, #0]
 8009bd0:	bd38      	pop	{r3, r4, r5, pc}
 8009bd2:	bf00      	nop
 8009bd4:	20000808 	.word	0x20000808

08009bd8 <_getpid_r>:
 8009bd8:	f7f9 bedc 	b.w	8003994 <_getpid>

08009bdc <sniprintf>:
 8009bdc:	b40c      	push	{r2, r3}
 8009bde:	b530      	push	{r4, r5, lr}
 8009be0:	4b17      	ldr	r3, [pc, #92]	; (8009c40 <sniprintf+0x64>)
 8009be2:	1e0c      	subs	r4, r1, #0
 8009be4:	681d      	ldr	r5, [r3, #0]
 8009be6:	b09d      	sub	sp, #116	; 0x74
 8009be8:	da08      	bge.n	8009bfc <sniprintf+0x20>
 8009bea:	238b      	movs	r3, #139	; 0x8b
 8009bec:	f04f 30ff 	mov.w	r0, #4294967295
 8009bf0:	602b      	str	r3, [r5, #0]
 8009bf2:	b01d      	add	sp, #116	; 0x74
 8009bf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009bf8:	b002      	add	sp, #8
 8009bfa:	4770      	bx	lr
 8009bfc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009c00:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009c04:	bf0c      	ite	eq
 8009c06:	4623      	moveq	r3, r4
 8009c08:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009c0c:	9304      	str	r3, [sp, #16]
 8009c0e:	9307      	str	r3, [sp, #28]
 8009c10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009c14:	9002      	str	r0, [sp, #8]
 8009c16:	9006      	str	r0, [sp, #24]
 8009c18:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009c1c:	4628      	mov	r0, r5
 8009c1e:	ab21      	add	r3, sp, #132	; 0x84
 8009c20:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009c22:	a902      	add	r1, sp, #8
 8009c24:	9301      	str	r3, [sp, #4]
 8009c26:	f003 f947 	bl	800ceb8 <_svfiprintf_r>
 8009c2a:	1c43      	adds	r3, r0, #1
 8009c2c:	bfbc      	itt	lt
 8009c2e:	238b      	movlt	r3, #139	; 0x8b
 8009c30:	602b      	strlt	r3, [r5, #0]
 8009c32:	2c00      	cmp	r4, #0
 8009c34:	d0dd      	beq.n	8009bf2 <sniprintf+0x16>
 8009c36:	2200      	movs	r2, #0
 8009c38:	9b02      	ldr	r3, [sp, #8]
 8009c3a:	701a      	strb	r2, [r3, #0]
 8009c3c:	e7d9      	b.n	8009bf2 <sniprintf+0x16>
 8009c3e:	bf00      	nop
 8009c40:	2000000c 	.word	0x2000000c

08009c44 <siprintf>:
 8009c44:	b40e      	push	{r1, r2, r3}
 8009c46:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009c4a:	b500      	push	{lr}
 8009c4c:	b09c      	sub	sp, #112	; 0x70
 8009c4e:	ab1d      	add	r3, sp, #116	; 0x74
 8009c50:	9002      	str	r0, [sp, #8]
 8009c52:	9006      	str	r0, [sp, #24]
 8009c54:	9107      	str	r1, [sp, #28]
 8009c56:	9104      	str	r1, [sp, #16]
 8009c58:	4808      	ldr	r0, [pc, #32]	; (8009c7c <siprintf+0x38>)
 8009c5a:	4909      	ldr	r1, [pc, #36]	; (8009c80 <siprintf+0x3c>)
 8009c5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c60:	9105      	str	r1, [sp, #20]
 8009c62:	6800      	ldr	r0, [r0, #0]
 8009c64:	a902      	add	r1, sp, #8
 8009c66:	9301      	str	r3, [sp, #4]
 8009c68:	f003 f926 	bl	800ceb8 <_svfiprintf_r>
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	9b02      	ldr	r3, [sp, #8]
 8009c70:	701a      	strb	r2, [r3, #0]
 8009c72:	b01c      	add	sp, #112	; 0x70
 8009c74:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c78:	b003      	add	sp, #12
 8009c7a:	4770      	bx	lr
 8009c7c:	2000000c 	.word	0x2000000c
 8009c80:	ffff0208 	.word	0xffff0208

08009c84 <strchr>:
 8009c84:	4603      	mov	r3, r0
 8009c86:	b2c9      	uxtb	r1, r1
 8009c88:	4618      	mov	r0, r3
 8009c8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c8e:	b112      	cbz	r2, 8009c96 <strchr+0x12>
 8009c90:	428a      	cmp	r2, r1
 8009c92:	d1f9      	bne.n	8009c88 <strchr+0x4>
 8009c94:	4770      	bx	lr
 8009c96:	2900      	cmp	r1, #0
 8009c98:	bf18      	it	ne
 8009c9a:	2000      	movne	r0, #0
 8009c9c:	4770      	bx	lr

08009c9e <strstr>:
 8009c9e:	780a      	ldrb	r2, [r1, #0]
 8009ca0:	b570      	push	{r4, r5, r6, lr}
 8009ca2:	b96a      	cbnz	r2, 8009cc0 <strstr+0x22>
 8009ca4:	bd70      	pop	{r4, r5, r6, pc}
 8009ca6:	429a      	cmp	r2, r3
 8009ca8:	d109      	bne.n	8009cbe <strstr+0x20>
 8009caa:	460c      	mov	r4, r1
 8009cac:	4605      	mov	r5, r0
 8009cae:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d0f6      	beq.n	8009ca4 <strstr+0x6>
 8009cb6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8009cba:	429e      	cmp	r6, r3
 8009cbc:	d0f7      	beq.n	8009cae <strstr+0x10>
 8009cbe:	3001      	adds	r0, #1
 8009cc0:	7803      	ldrb	r3, [r0, #0]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d1ef      	bne.n	8009ca6 <strstr+0x8>
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	e7ec      	b.n	8009ca4 <strstr+0x6>

08009cca <sulp>:
 8009cca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cce:	460f      	mov	r7, r1
 8009cd0:	4690      	mov	r8, r2
 8009cd2:	f002 ff39 	bl	800cb48 <__ulp>
 8009cd6:	4604      	mov	r4, r0
 8009cd8:	460d      	mov	r5, r1
 8009cda:	f1b8 0f00 	cmp.w	r8, #0
 8009cde:	d011      	beq.n	8009d04 <sulp+0x3a>
 8009ce0:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009ce4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	dd0b      	ble.n	8009d04 <sulp+0x3a>
 8009cec:	2400      	movs	r4, #0
 8009cee:	051b      	lsls	r3, r3, #20
 8009cf0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009cf4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009cf8:	4622      	mov	r2, r4
 8009cfa:	462b      	mov	r3, r5
 8009cfc:	f7f6 fbec 	bl	80004d8 <__aeabi_dmul>
 8009d00:	4604      	mov	r4, r0
 8009d02:	460d      	mov	r5, r1
 8009d04:	4620      	mov	r0, r4
 8009d06:	4629      	mov	r1, r5
 8009d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d0c:	0000      	movs	r0, r0
	...

08009d10 <_strtod_l>:
 8009d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d14:	469b      	mov	fp, r3
 8009d16:	2300      	movs	r3, #0
 8009d18:	b09f      	sub	sp, #124	; 0x7c
 8009d1a:	931a      	str	r3, [sp, #104]	; 0x68
 8009d1c:	4b9e      	ldr	r3, [pc, #632]	; (8009f98 <_strtod_l+0x288>)
 8009d1e:	4682      	mov	sl, r0
 8009d20:	681f      	ldr	r7, [r3, #0]
 8009d22:	460e      	mov	r6, r1
 8009d24:	4638      	mov	r0, r7
 8009d26:	9215      	str	r2, [sp, #84]	; 0x54
 8009d28:	f7f6 fa12 	bl	8000150 <strlen>
 8009d2c:	f04f 0800 	mov.w	r8, #0
 8009d30:	4604      	mov	r4, r0
 8009d32:	f04f 0900 	mov.w	r9, #0
 8009d36:	9619      	str	r6, [sp, #100]	; 0x64
 8009d38:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009d3a:	781a      	ldrb	r2, [r3, #0]
 8009d3c:	2a2b      	cmp	r2, #43	; 0x2b
 8009d3e:	d04c      	beq.n	8009dda <_strtod_l+0xca>
 8009d40:	d83a      	bhi.n	8009db8 <_strtod_l+0xa8>
 8009d42:	2a0d      	cmp	r2, #13
 8009d44:	d833      	bhi.n	8009dae <_strtod_l+0x9e>
 8009d46:	2a08      	cmp	r2, #8
 8009d48:	d833      	bhi.n	8009db2 <_strtod_l+0xa2>
 8009d4a:	2a00      	cmp	r2, #0
 8009d4c:	d03d      	beq.n	8009dca <_strtod_l+0xba>
 8009d4e:	2300      	movs	r3, #0
 8009d50:	930a      	str	r3, [sp, #40]	; 0x28
 8009d52:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8009d54:	782b      	ldrb	r3, [r5, #0]
 8009d56:	2b30      	cmp	r3, #48	; 0x30
 8009d58:	f040 80aa 	bne.w	8009eb0 <_strtod_l+0x1a0>
 8009d5c:	786b      	ldrb	r3, [r5, #1]
 8009d5e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009d62:	2b58      	cmp	r3, #88	; 0x58
 8009d64:	d166      	bne.n	8009e34 <_strtod_l+0x124>
 8009d66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d68:	4650      	mov	r0, sl
 8009d6a:	9301      	str	r3, [sp, #4]
 8009d6c:	ab1a      	add	r3, sp, #104	; 0x68
 8009d6e:	9300      	str	r3, [sp, #0]
 8009d70:	4a8a      	ldr	r2, [pc, #552]	; (8009f9c <_strtod_l+0x28c>)
 8009d72:	f8cd b008 	str.w	fp, [sp, #8]
 8009d76:	ab1b      	add	r3, sp, #108	; 0x6c
 8009d78:	a919      	add	r1, sp, #100	; 0x64
 8009d7a:	f001 ffdf 	bl	800bd3c <__gethex>
 8009d7e:	f010 0607 	ands.w	r6, r0, #7
 8009d82:	4604      	mov	r4, r0
 8009d84:	d005      	beq.n	8009d92 <_strtod_l+0x82>
 8009d86:	2e06      	cmp	r6, #6
 8009d88:	d129      	bne.n	8009dde <_strtod_l+0xce>
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	3501      	adds	r5, #1
 8009d8e:	9519      	str	r5, [sp, #100]	; 0x64
 8009d90:	930a      	str	r3, [sp, #40]	; 0x28
 8009d92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	f040 858a 	bne.w	800a8ae <_strtod_l+0xb9e>
 8009d9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d9c:	b1d3      	cbz	r3, 8009dd4 <_strtod_l+0xc4>
 8009d9e:	4642      	mov	r2, r8
 8009da0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009da4:	4610      	mov	r0, r2
 8009da6:	4619      	mov	r1, r3
 8009da8:	b01f      	add	sp, #124	; 0x7c
 8009daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dae:	2a20      	cmp	r2, #32
 8009db0:	d1cd      	bne.n	8009d4e <_strtod_l+0x3e>
 8009db2:	3301      	adds	r3, #1
 8009db4:	9319      	str	r3, [sp, #100]	; 0x64
 8009db6:	e7bf      	b.n	8009d38 <_strtod_l+0x28>
 8009db8:	2a2d      	cmp	r2, #45	; 0x2d
 8009dba:	d1c8      	bne.n	8009d4e <_strtod_l+0x3e>
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	920a      	str	r2, [sp, #40]	; 0x28
 8009dc0:	1c5a      	adds	r2, r3, #1
 8009dc2:	9219      	str	r2, [sp, #100]	; 0x64
 8009dc4:	785b      	ldrb	r3, [r3, #1]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d1c3      	bne.n	8009d52 <_strtod_l+0x42>
 8009dca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009dcc:	9619      	str	r6, [sp, #100]	; 0x64
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	f040 856b 	bne.w	800a8aa <_strtod_l+0xb9a>
 8009dd4:	4642      	mov	r2, r8
 8009dd6:	464b      	mov	r3, r9
 8009dd8:	e7e4      	b.n	8009da4 <_strtod_l+0x94>
 8009dda:	2200      	movs	r2, #0
 8009ddc:	e7ef      	b.n	8009dbe <_strtod_l+0xae>
 8009dde:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009de0:	b13a      	cbz	r2, 8009df2 <_strtod_l+0xe2>
 8009de2:	2135      	movs	r1, #53	; 0x35
 8009de4:	a81c      	add	r0, sp, #112	; 0x70
 8009de6:	f002 ffb3 	bl	800cd50 <__copybits>
 8009dea:	4650      	mov	r0, sl
 8009dec:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009dee:	f002 fb7b 	bl	800c4e8 <_Bfree>
 8009df2:	3e01      	subs	r6, #1
 8009df4:	2e04      	cmp	r6, #4
 8009df6:	d806      	bhi.n	8009e06 <_strtod_l+0xf6>
 8009df8:	e8df f006 	tbb	[pc, r6]
 8009dfc:	1714030a 	.word	0x1714030a
 8009e00:	0a          	.byte	0x0a
 8009e01:	00          	.byte	0x00
 8009e02:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8009e06:	0721      	lsls	r1, r4, #28
 8009e08:	d5c3      	bpl.n	8009d92 <_strtod_l+0x82>
 8009e0a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8009e0e:	e7c0      	b.n	8009d92 <_strtod_l+0x82>
 8009e10:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009e12:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8009e16:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009e1a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009e1e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009e22:	e7f0      	b.n	8009e06 <_strtod_l+0xf6>
 8009e24:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009fa0 <_strtod_l+0x290>
 8009e28:	e7ed      	b.n	8009e06 <_strtod_l+0xf6>
 8009e2a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009e2e:	f04f 38ff 	mov.w	r8, #4294967295
 8009e32:	e7e8      	b.n	8009e06 <_strtod_l+0xf6>
 8009e34:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009e36:	1c5a      	adds	r2, r3, #1
 8009e38:	9219      	str	r2, [sp, #100]	; 0x64
 8009e3a:	785b      	ldrb	r3, [r3, #1]
 8009e3c:	2b30      	cmp	r3, #48	; 0x30
 8009e3e:	d0f9      	beq.n	8009e34 <_strtod_l+0x124>
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d0a6      	beq.n	8009d92 <_strtod_l+0x82>
 8009e44:	2301      	movs	r3, #1
 8009e46:	9307      	str	r3, [sp, #28]
 8009e48:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009e4a:	220a      	movs	r2, #10
 8009e4c:	9308      	str	r3, [sp, #32]
 8009e4e:	2300      	movs	r3, #0
 8009e50:	469b      	mov	fp, r3
 8009e52:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8009e56:	9819      	ldr	r0, [sp, #100]	; 0x64
 8009e58:	7805      	ldrb	r5, [r0, #0]
 8009e5a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8009e5e:	b2d9      	uxtb	r1, r3
 8009e60:	2909      	cmp	r1, #9
 8009e62:	d927      	bls.n	8009eb4 <_strtod_l+0x1a4>
 8009e64:	4622      	mov	r2, r4
 8009e66:	4639      	mov	r1, r7
 8009e68:	f003 fac7 	bl	800d3fa <strncmp>
 8009e6c:	2800      	cmp	r0, #0
 8009e6e:	d033      	beq.n	8009ed8 <_strtod_l+0x1c8>
 8009e70:	2000      	movs	r0, #0
 8009e72:	462a      	mov	r2, r5
 8009e74:	465c      	mov	r4, fp
 8009e76:	4603      	mov	r3, r0
 8009e78:	9004      	str	r0, [sp, #16]
 8009e7a:	2a65      	cmp	r2, #101	; 0x65
 8009e7c:	d001      	beq.n	8009e82 <_strtod_l+0x172>
 8009e7e:	2a45      	cmp	r2, #69	; 0x45
 8009e80:	d114      	bne.n	8009eac <_strtod_l+0x19c>
 8009e82:	b91c      	cbnz	r4, 8009e8c <_strtod_l+0x17c>
 8009e84:	9a07      	ldr	r2, [sp, #28]
 8009e86:	4302      	orrs	r2, r0
 8009e88:	d09f      	beq.n	8009dca <_strtod_l+0xba>
 8009e8a:	2400      	movs	r4, #0
 8009e8c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8009e8e:	1c72      	adds	r2, r6, #1
 8009e90:	9219      	str	r2, [sp, #100]	; 0x64
 8009e92:	7872      	ldrb	r2, [r6, #1]
 8009e94:	2a2b      	cmp	r2, #43	; 0x2b
 8009e96:	d079      	beq.n	8009f8c <_strtod_l+0x27c>
 8009e98:	2a2d      	cmp	r2, #45	; 0x2d
 8009e9a:	f000 8083 	beq.w	8009fa4 <_strtod_l+0x294>
 8009e9e:	2700      	movs	r7, #0
 8009ea0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009ea4:	2909      	cmp	r1, #9
 8009ea6:	f240 8083 	bls.w	8009fb0 <_strtod_l+0x2a0>
 8009eaa:	9619      	str	r6, [sp, #100]	; 0x64
 8009eac:	2500      	movs	r5, #0
 8009eae:	e09f      	b.n	8009ff0 <_strtod_l+0x2e0>
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	e7c8      	b.n	8009e46 <_strtod_l+0x136>
 8009eb4:	f1bb 0f08 	cmp.w	fp, #8
 8009eb8:	bfd5      	itete	le
 8009eba:	9906      	ldrle	r1, [sp, #24]
 8009ebc:	9905      	ldrgt	r1, [sp, #20]
 8009ebe:	fb02 3301 	mlale	r3, r2, r1, r3
 8009ec2:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009ec6:	f100 0001 	add.w	r0, r0, #1
 8009eca:	bfd4      	ite	le
 8009ecc:	9306      	strle	r3, [sp, #24]
 8009ece:	9305      	strgt	r3, [sp, #20]
 8009ed0:	f10b 0b01 	add.w	fp, fp, #1
 8009ed4:	9019      	str	r0, [sp, #100]	; 0x64
 8009ed6:	e7be      	b.n	8009e56 <_strtod_l+0x146>
 8009ed8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009eda:	191a      	adds	r2, r3, r4
 8009edc:	9219      	str	r2, [sp, #100]	; 0x64
 8009ede:	5d1a      	ldrb	r2, [r3, r4]
 8009ee0:	f1bb 0f00 	cmp.w	fp, #0
 8009ee4:	d036      	beq.n	8009f54 <_strtod_l+0x244>
 8009ee6:	465c      	mov	r4, fp
 8009ee8:	9004      	str	r0, [sp, #16]
 8009eea:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009eee:	2b09      	cmp	r3, #9
 8009ef0:	d912      	bls.n	8009f18 <_strtod_l+0x208>
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	e7c1      	b.n	8009e7a <_strtod_l+0x16a>
 8009ef6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009ef8:	3001      	adds	r0, #1
 8009efa:	1c5a      	adds	r2, r3, #1
 8009efc:	9219      	str	r2, [sp, #100]	; 0x64
 8009efe:	785a      	ldrb	r2, [r3, #1]
 8009f00:	2a30      	cmp	r2, #48	; 0x30
 8009f02:	d0f8      	beq.n	8009ef6 <_strtod_l+0x1e6>
 8009f04:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009f08:	2b08      	cmp	r3, #8
 8009f0a:	f200 84d5 	bhi.w	800a8b8 <_strtod_l+0xba8>
 8009f0e:	9004      	str	r0, [sp, #16]
 8009f10:	2000      	movs	r0, #0
 8009f12:	4604      	mov	r4, r0
 8009f14:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009f16:	9308      	str	r3, [sp, #32]
 8009f18:	3a30      	subs	r2, #48	; 0x30
 8009f1a:	f100 0301 	add.w	r3, r0, #1
 8009f1e:	d013      	beq.n	8009f48 <_strtod_l+0x238>
 8009f20:	9904      	ldr	r1, [sp, #16]
 8009f22:	1905      	adds	r5, r0, r4
 8009f24:	4419      	add	r1, r3
 8009f26:	9104      	str	r1, [sp, #16]
 8009f28:	4623      	mov	r3, r4
 8009f2a:	210a      	movs	r1, #10
 8009f2c:	42ab      	cmp	r3, r5
 8009f2e:	d113      	bne.n	8009f58 <_strtod_l+0x248>
 8009f30:	1823      	adds	r3, r4, r0
 8009f32:	2b08      	cmp	r3, #8
 8009f34:	f104 0401 	add.w	r4, r4, #1
 8009f38:	4404      	add	r4, r0
 8009f3a:	dc1b      	bgt.n	8009f74 <_strtod_l+0x264>
 8009f3c:	230a      	movs	r3, #10
 8009f3e:	9906      	ldr	r1, [sp, #24]
 8009f40:	fb03 2301 	mla	r3, r3, r1, r2
 8009f44:	9306      	str	r3, [sp, #24]
 8009f46:	2300      	movs	r3, #0
 8009f48:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	1c51      	adds	r1, r2, #1
 8009f4e:	9119      	str	r1, [sp, #100]	; 0x64
 8009f50:	7852      	ldrb	r2, [r2, #1]
 8009f52:	e7ca      	b.n	8009eea <_strtod_l+0x1da>
 8009f54:	4658      	mov	r0, fp
 8009f56:	e7d3      	b.n	8009f00 <_strtod_l+0x1f0>
 8009f58:	2b08      	cmp	r3, #8
 8009f5a:	dc04      	bgt.n	8009f66 <_strtod_l+0x256>
 8009f5c:	9f06      	ldr	r7, [sp, #24]
 8009f5e:	434f      	muls	r7, r1
 8009f60:	9706      	str	r7, [sp, #24]
 8009f62:	3301      	adds	r3, #1
 8009f64:	e7e2      	b.n	8009f2c <_strtod_l+0x21c>
 8009f66:	1c5f      	adds	r7, r3, #1
 8009f68:	2f10      	cmp	r7, #16
 8009f6a:	bfde      	ittt	le
 8009f6c:	9f05      	ldrle	r7, [sp, #20]
 8009f6e:	434f      	mulle	r7, r1
 8009f70:	9705      	strle	r7, [sp, #20]
 8009f72:	e7f6      	b.n	8009f62 <_strtod_l+0x252>
 8009f74:	2c10      	cmp	r4, #16
 8009f76:	bfdf      	itttt	le
 8009f78:	230a      	movle	r3, #10
 8009f7a:	9905      	ldrle	r1, [sp, #20]
 8009f7c:	fb03 2301 	mlale	r3, r3, r1, r2
 8009f80:	9305      	strle	r3, [sp, #20]
 8009f82:	e7e0      	b.n	8009f46 <_strtod_l+0x236>
 8009f84:	2300      	movs	r3, #0
 8009f86:	9304      	str	r3, [sp, #16]
 8009f88:	2301      	movs	r3, #1
 8009f8a:	e77b      	b.n	8009e84 <_strtod_l+0x174>
 8009f8c:	2700      	movs	r7, #0
 8009f8e:	1cb2      	adds	r2, r6, #2
 8009f90:	9219      	str	r2, [sp, #100]	; 0x64
 8009f92:	78b2      	ldrb	r2, [r6, #2]
 8009f94:	e784      	b.n	8009ea0 <_strtod_l+0x190>
 8009f96:	bf00      	nop
 8009f98:	0800ddc4 	.word	0x0800ddc4
 8009f9c:	0800db18 	.word	0x0800db18
 8009fa0:	7ff00000 	.word	0x7ff00000
 8009fa4:	2701      	movs	r7, #1
 8009fa6:	e7f2      	b.n	8009f8e <_strtod_l+0x27e>
 8009fa8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009faa:	1c51      	adds	r1, r2, #1
 8009fac:	9119      	str	r1, [sp, #100]	; 0x64
 8009fae:	7852      	ldrb	r2, [r2, #1]
 8009fb0:	2a30      	cmp	r2, #48	; 0x30
 8009fb2:	d0f9      	beq.n	8009fa8 <_strtod_l+0x298>
 8009fb4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009fb8:	2908      	cmp	r1, #8
 8009fba:	f63f af77 	bhi.w	8009eac <_strtod_l+0x19c>
 8009fbe:	f04f 0e0a 	mov.w	lr, #10
 8009fc2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8009fc6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009fc8:	9209      	str	r2, [sp, #36]	; 0x24
 8009fca:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009fcc:	1c51      	adds	r1, r2, #1
 8009fce:	9119      	str	r1, [sp, #100]	; 0x64
 8009fd0:	7852      	ldrb	r2, [r2, #1]
 8009fd2:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8009fd6:	2d09      	cmp	r5, #9
 8009fd8:	d935      	bls.n	800a046 <_strtod_l+0x336>
 8009fda:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009fdc:	1b49      	subs	r1, r1, r5
 8009fde:	2908      	cmp	r1, #8
 8009fe0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8009fe4:	dc02      	bgt.n	8009fec <_strtod_l+0x2dc>
 8009fe6:	4565      	cmp	r5, ip
 8009fe8:	bfa8      	it	ge
 8009fea:	4665      	movge	r5, ip
 8009fec:	b107      	cbz	r7, 8009ff0 <_strtod_l+0x2e0>
 8009fee:	426d      	negs	r5, r5
 8009ff0:	2c00      	cmp	r4, #0
 8009ff2:	d14c      	bne.n	800a08e <_strtod_l+0x37e>
 8009ff4:	9907      	ldr	r1, [sp, #28]
 8009ff6:	4301      	orrs	r1, r0
 8009ff8:	f47f aecb 	bne.w	8009d92 <_strtod_l+0x82>
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	f47f aee4 	bne.w	8009dca <_strtod_l+0xba>
 800a002:	2a69      	cmp	r2, #105	; 0x69
 800a004:	d026      	beq.n	800a054 <_strtod_l+0x344>
 800a006:	dc23      	bgt.n	800a050 <_strtod_l+0x340>
 800a008:	2a49      	cmp	r2, #73	; 0x49
 800a00a:	d023      	beq.n	800a054 <_strtod_l+0x344>
 800a00c:	2a4e      	cmp	r2, #78	; 0x4e
 800a00e:	f47f aedc 	bne.w	8009dca <_strtod_l+0xba>
 800a012:	499d      	ldr	r1, [pc, #628]	; (800a288 <_strtod_l+0x578>)
 800a014:	a819      	add	r0, sp, #100	; 0x64
 800a016:	f002 f8df 	bl	800c1d8 <__match>
 800a01a:	2800      	cmp	r0, #0
 800a01c:	f43f aed5 	beq.w	8009dca <_strtod_l+0xba>
 800a020:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a022:	781b      	ldrb	r3, [r3, #0]
 800a024:	2b28      	cmp	r3, #40	; 0x28
 800a026:	d12c      	bne.n	800a082 <_strtod_l+0x372>
 800a028:	4998      	ldr	r1, [pc, #608]	; (800a28c <_strtod_l+0x57c>)
 800a02a:	aa1c      	add	r2, sp, #112	; 0x70
 800a02c:	a819      	add	r0, sp, #100	; 0x64
 800a02e:	f002 f8e7 	bl	800c200 <__hexnan>
 800a032:	2805      	cmp	r0, #5
 800a034:	d125      	bne.n	800a082 <_strtod_l+0x372>
 800a036:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a038:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800a03c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a040:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a044:	e6a5      	b.n	8009d92 <_strtod_l+0x82>
 800a046:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800a04a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800a04e:	e7bc      	b.n	8009fca <_strtod_l+0x2ba>
 800a050:	2a6e      	cmp	r2, #110	; 0x6e
 800a052:	e7dc      	b.n	800a00e <_strtod_l+0x2fe>
 800a054:	498e      	ldr	r1, [pc, #568]	; (800a290 <_strtod_l+0x580>)
 800a056:	a819      	add	r0, sp, #100	; 0x64
 800a058:	f002 f8be 	bl	800c1d8 <__match>
 800a05c:	2800      	cmp	r0, #0
 800a05e:	f43f aeb4 	beq.w	8009dca <_strtod_l+0xba>
 800a062:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a064:	498b      	ldr	r1, [pc, #556]	; (800a294 <_strtod_l+0x584>)
 800a066:	3b01      	subs	r3, #1
 800a068:	a819      	add	r0, sp, #100	; 0x64
 800a06a:	9319      	str	r3, [sp, #100]	; 0x64
 800a06c:	f002 f8b4 	bl	800c1d8 <__match>
 800a070:	b910      	cbnz	r0, 800a078 <_strtod_l+0x368>
 800a072:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a074:	3301      	adds	r3, #1
 800a076:	9319      	str	r3, [sp, #100]	; 0x64
 800a078:	f04f 0800 	mov.w	r8, #0
 800a07c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 800a298 <_strtod_l+0x588>
 800a080:	e687      	b.n	8009d92 <_strtod_l+0x82>
 800a082:	4886      	ldr	r0, [pc, #536]	; (800a29c <_strtod_l+0x58c>)
 800a084:	f003 f970 	bl	800d368 <nan>
 800a088:	4680      	mov	r8, r0
 800a08a:	4689      	mov	r9, r1
 800a08c:	e681      	b.n	8009d92 <_strtod_l+0x82>
 800a08e:	9b04      	ldr	r3, [sp, #16]
 800a090:	f1bb 0f00 	cmp.w	fp, #0
 800a094:	bf08      	it	eq
 800a096:	46a3      	moveq	fp, r4
 800a098:	1aeb      	subs	r3, r5, r3
 800a09a:	2c10      	cmp	r4, #16
 800a09c:	9806      	ldr	r0, [sp, #24]
 800a09e:	4626      	mov	r6, r4
 800a0a0:	9307      	str	r3, [sp, #28]
 800a0a2:	bfa8      	it	ge
 800a0a4:	2610      	movge	r6, #16
 800a0a6:	f7f6 f99d 	bl	80003e4 <__aeabi_ui2d>
 800a0aa:	2c09      	cmp	r4, #9
 800a0ac:	4680      	mov	r8, r0
 800a0ae:	4689      	mov	r9, r1
 800a0b0:	dd13      	ble.n	800a0da <_strtod_l+0x3ca>
 800a0b2:	4b7b      	ldr	r3, [pc, #492]	; (800a2a0 <_strtod_l+0x590>)
 800a0b4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a0b8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a0bc:	f7f6 fa0c 	bl	80004d8 <__aeabi_dmul>
 800a0c0:	4680      	mov	r8, r0
 800a0c2:	9805      	ldr	r0, [sp, #20]
 800a0c4:	4689      	mov	r9, r1
 800a0c6:	f7f6 f98d 	bl	80003e4 <__aeabi_ui2d>
 800a0ca:	4602      	mov	r2, r0
 800a0cc:	460b      	mov	r3, r1
 800a0ce:	4640      	mov	r0, r8
 800a0d0:	4649      	mov	r1, r9
 800a0d2:	f7f6 f84b 	bl	800016c <__adddf3>
 800a0d6:	4680      	mov	r8, r0
 800a0d8:	4689      	mov	r9, r1
 800a0da:	2c0f      	cmp	r4, #15
 800a0dc:	dc36      	bgt.n	800a14c <_strtod_l+0x43c>
 800a0de:	9b07      	ldr	r3, [sp, #28]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	f43f ae56 	beq.w	8009d92 <_strtod_l+0x82>
 800a0e6:	dd22      	ble.n	800a12e <_strtod_l+0x41e>
 800a0e8:	2b16      	cmp	r3, #22
 800a0ea:	dc09      	bgt.n	800a100 <_strtod_l+0x3f0>
 800a0ec:	496c      	ldr	r1, [pc, #432]	; (800a2a0 <_strtod_l+0x590>)
 800a0ee:	4642      	mov	r2, r8
 800a0f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a0f4:	464b      	mov	r3, r9
 800a0f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0fa:	f7f6 f9ed 	bl	80004d8 <__aeabi_dmul>
 800a0fe:	e7c3      	b.n	800a088 <_strtod_l+0x378>
 800a100:	9a07      	ldr	r2, [sp, #28]
 800a102:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800a106:	4293      	cmp	r3, r2
 800a108:	db20      	blt.n	800a14c <_strtod_l+0x43c>
 800a10a:	4d65      	ldr	r5, [pc, #404]	; (800a2a0 <_strtod_l+0x590>)
 800a10c:	f1c4 040f 	rsb	r4, r4, #15
 800a110:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800a114:	4642      	mov	r2, r8
 800a116:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a11a:	464b      	mov	r3, r9
 800a11c:	f7f6 f9dc 	bl	80004d8 <__aeabi_dmul>
 800a120:	9b07      	ldr	r3, [sp, #28]
 800a122:	1b1c      	subs	r4, r3, r4
 800a124:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800a128:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a12c:	e7e5      	b.n	800a0fa <_strtod_l+0x3ea>
 800a12e:	9b07      	ldr	r3, [sp, #28]
 800a130:	3316      	adds	r3, #22
 800a132:	db0b      	blt.n	800a14c <_strtod_l+0x43c>
 800a134:	9b04      	ldr	r3, [sp, #16]
 800a136:	4640      	mov	r0, r8
 800a138:	1b5d      	subs	r5, r3, r5
 800a13a:	4b59      	ldr	r3, [pc, #356]	; (800a2a0 <_strtod_l+0x590>)
 800a13c:	4649      	mov	r1, r9
 800a13e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a142:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a146:	f7f6 faf1 	bl	800072c <__aeabi_ddiv>
 800a14a:	e79d      	b.n	800a088 <_strtod_l+0x378>
 800a14c:	9b07      	ldr	r3, [sp, #28]
 800a14e:	1ba6      	subs	r6, r4, r6
 800a150:	441e      	add	r6, r3
 800a152:	2e00      	cmp	r6, #0
 800a154:	dd74      	ble.n	800a240 <_strtod_l+0x530>
 800a156:	f016 030f 	ands.w	r3, r6, #15
 800a15a:	d00a      	beq.n	800a172 <_strtod_l+0x462>
 800a15c:	4950      	ldr	r1, [pc, #320]	; (800a2a0 <_strtod_l+0x590>)
 800a15e:	4642      	mov	r2, r8
 800a160:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a164:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a168:	464b      	mov	r3, r9
 800a16a:	f7f6 f9b5 	bl	80004d8 <__aeabi_dmul>
 800a16e:	4680      	mov	r8, r0
 800a170:	4689      	mov	r9, r1
 800a172:	f036 060f 	bics.w	r6, r6, #15
 800a176:	d052      	beq.n	800a21e <_strtod_l+0x50e>
 800a178:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800a17c:	dd27      	ble.n	800a1ce <_strtod_l+0x4be>
 800a17e:	f04f 0b00 	mov.w	fp, #0
 800a182:	f8cd b010 	str.w	fp, [sp, #16]
 800a186:	f8cd b020 	str.w	fp, [sp, #32]
 800a18a:	f8cd b018 	str.w	fp, [sp, #24]
 800a18e:	2322      	movs	r3, #34	; 0x22
 800a190:	f04f 0800 	mov.w	r8, #0
 800a194:	f8df 9100 	ldr.w	r9, [pc, #256]	; 800a298 <_strtod_l+0x588>
 800a198:	f8ca 3000 	str.w	r3, [sl]
 800a19c:	9b08      	ldr	r3, [sp, #32]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	f43f adf7 	beq.w	8009d92 <_strtod_l+0x82>
 800a1a4:	4650      	mov	r0, sl
 800a1a6:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a1a8:	f002 f99e 	bl	800c4e8 <_Bfree>
 800a1ac:	4650      	mov	r0, sl
 800a1ae:	9906      	ldr	r1, [sp, #24]
 800a1b0:	f002 f99a 	bl	800c4e8 <_Bfree>
 800a1b4:	4650      	mov	r0, sl
 800a1b6:	9904      	ldr	r1, [sp, #16]
 800a1b8:	f002 f996 	bl	800c4e8 <_Bfree>
 800a1bc:	4650      	mov	r0, sl
 800a1be:	9908      	ldr	r1, [sp, #32]
 800a1c0:	f002 f992 	bl	800c4e8 <_Bfree>
 800a1c4:	4659      	mov	r1, fp
 800a1c6:	4650      	mov	r0, sl
 800a1c8:	f002 f98e 	bl	800c4e8 <_Bfree>
 800a1cc:	e5e1      	b.n	8009d92 <_strtod_l+0x82>
 800a1ce:	4b35      	ldr	r3, [pc, #212]	; (800a2a4 <_strtod_l+0x594>)
 800a1d0:	4640      	mov	r0, r8
 800a1d2:	9305      	str	r3, [sp, #20]
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	4649      	mov	r1, r9
 800a1d8:	461f      	mov	r7, r3
 800a1da:	1136      	asrs	r6, r6, #4
 800a1dc:	2e01      	cmp	r6, #1
 800a1de:	dc21      	bgt.n	800a224 <_strtod_l+0x514>
 800a1e0:	b10b      	cbz	r3, 800a1e6 <_strtod_l+0x4d6>
 800a1e2:	4680      	mov	r8, r0
 800a1e4:	4689      	mov	r9, r1
 800a1e6:	4b2f      	ldr	r3, [pc, #188]	; (800a2a4 <_strtod_l+0x594>)
 800a1e8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a1ec:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a1f0:	4642      	mov	r2, r8
 800a1f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a1f6:	464b      	mov	r3, r9
 800a1f8:	f7f6 f96e 	bl	80004d8 <__aeabi_dmul>
 800a1fc:	4b26      	ldr	r3, [pc, #152]	; (800a298 <_strtod_l+0x588>)
 800a1fe:	460a      	mov	r2, r1
 800a200:	400b      	ands	r3, r1
 800a202:	4929      	ldr	r1, [pc, #164]	; (800a2a8 <_strtod_l+0x598>)
 800a204:	4680      	mov	r8, r0
 800a206:	428b      	cmp	r3, r1
 800a208:	d8b9      	bhi.n	800a17e <_strtod_l+0x46e>
 800a20a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a20e:	428b      	cmp	r3, r1
 800a210:	bf86      	itte	hi
 800a212:	f04f 38ff 	movhi.w	r8, #4294967295
 800a216:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800a2ac <_strtod_l+0x59c>
 800a21a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a21e:	2300      	movs	r3, #0
 800a220:	9305      	str	r3, [sp, #20]
 800a222:	e07f      	b.n	800a324 <_strtod_l+0x614>
 800a224:	07f2      	lsls	r2, r6, #31
 800a226:	d505      	bpl.n	800a234 <_strtod_l+0x524>
 800a228:	9b05      	ldr	r3, [sp, #20]
 800a22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22e:	f7f6 f953 	bl	80004d8 <__aeabi_dmul>
 800a232:	2301      	movs	r3, #1
 800a234:	9a05      	ldr	r2, [sp, #20]
 800a236:	3701      	adds	r7, #1
 800a238:	3208      	adds	r2, #8
 800a23a:	1076      	asrs	r6, r6, #1
 800a23c:	9205      	str	r2, [sp, #20]
 800a23e:	e7cd      	b.n	800a1dc <_strtod_l+0x4cc>
 800a240:	d0ed      	beq.n	800a21e <_strtod_l+0x50e>
 800a242:	4276      	negs	r6, r6
 800a244:	f016 020f 	ands.w	r2, r6, #15
 800a248:	d00a      	beq.n	800a260 <_strtod_l+0x550>
 800a24a:	4b15      	ldr	r3, [pc, #84]	; (800a2a0 <_strtod_l+0x590>)
 800a24c:	4640      	mov	r0, r8
 800a24e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a252:	4649      	mov	r1, r9
 800a254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a258:	f7f6 fa68 	bl	800072c <__aeabi_ddiv>
 800a25c:	4680      	mov	r8, r0
 800a25e:	4689      	mov	r9, r1
 800a260:	1136      	asrs	r6, r6, #4
 800a262:	d0dc      	beq.n	800a21e <_strtod_l+0x50e>
 800a264:	2e1f      	cmp	r6, #31
 800a266:	dd23      	ble.n	800a2b0 <_strtod_l+0x5a0>
 800a268:	f04f 0b00 	mov.w	fp, #0
 800a26c:	f8cd b010 	str.w	fp, [sp, #16]
 800a270:	f8cd b020 	str.w	fp, [sp, #32]
 800a274:	f8cd b018 	str.w	fp, [sp, #24]
 800a278:	2322      	movs	r3, #34	; 0x22
 800a27a:	f04f 0800 	mov.w	r8, #0
 800a27e:	f04f 0900 	mov.w	r9, #0
 800a282:	f8ca 3000 	str.w	r3, [sl]
 800a286:	e789      	b.n	800a19c <_strtod_l+0x48c>
 800a288:	0800daf1 	.word	0x0800daf1
 800a28c:	0800db2c 	.word	0x0800db2c
 800a290:	0800dae9 	.word	0x0800dae9
 800a294:	0800dc6c 	.word	0x0800dc6c
 800a298:	7ff00000 	.word	0x7ff00000
 800a29c:	0800df80 	.word	0x0800df80
 800a2a0:	0800de60 	.word	0x0800de60
 800a2a4:	0800de38 	.word	0x0800de38
 800a2a8:	7ca00000 	.word	0x7ca00000
 800a2ac:	7fefffff 	.word	0x7fefffff
 800a2b0:	f016 0310 	ands.w	r3, r6, #16
 800a2b4:	bf18      	it	ne
 800a2b6:	236a      	movne	r3, #106	; 0x6a
 800a2b8:	4640      	mov	r0, r8
 800a2ba:	9305      	str	r3, [sp, #20]
 800a2bc:	4649      	mov	r1, r9
 800a2be:	2300      	movs	r3, #0
 800a2c0:	4fb0      	ldr	r7, [pc, #704]	; (800a584 <_strtod_l+0x874>)
 800a2c2:	07f2      	lsls	r2, r6, #31
 800a2c4:	d504      	bpl.n	800a2d0 <_strtod_l+0x5c0>
 800a2c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2ca:	f7f6 f905 	bl	80004d8 <__aeabi_dmul>
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	1076      	asrs	r6, r6, #1
 800a2d2:	f107 0708 	add.w	r7, r7, #8
 800a2d6:	d1f4      	bne.n	800a2c2 <_strtod_l+0x5b2>
 800a2d8:	b10b      	cbz	r3, 800a2de <_strtod_l+0x5ce>
 800a2da:	4680      	mov	r8, r0
 800a2dc:	4689      	mov	r9, r1
 800a2de:	9b05      	ldr	r3, [sp, #20]
 800a2e0:	b1c3      	cbz	r3, 800a314 <_strtod_l+0x604>
 800a2e2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800a2e6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	4649      	mov	r1, r9
 800a2ee:	dd11      	ble.n	800a314 <_strtod_l+0x604>
 800a2f0:	2b1f      	cmp	r3, #31
 800a2f2:	f340 8127 	ble.w	800a544 <_strtod_l+0x834>
 800a2f6:	2b34      	cmp	r3, #52	; 0x34
 800a2f8:	bfd8      	it	le
 800a2fa:	f04f 33ff 	movle.w	r3, #4294967295
 800a2fe:	f04f 0800 	mov.w	r8, #0
 800a302:	bfcf      	iteee	gt
 800a304:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a308:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a30c:	fa03 f202 	lslle.w	r2, r3, r2
 800a310:	ea02 0901 	andle.w	r9, r2, r1
 800a314:	2200      	movs	r2, #0
 800a316:	2300      	movs	r3, #0
 800a318:	4640      	mov	r0, r8
 800a31a:	4649      	mov	r1, r9
 800a31c:	f7f6 fb44 	bl	80009a8 <__aeabi_dcmpeq>
 800a320:	2800      	cmp	r0, #0
 800a322:	d1a1      	bne.n	800a268 <_strtod_l+0x558>
 800a324:	9b06      	ldr	r3, [sp, #24]
 800a326:	465a      	mov	r2, fp
 800a328:	9300      	str	r3, [sp, #0]
 800a32a:	4650      	mov	r0, sl
 800a32c:	4623      	mov	r3, r4
 800a32e:	9908      	ldr	r1, [sp, #32]
 800a330:	f002 f942 	bl	800c5b8 <__s2b>
 800a334:	9008      	str	r0, [sp, #32]
 800a336:	2800      	cmp	r0, #0
 800a338:	f43f af21 	beq.w	800a17e <_strtod_l+0x46e>
 800a33c:	9b04      	ldr	r3, [sp, #16]
 800a33e:	f04f 0b00 	mov.w	fp, #0
 800a342:	1b5d      	subs	r5, r3, r5
 800a344:	9b07      	ldr	r3, [sp, #28]
 800a346:	f8cd b010 	str.w	fp, [sp, #16]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	bfb4      	ite	lt
 800a34e:	462b      	movlt	r3, r5
 800a350:	2300      	movge	r3, #0
 800a352:	930e      	str	r3, [sp, #56]	; 0x38
 800a354:	9b07      	ldr	r3, [sp, #28]
 800a356:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a35a:	9314      	str	r3, [sp, #80]	; 0x50
 800a35c:	9b08      	ldr	r3, [sp, #32]
 800a35e:	4650      	mov	r0, sl
 800a360:	6859      	ldr	r1, [r3, #4]
 800a362:	f002 f881 	bl	800c468 <_Balloc>
 800a366:	9006      	str	r0, [sp, #24]
 800a368:	2800      	cmp	r0, #0
 800a36a:	f43f af10 	beq.w	800a18e <_strtod_l+0x47e>
 800a36e:	9b08      	ldr	r3, [sp, #32]
 800a370:	300c      	adds	r0, #12
 800a372:	691a      	ldr	r2, [r3, #16]
 800a374:	f103 010c 	add.w	r1, r3, #12
 800a378:	3202      	adds	r2, #2
 800a37a:	0092      	lsls	r2, r2, #2
 800a37c:	f7fe fdfa 	bl	8008f74 <memcpy>
 800a380:	ab1c      	add	r3, sp, #112	; 0x70
 800a382:	9301      	str	r3, [sp, #4]
 800a384:	ab1b      	add	r3, sp, #108	; 0x6c
 800a386:	9300      	str	r3, [sp, #0]
 800a388:	4642      	mov	r2, r8
 800a38a:	464b      	mov	r3, r9
 800a38c:	4650      	mov	r0, sl
 800a38e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800a392:	f002 fc53 	bl	800cc3c <__d2b>
 800a396:	901a      	str	r0, [sp, #104]	; 0x68
 800a398:	2800      	cmp	r0, #0
 800a39a:	f43f aef8 	beq.w	800a18e <_strtod_l+0x47e>
 800a39e:	2101      	movs	r1, #1
 800a3a0:	4650      	mov	r0, sl
 800a3a2:	f002 f9a1 	bl	800c6e8 <__i2b>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	9004      	str	r0, [sp, #16]
 800a3aa:	2800      	cmp	r0, #0
 800a3ac:	f43f aeef 	beq.w	800a18e <_strtod_l+0x47e>
 800a3b0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a3b2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a3b4:	2d00      	cmp	r5, #0
 800a3b6:	bfab      	itete	ge
 800a3b8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800a3ba:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800a3bc:	18ee      	addge	r6, r5, r3
 800a3be:	1b5c      	sublt	r4, r3, r5
 800a3c0:	9b05      	ldr	r3, [sp, #20]
 800a3c2:	bfa8      	it	ge
 800a3c4:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800a3c6:	eba5 0503 	sub.w	r5, r5, r3
 800a3ca:	4415      	add	r5, r2
 800a3cc:	4b6e      	ldr	r3, [pc, #440]	; (800a588 <_strtod_l+0x878>)
 800a3ce:	f105 35ff 	add.w	r5, r5, #4294967295
 800a3d2:	bfb8      	it	lt
 800a3d4:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800a3d6:	429d      	cmp	r5, r3
 800a3d8:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a3dc:	f280 80c4 	bge.w	800a568 <_strtod_l+0x858>
 800a3e0:	1b5b      	subs	r3, r3, r5
 800a3e2:	2b1f      	cmp	r3, #31
 800a3e4:	f04f 0701 	mov.w	r7, #1
 800a3e8:	eba2 0203 	sub.w	r2, r2, r3
 800a3ec:	f300 80b1 	bgt.w	800a552 <_strtod_l+0x842>
 800a3f0:	2500      	movs	r5, #0
 800a3f2:	fa07 f303 	lsl.w	r3, r7, r3
 800a3f6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a3f8:	18b7      	adds	r7, r6, r2
 800a3fa:	9b05      	ldr	r3, [sp, #20]
 800a3fc:	42be      	cmp	r6, r7
 800a3fe:	4414      	add	r4, r2
 800a400:	441c      	add	r4, r3
 800a402:	4633      	mov	r3, r6
 800a404:	bfa8      	it	ge
 800a406:	463b      	movge	r3, r7
 800a408:	42a3      	cmp	r3, r4
 800a40a:	bfa8      	it	ge
 800a40c:	4623      	movge	r3, r4
 800a40e:	2b00      	cmp	r3, #0
 800a410:	bfc2      	ittt	gt
 800a412:	1aff      	subgt	r7, r7, r3
 800a414:	1ae4      	subgt	r4, r4, r3
 800a416:	1af6      	subgt	r6, r6, r3
 800a418:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	dd17      	ble.n	800a44e <_strtod_l+0x73e>
 800a41e:	461a      	mov	r2, r3
 800a420:	4650      	mov	r0, sl
 800a422:	9904      	ldr	r1, [sp, #16]
 800a424:	f002 fa1e 	bl	800c864 <__pow5mult>
 800a428:	9004      	str	r0, [sp, #16]
 800a42a:	2800      	cmp	r0, #0
 800a42c:	f43f aeaf 	beq.w	800a18e <_strtod_l+0x47e>
 800a430:	4601      	mov	r1, r0
 800a432:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a434:	4650      	mov	r0, sl
 800a436:	f002 f96d 	bl	800c714 <__multiply>
 800a43a:	9009      	str	r0, [sp, #36]	; 0x24
 800a43c:	2800      	cmp	r0, #0
 800a43e:	f43f aea6 	beq.w	800a18e <_strtod_l+0x47e>
 800a442:	4650      	mov	r0, sl
 800a444:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a446:	f002 f84f 	bl	800c4e8 <_Bfree>
 800a44a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a44c:	931a      	str	r3, [sp, #104]	; 0x68
 800a44e:	2f00      	cmp	r7, #0
 800a450:	f300 808e 	bgt.w	800a570 <_strtod_l+0x860>
 800a454:	9b07      	ldr	r3, [sp, #28]
 800a456:	2b00      	cmp	r3, #0
 800a458:	dd08      	ble.n	800a46c <_strtod_l+0x75c>
 800a45a:	4650      	mov	r0, sl
 800a45c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a45e:	9906      	ldr	r1, [sp, #24]
 800a460:	f002 fa00 	bl	800c864 <__pow5mult>
 800a464:	9006      	str	r0, [sp, #24]
 800a466:	2800      	cmp	r0, #0
 800a468:	f43f ae91 	beq.w	800a18e <_strtod_l+0x47e>
 800a46c:	2c00      	cmp	r4, #0
 800a46e:	dd08      	ble.n	800a482 <_strtod_l+0x772>
 800a470:	4622      	mov	r2, r4
 800a472:	4650      	mov	r0, sl
 800a474:	9906      	ldr	r1, [sp, #24]
 800a476:	f002 fa4f 	bl	800c918 <__lshift>
 800a47a:	9006      	str	r0, [sp, #24]
 800a47c:	2800      	cmp	r0, #0
 800a47e:	f43f ae86 	beq.w	800a18e <_strtod_l+0x47e>
 800a482:	2e00      	cmp	r6, #0
 800a484:	dd08      	ble.n	800a498 <_strtod_l+0x788>
 800a486:	4632      	mov	r2, r6
 800a488:	4650      	mov	r0, sl
 800a48a:	9904      	ldr	r1, [sp, #16]
 800a48c:	f002 fa44 	bl	800c918 <__lshift>
 800a490:	9004      	str	r0, [sp, #16]
 800a492:	2800      	cmp	r0, #0
 800a494:	f43f ae7b 	beq.w	800a18e <_strtod_l+0x47e>
 800a498:	4650      	mov	r0, sl
 800a49a:	9a06      	ldr	r2, [sp, #24]
 800a49c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a49e:	f002 fac7 	bl	800ca30 <__mdiff>
 800a4a2:	4683      	mov	fp, r0
 800a4a4:	2800      	cmp	r0, #0
 800a4a6:	f43f ae72 	beq.w	800a18e <_strtod_l+0x47e>
 800a4aa:	2400      	movs	r4, #0
 800a4ac:	68c3      	ldr	r3, [r0, #12]
 800a4ae:	9904      	ldr	r1, [sp, #16]
 800a4b0:	60c4      	str	r4, [r0, #12]
 800a4b2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a4b4:	f002 faa0 	bl	800c9f8 <__mcmp>
 800a4b8:	42a0      	cmp	r0, r4
 800a4ba:	da6b      	bge.n	800a594 <_strtod_l+0x884>
 800a4bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4be:	ea53 0308 	orrs.w	r3, r3, r8
 800a4c2:	f040 8091 	bne.w	800a5e8 <_strtod_l+0x8d8>
 800a4c6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	f040 808c 	bne.w	800a5e8 <_strtod_l+0x8d8>
 800a4d0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a4d4:	0d1b      	lsrs	r3, r3, #20
 800a4d6:	051b      	lsls	r3, r3, #20
 800a4d8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a4dc:	f240 8084 	bls.w	800a5e8 <_strtod_l+0x8d8>
 800a4e0:	f8db 3014 	ldr.w	r3, [fp, #20]
 800a4e4:	b91b      	cbnz	r3, 800a4ee <_strtod_l+0x7de>
 800a4e6:	f8db 3010 	ldr.w	r3, [fp, #16]
 800a4ea:	2b01      	cmp	r3, #1
 800a4ec:	dd7c      	ble.n	800a5e8 <_strtod_l+0x8d8>
 800a4ee:	4659      	mov	r1, fp
 800a4f0:	2201      	movs	r2, #1
 800a4f2:	4650      	mov	r0, sl
 800a4f4:	f002 fa10 	bl	800c918 <__lshift>
 800a4f8:	9904      	ldr	r1, [sp, #16]
 800a4fa:	4683      	mov	fp, r0
 800a4fc:	f002 fa7c 	bl	800c9f8 <__mcmp>
 800a500:	2800      	cmp	r0, #0
 800a502:	dd71      	ble.n	800a5e8 <_strtod_l+0x8d8>
 800a504:	9905      	ldr	r1, [sp, #20]
 800a506:	464b      	mov	r3, r9
 800a508:	4a20      	ldr	r2, [pc, #128]	; (800a58c <_strtod_l+0x87c>)
 800a50a:	2900      	cmp	r1, #0
 800a50c:	f000 808c 	beq.w	800a628 <_strtod_l+0x918>
 800a510:	ea02 0109 	and.w	r1, r2, r9
 800a514:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a518:	f300 8086 	bgt.w	800a628 <_strtod_l+0x918>
 800a51c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a520:	f77f aeaa 	ble.w	800a278 <_strtod_l+0x568>
 800a524:	4640      	mov	r0, r8
 800a526:	4649      	mov	r1, r9
 800a528:	4b19      	ldr	r3, [pc, #100]	; (800a590 <_strtod_l+0x880>)
 800a52a:	2200      	movs	r2, #0
 800a52c:	f7f5 ffd4 	bl	80004d8 <__aeabi_dmul>
 800a530:	460b      	mov	r3, r1
 800a532:	4303      	orrs	r3, r0
 800a534:	bf08      	it	eq
 800a536:	2322      	moveq	r3, #34	; 0x22
 800a538:	4680      	mov	r8, r0
 800a53a:	4689      	mov	r9, r1
 800a53c:	bf08      	it	eq
 800a53e:	f8ca 3000 	streq.w	r3, [sl]
 800a542:	e62f      	b.n	800a1a4 <_strtod_l+0x494>
 800a544:	f04f 32ff 	mov.w	r2, #4294967295
 800a548:	fa02 f303 	lsl.w	r3, r2, r3
 800a54c:	ea03 0808 	and.w	r8, r3, r8
 800a550:	e6e0      	b.n	800a314 <_strtod_l+0x604>
 800a552:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800a556:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800a55a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800a55e:	35e2      	adds	r5, #226	; 0xe2
 800a560:	fa07 f505 	lsl.w	r5, r7, r5
 800a564:	970f      	str	r7, [sp, #60]	; 0x3c
 800a566:	e747      	b.n	800a3f8 <_strtod_l+0x6e8>
 800a568:	2301      	movs	r3, #1
 800a56a:	2500      	movs	r5, #0
 800a56c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a56e:	e743      	b.n	800a3f8 <_strtod_l+0x6e8>
 800a570:	463a      	mov	r2, r7
 800a572:	4650      	mov	r0, sl
 800a574:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a576:	f002 f9cf 	bl	800c918 <__lshift>
 800a57a:	901a      	str	r0, [sp, #104]	; 0x68
 800a57c:	2800      	cmp	r0, #0
 800a57e:	f47f af69 	bne.w	800a454 <_strtod_l+0x744>
 800a582:	e604      	b.n	800a18e <_strtod_l+0x47e>
 800a584:	0800db40 	.word	0x0800db40
 800a588:	fffffc02 	.word	0xfffffc02
 800a58c:	7ff00000 	.word	0x7ff00000
 800a590:	39500000 	.word	0x39500000
 800a594:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a598:	d165      	bne.n	800a666 <_strtod_l+0x956>
 800a59a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a59c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a5a0:	b35a      	cbz	r2, 800a5fa <_strtod_l+0x8ea>
 800a5a2:	4a99      	ldr	r2, [pc, #612]	; (800a808 <_strtod_l+0xaf8>)
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d12b      	bne.n	800a600 <_strtod_l+0x8f0>
 800a5a8:	9b05      	ldr	r3, [sp, #20]
 800a5aa:	4641      	mov	r1, r8
 800a5ac:	b303      	cbz	r3, 800a5f0 <_strtod_l+0x8e0>
 800a5ae:	464a      	mov	r2, r9
 800a5b0:	4b96      	ldr	r3, [pc, #600]	; (800a80c <_strtod_l+0xafc>)
 800a5b2:	4013      	ands	r3, r2
 800a5b4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a5b8:	f04f 32ff 	mov.w	r2, #4294967295
 800a5bc:	d81b      	bhi.n	800a5f6 <_strtod_l+0x8e6>
 800a5be:	0d1b      	lsrs	r3, r3, #20
 800a5c0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a5c4:	fa02 f303 	lsl.w	r3, r2, r3
 800a5c8:	4299      	cmp	r1, r3
 800a5ca:	d119      	bne.n	800a600 <_strtod_l+0x8f0>
 800a5cc:	4b90      	ldr	r3, [pc, #576]	; (800a810 <_strtod_l+0xb00>)
 800a5ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	d102      	bne.n	800a5da <_strtod_l+0x8ca>
 800a5d4:	3101      	adds	r1, #1
 800a5d6:	f43f adda 	beq.w	800a18e <_strtod_l+0x47e>
 800a5da:	f04f 0800 	mov.w	r8, #0
 800a5de:	4b8b      	ldr	r3, [pc, #556]	; (800a80c <_strtod_l+0xafc>)
 800a5e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5e2:	401a      	ands	r2, r3
 800a5e4:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800a5e8:	9b05      	ldr	r3, [sp, #20]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d19a      	bne.n	800a524 <_strtod_l+0x814>
 800a5ee:	e5d9      	b.n	800a1a4 <_strtod_l+0x494>
 800a5f0:	f04f 33ff 	mov.w	r3, #4294967295
 800a5f4:	e7e8      	b.n	800a5c8 <_strtod_l+0x8b8>
 800a5f6:	4613      	mov	r3, r2
 800a5f8:	e7e6      	b.n	800a5c8 <_strtod_l+0x8b8>
 800a5fa:	ea53 0308 	orrs.w	r3, r3, r8
 800a5fe:	d081      	beq.n	800a504 <_strtod_l+0x7f4>
 800a600:	b1e5      	cbz	r5, 800a63c <_strtod_l+0x92c>
 800a602:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a604:	421d      	tst	r5, r3
 800a606:	d0ef      	beq.n	800a5e8 <_strtod_l+0x8d8>
 800a608:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a60a:	4640      	mov	r0, r8
 800a60c:	4649      	mov	r1, r9
 800a60e:	9a05      	ldr	r2, [sp, #20]
 800a610:	b1c3      	cbz	r3, 800a644 <_strtod_l+0x934>
 800a612:	f7ff fb5a 	bl	8009cca <sulp>
 800a616:	4602      	mov	r2, r0
 800a618:	460b      	mov	r3, r1
 800a61a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a61e:	f7f5 fda5 	bl	800016c <__adddf3>
 800a622:	4680      	mov	r8, r0
 800a624:	4689      	mov	r9, r1
 800a626:	e7df      	b.n	800a5e8 <_strtod_l+0x8d8>
 800a628:	4013      	ands	r3, r2
 800a62a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a62e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a632:	f04f 38ff 	mov.w	r8, #4294967295
 800a636:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a63a:	e7d5      	b.n	800a5e8 <_strtod_l+0x8d8>
 800a63c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a63e:	ea13 0f08 	tst.w	r3, r8
 800a642:	e7e0      	b.n	800a606 <_strtod_l+0x8f6>
 800a644:	f7ff fb41 	bl	8009cca <sulp>
 800a648:	4602      	mov	r2, r0
 800a64a:	460b      	mov	r3, r1
 800a64c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a650:	f7f5 fd8a 	bl	8000168 <__aeabi_dsub>
 800a654:	2200      	movs	r2, #0
 800a656:	2300      	movs	r3, #0
 800a658:	4680      	mov	r8, r0
 800a65a:	4689      	mov	r9, r1
 800a65c:	f7f6 f9a4 	bl	80009a8 <__aeabi_dcmpeq>
 800a660:	2800      	cmp	r0, #0
 800a662:	d0c1      	beq.n	800a5e8 <_strtod_l+0x8d8>
 800a664:	e608      	b.n	800a278 <_strtod_l+0x568>
 800a666:	4658      	mov	r0, fp
 800a668:	9904      	ldr	r1, [sp, #16]
 800a66a:	f002 fb43 	bl	800ccf4 <__ratio>
 800a66e:	2200      	movs	r2, #0
 800a670:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a674:	4606      	mov	r6, r0
 800a676:	460f      	mov	r7, r1
 800a678:	f7f6 f9aa 	bl	80009d0 <__aeabi_dcmple>
 800a67c:	2800      	cmp	r0, #0
 800a67e:	d070      	beq.n	800a762 <_strtod_l+0xa52>
 800a680:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a682:	2b00      	cmp	r3, #0
 800a684:	d042      	beq.n	800a70c <_strtod_l+0x9fc>
 800a686:	2600      	movs	r6, #0
 800a688:	4f62      	ldr	r7, [pc, #392]	; (800a814 <_strtod_l+0xb04>)
 800a68a:	4d62      	ldr	r5, [pc, #392]	; (800a814 <_strtod_l+0xb04>)
 800a68c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a68e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a692:	0d1b      	lsrs	r3, r3, #20
 800a694:	051b      	lsls	r3, r3, #20
 800a696:	930f      	str	r3, [sp, #60]	; 0x3c
 800a698:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a69a:	4b5f      	ldr	r3, [pc, #380]	; (800a818 <_strtod_l+0xb08>)
 800a69c:	429a      	cmp	r2, r3
 800a69e:	f040 80c3 	bne.w	800a828 <_strtod_l+0xb18>
 800a6a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6a4:	4640      	mov	r0, r8
 800a6a6:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800a6aa:	4649      	mov	r1, r9
 800a6ac:	f002 fa4c 	bl	800cb48 <__ulp>
 800a6b0:	4602      	mov	r2, r0
 800a6b2:	460b      	mov	r3, r1
 800a6b4:	4630      	mov	r0, r6
 800a6b6:	4639      	mov	r1, r7
 800a6b8:	f7f5 ff0e 	bl	80004d8 <__aeabi_dmul>
 800a6bc:	4642      	mov	r2, r8
 800a6be:	464b      	mov	r3, r9
 800a6c0:	f7f5 fd54 	bl	800016c <__adddf3>
 800a6c4:	460b      	mov	r3, r1
 800a6c6:	4951      	ldr	r1, [pc, #324]	; (800a80c <_strtod_l+0xafc>)
 800a6c8:	4a54      	ldr	r2, [pc, #336]	; (800a81c <_strtod_l+0xb0c>)
 800a6ca:	4019      	ands	r1, r3
 800a6cc:	4291      	cmp	r1, r2
 800a6ce:	4680      	mov	r8, r0
 800a6d0:	d95d      	bls.n	800a78e <_strtod_l+0xa7e>
 800a6d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a6d4:	4b4e      	ldr	r3, [pc, #312]	; (800a810 <_strtod_l+0xb00>)
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d103      	bne.n	800a6e2 <_strtod_l+0x9d2>
 800a6da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6dc:	3301      	adds	r3, #1
 800a6de:	f43f ad56 	beq.w	800a18e <_strtod_l+0x47e>
 800a6e2:	f04f 38ff 	mov.w	r8, #4294967295
 800a6e6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800a810 <_strtod_l+0xb00>
 800a6ea:	4650      	mov	r0, sl
 800a6ec:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a6ee:	f001 fefb 	bl	800c4e8 <_Bfree>
 800a6f2:	4650      	mov	r0, sl
 800a6f4:	9906      	ldr	r1, [sp, #24]
 800a6f6:	f001 fef7 	bl	800c4e8 <_Bfree>
 800a6fa:	4650      	mov	r0, sl
 800a6fc:	9904      	ldr	r1, [sp, #16]
 800a6fe:	f001 fef3 	bl	800c4e8 <_Bfree>
 800a702:	4659      	mov	r1, fp
 800a704:	4650      	mov	r0, sl
 800a706:	f001 feef 	bl	800c4e8 <_Bfree>
 800a70a:	e627      	b.n	800a35c <_strtod_l+0x64c>
 800a70c:	f1b8 0f00 	cmp.w	r8, #0
 800a710:	d119      	bne.n	800a746 <_strtod_l+0xa36>
 800a712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a714:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a718:	b9e3      	cbnz	r3, 800a754 <_strtod_l+0xa44>
 800a71a:	2200      	movs	r2, #0
 800a71c:	4630      	mov	r0, r6
 800a71e:	4639      	mov	r1, r7
 800a720:	4b3c      	ldr	r3, [pc, #240]	; (800a814 <_strtod_l+0xb04>)
 800a722:	f7f6 f94b 	bl	80009bc <__aeabi_dcmplt>
 800a726:	b9c8      	cbnz	r0, 800a75c <_strtod_l+0xa4c>
 800a728:	2200      	movs	r2, #0
 800a72a:	4630      	mov	r0, r6
 800a72c:	4639      	mov	r1, r7
 800a72e:	4b3c      	ldr	r3, [pc, #240]	; (800a820 <_strtod_l+0xb10>)
 800a730:	f7f5 fed2 	bl	80004d8 <__aeabi_dmul>
 800a734:	4604      	mov	r4, r0
 800a736:	460d      	mov	r5, r1
 800a738:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800a73c:	9416      	str	r4, [sp, #88]	; 0x58
 800a73e:	9317      	str	r3, [sp, #92]	; 0x5c
 800a740:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800a744:	e7a2      	b.n	800a68c <_strtod_l+0x97c>
 800a746:	f1b8 0f01 	cmp.w	r8, #1
 800a74a:	d103      	bne.n	800a754 <_strtod_l+0xa44>
 800a74c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a74e:	2b00      	cmp	r3, #0
 800a750:	f43f ad92 	beq.w	800a278 <_strtod_l+0x568>
 800a754:	2600      	movs	r6, #0
 800a756:	2400      	movs	r4, #0
 800a758:	4f32      	ldr	r7, [pc, #200]	; (800a824 <_strtod_l+0xb14>)
 800a75a:	e796      	b.n	800a68a <_strtod_l+0x97a>
 800a75c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a75e:	4d30      	ldr	r5, [pc, #192]	; (800a820 <_strtod_l+0xb10>)
 800a760:	e7ea      	b.n	800a738 <_strtod_l+0xa28>
 800a762:	4b2f      	ldr	r3, [pc, #188]	; (800a820 <_strtod_l+0xb10>)
 800a764:	2200      	movs	r2, #0
 800a766:	4630      	mov	r0, r6
 800a768:	4639      	mov	r1, r7
 800a76a:	f7f5 feb5 	bl	80004d8 <__aeabi_dmul>
 800a76e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a770:	4604      	mov	r4, r0
 800a772:	460d      	mov	r5, r1
 800a774:	b933      	cbnz	r3, 800a784 <_strtod_l+0xa74>
 800a776:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a77a:	9010      	str	r0, [sp, #64]	; 0x40
 800a77c:	9311      	str	r3, [sp, #68]	; 0x44
 800a77e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a782:	e783      	b.n	800a68c <_strtod_l+0x97c>
 800a784:	4602      	mov	r2, r0
 800a786:	460b      	mov	r3, r1
 800a788:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a78c:	e7f7      	b.n	800a77e <_strtod_l+0xa6e>
 800a78e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a792:	9b05      	ldr	r3, [sp, #20]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d1a8      	bne.n	800a6ea <_strtod_l+0x9da>
 800a798:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a79c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a79e:	0d1b      	lsrs	r3, r3, #20
 800a7a0:	051b      	lsls	r3, r3, #20
 800a7a2:	429a      	cmp	r2, r3
 800a7a4:	d1a1      	bne.n	800a6ea <_strtod_l+0x9da>
 800a7a6:	4620      	mov	r0, r4
 800a7a8:	4629      	mov	r1, r5
 800a7aa:	f7f6 fd0d 	bl	80011c8 <__aeabi_d2lz>
 800a7ae:	f7f5 fe65 	bl	800047c <__aeabi_l2d>
 800a7b2:	4602      	mov	r2, r0
 800a7b4:	460b      	mov	r3, r1
 800a7b6:	4620      	mov	r0, r4
 800a7b8:	4629      	mov	r1, r5
 800a7ba:	f7f5 fcd5 	bl	8000168 <__aeabi_dsub>
 800a7be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a7c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a7c4:	ea43 0308 	orr.w	r3, r3, r8
 800a7c8:	4313      	orrs	r3, r2
 800a7ca:	4604      	mov	r4, r0
 800a7cc:	460d      	mov	r5, r1
 800a7ce:	d066      	beq.n	800a89e <_strtod_l+0xb8e>
 800a7d0:	a309      	add	r3, pc, #36	; (adr r3, 800a7f8 <_strtod_l+0xae8>)
 800a7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d6:	f7f6 f8f1 	bl	80009bc <__aeabi_dcmplt>
 800a7da:	2800      	cmp	r0, #0
 800a7dc:	f47f ace2 	bne.w	800a1a4 <_strtod_l+0x494>
 800a7e0:	a307      	add	r3, pc, #28	; (adr r3, 800a800 <_strtod_l+0xaf0>)
 800a7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e6:	4620      	mov	r0, r4
 800a7e8:	4629      	mov	r1, r5
 800a7ea:	f7f6 f905 	bl	80009f8 <__aeabi_dcmpgt>
 800a7ee:	2800      	cmp	r0, #0
 800a7f0:	f43f af7b 	beq.w	800a6ea <_strtod_l+0x9da>
 800a7f4:	e4d6      	b.n	800a1a4 <_strtod_l+0x494>
 800a7f6:	bf00      	nop
 800a7f8:	94a03595 	.word	0x94a03595
 800a7fc:	3fdfffff 	.word	0x3fdfffff
 800a800:	35afe535 	.word	0x35afe535
 800a804:	3fe00000 	.word	0x3fe00000
 800a808:	000fffff 	.word	0x000fffff
 800a80c:	7ff00000 	.word	0x7ff00000
 800a810:	7fefffff 	.word	0x7fefffff
 800a814:	3ff00000 	.word	0x3ff00000
 800a818:	7fe00000 	.word	0x7fe00000
 800a81c:	7c9fffff 	.word	0x7c9fffff
 800a820:	3fe00000 	.word	0x3fe00000
 800a824:	bff00000 	.word	0xbff00000
 800a828:	9b05      	ldr	r3, [sp, #20]
 800a82a:	b313      	cbz	r3, 800a872 <_strtod_l+0xb62>
 800a82c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a82e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a832:	d81e      	bhi.n	800a872 <_strtod_l+0xb62>
 800a834:	a326      	add	r3, pc, #152	; (adr r3, 800a8d0 <_strtod_l+0xbc0>)
 800a836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a83a:	4620      	mov	r0, r4
 800a83c:	4629      	mov	r1, r5
 800a83e:	f7f6 f8c7 	bl	80009d0 <__aeabi_dcmple>
 800a842:	b190      	cbz	r0, 800a86a <_strtod_l+0xb5a>
 800a844:	4629      	mov	r1, r5
 800a846:	4620      	mov	r0, r4
 800a848:	f7f6 f91e 	bl	8000a88 <__aeabi_d2uiz>
 800a84c:	2801      	cmp	r0, #1
 800a84e:	bf38      	it	cc
 800a850:	2001      	movcc	r0, #1
 800a852:	f7f5 fdc7 	bl	80003e4 <__aeabi_ui2d>
 800a856:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a858:	4604      	mov	r4, r0
 800a85a:	460d      	mov	r5, r1
 800a85c:	b9d3      	cbnz	r3, 800a894 <_strtod_l+0xb84>
 800a85e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a862:	9012      	str	r0, [sp, #72]	; 0x48
 800a864:	9313      	str	r3, [sp, #76]	; 0x4c
 800a866:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800a86a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a86c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800a870:	1a9f      	subs	r7, r3, r2
 800a872:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a876:	f002 f967 	bl	800cb48 <__ulp>
 800a87a:	4602      	mov	r2, r0
 800a87c:	460b      	mov	r3, r1
 800a87e:	4630      	mov	r0, r6
 800a880:	4639      	mov	r1, r7
 800a882:	f7f5 fe29 	bl	80004d8 <__aeabi_dmul>
 800a886:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a88a:	f7f5 fc6f 	bl	800016c <__adddf3>
 800a88e:	4680      	mov	r8, r0
 800a890:	4689      	mov	r9, r1
 800a892:	e77e      	b.n	800a792 <_strtod_l+0xa82>
 800a894:	4602      	mov	r2, r0
 800a896:	460b      	mov	r3, r1
 800a898:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800a89c:	e7e3      	b.n	800a866 <_strtod_l+0xb56>
 800a89e:	a30e      	add	r3, pc, #56	; (adr r3, 800a8d8 <_strtod_l+0xbc8>)
 800a8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a4:	f7f6 f88a 	bl	80009bc <__aeabi_dcmplt>
 800a8a8:	e7a1      	b.n	800a7ee <_strtod_l+0xade>
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	930a      	str	r3, [sp, #40]	; 0x28
 800a8ae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a8b0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a8b2:	6013      	str	r3, [r2, #0]
 800a8b4:	f7ff ba71 	b.w	8009d9a <_strtod_l+0x8a>
 800a8b8:	2a65      	cmp	r2, #101	; 0x65
 800a8ba:	f43f ab63 	beq.w	8009f84 <_strtod_l+0x274>
 800a8be:	2a45      	cmp	r2, #69	; 0x45
 800a8c0:	f43f ab60 	beq.w	8009f84 <_strtod_l+0x274>
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	f7ff bb95 	b.w	8009ff4 <_strtod_l+0x2e4>
 800a8ca:	bf00      	nop
 800a8cc:	f3af 8000 	nop.w
 800a8d0:	ffc00000 	.word	0xffc00000
 800a8d4:	41dfffff 	.word	0x41dfffff
 800a8d8:	94a03595 	.word	0x94a03595
 800a8dc:	3fcfffff 	.word	0x3fcfffff

0800a8e0 <strtof>:
 800a8e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8e4:	4f22      	ldr	r7, [pc, #136]	; (800a970 <strtof+0x90>)
 800a8e6:	460a      	mov	r2, r1
 800a8e8:	4b22      	ldr	r3, [pc, #136]	; (800a974 <strtof+0x94>)
 800a8ea:	4601      	mov	r1, r0
 800a8ec:	6838      	ldr	r0, [r7, #0]
 800a8ee:	f7ff fa0f 	bl	8009d10 <_strtod_l>
 800a8f2:	4602      	mov	r2, r0
 800a8f4:	460b      	mov	r3, r1
 800a8f6:	4606      	mov	r6, r0
 800a8f8:	460c      	mov	r4, r1
 800a8fa:	f7f6 f887 	bl	8000a0c <__aeabi_dcmpun>
 800a8fe:	b168      	cbz	r0, 800a91c <strtof+0x3c>
 800a900:	2c00      	cmp	r4, #0
 800a902:	481d      	ldr	r0, [pc, #116]	; (800a978 <strtof+0x98>)
 800a904:	da06      	bge.n	800a914 <strtof+0x34>
 800a906:	f7fe faeb 	bl	8008ee0 <nanf>
 800a90a:	f100 4500 	add.w	r5, r0, #2147483648	; 0x80000000
 800a90e:	4628      	mov	r0, r5
 800a910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a914:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a918:	f7fe bae2 	b.w	8008ee0 <nanf>
 800a91c:	4621      	mov	r1, r4
 800a91e:	4630      	mov	r0, r6
 800a920:	f7f6 f8d2 	bl	8000ac8 <__aeabi_d2f>
 800a924:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 800a928:	4605      	mov	r5, r0
 800a92a:	4914      	ldr	r1, [pc, #80]	; (800a97c <strtof+0x9c>)
 800a92c:	4640      	mov	r0, r8
 800a92e:	f7f6 fbef 	bl	8001110 <__aeabi_fcmpun>
 800a932:	2800      	cmp	r0, #0
 800a934:	d1eb      	bne.n	800a90e <strtof+0x2e>
 800a936:	4640      	mov	r0, r8
 800a938:	4910      	ldr	r1, [pc, #64]	; (800a97c <strtof+0x9c>)
 800a93a:	f7f6 fbcb 	bl	80010d4 <__aeabi_fcmple>
 800a93e:	2800      	cmp	r0, #0
 800a940:	d1e5      	bne.n	800a90e <strtof+0x2e>
 800a942:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800a946:	f04f 32ff 	mov.w	r2, #4294967295
 800a94a:	4630      	mov	r0, r6
 800a94c:	4621      	mov	r1, r4
 800a94e:	4b0c      	ldr	r3, [pc, #48]	; (800a980 <strtof+0xa0>)
 800a950:	f7f6 f85c 	bl	8000a0c <__aeabi_dcmpun>
 800a954:	b940      	cbnz	r0, 800a968 <strtof+0x88>
 800a956:	f04f 32ff 	mov.w	r2, #4294967295
 800a95a:	4630      	mov	r0, r6
 800a95c:	4621      	mov	r1, r4
 800a95e:	4b08      	ldr	r3, [pc, #32]	; (800a980 <strtof+0xa0>)
 800a960:	f7f6 f836 	bl	80009d0 <__aeabi_dcmple>
 800a964:	2800      	cmp	r0, #0
 800a966:	d0d2      	beq.n	800a90e <strtof+0x2e>
 800a968:	2222      	movs	r2, #34	; 0x22
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	601a      	str	r2, [r3, #0]
 800a96e:	e7ce      	b.n	800a90e <strtof+0x2e>
 800a970:	2000000c 	.word	0x2000000c
 800a974:	20000074 	.word	0x20000074
 800a978:	0800df80 	.word	0x0800df80
 800a97c:	7f7fffff 	.word	0x7f7fffff
 800a980:	7fefffff 	.word	0x7fefffff

0800a984 <_strtol_l.constprop.0>:
 800a984:	2b01      	cmp	r3, #1
 800a986:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a98a:	4680      	mov	r8, r0
 800a98c:	d001      	beq.n	800a992 <_strtol_l.constprop.0+0xe>
 800a98e:	2b24      	cmp	r3, #36	; 0x24
 800a990:	d906      	bls.n	800a9a0 <_strtol_l.constprop.0+0x1c>
 800a992:	f7fe fab5 	bl	8008f00 <__errno>
 800a996:	2316      	movs	r3, #22
 800a998:	6003      	str	r3, [r0, #0]
 800a99a:	2000      	movs	r0, #0
 800a99c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9a0:	460d      	mov	r5, r1
 800a9a2:	4f35      	ldr	r7, [pc, #212]	; (800aa78 <_strtol_l.constprop.0+0xf4>)
 800a9a4:	4628      	mov	r0, r5
 800a9a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a9aa:	5de6      	ldrb	r6, [r4, r7]
 800a9ac:	f016 0608 	ands.w	r6, r6, #8
 800a9b0:	d1f8      	bne.n	800a9a4 <_strtol_l.constprop.0+0x20>
 800a9b2:	2c2d      	cmp	r4, #45	; 0x2d
 800a9b4:	d12f      	bne.n	800aa16 <_strtol_l.constprop.0+0x92>
 800a9b6:	2601      	movs	r6, #1
 800a9b8:	782c      	ldrb	r4, [r5, #0]
 800a9ba:	1c85      	adds	r5, r0, #2
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d057      	beq.n	800aa70 <_strtol_l.constprop.0+0xec>
 800a9c0:	2b10      	cmp	r3, #16
 800a9c2:	d109      	bne.n	800a9d8 <_strtol_l.constprop.0+0x54>
 800a9c4:	2c30      	cmp	r4, #48	; 0x30
 800a9c6:	d107      	bne.n	800a9d8 <_strtol_l.constprop.0+0x54>
 800a9c8:	7828      	ldrb	r0, [r5, #0]
 800a9ca:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a9ce:	2858      	cmp	r0, #88	; 0x58
 800a9d0:	d149      	bne.n	800aa66 <_strtol_l.constprop.0+0xe2>
 800a9d2:	2310      	movs	r3, #16
 800a9d4:	786c      	ldrb	r4, [r5, #1]
 800a9d6:	3502      	adds	r5, #2
 800a9d8:	2700      	movs	r7, #0
 800a9da:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800a9de:	f10e 3eff 	add.w	lr, lr, #4294967295
 800a9e2:	fbbe f9f3 	udiv	r9, lr, r3
 800a9e6:	4638      	mov	r0, r7
 800a9e8:	fb03 ea19 	mls	sl, r3, r9, lr
 800a9ec:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a9f0:	f1bc 0f09 	cmp.w	ip, #9
 800a9f4:	d814      	bhi.n	800aa20 <_strtol_l.constprop.0+0x9c>
 800a9f6:	4664      	mov	r4, ip
 800a9f8:	42a3      	cmp	r3, r4
 800a9fa:	dd22      	ble.n	800aa42 <_strtol_l.constprop.0+0xbe>
 800a9fc:	2f00      	cmp	r7, #0
 800a9fe:	db1d      	blt.n	800aa3c <_strtol_l.constprop.0+0xb8>
 800aa00:	4581      	cmp	r9, r0
 800aa02:	d31b      	bcc.n	800aa3c <_strtol_l.constprop.0+0xb8>
 800aa04:	d101      	bne.n	800aa0a <_strtol_l.constprop.0+0x86>
 800aa06:	45a2      	cmp	sl, r4
 800aa08:	db18      	blt.n	800aa3c <_strtol_l.constprop.0+0xb8>
 800aa0a:	2701      	movs	r7, #1
 800aa0c:	fb00 4003 	mla	r0, r0, r3, r4
 800aa10:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aa14:	e7ea      	b.n	800a9ec <_strtol_l.constprop.0+0x68>
 800aa16:	2c2b      	cmp	r4, #43	; 0x2b
 800aa18:	bf04      	itt	eq
 800aa1a:	782c      	ldrbeq	r4, [r5, #0]
 800aa1c:	1c85      	addeq	r5, r0, #2
 800aa1e:	e7cd      	b.n	800a9bc <_strtol_l.constprop.0+0x38>
 800aa20:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800aa24:	f1bc 0f19 	cmp.w	ip, #25
 800aa28:	d801      	bhi.n	800aa2e <_strtol_l.constprop.0+0xaa>
 800aa2a:	3c37      	subs	r4, #55	; 0x37
 800aa2c:	e7e4      	b.n	800a9f8 <_strtol_l.constprop.0+0x74>
 800aa2e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800aa32:	f1bc 0f19 	cmp.w	ip, #25
 800aa36:	d804      	bhi.n	800aa42 <_strtol_l.constprop.0+0xbe>
 800aa38:	3c57      	subs	r4, #87	; 0x57
 800aa3a:	e7dd      	b.n	800a9f8 <_strtol_l.constprop.0+0x74>
 800aa3c:	f04f 37ff 	mov.w	r7, #4294967295
 800aa40:	e7e6      	b.n	800aa10 <_strtol_l.constprop.0+0x8c>
 800aa42:	2f00      	cmp	r7, #0
 800aa44:	da07      	bge.n	800aa56 <_strtol_l.constprop.0+0xd2>
 800aa46:	2322      	movs	r3, #34	; 0x22
 800aa48:	4670      	mov	r0, lr
 800aa4a:	f8c8 3000 	str.w	r3, [r8]
 800aa4e:	2a00      	cmp	r2, #0
 800aa50:	d0a4      	beq.n	800a99c <_strtol_l.constprop.0+0x18>
 800aa52:	1e69      	subs	r1, r5, #1
 800aa54:	e005      	b.n	800aa62 <_strtol_l.constprop.0+0xde>
 800aa56:	b106      	cbz	r6, 800aa5a <_strtol_l.constprop.0+0xd6>
 800aa58:	4240      	negs	r0, r0
 800aa5a:	2a00      	cmp	r2, #0
 800aa5c:	d09e      	beq.n	800a99c <_strtol_l.constprop.0+0x18>
 800aa5e:	2f00      	cmp	r7, #0
 800aa60:	d1f7      	bne.n	800aa52 <_strtol_l.constprop.0+0xce>
 800aa62:	6011      	str	r1, [r2, #0]
 800aa64:	e79a      	b.n	800a99c <_strtol_l.constprop.0+0x18>
 800aa66:	2430      	movs	r4, #48	; 0x30
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d1b5      	bne.n	800a9d8 <_strtol_l.constprop.0+0x54>
 800aa6c:	2308      	movs	r3, #8
 800aa6e:	e7b3      	b.n	800a9d8 <_strtol_l.constprop.0+0x54>
 800aa70:	2c30      	cmp	r4, #48	; 0x30
 800aa72:	d0a9      	beq.n	800a9c8 <_strtol_l.constprop.0+0x44>
 800aa74:	230a      	movs	r3, #10
 800aa76:	e7af      	b.n	800a9d8 <_strtol_l.constprop.0+0x54>
 800aa78:	0800db69 	.word	0x0800db69

0800aa7c <strtol>:
 800aa7c:	4613      	mov	r3, r2
 800aa7e:	460a      	mov	r2, r1
 800aa80:	4601      	mov	r1, r0
 800aa82:	4802      	ldr	r0, [pc, #8]	; (800aa8c <strtol+0x10>)
 800aa84:	6800      	ldr	r0, [r0, #0]
 800aa86:	f7ff bf7d 	b.w	800a984 <_strtol_l.constprop.0>
 800aa8a:	bf00      	nop
 800aa8c:	2000000c 	.word	0x2000000c

0800aa90 <__swbuf_r>:
 800aa90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa92:	460e      	mov	r6, r1
 800aa94:	4614      	mov	r4, r2
 800aa96:	4605      	mov	r5, r0
 800aa98:	b118      	cbz	r0, 800aaa2 <__swbuf_r+0x12>
 800aa9a:	6983      	ldr	r3, [r0, #24]
 800aa9c:	b90b      	cbnz	r3, 800aaa2 <__swbuf_r+0x12>
 800aa9e:	f001 f847 	bl	800bb30 <__sinit>
 800aaa2:	4b21      	ldr	r3, [pc, #132]	; (800ab28 <__swbuf_r+0x98>)
 800aaa4:	429c      	cmp	r4, r3
 800aaa6:	d12b      	bne.n	800ab00 <__swbuf_r+0x70>
 800aaa8:	686c      	ldr	r4, [r5, #4]
 800aaaa:	69a3      	ldr	r3, [r4, #24]
 800aaac:	60a3      	str	r3, [r4, #8]
 800aaae:	89a3      	ldrh	r3, [r4, #12]
 800aab0:	071a      	lsls	r2, r3, #28
 800aab2:	d52f      	bpl.n	800ab14 <__swbuf_r+0x84>
 800aab4:	6923      	ldr	r3, [r4, #16]
 800aab6:	b36b      	cbz	r3, 800ab14 <__swbuf_r+0x84>
 800aab8:	6923      	ldr	r3, [r4, #16]
 800aaba:	6820      	ldr	r0, [r4, #0]
 800aabc:	b2f6      	uxtb	r6, r6
 800aabe:	1ac0      	subs	r0, r0, r3
 800aac0:	6963      	ldr	r3, [r4, #20]
 800aac2:	4637      	mov	r7, r6
 800aac4:	4283      	cmp	r3, r0
 800aac6:	dc04      	bgt.n	800aad2 <__swbuf_r+0x42>
 800aac8:	4621      	mov	r1, r4
 800aaca:	4628      	mov	r0, r5
 800aacc:	f000 ff9c 	bl	800ba08 <_fflush_r>
 800aad0:	bb30      	cbnz	r0, 800ab20 <__swbuf_r+0x90>
 800aad2:	68a3      	ldr	r3, [r4, #8]
 800aad4:	3001      	adds	r0, #1
 800aad6:	3b01      	subs	r3, #1
 800aad8:	60a3      	str	r3, [r4, #8]
 800aada:	6823      	ldr	r3, [r4, #0]
 800aadc:	1c5a      	adds	r2, r3, #1
 800aade:	6022      	str	r2, [r4, #0]
 800aae0:	701e      	strb	r6, [r3, #0]
 800aae2:	6963      	ldr	r3, [r4, #20]
 800aae4:	4283      	cmp	r3, r0
 800aae6:	d004      	beq.n	800aaf2 <__swbuf_r+0x62>
 800aae8:	89a3      	ldrh	r3, [r4, #12]
 800aaea:	07db      	lsls	r3, r3, #31
 800aaec:	d506      	bpl.n	800aafc <__swbuf_r+0x6c>
 800aaee:	2e0a      	cmp	r6, #10
 800aaf0:	d104      	bne.n	800aafc <__swbuf_r+0x6c>
 800aaf2:	4621      	mov	r1, r4
 800aaf4:	4628      	mov	r0, r5
 800aaf6:	f000 ff87 	bl	800ba08 <_fflush_r>
 800aafa:	b988      	cbnz	r0, 800ab20 <__swbuf_r+0x90>
 800aafc:	4638      	mov	r0, r7
 800aafe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab00:	4b0a      	ldr	r3, [pc, #40]	; (800ab2c <__swbuf_r+0x9c>)
 800ab02:	429c      	cmp	r4, r3
 800ab04:	d101      	bne.n	800ab0a <__swbuf_r+0x7a>
 800ab06:	68ac      	ldr	r4, [r5, #8]
 800ab08:	e7cf      	b.n	800aaaa <__swbuf_r+0x1a>
 800ab0a:	4b09      	ldr	r3, [pc, #36]	; (800ab30 <__swbuf_r+0xa0>)
 800ab0c:	429c      	cmp	r4, r3
 800ab0e:	bf08      	it	eq
 800ab10:	68ec      	ldreq	r4, [r5, #12]
 800ab12:	e7ca      	b.n	800aaaa <__swbuf_r+0x1a>
 800ab14:	4621      	mov	r1, r4
 800ab16:	4628      	mov	r0, r5
 800ab18:	f000 f80c 	bl	800ab34 <__swsetup_r>
 800ab1c:	2800      	cmp	r0, #0
 800ab1e:	d0cb      	beq.n	800aab8 <__swbuf_r+0x28>
 800ab20:	f04f 37ff 	mov.w	r7, #4294967295
 800ab24:	e7ea      	b.n	800aafc <__swbuf_r+0x6c>
 800ab26:	bf00      	nop
 800ab28:	0800dd1c 	.word	0x0800dd1c
 800ab2c:	0800dd3c 	.word	0x0800dd3c
 800ab30:	0800dcfc 	.word	0x0800dcfc

0800ab34 <__swsetup_r>:
 800ab34:	4b32      	ldr	r3, [pc, #200]	; (800ac00 <__swsetup_r+0xcc>)
 800ab36:	b570      	push	{r4, r5, r6, lr}
 800ab38:	681d      	ldr	r5, [r3, #0]
 800ab3a:	4606      	mov	r6, r0
 800ab3c:	460c      	mov	r4, r1
 800ab3e:	b125      	cbz	r5, 800ab4a <__swsetup_r+0x16>
 800ab40:	69ab      	ldr	r3, [r5, #24]
 800ab42:	b913      	cbnz	r3, 800ab4a <__swsetup_r+0x16>
 800ab44:	4628      	mov	r0, r5
 800ab46:	f000 fff3 	bl	800bb30 <__sinit>
 800ab4a:	4b2e      	ldr	r3, [pc, #184]	; (800ac04 <__swsetup_r+0xd0>)
 800ab4c:	429c      	cmp	r4, r3
 800ab4e:	d10f      	bne.n	800ab70 <__swsetup_r+0x3c>
 800ab50:	686c      	ldr	r4, [r5, #4]
 800ab52:	89a3      	ldrh	r3, [r4, #12]
 800ab54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab58:	0719      	lsls	r1, r3, #28
 800ab5a:	d42c      	bmi.n	800abb6 <__swsetup_r+0x82>
 800ab5c:	06dd      	lsls	r5, r3, #27
 800ab5e:	d411      	bmi.n	800ab84 <__swsetup_r+0x50>
 800ab60:	2309      	movs	r3, #9
 800ab62:	6033      	str	r3, [r6, #0]
 800ab64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ab68:	f04f 30ff 	mov.w	r0, #4294967295
 800ab6c:	81a3      	strh	r3, [r4, #12]
 800ab6e:	e03e      	b.n	800abee <__swsetup_r+0xba>
 800ab70:	4b25      	ldr	r3, [pc, #148]	; (800ac08 <__swsetup_r+0xd4>)
 800ab72:	429c      	cmp	r4, r3
 800ab74:	d101      	bne.n	800ab7a <__swsetup_r+0x46>
 800ab76:	68ac      	ldr	r4, [r5, #8]
 800ab78:	e7eb      	b.n	800ab52 <__swsetup_r+0x1e>
 800ab7a:	4b24      	ldr	r3, [pc, #144]	; (800ac0c <__swsetup_r+0xd8>)
 800ab7c:	429c      	cmp	r4, r3
 800ab7e:	bf08      	it	eq
 800ab80:	68ec      	ldreq	r4, [r5, #12]
 800ab82:	e7e6      	b.n	800ab52 <__swsetup_r+0x1e>
 800ab84:	0758      	lsls	r0, r3, #29
 800ab86:	d512      	bpl.n	800abae <__swsetup_r+0x7a>
 800ab88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab8a:	b141      	cbz	r1, 800ab9e <__swsetup_r+0x6a>
 800ab8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab90:	4299      	cmp	r1, r3
 800ab92:	d002      	beq.n	800ab9a <__swsetup_r+0x66>
 800ab94:	4630      	mov	r0, r6
 800ab96:	f7fe fa03 	bl	8008fa0 <_free_r>
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	6363      	str	r3, [r4, #52]	; 0x34
 800ab9e:	89a3      	ldrh	r3, [r4, #12]
 800aba0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aba4:	81a3      	strh	r3, [r4, #12]
 800aba6:	2300      	movs	r3, #0
 800aba8:	6063      	str	r3, [r4, #4]
 800abaa:	6923      	ldr	r3, [r4, #16]
 800abac:	6023      	str	r3, [r4, #0]
 800abae:	89a3      	ldrh	r3, [r4, #12]
 800abb0:	f043 0308 	orr.w	r3, r3, #8
 800abb4:	81a3      	strh	r3, [r4, #12]
 800abb6:	6923      	ldr	r3, [r4, #16]
 800abb8:	b94b      	cbnz	r3, 800abce <__swsetup_r+0x9a>
 800abba:	89a3      	ldrh	r3, [r4, #12]
 800abbc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800abc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800abc4:	d003      	beq.n	800abce <__swsetup_r+0x9a>
 800abc6:	4621      	mov	r1, r4
 800abc8:	4630      	mov	r0, r6
 800abca:	f001 fbe1 	bl	800c390 <__smakebuf_r>
 800abce:	89a0      	ldrh	r0, [r4, #12]
 800abd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800abd4:	f010 0301 	ands.w	r3, r0, #1
 800abd8:	d00a      	beq.n	800abf0 <__swsetup_r+0xbc>
 800abda:	2300      	movs	r3, #0
 800abdc:	60a3      	str	r3, [r4, #8]
 800abde:	6963      	ldr	r3, [r4, #20]
 800abe0:	425b      	negs	r3, r3
 800abe2:	61a3      	str	r3, [r4, #24]
 800abe4:	6923      	ldr	r3, [r4, #16]
 800abe6:	b943      	cbnz	r3, 800abfa <__swsetup_r+0xc6>
 800abe8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800abec:	d1ba      	bne.n	800ab64 <__swsetup_r+0x30>
 800abee:	bd70      	pop	{r4, r5, r6, pc}
 800abf0:	0781      	lsls	r1, r0, #30
 800abf2:	bf58      	it	pl
 800abf4:	6963      	ldrpl	r3, [r4, #20]
 800abf6:	60a3      	str	r3, [r4, #8]
 800abf8:	e7f4      	b.n	800abe4 <__swsetup_r+0xb0>
 800abfa:	2000      	movs	r0, #0
 800abfc:	e7f7      	b.n	800abee <__swsetup_r+0xba>
 800abfe:	bf00      	nop
 800ac00:	2000000c 	.word	0x2000000c
 800ac04:	0800dd1c 	.word	0x0800dd1c
 800ac08:	0800dd3c 	.word	0x0800dd3c
 800ac0c:	0800dcfc 	.word	0x0800dcfc

0800ac10 <quorem>:
 800ac10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac14:	6903      	ldr	r3, [r0, #16]
 800ac16:	690c      	ldr	r4, [r1, #16]
 800ac18:	4607      	mov	r7, r0
 800ac1a:	42a3      	cmp	r3, r4
 800ac1c:	f2c0 8082 	blt.w	800ad24 <quorem+0x114>
 800ac20:	3c01      	subs	r4, #1
 800ac22:	f100 0514 	add.w	r5, r0, #20
 800ac26:	f101 0814 	add.w	r8, r1, #20
 800ac2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ac2e:	9301      	str	r3, [sp, #4]
 800ac30:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ac34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac38:	3301      	adds	r3, #1
 800ac3a:	429a      	cmp	r2, r3
 800ac3c:	fbb2 f6f3 	udiv	r6, r2, r3
 800ac40:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ac44:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ac48:	d331      	bcc.n	800acae <quorem+0x9e>
 800ac4a:	f04f 0e00 	mov.w	lr, #0
 800ac4e:	4640      	mov	r0, r8
 800ac50:	46ac      	mov	ip, r5
 800ac52:	46f2      	mov	sl, lr
 800ac54:	f850 2b04 	ldr.w	r2, [r0], #4
 800ac58:	b293      	uxth	r3, r2
 800ac5a:	fb06 e303 	mla	r3, r6, r3, lr
 800ac5e:	0c12      	lsrs	r2, r2, #16
 800ac60:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ac64:	b29b      	uxth	r3, r3
 800ac66:	fb06 e202 	mla	r2, r6, r2, lr
 800ac6a:	ebaa 0303 	sub.w	r3, sl, r3
 800ac6e:	f8dc a000 	ldr.w	sl, [ip]
 800ac72:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ac76:	fa1f fa8a 	uxth.w	sl, sl
 800ac7a:	4453      	add	r3, sl
 800ac7c:	f8dc a000 	ldr.w	sl, [ip]
 800ac80:	b292      	uxth	r2, r2
 800ac82:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ac86:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ac8a:	b29b      	uxth	r3, r3
 800ac8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac90:	4581      	cmp	r9, r0
 800ac92:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ac96:	f84c 3b04 	str.w	r3, [ip], #4
 800ac9a:	d2db      	bcs.n	800ac54 <quorem+0x44>
 800ac9c:	f855 300b 	ldr.w	r3, [r5, fp]
 800aca0:	b92b      	cbnz	r3, 800acae <quorem+0x9e>
 800aca2:	9b01      	ldr	r3, [sp, #4]
 800aca4:	3b04      	subs	r3, #4
 800aca6:	429d      	cmp	r5, r3
 800aca8:	461a      	mov	r2, r3
 800acaa:	d32f      	bcc.n	800ad0c <quorem+0xfc>
 800acac:	613c      	str	r4, [r7, #16]
 800acae:	4638      	mov	r0, r7
 800acb0:	f001 fea2 	bl	800c9f8 <__mcmp>
 800acb4:	2800      	cmp	r0, #0
 800acb6:	db25      	blt.n	800ad04 <quorem+0xf4>
 800acb8:	4628      	mov	r0, r5
 800acba:	f04f 0c00 	mov.w	ip, #0
 800acbe:	3601      	adds	r6, #1
 800acc0:	f858 1b04 	ldr.w	r1, [r8], #4
 800acc4:	f8d0 e000 	ldr.w	lr, [r0]
 800acc8:	b28b      	uxth	r3, r1
 800acca:	ebac 0303 	sub.w	r3, ip, r3
 800acce:	fa1f f28e 	uxth.w	r2, lr
 800acd2:	4413      	add	r3, r2
 800acd4:	0c0a      	lsrs	r2, r1, #16
 800acd6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800acda:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800acde:	b29b      	uxth	r3, r3
 800ace0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ace4:	45c1      	cmp	r9, r8
 800ace6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800acea:	f840 3b04 	str.w	r3, [r0], #4
 800acee:	d2e7      	bcs.n	800acc0 <quorem+0xb0>
 800acf0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800acf4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800acf8:	b922      	cbnz	r2, 800ad04 <quorem+0xf4>
 800acfa:	3b04      	subs	r3, #4
 800acfc:	429d      	cmp	r5, r3
 800acfe:	461a      	mov	r2, r3
 800ad00:	d30a      	bcc.n	800ad18 <quorem+0x108>
 800ad02:	613c      	str	r4, [r7, #16]
 800ad04:	4630      	mov	r0, r6
 800ad06:	b003      	add	sp, #12
 800ad08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad0c:	6812      	ldr	r2, [r2, #0]
 800ad0e:	3b04      	subs	r3, #4
 800ad10:	2a00      	cmp	r2, #0
 800ad12:	d1cb      	bne.n	800acac <quorem+0x9c>
 800ad14:	3c01      	subs	r4, #1
 800ad16:	e7c6      	b.n	800aca6 <quorem+0x96>
 800ad18:	6812      	ldr	r2, [r2, #0]
 800ad1a:	3b04      	subs	r3, #4
 800ad1c:	2a00      	cmp	r2, #0
 800ad1e:	d1f0      	bne.n	800ad02 <quorem+0xf2>
 800ad20:	3c01      	subs	r4, #1
 800ad22:	e7eb      	b.n	800acfc <quorem+0xec>
 800ad24:	2000      	movs	r0, #0
 800ad26:	e7ee      	b.n	800ad06 <quorem+0xf6>

0800ad28 <_dtoa_r>:
 800ad28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad2c:	4616      	mov	r6, r2
 800ad2e:	461f      	mov	r7, r3
 800ad30:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ad32:	b099      	sub	sp, #100	; 0x64
 800ad34:	4605      	mov	r5, r0
 800ad36:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ad3a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800ad3e:	b974      	cbnz	r4, 800ad5e <_dtoa_r+0x36>
 800ad40:	2010      	movs	r0, #16
 800ad42:	f7fe f907 	bl	8008f54 <malloc>
 800ad46:	4602      	mov	r2, r0
 800ad48:	6268      	str	r0, [r5, #36]	; 0x24
 800ad4a:	b920      	cbnz	r0, 800ad56 <_dtoa_r+0x2e>
 800ad4c:	21ea      	movs	r1, #234	; 0xea
 800ad4e:	4ba8      	ldr	r3, [pc, #672]	; (800aff0 <_dtoa_r+0x2c8>)
 800ad50:	48a8      	ldr	r0, [pc, #672]	; (800aff4 <_dtoa_r+0x2cc>)
 800ad52:	f002 fb85 	bl	800d460 <__assert_func>
 800ad56:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ad5a:	6004      	str	r4, [r0, #0]
 800ad5c:	60c4      	str	r4, [r0, #12]
 800ad5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ad60:	6819      	ldr	r1, [r3, #0]
 800ad62:	b151      	cbz	r1, 800ad7a <_dtoa_r+0x52>
 800ad64:	685a      	ldr	r2, [r3, #4]
 800ad66:	2301      	movs	r3, #1
 800ad68:	4093      	lsls	r3, r2
 800ad6a:	604a      	str	r2, [r1, #4]
 800ad6c:	608b      	str	r3, [r1, #8]
 800ad6e:	4628      	mov	r0, r5
 800ad70:	f001 fbba 	bl	800c4e8 <_Bfree>
 800ad74:	2200      	movs	r2, #0
 800ad76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ad78:	601a      	str	r2, [r3, #0]
 800ad7a:	1e3b      	subs	r3, r7, #0
 800ad7c:	bfaf      	iteee	ge
 800ad7e:	2300      	movge	r3, #0
 800ad80:	2201      	movlt	r2, #1
 800ad82:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ad86:	9305      	strlt	r3, [sp, #20]
 800ad88:	bfa8      	it	ge
 800ad8a:	f8c8 3000 	strge.w	r3, [r8]
 800ad8e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800ad92:	4b99      	ldr	r3, [pc, #612]	; (800aff8 <_dtoa_r+0x2d0>)
 800ad94:	bfb8      	it	lt
 800ad96:	f8c8 2000 	strlt.w	r2, [r8]
 800ad9a:	ea33 0309 	bics.w	r3, r3, r9
 800ad9e:	d119      	bne.n	800add4 <_dtoa_r+0xac>
 800ada0:	f242 730f 	movw	r3, #9999	; 0x270f
 800ada4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ada6:	6013      	str	r3, [r2, #0]
 800ada8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800adac:	4333      	orrs	r3, r6
 800adae:	f000 857f 	beq.w	800b8b0 <_dtoa_r+0xb88>
 800adb2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800adb4:	b953      	cbnz	r3, 800adcc <_dtoa_r+0xa4>
 800adb6:	4b91      	ldr	r3, [pc, #580]	; (800affc <_dtoa_r+0x2d4>)
 800adb8:	e022      	b.n	800ae00 <_dtoa_r+0xd8>
 800adba:	4b91      	ldr	r3, [pc, #580]	; (800b000 <_dtoa_r+0x2d8>)
 800adbc:	9303      	str	r3, [sp, #12]
 800adbe:	3308      	adds	r3, #8
 800adc0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800adc2:	6013      	str	r3, [r2, #0]
 800adc4:	9803      	ldr	r0, [sp, #12]
 800adc6:	b019      	add	sp, #100	; 0x64
 800adc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adcc:	4b8b      	ldr	r3, [pc, #556]	; (800affc <_dtoa_r+0x2d4>)
 800adce:	9303      	str	r3, [sp, #12]
 800add0:	3303      	adds	r3, #3
 800add2:	e7f5      	b.n	800adc0 <_dtoa_r+0x98>
 800add4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800add8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800addc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ade0:	2200      	movs	r2, #0
 800ade2:	2300      	movs	r3, #0
 800ade4:	f7f5 fde0 	bl	80009a8 <__aeabi_dcmpeq>
 800ade8:	4680      	mov	r8, r0
 800adea:	b158      	cbz	r0, 800ae04 <_dtoa_r+0xdc>
 800adec:	2301      	movs	r3, #1
 800adee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800adf0:	6013      	str	r3, [r2, #0]
 800adf2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	f000 8558 	beq.w	800b8aa <_dtoa_r+0xb82>
 800adfa:	4882      	ldr	r0, [pc, #520]	; (800b004 <_dtoa_r+0x2dc>)
 800adfc:	6018      	str	r0, [r3, #0]
 800adfe:	1e43      	subs	r3, r0, #1
 800ae00:	9303      	str	r3, [sp, #12]
 800ae02:	e7df      	b.n	800adc4 <_dtoa_r+0x9c>
 800ae04:	ab16      	add	r3, sp, #88	; 0x58
 800ae06:	9301      	str	r3, [sp, #4]
 800ae08:	ab17      	add	r3, sp, #92	; 0x5c
 800ae0a:	9300      	str	r3, [sp, #0]
 800ae0c:	4628      	mov	r0, r5
 800ae0e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ae12:	f001 ff13 	bl	800cc3c <__d2b>
 800ae16:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ae1a:	4683      	mov	fp, r0
 800ae1c:	2c00      	cmp	r4, #0
 800ae1e:	d07f      	beq.n	800af20 <_dtoa_r+0x1f8>
 800ae20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ae24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae26:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800ae2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae2e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800ae32:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800ae36:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	4b72      	ldr	r3, [pc, #456]	; (800b008 <_dtoa_r+0x2e0>)
 800ae3e:	f7f5 f993 	bl	8000168 <__aeabi_dsub>
 800ae42:	a365      	add	r3, pc, #404	; (adr r3, 800afd8 <_dtoa_r+0x2b0>)
 800ae44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae48:	f7f5 fb46 	bl	80004d8 <__aeabi_dmul>
 800ae4c:	a364      	add	r3, pc, #400	; (adr r3, 800afe0 <_dtoa_r+0x2b8>)
 800ae4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae52:	f7f5 f98b 	bl	800016c <__adddf3>
 800ae56:	4606      	mov	r6, r0
 800ae58:	4620      	mov	r0, r4
 800ae5a:	460f      	mov	r7, r1
 800ae5c:	f7f5 fad2 	bl	8000404 <__aeabi_i2d>
 800ae60:	a361      	add	r3, pc, #388	; (adr r3, 800afe8 <_dtoa_r+0x2c0>)
 800ae62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae66:	f7f5 fb37 	bl	80004d8 <__aeabi_dmul>
 800ae6a:	4602      	mov	r2, r0
 800ae6c:	460b      	mov	r3, r1
 800ae6e:	4630      	mov	r0, r6
 800ae70:	4639      	mov	r1, r7
 800ae72:	f7f5 f97b 	bl	800016c <__adddf3>
 800ae76:	4606      	mov	r6, r0
 800ae78:	460f      	mov	r7, r1
 800ae7a:	f7f5 fddd 	bl	8000a38 <__aeabi_d2iz>
 800ae7e:	2200      	movs	r2, #0
 800ae80:	4682      	mov	sl, r0
 800ae82:	2300      	movs	r3, #0
 800ae84:	4630      	mov	r0, r6
 800ae86:	4639      	mov	r1, r7
 800ae88:	f7f5 fd98 	bl	80009bc <__aeabi_dcmplt>
 800ae8c:	b148      	cbz	r0, 800aea2 <_dtoa_r+0x17a>
 800ae8e:	4650      	mov	r0, sl
 800ae90:	f7f5 fab8 	bl	8000404 <__aeabi_i2d>
 800ae94:	4632      	mov	r2, r6
 800ae96:	463b      	mov	r3, r7
 800ae98:	f7f5 fd86 	bl	80009a8 <__aeabi_dcmpeq>
 800ae9c:	b908      	cbnz	r0, 800aea2 <_dtoa_r+0x17a>
 800ae9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aea2:	f1ba 0f16 	cmp.w	sl, #22
 800aea6:	d858      	bhi.n	800af5a <_dtoa_r+0x232>
 800aea8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aeac:	4b57      	ldr	r3, [pc, #348]	; (800b00c <_dtoa_r+0x2e4>)
 800aeae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800aeb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb6:	f7f5 fd81 	bl	80009bc <__aeabi_dcmplt>
 800aeba:	2800      	cmp	r0, #0
 800aebc:	d04f      	beq.n	800af5e <_dtoa_r+0x236>
 800aebe:	2300      	movs	r3, #0
 800aec0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aec4:	930f      	str	r3, [sp, #60]	; 0x3c
 800aec6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800aec8:	1b1c      	subs	r4, r3, r4
 800aeca:	1e63      	subs	r3, r4, #1
 800aecc:	9309      	str	r3, [sp, #36]	; 0x24
 800aece:	bf49      	itett	mi
 800aed0:	f1c4 0301 	rsbmi	r3, r4, #1
 800aed4:	2300      	movpl	r3, #0
 800aed6:	9306      	strmi	r3, [sp, #24]
 800aed8:	2300      	movmi	r3, #0
 800aeda:	bf54      	ite	pl
 800aedc:	9306      	strpl	r3, [sp, #24]
 800aede:	9309      	strmi	r3, [sp, #36]	; 0x24
 800aee0:	f1ba 0f00 	cmp.w	sl, #0
 800aee4:	db3d      	blt.n	800af62 <_dtoa_r+0x23a>
 800aee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aee8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800aeec:	4453      	add	r3, sl
 800aeee:	9309      	str	r3, [sp, #36]	; 0x24
 800aef0:	2300      	movs	r3, #0
 800aef2:	930a      	str	r3, [sp, #40]	; 0x28
 800aef4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aef6:	2b09      	cmp	r3, #9
 800aef8:	f200 808c 	bhi.w	800b014 <_dtoa_r+0x2ec>
 800aefc:	2b05      	cmp	r3, #5
 800aefe:	bfc4      	itt	gt
 800af00:	3b04      	subgt	r3, #4
 800af02:	9322      	strgt	r3, [sp, #136]	; 0x88
 800af04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800af06:	bfc8      	it	gt
 800af08:	2400      	movgt	r4, #0
 800af0a:	f1a3 0302 	sub.w	r3, r3, #2
 800af0e:	bfd8      	it	le
 800af10:	2401      	movle	r4, #1
 800af12:	2b03      	cmp	r3, #3
 800af14:	f200 808a 	bhi.w	800b02c <_dtoa_r+0x304>
 800af18:	e8df f003 	tbb	[pc, r3]
 800af1c:	5b4d4f2d 	.word	0x5b4d4f2d
 800af20:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800af24:	441c      	add	r4, r3
 800af26:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800af2a:	2b20      	cmp	r3, #32
 800af2c:	bfc3      	ittte	gt
 800af2e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800af32:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800af36:	fa09 f303 	lslgt.w	r3, r9, r3
 800af3a:	f1c3 0320 	rsble	r3, r3, #32
 800af3e:	bfc6      	itte	gt
 800af40:	fa26 f000 	lsrgt.w	r0, r6, r0
 800af44:	4318      	orrgt	r0, r3
 800af46:	fa06 f003 	lslle.w	r0, r6, r3
 800af4a:	f7f5 fa4b 	bl	80003e4 <__aeabi_ui2d>
 800af4e:	2301      	movs	r3, #1
 800af50:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800af54:	3c01      	subs	r4, #1
 800af56:	9313      	str	r3, [sp, #76]	; 0x4c
 800af58:	e76f      	b.n	800ae3a <_dtoa_r+0x112>
 800af5a:	2301      	movs	r3, #1
 800af5c:	e7b2      	b.n	800aec4 <_dtoa_r+0x19c>
 800af5e:	900f      	str	r0, [sp, #60]	; 0x3c
 800af60:	e7b1      	b.n	800aec6 <_dtoa_r+0x19e>
 800af62:	9b06      	ldr	r3, [sp, #24]
 800af64:	eba3 030a 	sub.w	r3, r3, sl
 800af68:	9306      	str	r3, [sp, #24]
 800af6a:	f1ca 0300 	rsb	r3, sl, #0
 800af6e:	930a      	str	r3, [sp, #40]	; 0x28
 800af70:	2300      	movs	r3, #0
 800af72:	930e      	str	r3, [sp, #56]	; 0x38
 800af74:	e7be      	b.n	800aef4 <_dtoa_r+0x1cc>
 800af76:	2300      	movs	r3, #0
 800af78:	930b      	str	r3, [sp, #44]	; 0x2c
 800af7a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	dc58      	bgt.n	800b032 <_dtoa_r+0x30a>
 800af80:	f04f 0901 	mov.w	r9, #1
 800af84:	464b      	mov	r3, r9
 800af86:	f8cd 9020 	str.w	r9, [sp, #32]
 800af8a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800af8e:	2200      	movs	r2, #0
 800af90:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800af92:	6042      	str	r2, [r0, #4]
 800af94:	2204      	movs	r2, #4
 800af96:	f102 0614 	add.w	r6, r2, #20
 800af9a:	429e      	cmp	r6, r3
 800af9c:	6841      	ldr	r1, [r0, #4]
 800af9e:	d94e      	bls.n	800b03e <_dtoa_r+0x316>
 800afa0:	4628      	mov	r0, r5
 800afa2:	f001 fa61 	bl	800c468 <_Balloc>
 800afa6:	9003      	str	r0, [sp, #12]
 800afa8:	2800      	cmp	r0, #0
 800afaa:	d14c      	bne.n	800b046 <_dtoa_r+0x31e>
 800afac:	4602      	mov	r2, r0
 800afae:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800afb2:	4b17      	ldr	r3, [pc, #92]	; (800b010 <_dtoa_r+0x2e8>)
 800afb4:	e6cc      	b.n	800ad50 <_dtoa_r+0x28>
 800afb6:	2301      	movs	r3, #1
 800afb8:	e7de      	b.n	800af78 <_dtoa_r+0x250>
 800afba:	2300      	movs	r3, #0
 800afbc:	930b      	str	r3, [sp, #44]	; 0x2c
 800afbe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800afc0:	eb0a 0903 	add.w	r9, sl, r3
 800afc4:	f109 0301 	add.w	r3, r9, #1
 800afc8:	2b01      	cmp	r3, #1
 800afca:	9308      	str	r3, [sp, #32]
 800afcc:	bfb8      	it	lt
 800afce:	2301      	movlt	r3, #1
 800afd0:	e7dd      	b.n	800af8e <_dtoa_r+0x266>
 800afd2:	2301      	movs	r3, #1
 800afd4:	e7f2      	b.n	800afbc <_dtoa_r+0x294>
 800afd6:	bf00      	nop
 800afd8:	636f4361 	.word	0x636f4361
 800afdc:	3fd287a7 	.word	0x3fd287a7
 800afe0:	8b60c8b3 	.word	0x8b60c8b3
 800afe4:	3fc68a28 	.word	0x3fc68a28
 800afe8:	509f79fb 	.word	0x509f79fb
 800afec:	3fd34413 	.word	0x3fd34413
 800aff0:	0800dc76 	.word	0x0800dc76
 800aff4:	0800dc8d 	.word	0x0800dc8d
 800aff8:	7ff00000 	.word	0x7ff00000
 800affc:	0800dc72 	.word	0x0800dc72
 800b000:	0800dc69 	.word	0x0800dc69
 800b004:	0800daf5 	.word	0x0800daf5
 800b008:	3ff80000 	.word	0x3ff80000
 800b00c:	0800de60 	.word	0x0800de60
 800b010:	0800dce8 	.word	0x0800dce8
 800b014:	2401      	movs	r4, #1
 800b016:	2300      	movs	r3, #0
 800b018:	940b      	str	r4, [sp, #44]	; 0x2c
 800b01a:	9322      	str	r3, [sp, #136]	; 0x88
 800b01c:	f04f 39ff 	mov.w	r9, #4294967295
 800b020:	2200      	movs	r2, #0
 800b022:	2312      	movs	r3, #18
 800b024:	f8cd 9020 	str.w	r9, [sp, #32]
 800b028:	9223      	str	r2, [sp, #140]	; 0x8c
 800b02a:	e7b0      	b.n	800af8e <_dtoa_r+0x266>
 800b02c:	2301      	movs	r3, #1
 800b02e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b030:	e7f4      	b.n	800b01c <_dtoa_r+0x2f4>
 800b032:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800b036:	464b      	mov	r3, r9
 800b038:	f8cd 9020 	str.w	r9, [sp, #32]
 800b03c:	e7a7      	b.n	800af8e <_dtoa_r+0x266>
 800b03e:	3101      	adds	r1, #1
 800b040:	6041      	str	r1, [r0, #4]
 800b042:	0052      	lsls	r2, r2, #1
 800b044:	e7a7      	b.n	800af96 <_dtoa_r+0x26e>
 800b046:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b048:	9a03      	ldr	r2, [sp, #12]
 800b04a:	601a      	str	r2, [r3, #0]
 800b04c:	9b08      	ldr	r3, [sp, #32]
 800b04e:	2b0e      	cmp	r3, #14
 800b050:	f200 80a8 	bhi.w	800b1a4 <_dtoa_r+0x47c>
 800b054:	2c00      	cmp	r4, #0
 800b056:	f000 80a5 	beq.w	800b1a4 <_dtoa_r+0x47c>
 800b05a:	f1ba 0f00 	cmp.w	sl, #0
 800b05e:	dd34      	ble.n	800b0ca <_dtoa_r+0x3a2>
 800b060:	4a9a      	ldr	r2, [pc, #616]	; (800b2cc <_dtoa_r+0x5a4>)
 800b062:	f00a 030f 	and.w	r3, sl, #15
 800b066:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b06a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b06e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b072:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b076:	ea4f 142a 	mov.w	r4, sl, asr #4
 800b07a:	d016      	beq.n	800b0aa <_dtoa_r+0x382>
 800b07c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b080:	4b93      	ldr	r3, [pc, #588]	; (800b2d0 <_dtoa_r+0x5a8>)
 800b082:	2703      	movs	r7, #3
 800b084:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b088:	f7f5 fb50 	bl	800072c <__aeabi_ddiv>
 800b08c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b090:	f004 040f 	and.w	r4, r4, #15
 800b094:	4e8e      	ldr	r6, [pc, #568]	; (800b2d0 <_dtoa_r+0x5a8>)
 800b096:	b954      	cbnz	r4, 800b0ae <_dtoa_r+0x386>
 800b098:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b09c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b0a0:	f7f5 fb44 	bl	800072c <__aeabi_ddiv>
 800b0a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b0a8:	e029      	b.n	800b0fe <_dtoa_r+0x3d6>
 800b0aa:	2702      	movs	r7, #2
 800b0ac:	e7f2      	b.n	800b094 <_dtoa_r+0x36c>
 800b0ae:	07e1      	lsls	r1, r4, #31
 800b0b0:	d508      	bpl.n	800b0c4 <_dtoa_r+0x39c>
 800b0b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b0b6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b0ba:	f7f5 fa0d 	bl	80004d8 <__aeabi_dmul>
 800b0be:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b0c2:	3701      	adds	r7, #1
 800b0c4:	1064      	asrs	r4, r4, #1
 800b0c6:	3608      	adds	r6, #8
 800b0c8:	e7e5      	b.n	800b096 <_dtoa_r+0x36e>
 800b0ca:	f000 80a5 	beq.w	800b218 <_dtoa_r+0x4f0>
 800b0ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b0d2:	f1ca 0400 	rsb	r4, sl, #0
 800b0d6:	4b7d      	ldr	r3, [pc, #500]	; (800b2cc <_dtoa_r+0x5a4>)
 800b0d8:	f004 020f 	and.w	r2, r4, #15
 800b0dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e4:	f7f5 f9f8 	bl	80004d8 <__aeabi_dmul>
 800b0e8:	2702      	movs	r7, #2
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b0f0:	4e77      	ldr	r6, [pc, #476]	; (800b2d0 <_dtoa_r+0x5a8>)
 800b0f2:	1124      	asrs	r4, r4, #4
 800b0f4:	2c00      	cmp	r4, #0
 800b0f6:	f040 8084 	bne.w	800b202 <_dtoa_r+0x4da>
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d1d2      	bne.n	800b0a4 <_dtoa_r+0x37c>
 800b0fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b100:	2b00      	cmp	r3, #0
 800b102:	f000 808b 	beq.w	800b21c <_dtoa_r+0x4f4>
 800b106:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b10a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b10e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b112:	2200      	movs	r2, #0
 800b114:	4b6f      	ldr	r3, [pc, #444]	; (800b2d4 <_dtoa_r+0x5ac>)
 800b116:	f7f5 fc51 	bl	80009bc <__aeabi_dcmplt>
 800b11a:	2800      	cmp	r0, #0
 800b11c:	d07e      	beq.n	800b21c <_dtoa_r+0x4f4>
 800b11e:	9b08      	ldr	r3, [sp, #32]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d07b      	beq.n	800b21c <_dtoa_r+0x4f4>
 800b124:	f1b9 0f00 	cmp.w	r9, #0
 800b128:	dd38      	ble.n	800b19c <_dtoa_r+0x474>
 800b12a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b12e:	2200      	movs	r2, #0
 800b130:	4b69      	ldr	r3, [pc, #420]	; (800b2d8 <_dtoa_r+0x5b0>)
 800b132:	f7f5 f9d1 	bl	80004d8 <__aeabi_dmul>
 800b136:	464c      	mov	r4, r9
 800b138:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b13c:	f10a 38ff 	add.w	r8, sl, #4294967295
 800b140:	3701      	adds	r7, #1
 800b142:	4638      	mov	r0, r7
 800b144:	f7f5 f95e 	bl	8000404 <__aeabi_i2d>
 800b148:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b14c:	f7f5 f9c4 	bl	80004d8 <__aeabi_dmul>
 800b150:	2200      	movs	r2, #0
 800b152:	4b62      	ldr	r3, [pc, #392]	; (800b2dc <_dtoa_r+0x5b4>)
 800b154:	f7f5 f80a 	bl	800016c <__adddf3>
 800b158:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800b15c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b160:	9611      	str	r6, [sp, #68]	; 0x44
 800b162:	2c00      	cmp	r4, #0
 800b164:	d15d      	bne.n	800b222 <_dtoa_r+0x4fa>
 800b166:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b16a:	2200      	movs	r2, #0
 800b16c:	4b5c      	ldr	r3, [pc, #368]	; (800b2e0 <_dtoa_r+0x5b8>)
 800b16e:	f7f4 fffb 	bl	8000168 <__aeabi_dsub>
 800b172:	4602      	mov	r2, r0
 800b174:	460b      	mov	r3, r1
 800b176:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b17a:	4633      	mov	r3, r6
 800b17c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b17e:	f7f5 fc3b 	bl	80009f8 <__aeabi_dcmpgt>
 800b182:	2800      	cmp	r0, #0
 800b184:	f040 829c 	bne.w	800b6c0 <_dtoa_r+0x998>
 800b188:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b18c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b18e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b192:	f7f5 fc13 	bl	80009bc <__aeabi_dcmplt>
 800b196:	2800      	cmp	r0, #0
 800b198:	f040 8290 	bne.w	800b6bc <_dtoa_r+0x994>
 800b19c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800b1a0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b1a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	f2c0 8152 	blt.w	800b450 <_dtoa_r+0x728>
 800b1ac:	f1ba 0f0e 	cmp.w	sl, #14
 800b1b0:	f300 814e 	bgt.w	800b450 <_dtoa_r+0x728>
 800b1b4:	4b45      	ldr	r3, [pc, #276]	; (800b2cc <_dtoa_r+0x5a4>)
 800b1b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b1ba:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b1be:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800b1c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	f280 80db 	bge.w	800b380 <_dtoa_r+0x658>
 800b1ca:	9b08      	ldr	r3, [sp, #32]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	f300 80d7 	bgt.w	800b380 <_dtoa_r+0x658>
 800b1d2:	f040 8272 	bne.w	800b6ba <_dtoa_r+0x992>
 800b1d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	4b40      	ldr	r3, [pc, #256]	; (800b2e0 <_dtoa_r+0x5b8>)
 800b1de:	f7f5 f97b 	bl	80004d8 <__aeabi_dmul>
 800b1e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b1e6:	f7f5 fbfd 	bl	80009e4 <__aeabi_dcmpge>
 800b1ea:	9c08      	ldr	r4, [sp, #32]
 800b1ec:	4626      	mov	r6, r4
 800b1ee:	2800      	cmp	r0, #0
 800b1f0:	f040 8248 	bne.w	800b684 <_dtoa_r+0x95c>
 800b1f4:	2331      	movs	r3, #49	; 0x31
 800b1f6:	9f03      	ldr	r7, [sp, #12]
 800b1f8:	f10a 0a01 	add.w	sl, sl, #1
 800b1fc:	f807 3b01 	strb.w	r3, [r7], #1
 800b200:	e244      	b.n	800b68c <_dtoa_r+0x964>
 800b202:	07e2      	lsls	r2, r4, #31
 800b204:	d505      	bpl.n	800b212 <_dtoa_r+0x4ea>
 800b206:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b20a:	f7f5 f965 	bl	80004d8 <__aeabi_dmul>
 800b20e:	2301      	movs	r3, #1
 800b210:	3701      	adds	r7, #1
 800b212:	1064      	asrs	r4, r4, #1
 800b214:	3608      	adds	r6, #8
 800b216:	e76d      	b.n	800b0f4 <_dtoa_r+0x3cc>
 800b218:	2702      	movs	r7, #2
 800b21a:	e770      	b.n	800b0fe <_dtoa_r+0x3d6>
 800b21c:	46d0      	mov	r8, sl
 800b21e:	9c08      	ldr	r4, [sp, #32]
 800b220:	e78f      	b.n	800b142 <_dtoa_r+0x41a>
 800b222:	9903      	ldr	r1, [sp, #12]
 800b224:	4b29      	ldr	r3, [pc, #164]	; (800b2cc <_dtoa_r+0x5a4>)
 800b226:	4421      	add	r1, r4
 800b228:	9112      	str	r1, [sp, #72]	; 0x48
 800b22a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b22c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b230:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800b234:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b238:	2900      	cmp	r1, #0
 800b23a:	d055      	beq.n	800b2e8 <_dtoa_r+0x5c0>
 800b23c:	2000      	movs	r0, #0
 800b23e:	4929      	ldr	r1, [pc, #164]	; (800b2e4 <_dtoa_r+0x5bc>)
 800b240:	f7f5 fa74 	bl	800072c <__aeabi_ddiv>
 800b244:	463b      	mov	r3, r7
 800b246:	4632      	mov	r2, r6
 800b248:	f7f4 ff8e 	bl	8000168 <__aeabi_dsub>
 800b24c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b250:	9f03      	ldr	r7, [sp, #12]
 800b252:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b256:	f7f5 fbef 	bl	8000a38 <__aeabi_d2iz>
 800b25a:	4604      	mov	r4, r0
 800b25c:	f7f5 f8d2 	bl	8000404 <__aeabi_i2d>
 800b260:	4602      	mov	r2, r0
 800b262:	460b      	mov	r3, r1
 800b264:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b268:	f7f4 ff7e 	bl	8000168 <__aeabi_dsub>
 800b26c:	4602      	mov	r2, r0
 800b26e:	460b      	mov	r3, r1
 800b270:	3430      	adds	r4, #48	; 0x30
 800b272:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b276:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b27a:	f807 4b01 	strb.w	r4, [r7], #1
 800b27e:	f7f5 fb9d 	bl	80009bc <__aeabi_dcmplt>
 800b282:	2800      	cmp	r0, #0
 800b284:	d174      	bne.n	800b370 <_dtoa_r+0x648>
 800b286:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b28a:	2000      	movs	r0, #0
 800b28c:	4911      	ldr	r1, [pc, #68]	; (800b2d4 <_dtoa_r+0x5ac>)
 800b28e:	f7f4 ff6b 	bl	8000168 <__aeabi_dsub>
 800b292:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b296:	f7f5 fb91 	bl	80009bc <__aeabi_dcmplt>
 800b29a:	2800      	cmp	r0, #0
 800b29c:	f040 80b7 	bne.w	800b40e <_dtoa_r+0x6e6>
 800b2a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b2a2:	429f      	cmp	r7, r3
 800b2a4:	f43f af7a 	beq.w	800b19c <_dtoa_r+0x474>
 800b2a8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	4b0a      	ldr	r3, [pc, #40]	; (800b2d8 <_dtoa_r+0x5b0>)
 800b2b0:	f7f5 f912 	bl	80004d8 <__aeabi_dmul>
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b2ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b2be:	4b06      	ldr	r3, [pc, #24]	; (800b2d8 <_dtoa_r+0x5b0>)
 800b2c0:	f7f5 f90a 	bl	80004d8 <__aeabi_dmul>
 800b2c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b2c8:	e7c3      	b.n	800b252 <_dtoa_r+0x52a>
 800b2ca:	bf00      	nop
 800b2cc:	0800de60 	.word	0x0800de60
 800b2d0:	0800de38 	.word	0x0800de38
 800b2d4:	3ff00000 	.word	0x3ff00000
 800b2d8:	40240000 	.word	0x40240000
 800b2dc:	401c0000 	.word	0x401c0000
 800b2e0:	40140000 	.word	0x40140000
 800b2e4:	3fe00000 	.word	0x3fe00000
 800b2e8:	4630      	mov	r0, r6
 800b2ea:	4639      	mov	r1, r7
 800b2ec:	f7f5 f8f4 	bl	80004d8 <__aeabi_dmul>
 800b2f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b2f2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b2f6:	9c03      	ldr	r4, [sp, #12]
 800b2f8:	9314      	str	r3, [sp, #80]	; 0x50
 800b2fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b2fe:	f7f5 fb9b 	bl	8000a38 <__aeabi_d2iz>
 800b302:	9015      	str	r0, [sp, #84]	; 0x54
 800b304:	f7f5 f87e 	bl	8000404 <__aeabi_i2d>
 800b308:	4602      	mov	r2, r0
 800b30a:	460b      	mov	r3, r1
 800b30c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b310:	f7f4 ff2a 	bl	8000168 <__aeabi_dsub>
 800b314:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b316:	4606      	mov	r6, r0
 800b318:	3330      	adds	r3, #48	; 0x30
 800b31a:	f804 3b01 	strb.w	r3, [r4], #1
 800b31e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b320:	460f      	mov	r7, r1
 800b322:	429c      	cmp	r4, r3
 800b324:	f04f 0200 	mov.w	r2, #0
 800b328:	d124      	bne.n	800b374 <_dtoa_r+0x64c>
 800b32a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b32e:	4bb0      	ldr	r3, [pc, #704]	; (800b5f0 <_dtoa_r+0x8c8>)
 800b330:	f7f4 ff1c 	bl	800016c <__adddf3>
 800b334:	4602      	mov	r2, r0
 800b336:	460b      	mov	r3, r1
 800b338:	4630      	mov	r0, r6
 800b33a:	4639      	mov	r1, r7
 800b33c:	f7f5 fb5c 	bl	80009f8 <__aeabi_dcmpgt>
 800b340:	2800      	cmp	r0, #0
 800b342:	d163      	bne.n	800b40c <_dtoa_r+0x6e4>
 800b344:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b348:	2000      	movs	r0, #0
 800b34a:	49a9      	ldr	r1, [pc, #676]	; (800b5f0 <_dtoa_r+0x8c8>)
 800b34c:	f7f4 ff0c 	bl	8000168 <__aeabi_dsub>
 800b350:	4602      	mov	r2, r0
 800b352:	460b      	mov	r3, r1
 800b354:	4630      	mov	r0, r6
 800b356:	4639      	mov	r1, r7
 800b358:	f7f5 fb30 	bl	80009bc <__aeabi_dcmplt>
 800b35c:	2800      	cmp	r0, #0
 800b35e:	f43f af1d 	beq.w	800b19c <_dtoa_r+0x474>
 800b362:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b364:	1e7b      	subs	r3, r7, #1
 800b366:	9314      	str	r3, [sp, #80]	; 0x50
 800b368:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800b36c:	2b30      	cmp	r3, #48	; 0x30
 800b36e:	d0f8      	beq.n	800b362 <_dtoa_r+0x63a>
 800b370:	46c2      	mov	sl, r8
 800b372:	e03b      	b.n	800b3ec <_dtoa_r+0x6c4>
 800b374:	4b9f      	ldr	r3, [pc, #636]	; (800b5f4 <_dtoa_r+0x8cc>)
 800b376:	f7f5 f8af 	bl	80004d8 <__aeabi_dmul>
 800b37a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b37e:	e7bc      	b.n	800b2fa <_dtoa_r+0x5d2>
 800b380:	9f03      	ldr	r7, [sp, #12]
 800b382:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b386:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b38a:	4640      	mov	r0, r8
 800b38c:	4649      	mov	r1, r9
 800b38e:	f7f5 f9cd 	bl	800072c <__aeabi_ddiv>
 800b392:	f7f5 fb51 	bl	8000a38 <__aeabi_d2iz>
 800b396:	4604      	mov	r4, r0
 800b398:	f7f5 f834 	bl	8000404 <__aeabi_i2d>
 800b39c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b3a0:	f7f5 f89a 	bl	80004d8 <__aeabi_dmul>
 800b3a4:	4602      	mov	r2, r0
 800b3a6:	460b      	mov	r3, r1
 800b3a8:	4640      	mov	r0, r8
 800b3aa:	4649      	mov	r1, r9
 800b3ac:	f7f4 fedc 	bl	8000168 <__aeabi_dsub>
 800b3b0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800b3b4:	f807 6b01 	strb.w	r6, [r7], #1
 800b3b8:	9e03      	ldr	r6, [sp, #12]
 800b3ba:	f8dd c020 	ldr.w	ip, [sp, #32]
 800b3be:	1bbe      	subs	r6, r7, r6
 800b3c0:	45b4      	cmp	ip, r6
 800b3c2:	4602      	mov	r2, r0
 800b3c4:	460b      	mov	r3, r1
 800b3c6:	d136      	bne.n	800b436 <_dtoa_r+0x70e>
 800b3c8:	f7f4 fed0 	bl	800016c <__adddf3>
 800b3cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b3d0:	4680      	mov	r8, r0
 800b3d2:	4689      	mov	r9, r1
 800b3d4:	f7f5 fb10 	bl	80009f8 <__aeabi_dcmpgt>
 800b3d8:	bb58      	cbnz	r0, 800b432 <_dtoa_r+0x70a>
 800b3da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b3de:	4640      	mov	r0, r8
 800b3e0:	4649      	mov	r1, r9
 800b3e2:	f7f5 fae1 	bl	80009a8 <__aeabi_dcmpeq>
 800b3e6:	b108      	cbz	r0, 800b3ec <_dtoa_r+0x6c4>
 800b3e8:	07e1      	lsls	r1, r4, #31
 800b3ea:	d422      	bmi.n	800b432 <_dtoa_r+0x70a>
 800b3ec:	4628      	mov	r0, r5
 800b3ee:	4659      	mov	r1, fp
 800b3f0:	f001 f87a 	bl	800c4e8 <_Bfree>
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	703b      	strb	r3, [r7, #0]
 800b3f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b3fa:	f10a 0001 	add.w	r0, sl, #1
 800b3fe:	6018      	str	r0, [r3, #0]
 800b400:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b402:	2b00      	cmp	r3, #0
 800b404:	f43f acde 	beq.w	800adc4 <_dtoa_r+0x9c>
 800b408:	601f      	str	r7, [r3, #0]
 800b40a:	e4db      	b.n	800adc4 <_dtoa_r+0x9c>
 800b40c:	4627      	mov	r7, r4
 800b40e:	463b      	mov	r3, r7
 800b410:	461f      	mov	r7, r3
 800b412:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b416:	2a39      	cmp	r2, #57	; 0x39
 800b418:	d107      	bne.n	800b42a <_dtoa_r+0x702>
 800b41a:	9a03      	ldr	r2, [sp, #12]
 800b41c:	429a      	cmp	r2, r3
 800b41e:	d1f7      	bne.n	800b410 <_dtoa_r+0x6e8>
 800b420:	2230      	movs	r2, #48	; 0x30
 800b422:	9903      	ldr	r1, [sp, #12]
 800b424:	f108 0801 	add.w	r8, r8, #1
 800b428:	700a      	strb	r2, [r1, #0]
 800b42a:	781a      	ldrb	r2, [r3, #0]
 800b42c:	3201      	adds	r2, #1
 800b42e:	701a      	strb	r2, [r3, #0]
 800b430:	e79e      	b.n	800b370 <_dtoa_r+0x648>
 800b432:	46d0      	mov	r8, sl
 800b434:	e7eb      	b.n	800b40e <_dtoa_r+0x6e6>
 800b436:	2200      	movs	r2, #0
 800b438:	4b6e      	ldr	r3, [pc, #440]	; (800b5f4 <_dtoa_r+0x8cc>)
 800b43a:	f7f5 f84d 	bl	80004d8 <__aeabi_dmul>
 800b43e:	2200      	movs	r2, #0
 800b440:	2300      	movs	r3, #0
 800b442:	4680      	mov	r8, r0
 800b444:	4689      	mov	r9, r1
 800b446:	f7f5 faaf 	bl	80009a8 <__aeabi_dcmpeq>
 800b44a:	2800      	cmp	r0, #0
 800b44c:	d09b      	beq.n	800b386 <_dtoa_r+0x65e>
 800b44e:	e7cd      	b.n	800b3ec <_dtoa_r+0x6c4>
 800b450:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b452:	2a00      	cmp	r2, #0
 800b454:	f000 80d0 	beq.w	800b5f8 <_dtoa_r+0x8d0>
 800b458:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b45a:	2a01      	cmp	r2, #1
 800b45c:	f300 80ae 	bgt.w	800b5bc <_dtoa_r+0x894>
 800b460:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b462:	2a00      	cmp	r2, #0
 800b464:	f000 80a6 	beq.w	800b5b4 <_dtoa_r+0x88c>
 800b468:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b46c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b46e:	9f06      	ldr	r7, [sp, #24]
 800b470:	9a06      	ldr	r2, [sp, #24]
 800b472:	2101      	movs	r1, #1
 800b474:	441a      	add	r2, r3
 800b476:	9206      	str	r2, [sp, #24]
 800b478:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b47a:	4628      	mov	r0, r5
 800b47c:	441a      	add	r2, r3
 800b47e:	9209      	str	r2, [sp, #36]	; 0x24
 800b480:	f001 f932 	bl	800c6e8 <__i2b>
 800b484:	4606      	mov	r6, r0
 800b486:	2f00      	cmp	r7, #0
 800b488:	dd0c      	ble.n	800b4a4 <_dtoa_r+0x77c>
 800b48a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	dd09      	ble.n	800b4a4 <_dtoa_r+0x77c>
 800b490:	42bb      	cmp	r3, r7
 800b492:	bfa8      	it	ge
 800b494:	463b      	movge	r3, r7
 800b496:	9a06      	ldr	r2, [sp, #24]
 800b498:	1aff      	subs	r7, r7, r3
 800b49a:	1ad2      	subs	r2, r2, r3
 800b49c:	9206      	str	r2, [sp, #24]
 800b49e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4a0:	1ad3      	subs	r3, r2, r3
 800b4a2:	9309      	str	r3, [sp, #36]	; 0x24
 800b4a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4a6:	b1f3      	cbz	r3, 800b4e6 <_dtoa_r+0x7be>
 800b4a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	f000 80a8 	beq.w	800b600 <_dtoa_r+0x8d8>
 800b4b0:	2c00      	cmp	r4, #0
 800b4b2:	dd10      	ble.n	800b4d6 <_dtoa_r+0x7ae>
 800b4b4:	4631      	mov	r1, r6
 800b4b6:	4622      	mov	r2, r4
 800b4b8:	4628      	mov	r0, r5
 800b4ba:	f001 f9d3 	bl	800c864 <__pow5mult>
 800b4be:	465a      	mov	r2, fp
 800b4c0:	4601      	mov	r1, r0
 800b4c2:	4606      	mov	r6, r0
 800b4c4:	4628      	mov	r0, r5
 800b4c6:	f001 f925 	bl	800c714 <__multiply>
 800b4ca:	4680      	mov	r8, r0
 800b4cc:	4659      	mov	r1, fp
 800b4ce:	4628      	mov	r0, r5
 800b4d0:	f001 f80a 	bl	800c4e8 <_Bfree>
 800b4d4:	46c3      	mov	fp, r8
 800b4d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4d8:	1b1a      	subs	r2, r3, r4
 800b4da:	d004      	beq.n	800b4e6 <_dtoa_r+0x7be>
 800b4dc:	4659      	mov	r1, fp
 800b4de:	4628      	mov	r0, r5
 800b4e0:	f001 f9c0 	bl	800c864 <__pow5mult>
 800b4e4:	4683      	mov	fp, r0
 800b4e6:	2101      	movs	r1, #1
 800b4e8:	4628      	mov	r0, r5
 800b4ea:	f001 f8fd 	bl	800c6e8 <__i2b>
 800b4ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b4f0:	4604      	mov	r4, r0
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	f340 8086 	ble.w	800b604 <_dtoa_r+0x8dc>
 800b4f8:	461a      	mov	r2, r3
 800b4fa:	4601      	mov	r1, r0
 800b4fc:	4628      	mov	r0, r5
 800b4fe:	f001 f9b1 	bl	800c864 <__pow5mult>
 800b502:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b504:	4604      	mov	r4, r0
 800b506:	2b01      	cmp	r3, #1
 800b508:	dd7f      	ble.n	800b60a <_dtoa_r+0x8e2>
 800b50a:	f04f 0800 	mov.w	r8, #0
 800b50e:	6923      	ldr	r3, [r4, #16]
 800b510:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b514:	6918      	ldr	r0, [r3, #16]
 800b516:	f001 f899 	bl	800c64c <__hi0bits>
 800b51a:	f1c0 0020 	rsb	r0, r0, #32
 800b51e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b520:	4418      	add	r0, r3
 800b522:	f010 001f 	ands.w	r0, r0, #31
 800b526:	f000 8092 	beq.w	800b64e <_dtoa_r+0x926>
 800b52a:	f1c0 0320 	rsb	r3, r0, #32
 800b52e:	2b04      	cmp	r3, #4
 800b530:	f340 808a 	ble.w	800b648 <_dtoa_r+0x920>
 800b534:	f1c0 001c 	rsb	r0, r0, #28
 800b538:	9b06      	ldr	r3, [sp, #24]
 800b53a:	4407      	add	r7, r0
 800b53c:	4403      	add	r3, r0
 800b53e:	9306      	str	r3, [sp, #24]
 800b540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b542:	4403      	add	r3, r0
 800b544:	9309      	str	r3, [sp, #36]	; 0x24
 800b546:	9b06      	ldr	r3, [sp, #24]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	dd05      	ble.n	800b558 <_dtoa_r+0x830>
 800b54c:	4659      	mov	r1, fp
 800b54e:	461a      	mov	r2, r3
 800b550:	4628      	mov	r0, r5
 800b552:	f001 f9e1 	bl	800c918 <__lshift>
 800b556:	4683      	mov	fp, r0
 800b558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	dd05      	ble.n	800b56a <_dtoa_r+0x842>
 800b55e:	4621      	mov	r1, r4
 800b560:	461a      	mov	r2, r3
 800b562:	4628      	mov	r0, r5
 800b564:	f001 f9d8 	bl	800c918 <__lshift>
 800b568:	4604      	mov	r4, r0
 800b56a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d070      	beq.n	800b652 <_dtoa_r+0x92a>
 800b570:	4621      	mov	r1, r4
 800b572:	4658      	mov	r0, fp
 800b574:	f001 fa40 	bl	800c9f8 <__mcmp>
 800b578:	2800      	cmp	r0, #0
 800b57a:	da6a      	bge.n	800b652 <_dtoa_r+0x92a>
 800b57c:	2300      	movs	r3, #0
 800b57e:	4659      	mov	r1, fp
 800b580:	220a      	movs	r2, #10
 800b582:	4628      	mov	r0, r5
 800b584:	f000 ffd2 	bl	800c52c <__multadd>
 800b588:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b58a:	4683      	mov	fp, r0
 800b58c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b590:	2b00      	cmp	r3, #0
 800b592:	f000 8194 	beq.w	800b8be <_dtoa_r+0xb96>
 800b596:	4631      	mov	r1, r6
 800b598:	2300      	movs	r3, #0
 800b59a:	220a      	movs	r2, #10
 800b59c:	4628      	mov	r0, r5
 800b59e:	f000 ffc5 	bl	800c52c <__multadd>
 800b5a2:	f1b9 0f00 	cmp.w	r9, #0
 800b5a6:	4606      	mov	r6, r0
 800b5a8:	f300 8093 	bgt.w	800b6d2 <_dtoa_r+0x9aa>
 800b5ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b5ae:	2b02      	cmp	r3, #2
 800b5b0:	dc57      	bgt.n	800b662 <_dtoa_r+0x93a>
 800b5b2:	e08e      	b.n	800b6d2 <_dtoa_r+0x9aa>
 800b5b4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b5b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b5ba:	e757      	b.n	800b46c <_dtoa_r+0x744>
 800b5bc:	9b08      	ldr	r3, [sp, #32]
 800b5be:	1e5c      	subs	r4, r3, #1
 800b5c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5c2:	42a3      	cmp	r3, r4
 800b5c4:	bfb7      	itett	lt
 800b5c6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b5c8:	1b1c      	subge	r4, r3, r4
 800b5ca:	1ae2      	sublt	r2, r4, r3
 800b5cc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b5ce:	bfbe      	ittt	lt
 800b5d0:	940a      	strlt	r4, [sp, #40]	; 0x28
 800b5d2:	189b      	addlt	r3, r3, r2
 800b5d4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b5d6:	9b08      	ldr	r3, [sp, #32]
 800b5d8:	bfb8      	it	lt
 800b5da:	2400      	movlt	r4, #0
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	bfbb      	ittet	lt
 800b5e0:	9b06      	ldrlt	r3, [sp, #24]
 800b5e2:	9a08      	ldrlt	r2, [sp, #32]
 800b5e4:	9f06      	ldrge	r7, [sp, #24]
 800b5e6:	1a9f      	sublt	r7, r3, r2
 800b5e8:	bfac      	ite	ge
 800b5ea:	9b08      	ldrge	r3, [sp, #32]
 800b5ec:	2300      	movlt	r3, #0
 800b5ee:	e73f      	b.n	800b470 <_dtoa_r+0x748>
 800b5f0:	3fe00000 	.word	0x3fe00000
 800b5f4:	40240000 	.word	0x40240000
 800b5f8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b5fa:	9f06      	ldr	r7, [sp, #24]
 800b5fc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b5fe:	e742      	b.n	800b486 <_dtoa_r+0x75e>
 800b600:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b602:	e76b      	b.n	800b4dc <_dtoa_r+0x7b4>
 800b604:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b606:	2b01      	cmp	r3, #1
 800b608:	dc19      	bgt.n	800b63e <_dtoa_r+0x916>
 800b60a:	9b04      	ldr	r3, [sp, #16]
 800b60c:	b9bb      	cbnz	r3, 800b63e <_dtoa_r+0x916>
 800b60e:	9b05      	ldr	r3, [sp, #20]
 800b610:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b614:	b99b      	cbnz	r3, 800b63e <_dtoa_r+0x916>
 800b616:	9b05      	ldr	r3, [sp, #20]
 800b618:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b61c:	0d1b      	lsrs	r3, r3, #20
 800b61e:	051b      	lsls	r3, r3, #20
 800b620:	b183      	cbz	r3, 800b644 <_dtoa_r+0x91c>
 800b622:	f04f 0801 	mov.w	r8, #1
 800b626:	9b06      	ldr	r3, [sp, #24]
 800b628:	3301      	adds	r3, #1
 800b62a:	9306      	str	r3, [sp, #24]
 800b62c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b62e:	3301      	adds	r3, #1
 800b630:	9309      	str	r3, [sp, #36]	; 0x24
 800b632:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b634:	2b00      	cmp	r3, #0
 800b636:	f47f af6a 	bne.w	800b50e <_dtoa_r+0x7e6>
 800b63a:	2001      	movs	r0, #1
 800b63c:	e76f      	b.n	800b51e <_dtoa_r+0x7f6>
 800b63e:	f04f 0800 	mov.w	r8, #0
 800b642:	e7f6      	b.n	800b632 <_dtoa_r+0x90a>
 800b644:	4698      	mov	r8, r3
 800b646:	e7f4      	b.n	800b632 <_dtoa_r+0x90a>
 800b648:	f43f af7d 	beq.w	800b546 <_dtoa_r+0x81e>
 800b64c:	4618      	mov	r0, r3
 800b64e:	301c      	adds	r0, #28
 800b650:	e772      	b.n	800b538 <_dtoa_r+0x810>
 800b652:	9b08      	ldr	r3, [sp, #32]
 800b654:	2b00      	cmp	r3, #0
 800b656:	dc36      	bgt.n	800b6c6 <_dtoa_r+0x99e>
 800b658:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b65a:	2b02      	cmp	r3, #2
 800b65c:	dd33      	ble.n	800b6c6 <_dtoa_r+0x99e>
 800b65e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b662:	f1b9 0f00 	cmp.w	r9, #0
 800b666:	d10d      	bne.n	800b684 <_dtoa_r+0x95c>
 800b668:	4621      	mov	r1, r4
 800b66a:	464b      	mov	r3, r9
 800b66c:	2205      	movs	r2, #5
 800b66e:	4628      	mov	r0, r5
 800b670:	f000 ff5c 	bl	800c52c <__multadd>
 800b674:	4601      	mov	r1, r0
 800b676:	4604      	mov	r4, r0
 800b678:	4658      	mov	r0, fp
 800b67a:	f001 f9bd 	bl	800c9f8 <__mcmp>
 800b67e:	2800      	cmp	r0, #0
 800b680:	f73f adb8 	bgt.w	800b1f4 <_dtoa_r+0x4cc>
 800b684:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b686:	9f03      	ldr	r7, [sp, #12]
 800b688:	ea6f 0a03 	mvn.w	sl, r3
 800b68c:	f04f 0800 	mov.w	r8, #0
 800b690:	4621      	mov	r1, r4
 800b692:	4628      	mov	r0, r5
 800b694:	f000 ff28 	bl	800c4e8 <_Bfree>
 800b698:	2e00      	cmp	r6, #0
 800b69a:	f43f aea7 	beq.w	800b3ec <_dtoa_r+0x6c4>
 800b69e:	f1b8 0f00 	cmp.w	r8, #0
 800b6a2:	d005      	beq.n	800b6b0 <_dtoa_r+0x988>
 800b6a4:	45b0      	cmp	r8, r6
 800b6a6:	d003      	beq.n	800b6b0 <_dtoa_r+0x988>
 800b6a8:	4641      	mov	r1, r8
 800b6aa:	4628      	mov	r0, r5
 800b6ac:	f000 ff1c 	bl	800c4e8 <_Bfree>
 800b6b0:	4631      	mov	r1, r6
 800b6b2:	4628      	mov	r0, r5
 800b6b4:	f000 ff18 	bl	800c4e8 <_Bfree>
 800b6b8:	e698      	b.n	800b3ec <_dtoa_r+0x6c4>
 800b6ba:	2400      	movs	r4, #0
 800b6bc:	4626      	mov	r6, r4
 800b6be:	e7e1      	b.n	800b684 <_dtoa_r+0x95c>
 800b6c0:	46c2      	mov	sl, r8
 800b6c2:	4626      	mov	r6, r4
 800b6c4:	e596      	b.n	800b1f4 <_dtoa_r+0x4cc>
 800b6c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	f000 80fd 	beq.w	800b8cc <_dtoa_r+0xba4>
 800b6d2:	2f00      	cmp	r7, #0
 800b6d4:	dd05      	ble.n	800b6e2 <_dtoa_r+0x9ba>
 800b6d6:	4631      	mov	r1, r6
 800b6d8:	463a      	mov	r2, r7
 800b6da:	4628      	mov	r0, r5
 800b6dc:	f001 f91c 	bl	800c918 <__lshift>
 800b6e0:	4606      	mov	r6, r0
 800b6e2:	f1b8 0f00 	cmp.w	r8, #0
 800b6e6:	d05c      	beq.n	800b7a2 <_dtoa_r+0xa7a>
 800b6e8:	4628      	mov	r0, r5
 800b6ea:	6871      	ldr	r1, [r6, #4]
 800b6ec:	f000 febc 	bl	800c468 <_Balloc>
 800b6f0:	4607      	mov	r7, r0
 800b6f2:	b928      	cbnz	r0, 800b700 <_dtoa_r+0x9d8>
 800b6f4:	4602      	mov	r2, r0
 800b6f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b6fa:	4b7f      	ldr	r3, [pc, #508]	; (800b8f8 <_dtoa_r+0xbd0>)
 800b6fc:	f7ff bb28 	b.w	800ad50 <_dtoa_r+0x28>
 800b700:	6932      	ldr	r2, [r6, #16]
 800b702:	f106 010c 	add.w	r1, r6, #12
 800b706:	3202      	adds	r2, #2
 800b708:	0092      	lsls	r2, r2, #2
 800b70a:	300c      	adds	r0, #12
 800b70c:	f7fd fc32 	bl	8008f74 <memcpy>
 800b710:	2201      	movs	r2, #1
 800b712:	4639      	mov	r1, r7
 800b714:	4628      	mov	r0, r5
 800b716:	f001 f8ff 	bl	800c918 <__lshift>
 800b71a:	46b0      	mov	r8, r6
 800b71c:	4606      	mov	r6, r0
 800b71e:	9b03      	ldr	r3, [sp, #12]
 800b720:	3301      	adds	r3, #1
 800b722:	9308      	str	r3, [sp, #32]
 800b724:	9b03      	ldr	r3, [sp, #12]
 800b726:	444b      	add	r3, r9
 800b728:	930a      	str	r3, [sp, #40]	; 0x28
 800b72a:	9b04      	ldr	r3, [sp, #16]
 800b72c:	f003 0301 	and.w	r3, r3, #1
 800b730:	9309      	str	r3, [sp, #36]	; 0x24
 800b732:	9b08      	ldr	r3, [sp, #32]
 800b734:	4621      	mov	r1, r4
 800b736:	3b01      	subs	r3, #1
 800b738:	4658      	mov	r0, fp
 800b73a:	9304      	str	r3, [sp, #16]
 800b73c:	f7ff fa68 	bl	800ac10 <quorem>
 800b740:	4603      	mov	r3, r0
 800b742:	4641      	mov	r1, r8
 800b744:	3330      	adds	r3, #48	; 0x30
 800b746:	9006      	str	r0, [sp, #24]
 800b748:	4658      	mov	r0, fp
 800b74a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b74c:	f001 f954 	bl	800c9f8 <__mcmp>
 800b750:	4632      	mov	r2, r6
 800b752:	4681      	mov	r9, r0
 800b754:	4621      	mov	r1, r4
 800b756:	4628      	mov	r0, r5
 800b758:	f001 f96a 	bl	800ca30 <__mdiff>
 800b75c:	68c2      	ldr	r2, [r0, #12]
 800b75e:	4607      	mov	r7, r0
 800b760:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b762:	bb02      	cbnz	r2, 800b7a6 <_dtoa_r+0xa7e>
 800b764:	4601      	mov	r1, r0
 800b766:	4658      	mov	r0, fp
 800b768:	f001 f946 	bl	800c9f8 <__mcmp>
 800b76c:	4602      	mov	r2, r0
 800b76e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b770:	4639      	mov	r1, r7
 800b772:	4628      	mov	r0, r5
 800b774:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800b778:	f000 feb6 	bl	800c4e8 <_Bfree>
 800b77c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b77e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b780:	9f08      	ldr	r7, [sp, #32]
 800b782:	ea43 0102 	orr.w	r1, r3, r2
 800b786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b788:	430b      	orrs	r3, r1
 800b78a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b78c:	d10d      	bne.n	800b7aa <_dtoa_r+0xa82>
 800b78e:	2b39      	cmp	r3, #57	; 0x39
 800b790:	d029      	beq.n	800b7e6 <_dtoa_r+0xabe>
 800b792:	f1b9 0f00 	cmp.w	r9, #0
 800b796:	dd01      	ble.n	800b79c <_dtoa_r+0xa74>
 800b798:	9b06      	ldr	r3, [sp, #24]
 800b79a:	3331      	adds	r3, #49	; 0x31
 800b79c:	9a04      	ldr	r2, [sp, #16]
 800b79e:	7013      	strb	r3, [r2, #0]
 800b7a0:	e776      	b.n	800b690 <_dtoa_r+0x968>
 800b7a2:	4630      	mov	r0, r6
 800b7a4:	e7b9      	b.n	800b71a <_dtoa_r+0x9f2>
 800b7a6:	2201      	movs	r2, #1
 800b7a8:	e7e2      	b.n	800b770 <_dtoa_r+0xa48>
 800b7aa:	f1b9 0f00 	cmp.w	r9, #0
 800b7ae:	db06      	blt.n	800b7be <_dtoa_r+0xa96>
 800b7b0:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b7b2:	ea41 0909 	orr.w	r9, r1, r9
 800b7b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b7b8:	ea59 0101 	orrs.w	r1, r9, r1
 800b7bc:	d120      	bne.n	800b800 <_dtoa_r+0xad8>
 800b7be:	2a00      	cmp	r2, #0
 800b7c0:	ddec      	ble.n	800b79c <_dtoa_r+0xa74>
 800b7c2:	4659      	mov	r1, fp
 800b7c4:	2201      	movs	r2, #1
 800b7c6:	4628      	mov	r0, r5
 800b7c8:	9308      	str	r3, [sp, #32]
 800b7ca:	f001 f8a5 	bl	800c918 <__lshift>
 800b7ce:	4621      	mov	r1, r4
 800b7d0:	4683      	mov	fp, r0
 800b7d2:	f001 f911 	bl	800c9f8 <__mcmp>
 800b7d6:	2800      	cmp	r0, #0
 800b7d8:	9b08      	ldr	r3, [sp, #32]
 800b7da:	dc02      	bgt.n	800b7e2 <_dtoa_r+0xaba>
 800b7dc:	d1de      	bne.n	800b79c <_dtoa_r+0xa74>
 800b7de:	07da      	lsls	r2, r3, #31
 800b7e0:	d5dc      	bpl.n	800b79c <_dtoa_r+0xa74>
 800b7e2:	2b39      	cmp	r3, #57	; 0x39
 800b7e4:	d1d8      	bne.n	800b798 <_dtoa_r+0xa70>
 800b7e6:	2339      	movs	r3, #57	; 0x39
 800b7e8:	9a04      	ldr	r2, [sp, #16]
 800b7ea:	7013      	strb	r3, [r2, #0]
 800b7ec:	463b      	mov	r3, r7
 800b7ee:	461f      	mov	r7, r3
 800b7f0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800b7f4:	3b01      	subs	r3, #1
 800b7f6:	2a39      	cmp	r2, #57	; 0x39
 800b7f8:	d050      	beq.n	800b89c <_dtoa_r+0xb74>
 800b7fa:	3201      	adds	r2, #1
 800b7fc:	701a      	strb	r2, [r3, #0]
 800b7fe:	e747      	b.n	800b690 <_dtoa_r+0x968>
 800b800:	2a00      	cmp	r2, #0
 800b802:	dd03      	ble.n	800b80c <_dtoa_r+0xae4>
 800b804:	2b39      	cmp	r3, #57	; 0x39
 800b806:	d0ee      	beq.n	800b7e6 <_dtoa_r+0xabe>
 800b808:	3301      	adds	r3, #1
 800b80a:	e7c7      	b.n	800b79c <_dtoa_r+0xa74>
 800b80c:	9a08      	ldr	r2, [sp, #32]
 800b80e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b810:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b814:	428a      	cmp	r2, r1
 800b816:	d02a      	beq.n	800b86e <_dtoa_r+0xb46>
 800b818:	4659      	mov	r1, fp
 800b81a:	2300      	movs	r3, #0
 800b81c:	220a      	movs	r2, #10
 800b81e:	4628      	mov	r0, r5
 800b820:	f000 fe84 	bl	800c52c <__multadd>
 800b824:	45b0      	cmp	r8, r6
 800b826:	4683      	mov	fp, r0
 800b828:	f04f 0300 	mov.w	r3, #0
 800b82c:	f04f 020a 	mov.w	r2, #10
 800b830:	4641      	mov	r1, r8
 800b832:	4628      	mov	r0, r5
 800b834:	d107      	bne.n	800b846 <_dtoa_r+0xb1e>
 800b836:	f000 fe79 	bl	800c52c <__multadd>
 800b83a:	4680      	mov	r8, r0
 800b83c:	4606      	mov	r6, r0
 800b83e:	9b08      	ldr	r3, [sp, #32]
 800b840:	3301      	adds	r3, #1
 800b842:	9308      	str	r3, [sp, #32]
 800b844:	e775      	b.n	800b732 <_dtoa_r+0xa0a>
 800b846:	f000 fe71 	bl	800c52c <__multadd>
 800b84a:	4631      	mov	r1, r6
 800b84c:	4680      	mov	r8, r0
 800b84e:	2300      	movs	r3, #0
 800b850:	220a      	movs	r2, #10
 800b852:	4628      	mov	r0, r5
 800b854:	f000 fe6a 	bl	800c52c <__multadd>
 800b858:	4606      	mov	r6, r0
 800b85a:	e7f0      	b.n	800b83e <_dtoa_r+0xb16>
 800b85c:	f1b9 0f00 	cmp.w	r9, #0
 800b860:	bfcc      	ite	gt
 800b862:	464f      	movgt	r7, r9
 800b864:	2701      	movle	r7, #1
 800b866:	f04f 0800 	mov.w	r8, #0
 800b86a:	9a03      	ldr	r2, [sp, #12]
 800b86c:	4417      	add	r7, r2
 800b86e:	4659      	mov	r1, fp
 800b870:	2201      	movs	r2, #1
 800b872:	4628      	mov	r0, r5
 800b874:	9308      	str	r3, [sp, #32]
 800b876:	f001 f84f 	bl	800c918 <__lshift>
 800b87a:	4621      	mov	r1, r4
 800b87c:	4683      	mov	fp, r0
 800b87e:	f001 f8bb 	bl	800c9f8 <__mcmp>
 800b882:	2800      	cmp	r0, #0
 800b884:	dcb2      	bgt.n	800b7ec <_dtoa_r+0xac4>
 800b886:	d102      	bne.n	800b88e <_dtoa_r+0xb66>
 800b888:	9b08      	ldr	r3, [sp, #32]
 800b88a:	07db      	lsls	r3, r3, #31
 800b88c:	d4ae      	bmi.n	800b7ec <_dtoa_r+0xac4>
 800b88e:	463b      	mov	r3, r7
 800b890:	461f      	mov	r7, r3
 800b892:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b896:	2a30      	cmp	r2, #48	; 0x30
 800b898:	d0fa      	beq.n	800b890 <_dtoa_r+0xb68>
 800b89a:	e6f9      	b.n	800b690 <_dtoa_r+0x968>
 800b89c:	9a03      	ldr	r2, [sp, #12]
 800b89e:	429a      	cmp	r2, r3
 800b8a0:	d1a5      	bne.n	800b7ee <_dtoa_r+0xac6>
 800b8a2:	2331      	movs	r3, #49	; 0x31
 800b8a4:	f10a 0a01 	add.w	sl, sl, #1
 800b8a8:	e779      	b.n	800b79e <_dtoa_r+0xa76>
 800b8aa:	4b14      	ldr	r3, [pc, #80]	; (800b8fc <_dtoa_r+0xbd4>)
 800b8ac:	f7ff baa8 	b.w	800ae00 <_dtoa_r+0xd8>
 800b8b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	f47f aa81 	bne.w	800adba <_dtoa_r+0x92>
 800b8b8:	4b11      	ldr	r3, [pc, #68]	; (800b900 <_dtoa_r+0xbd8>)
 800b8ba:	f7ff baa1 	b.w	800ae00 <_dtoa_r+0xd8>
 800b8be:	f1b9 0f00 	cmp.w	r9, #0
 800b8c2:	dc03      	bgt.n	800b8cc <_dtoa_r+0xba4>
 800b8c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b8c6:	2b02      	cmp	r3, #2
 800b8c8:	f73f aecb 	bgt.w	800b662 <_dtoa_r+0x93a>
 800b8cc:	9f03      	ldr	r7, [sp, #12]
 800b8ce:	4621      	mov	r1, r4
 800b8d0:	4658      	mov	r0, fp
 800b8d2:	f7ff f99d 	bl	800ac10 <quorem>
 800b8d6:	9a03      	ldr	r2, [sp, #12]
 800b8d8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b8dc:	f807 3b01 	strb.w	r3, [r7], #1
 800b8e0:	1aba      	subs	r2, r7, r2
 800b8e2:	4591      	cmp	r9, r2
 800b8e4:	ddba      	ble.n	800b85c <_dtoa_r+0xb34>
 800b8e6:	4659      	mov	r1, fp
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	220a      	movs	r2, #10
 800b8ec:	4628      	mov	r0, r5
 800b8ee:	f000 fe1d 	bl	800c52c <__multadd>
 800b8f2:	4683      	mov	fp, r0
 800b8f4:	e7eb      	b.n	800b8ce <_dtoa_r+0xba6>
 800b8f6:	bf00      	nop
 800b8f8:	0800dce8 	.word	0x0800dce8
 800b8fc:	0800daf4 	.word	0x0800daf4
 800b900:	0800dc69 	.word	0x0800dc69

0800b904 <__sflush_r>:
 800b904:	898a      	ldrh	r2, [r1, #12]
 800b906:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b908:	4605      	mov	r5, r0
 800b90a:	0710      	lsls	r0, r2, #28
 800b90c:	460c      	mov	r4, r1
 800b90e:	d457      	bmi.n	800b9c0 <__sflush_r+0xbc>
 800b910:	684b      	ldr	r3, [r1, #4]
 800b912:	2b00      	cmp	r3, #0
 800b914:	dc04      	bgt.n	800b920 <__sflush_r+0x1c>
 800b916:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b918:	2b00      	cmp	r3, #0
 800b91a:	dc01      	bgt.n	800b920 <__sflush_r+0x1c>
 800b91c:	2000      	movs	r0, #0
 800b91e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b920:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b922:	2e00      	cmp	r6, #0
 800b924:	d0fa      	beq.n	800b91c <__sflush_r+0x18>
 800b926:	2300      	movs	r3, #0
 800b928:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b92c:	682f      	ldr	r7, [r5, #0]
 800b92e:	602b      	str	r3, [r5, #0]
 800b930:	d032      	beq.n	800b998 <__sflush_r+0x94>
 800b932:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b934:	89a3      	ldrh	r3, [r4, #12]
 800b936:	075a      	lsls	r2, r3, #29
 800b938:	d505      	bpl.n	800b946 <__sflush_r+0x42>
 800b93a:	6863      	ldr	r3, [r4, #4]
 800b93c:	1ac0      	subs	r0, r0, r3
 800b93e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b940:	b10b      	cbz	r3, 800b946 <__sflush_r+0x42>
 800b942:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b944:	1ac0      	subs	r0, r0, r3
 800b946:	2300      	movs	r3, #0
 800b948:	4602      	mov	r2, r0
 800b94a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b94c:	4628      	mov	r0, r5
 800b94e:	6a21      	ldr	r1, [r4, #32]
 800b950:	47b0      	blx	r6
 800b952:	1c43      	adds	r3, r0, #1
 800b954:	89a3      	ldrh	r3, [r4, #12]
 800b956:	d106      	bne.n	800b966 <__sflush_r+0x62>
 800b958:	6829      	ldr	r1, [r5, #0]
 800b95a:	291d      	cmp	r1, #29
 800b95c:	d82c      	bhi.n	800b9b8 <__sflush_r+0xb4>
 800b95e:	4a29      	ldr	r2, [pc, #164]	; (800ba04 <__sflush_r+0x100>)
 800b960:	40ca      	lsrs	r2, r1
 800b962:	07d6      	lsls	r6, r2, #31
 800b964:	d528      	bpl.n	800b9b8 <__sflush_r+0xb4>
 800b966:	2200      	movs	r2, #0
 800b968:	6062      	str	r2, [r4, #4]
 800b96a:	6922      	ldr	r2, [r4, #16]
 800b96c:	04d9      	lsls	r1, r3, #19
 800b96e:	6022      	str	r2, [r4, #0]
 800b970:	d504      	bpl.n	800b97c <__sflush_r+0x78>
 800b972:	1c42      	adds	r2, r0, #1
 800b974:	d101      	bne.n	800b97a <__sflush_r+0x76>
 800b976:	682b      	ldr	r3, [r5, #0]
 800b978:	b903      	cbnz	r3, 800b97c <__sflush_r+0x78>
 800b97a:	6560      	str	r0, [r4, #84]	; 0x54
 800b97c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b97e:	602f      	str	r7, [r5, #0]
 800b980:	2900      	cmp	r1, #0
 800b982:	d0cb      	beq.n	800b91c <__sflush_r+0x18>
 800b984:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b988:	4299      	cmp	r1, r3
 800b98a:	d002      	beq.n	800b992 <__sflush_r+0x8e>
 800b98c:	4628      	mov	r0, r5
 800b98e:	f7fd fb07 	bl	8008fa0 <_free_r>
 800b992:	2000      	movs	r0, #0
 800b994:	6360      	str	r0, [r4, #52]	; 0x34
 800b996:	e7c2      	b.n	800b91e <__sflush_r+0x1a>
 800b998:	6a21      	ldr	r1, [r4, #32]
 800b99a:	2301      	movs	r3, #1
 800b99c:	4628      	mov	r0, r5
 800b99e:	47b0      	blx	r6
 800b9a0:	1c41      	adds	r1, r0, #1
 800b9a2:	d1c7      	bne.n	800b934 <__sflush_r+0x30>
 800b9a4:	682b      	ldr	r3, [r5, #0]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d0c4      	beq.n	800b934 <__sflush_r+0x30>
 800b9aa:	2b1d      	cmp	r3, #29
 800b9ac:	d001      	beq.n	800b9b2 <__sflush_r+0xae>
 800b9ae:	2b16      	cmp	r3, #22
 800b9b0:	d101      	bne.n	800b9b6 <__sflush_r+0xb2>
 800b9b2:	602f      	str	r7, [r5, #0]
 800b9b4:	e7b2      	b.n	800b91c <__sflush_r+0x18>
 800b9b6:	89a3      	ldrh	r3, [r4, #12]
 800b9b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9bc:	81a3      	strh	r3, [r4, #12]
 800b9be:	e7ae      	b.n	800b91e <__sflush_r+0x1a>
 800b9c0:	690f      	ldr	r7, [r1, #16]
 800b9c2:	2f00      	cmp	r7, #0
 800b9c4:	d0aa      	beq.n	800b91c <__sflush_r+0x18>
 800b9c6:	0793      	lsls	r3, r2, #30
 800b9c8:	bf18      	it	ne
 800b9ca:	2300      	movne	r3, #0
 800b9cc:	680e      	ldr	r6, [r1, #0]
 800b9ce:	bf08      	it	eq
 800b9d0:	694b      	ldreq	r3, [r1, #20]
 800b9d2:	1bf6      	subs	r6, r6, r7
 800b9d4:	600f      	str	r7, [r1, #0]
 800b9d6:	608b      	str	r3, [r1, #8]
 800b9d8:	2e00      	cmp	r6, #0
 800b9da:	dd9f      	ble.n	800b91c <__sflush_r+0x18>
 800b9dc:	4633      	mov	r3, r6
 800b9de:	463a      	mov	r2, r7
 800b9e0:	4628      	mov	r0, r5
 800b9e2:	6a21      	ldr	r1, [r4, #32]
 800b9e4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b9e8:	47e0      	blx	ip
 800b9ea:	2800      	cmp	r0, #0
 800b9ec:	dc06      	bgt.n	800b9fc <__sflush_r+0xf8>
 800b9ee:	89a3      	ldrh	r3, [r4, #12]
 800b9f0:	f04f 30ff 	mov.w	r0, #4294967295
 800b9f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9f8:	81a3      	strh	r3, [r4, #12]
 800b9fa:	e790      	b.n	800b91e <__sflush_r+0x1a>
 800b9fc:	4407      	add	r7, r0
 800b9fe:	1a36      	subs	r6, r6, r0
 800ba00:	e7ea      	b.n	800b9d8 <__sflush_r+0xd4>
 800ba02:	bf00      	nop
 800ba04:	20400001 	.word	0x20400001

0800ba08 <_fflush_r>:
 800ba08:	b538      	push	{r3, r4, r5, lr}
 800ba0a:	690b      	ldr	r3, [r1, #16]
 800ba0c:	4605      	mov	r5, r0
 800ba0e:	460c      	mov	r4, r1
 800ba10:	b913      	cbnz	r3, 800ba18 <_fflush_r+0x10>
 800ba12:	2500      	movs	r5, #0
 800ba14:	4628      	mov	r0, r5
 800ba16:	bd38      	pop	{r3, r4, r5, pc}
 800ba18:	b118      	cbz	r0, 800ba22 <_fflush_r+0x1a>
 800ba1a:	6983      	ldr	r3, [r0, #24]
 800ba1c:	b90b      	cbnz	r3, 800ba22 <_fflush_r+0x1a>
 800ba1e:	f000 f887 	bl	800bb30 <__sinit>
 800ba22:	4b14      	ldr	r3, [pc, #80]	; (800ba74 <_fflush_r+0x6c>)
 800ba24:	429c      	cmp	r4, r3
 800ba26:	d11b      	bne.n	800ba60 <_fflush_r+0x58>
 800ba28:	686c      	ldr	r4, [r5, #4]
 800ba2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d0ef      	beq.n	800ba12 <_fflush_r+0xa>
 800ba32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ba34:	07d0      	lsls	r0, r2, #31
 800ba36:	d404      	bmi.n	800ba42 <_fflush_r+0x3a>
 800ba38:	0599      	lsls	r1, r3, #22
 800ba3a:	d402      	bmi.n	800ba42 <_fflush_r+0x3a>
 800ba3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba3e:	f000 fc80 	bl	800c342 <__retarget_lock_acquire_recursive>
 800ba42:	4628      	mov	r0, r5
 800ba44:	4621      	mov	r1, r4
 800ba46:	f7ff ff5d 	bl	800b904 <__sflush_r>
 800ba4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ba4c:	4605      	mov	r5, r0
 800ba4e:	07da      	lsls	r2, r3, #31
 800ba50:	d4e0      	bmi.n	800ba14 <_fflush_r+0xc>
 800ba52:	89a3      	ldrh	r3, [r4, #12]
 800ba54:	059b      	lsls	r3, r3, #22
 800ba56:	d4dd      	bmi.n	800ba14 <_fflush_r+0xc>
 800ba58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba5a:	f000 fc73 	bl	800c344 <__retarget_lock_release_recursive>
 800ba5e:	e7d9      	b.n	800ba14 <_fflush_r+0xc>
 800ba60:	4b05      	ldr	r3, [pc, #20]	; (800ba78 <_fflush_r+0x70>)
 800ba62:	429c      	cmp	r4, r3
 800ba64:	d101      	bne.n	800ba6a <_fflush_r+0x62>
 800ba66:	68ac      	ldr	r4, [r5, #8]
 800ba68:	e7df      	b.n	800ba2a <_fflush_r+0x22>
 800ba6a:	4b04      	ldr	r3, [pc, #16]	; (800ba7c <_fflush_r+0x74>)
 800ba6c:	429c      	cmp	r4, r3
 800ba6e:	bf08      	it	eq
 800ba70:	68ec      	ldreq	r4, [r5, #12]
 800ba72:	e7da      	b.n	800ba2a <_fflush_r+0x22>
 800ba74:	0800dd1c 	.word	0x0800dd1c
 800ba78:	0800dd3c 	.word	0x0800dd3c
 800ba7c:	0800dcfc 	.word	0x0800dcfc

0800ba80 <std>:
 800ba80:	2300      	movs	r3, #0
 800ba82:	b510      	push	{r4, lr}
 800ba84:	4604      	mov	r4, r0
 800ba86:	e9c0 3300 	strd	r3, r3, [r0]
 800ba8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ba8e:	6083      	str	r3, [r0, #8]
 800ba90:	8181      	strh	r1, [r0, #12]
 800ba92:	6643      	str	r3, [r0, #100]	; 0x64
 800ba94:	81c2      	strh	r2, [r0, #14]
 800ba96:	6183      	str	r3, [r0, #24]
 800ba98:	4619      	mov	r1, r3
 800ba9a:	2208      	movs	r2, #8
 800ba9c:	305c      	adds	r0, #92	; 0x5c
 800ba9e:	f7fd fa77 	bl	8008f90 <memset>
 800baa2:	4b05      	ldr	r3, [pc, #20]	; (800bab8 <std+0x38>)
 800baa4:	6224      	str	r4, [r4, #32]
 800baa6:	6263      	str	r3, [r4, #36]	; 0x24
 800baa8:	4b04      	ldr	r3, [pc, #16]	; (800babc <std+0x3c>)
 800baaa:	62a3      	str	r3, [r4, #40]	; 0x28
 800baac:	4b04      	ldr	r3, [pc, #16]	; (800bac0 <std+0x40>)
 800baae:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bab0:	4b04      	ldr	r3, [pc, #16]	; (800bac4 <std+0x44>)
 800bab2:	6323      	str	r3, [r4, #48]	; 0x30
 800bab4:	bd10      	pop	{r4, pc}
 800bab6:	bf00      	nop
 800bab8:	0800d375 	.word	0x0800d375
 800babc:	0800d397 	.word	0x0800d397
 800bac0:	0800d3cf 	.word	0x0800d3cf
 800bac4:	0800d3f3 	.word	0x0800d3f3

0800bac8 <_cleanup_r>:
 800bac8:	4901      	ldr	r1, [pc, #4]	; (800bad0 <_cleanup_r+0x8>)
 800baca:	f000 b8af 	b.w	800bc2c <_fwalk_reent>
 800bace:	bf00      	nop
 800bad0:	0800ba09 	.word	0x0800ba09

0800bad4 <__sfmoreglue>:
 800bad4:	2268      	movs	r2, #104	; 0x68
 800bad6:	b570      	push	{r4, r5, r6, lr}
 800bad8:	1e4d      	subs	r5, r1, #1
 800bada:	4355      	muls	r5, r2
 800badc:	460e      	mov	r6, r1
 800bade:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bae2:	f7fd fac5 	bl	8009070 <_malloc_r>
 800bae6:	4604      	mov	r4, r0
 800bae8:	b140      	cbz	r0, 800bafc <__sfmoreglue+0x28>
 800baea:	2100      	movs	r1, #0
 800baec:	e9c0 1600 	strd	r1, r6, [r0]
 800baf0:	300c      	adds	r0, #12
 800baf2:	60a0      	str	r0, [r4, #8]
 800baf4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800baf8:	f7fd fa4a 	bl	8008f90 <memset>
 800bafc:	4620      	mov	r0, r4
 800bafe:	bd70      	pop	{r4, r5, r6, pc}

0800bb00 <__sfp_lock_acquire>:
 800bb00:	4801      	ldr	r0, [pc, #4]	; (800bb08 <__sfp_lock_acquire+0x8>)
 800bb02:	f000 bc1e 	b.w	800c342 <__retarget_lock_acquire_recursive>
 800bb06:	bf00      	nop
 800bb08:	20000805 	.word	0x20000805

0800bb0c <__sfp_lock_release>:
 800bb0c:	4801      	ldr	r0, [pc, #4]	; (800bb14 <__sfp_lock_release+0x8>)
 800bb0e:	f000 bc19 	b.w	800c344 <__retarget_lock_release_recursive>
 800bb12:	bf00      	nop
 800bb14:	20000805 	.word	0x20000805

0800bb18 <__sinit_lock_acquire>:
 800bb18:	4801      	ldr	r0, [pc, #4]	; (800bb20 <__sinit_lock_acquire+0x8>)
 800bb1a:	f000 bc12 	b.w	800c342 <__retarget_lock_acquire_recursive>
 800bb1e:	bf00      	nop
 800bb20:	20000806 	.word	0x20000806

0800bb24 <__sinit_lock_release>:
 800bb24:	4801      	ldr	r0, [pc, #4]	; (800bb2c <__sinit_lock_release+0x8>)
 800bb26:	f000 bc0d 	b.w	800c344 <__retarget_lock_release_recursive>
 800bb2a:	bf00      	nop
 800bb2c:	20000806 	.word	0x20000806

0800bb30 <__sinit>:
 800bb30:	b510      	push	{r4, lr}
 800bb32:	4604      	mov	r4, r0
 800bb34:	f7ff fff0 	bl	800bb18 <__sinit_lock_acquire>
 800bb38:	69a3      	ldr	r3, [r4, #24]
 800bb3a:	b11b      	cbz	r3, 800bb44 <__sinit+0x14>
 800bb3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb40:	f7ff bff0 	b.w	800bb24 <__sinit_lock_release>
 800bb44:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bb48:	6523      	str	r3, [r4, #80]	; 0x50
 800bb4a:	4b13      	ldr	r3, [pc, #76]	; (800bb98 <__sinit+0x68>)
 800bb4c:	4a13      	ldr	r2, [pc, #76]	; (800bb9c <__sinit+0x6c>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	62a2      	str	r2, [r4, #40]	; 0x28
 800bb52:	42a3      	cmp	r3, r4
 800bb54:	bf08      	it	eq
 800bb56:	2301      	moveq	r3, #1
 800bb58:	4620      	mov	r0, r4
 800bb5a:	bf08      	it	eq
 800bb5c:	61a3      	streq	r3, [r4, #24]
 800bb5e:	f000 f81f 	bl	800bba0 <__sfp>
 800bb62:	6060      	str	r0, [r4, #4]
 800bb64:	4620      	mov	r0, r4
 800bb66:	f000 f81b 	bl	800bba0 <__sfp>
 800bb6a:	60a0      	str	r0, [r4, #8]
 800bb6c:	4620      	mov	r0, r4
 800bb6e:	f000 f817 	bl	800bba0 <__sfp>
 800bb72:	2200      	movs	r2, #0
 800bb74:	2104      	movs	r1, #4
 800bb76:	60e0      	str	r0, [r4, #12]
 800bb78:	6860      	ldr	r0, [r4, #4]
 800bb7a:	f7ff ff81 	bl	800ba80 <std>
 800bb7e:	2201      	movs	r2, #1
 800bb80:	2109      	movs	r1, #9
 800bb82:	68a0      	ldr	r0, [r4, #8]
 800bb84:	f7ff ff7c 	bl	800ba80 <std>
 800bb88:	2202      	movs	r2, #2
 800bb8a:	2112      	movs	r1, #18
 800bb8c:	68e0      	ldr	r0, [r4, #12]
 800bb8e:	f7ff ff77 	bl	800ba80 <std>
 800bb92:	2301      	movs	r3, #1
 800bb94:	61a3      	str	r3, [r4, #24]
 800bb96:	e7d1      	b.n	800bb3c <__sinit+0xc>
 800bb98:	0800dae0 	.word	0x0800dae0
 800bb9c:	0800bac9 	.word	0x0800bac9

0800bba0 <__sfp>:
 800bba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bba2:	4607      	mov	r7, r0
 800bba4:	f7ff ffac 	bl	800bb00 <__sfp_lock_acquire>
 800bba8:	4b1e      	ldr	r3, [pc, #120]	; (800bc24 <__sfp+0x84>)
 800bbaa:	681e      	ldr	r6, [r3, #0]
 800bbac:	69b3      	ldr	r3, [r6, #24]
 800bbae:	b913      	cbnz	r3, 800bbb6 <__sfp+0x16>
 800bbb0:	4630      	mov	r0, r6
 800bbb2:	f7ff ffbd 	bl	800bb30 <__sinit>
 800bbb6:	3648      	adds	r6, #72	; 0x48
 800bbb8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bbbc:	3b01      	subs	r3, #1
 800bbbe:	d503      	bpl.n	800bbc8 <__sfp+0x28>
 800bbc0:	6833      	ldr	r3, [r6, #0]
 800bbc2:	b30b      	cbz	r3, 800bc08 <__sfp+0x68>
 800bbc4:	6836      	ldr	r6, [r6, #0]
 800bbc6:	e7f7      	b.n	800bbb8 <__sfp+0x18>
 800bbc8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bbcc:	b9d5      	cbnz	r5, 800bc04 <__sfp+0x64>
 800bbce:	4b16      	ldr	r3, [pc, #88]	; (800bc28 <__sfp+0x88>)
 800bbd0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bbd4:	60e3      	str	r3, [r4, #12]
 800bbd6:	6665      	str	r5, [r4, #100]	; 0x64
 800bbd8:	f000 fbb2 	bl	800c340 <__retarget_lock_init_recursive>
 800bbdc:	f7ff ff96 	bl	800bb0c <__sfp_lock_release>
 800bbe0:	2208      	movs	r2, #8
 800bbe2:	4629      	mov	r1, r5
 800bbe4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bbe8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bbec:	6025      	str	r5, [r4, #0]
 800bbee:	61a5      	str	r5, [r4, #24]
 800bbf0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bbf4:	f7fd f9cc 	bl	8008f90 <memset>
 800bbf8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bbfc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bc00:	4620      	mov	r0, r4
 800bc02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc04:	3468      	adds	r4, #104	; 0x68
 800bc06:	e7d9      	b.n	800bbbc <__sfp+0x1c>
 800bc08:	2104      	movs	r1, #4
 800bc0a:	4638      	mov	r0, r7
 800bc0c:	f7ff ff62 	bl	800bad4 <__sfmoreglue>
 800bc10:	4604      	mov	r4, r0
 800bc12:	6030      	str	r0, [r6, #0]
 800bc14:	2800      	cmp	r0, #0
 800bc16:	d1d5      	bne.n	800bbc4 <__sfp+0x24>
 800bc18:	f7ff ff78 	bl	800bb0c <__sfp_lock_release>
 800bc1c:	230c      	movs	r3, #12
 800bc1e:	603b      	str	r3, [r7, #0]
 800bc20:	e7ee      	b.n	800bc00 <__sfp+0x60>
 800bc22:	bf00      	nop
 800bc24:	0800dae0 	.word	0x0800dae0
 800bc28:	ffff0001 	.word	0xffff0001

0800bc2c <_fwalk_reent>:
 800bc2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc30:	4606      	mov	r6, r0
 800bc32:	4688      	mov	r8, r1
 800bc34:	2700      	movs	r7, #0
 800bc36:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bc3a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bc3e:	f1b9 0901 	subs.w	r9, r9, #1
 800bc42:	d505      	bpl.n	800bc50 <_fwalk_reent+0x24>
 800bc44:	6824      	ldr	r4, [r4, #0]
 800bc46:	2c00      	cmp	r4, #0
 800bc48:	d1f7      	bne.n	800bc3a <_fwalk_reent+0xe>
 800bc4a:	4638      	mov	r0, r7
 800bc4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc50:	89ab      	ldrh	r3, [r5, #12]
 800bc52:	2b01      	cmp	r3, #1
 800bc54:	d907      	bls.n	800bc66 <_fwalk_reent+0x3a>
 800bc56:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bc5a:	3301      	adds	r3, #1
 800bc5c:	d003      	beq.n	800bc66 <_fwalk_reent+0x3a>
 800bc5e:	4629      	mov	r1, r5
 800bc60:	4630      	mov	r0, r6
 800bc62:	47c0      	blx	r8
 800bc64:	4307      	orrs	r7, r0
 800bc66:	3568      	adds	r5, #104	; 0x68
 800bc68:	e7e9      	b.n	800bc3e <_fwalk_reent+0x12>

0800bc6a <rshift>:
 800bc6a:	6903      	ldr	r3, [r0, #16]
 800bc6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bc70:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bc74:	f100 0414 	add.w	r4, r0, #20
 800bc78:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bc7c:	dd46      	ble.n	800bd0c <rshift+0xa2>
 800bc7e:	f011 011f 	ands.w	r1, r1, #31
 800bc82:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bc86:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bc8a:	d10c      	bne.n	800bca6 <rshift+0x3c>
 800bc8c:	4629      	mov	r1, r5
 800bc8e:	f100 0710 	add.w	r7, r0, #16
 800bc92:	42b1      	cmp	r1, r6
 800bc94:	d335      	bcc.n	800bd02 <rshift+0x98>
 800bc96:	1a9b      	subs	r3, r3, r2
 800bc98:	009b      	lsls	r3, r3, #2
 800bc9a:	1eea      	subs	r2, r5, #3
 800bc9c:	4296      	cmp	r6, r2
 800bc9e:	bf38      	it	cc
 800bca0:	2300      	movcc	r3, #0
 800bca2:	4423      	add	r3, r4
 800bca4:	e015      	b.n	800bcd2 <rshift+0x68>
 800bca6:	46a1      	mov	r9, r4
 800bca8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bcac:	f1c1 0820 	rsb	r8, r1, #32
 800bcb0:	40cf      	lsrs	r7, r1
 800bcb2:	f105 0e04 	add.w	lr, r5, #4
 800bcb6:	4576      	cmp	r6, lr
 800bcb8:	46f4      	mov	ip, lr
 800bcba:	d816      	bhi.n	800bcea <rshift+0x80>
 800bcbc:	1a9a      	subs	r2, r3, r2
 800bcbe:	0092      	lsls	r2, r2, #2
 800bcc0:	3a04      	subs	r2, #4
 800bcc2:	3501      	adds	r5, #1
 800bcc4:	42ae      	cmp	r6, r5
 800bcc6:	bf38      	it	cc
 800bcc8:	2200      	movcc	r2, #0
 800bcca:	18a3      	adds	r3, r4, r2
 800bccc:	50a7      	str	r7, [r4, r2]
 800bcce:	b107      	cbz	r7, 800bcd2 <rshift+0x68>
 800bcd0:	3304      	adds	r3, #4
 800bcd2:	42a3      	cmp	r3, r4
 800bcd4:	eba3 0204 	sub.w	r2, r3, r4
 800bcd8:	bf08      	it	eq
 800bcda:	2300      	moveq	r3, #0
 800bcdc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bce0:	6102      	str	r2, [r0, #16]
 800bce2:	bf08      	it	eq
 800bce4:	6143      	streq	r3, [r0, #20]
 800bce6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bcea:	f8dc c000 	ldr.w	ip, [ip]
 800bcee:	fa0c fc08 	lsl.w	ip, ip, r8
 800bcf2:	ea4c 0707 	orr.w	r7, ip, r7
 800bcf6:	f849 7b04 	str.w	r7, [r9], #4
 800bcfa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bcfe:	40cf      	lsrs	r7, r1
 800bd00:	e7d9      	b.n	800bcb6 <rshift+0x4c>
 800bd02:	f851 cb04 	ldr.w	ip, [r1], #4
 800bd06:	f847 cf04 	str.w	ip, [r7, #4]!
 800bd0a:	e7c2      	b.n	800bc92 <rshift+0x28>
 800bd0c:	4623      	mov	r3, r4
 800bd0e:	e7e0      	b.n	800bcd2 <rshift+0x68>

0800bd10 <__hexdig_fun>:
 800bd10:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bd14:	2b09      	cmp	r3, #9
 800bd16:	d802      	bhi.n	800bd1e <__hexdig_fun+0xe>
 800bd18:	3820      	subs	r0, #32
 800bd1a:	b2c0      	uxtb	r0, r0
 800bd1c:	4770      	bx	lr
 800bd1e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bd22:	2b05      	cmp	r3, #5
 800bd24:	d801      	bhi.n	800bd2a <__hexdig_fun+0x1a>
 800bd26:	3847      	subs	r0, #71	; 0x47
 800bd28:	e7f7      	b.n	800bd1a <__hexdig_fun+0xa>
 800bd2a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bd2e:	2b05      	cmp	r3, #5
 800bd30:	d801      	bhi.n	800bd36 <__hexdig_fun+0x26>
 800bd32:	3827      	subs	r0, #39	; 0x27
 800bd34:	e7f1      	b.n	800bd1a <__hexdig_fun+0xa>
 800bd36:	2000      	movs	r0, #0
 800bd38:	4770      	bx	lr
	...

0800bd3c <__gethex>:
 800bd3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd40:	b08b      	sub	sp, #44	; 0x2c
 800bd42:	9305      	str	r3, [sp, #20]
 800bd44:	4bb2      	ldr	r3, [pc, #712]	; (800c010 <__gethex+0x2d4>)
 800bd46:	9002      	str	r0, [sp, #8]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	468b      	mov	fp, r1
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	4690      	mov	r8, r2
 800bd50:	9303      	str	r3, [sp, #12]
 800bd52:	f7f4 f9fd 	bl	8000150 <strlen>
 800bd56:	4682      	mov	sl, r0
 800bd58:	9b03      	ldr	r3, [sp, #12]
 800bd5a:	f8db 2000 	ldr.w	r2, [fp]
 800bd5e:	4403      	add	r3, r0
 800bd60:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800bd64:	9306      	str	r3, [sp, #24]
 800bd66:	1c93      	adds	r3, r2, #2
 800bd68:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800bd6c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800bd70:	32fe      	adds	r2, #254	; 0xfe
 800bd72:	18d1      	adds	r1, r2, r3
 800bd74:	461f      	mov	r7, r3
 800bd76:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bd7a:	9101      	str	r1, [sp, #4]
 800bd7c:	2830      	cmp	r0, #48	; 0x30
 800bd7e:	d0f8      	beq.n	800bd72 <__gethex+0x36>
 800bd80:	f7ff ffc6 	bl	800bd10 <__hexdig_fun>
 800bd84:	4604      	mov	r4, r0
 800bd86:	2800      	cmp	r0, #0
 800bd88:	d13a      	bne.n	800be00 <__gethex+0xc4>
 800bd8a:	4652      	mov	r2, sl
 800bd8c:	4638      	mov	r0, r7
 800bd8e:	9903      	ldr	r1, [sp, #12]
 800bd90:	f001 fb33 	bl	800d3fa <strncmp>
 800bd94:	4605      	mov	r5, r0
 800bd96:	2800      	cmp	r0, #0
 800bd98:	d166      	bne.n	800be68 <__gethex+0x12c>
 800bd9a:	f817 000a 	ldrb.w	r0, [r7, sl]
 800bd9e:	eb07 060a 	add.w	r6, r7, sl
 800bda2:	f7ff ffb5 	bl	800bd10 <__hexdig_fun>
 800bda6:	2800      	cmp	r0, #0
 800bda8:	d060      	beq.n	800be6c <__gethex+0x130>
 800bdaa:	4633      	mov	r3, r6
 800bdac:	7818      	ldrb	r0, [r3, #0]
 800bdae:	461f      	mov	r7, r3
 800bdb0:	2830      	cmp	r0, #48	; 0x30
 800bdb2:	f103 0301 	add.w	r3, r3, #1
 800bdb6:	d0f9      	beq.n	800bdac <__gethex+0x70>
 800bdb8:	f7ff ffaa 	bl	800bd10 <__hexdig_fun>
 800bdbc:	2301      	movs	r3, #1
 800bdbe:	fab0 f480 	clz	r4, r0
 800bdc2:	4635      	mov	r5, r6
 800bdc4:	0964      	lsrs	r4, r4, #5
 800bdc6:	9301      	str	r3, [sp, #4]
 800bdc8:	463a      	mov	r2, r7
 800bdca:	4616      	mov	r6, r2
 800bdcc:	7830      	ldrb	r0, [r6, #0]
 800bdce:	3201      	adds	r2, #1
 800bdd0:	f7ff ff9e 	bl	800bd10 <__hexdig_fun>
 800bdd4:	2800      	cmp	r0, #0
 800bdd6:	d1f8      	bne.n	800bdca <__gethex+0x8e>
 800bdd8:	4652      	mov	r2, sl
 800bdda:	4630      	mov	r0, r6
 800bddc:	9903      	ldr	r1, [sp, #12]
 800bdde:	f001 fb0c 	bl	800d3fa <strncmp>
 800bde2:	b980      	cbnz	r0, 800be06 <__gethex+0xca>
 800bde4:	b94d      	cbnz	r5, 800bdfa <__gethex+0xbe>
 800bde6:	eb06 050a 	add.w	r5, r6, sl
 800bdea:	462a      	mov	r2, r5
 800bdec:	4616      	mov	r6, r2
 800bdee:	7830      	ldrb	r0, [r6, #0]
 800bdf0:	3201      	adds	r2, #1
 800bdf2:	f7ff ff8d 	bl	800bd10 <__hexdig_fun>
 800bdf6:	2800      	cmp	r0, #0
 800bdf8:	d1f8      	bne.n	800bdec <__gethex+0xb0>
 800bdfa:	1bad      	subs	r5, r5, r6
 800bdfc:	00ad      	lsls	r5, r5, #2
 800bdfe:	e004      	b.n	800be0a <__gethex+0xce>
 800be00:	2400      	movs	r4, #0
 800be02:	4625      	mov	r5, r4
 800be04:	e7e0      	b.n	800bdc8 <__gethex+0x8c>
 800be06:	2d00      	cmp	r5, #0
 800be08:	d1f7      	bne.n	800bdfa <__gethex+0xbe>
 800be0a:	7833      	ldrb	r3, [r6, #0]
 800be0c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800be10:	2b50      	cmp	r3, #80	; 0x50
 800be12:	d139      	bne.n	800be88 <__gethex+0x14c>
 800be14:	7873      	ldrb	r3, [r6, #1]
 800be16:	2b2b      	cmp	r3, #43	; 0x2b
 800be18:	d02a      	beq.n	800be70 <__gethex+0x134>
 800be1a:	2b2d      	cmp	r3, #45	; 0x2d
 800be1c:	d02c      	beq.n	800be78 <__gethex+0x13c>
 800be1e:	f04f 0900 	mov.w	r9, #0
 800be22:	1c71      	adds	r1, r6, #1
 800be24:	7808      	ldrb	r0, [r1, #0]
 800be26:	f7ff ff73 	bl	800bd10 <__hexdig_fun>
 800be2a:	1e43      	subs	r3, r0, #1
 800be2c:	b2db      	uxtb	r3, r3
 800be2e:	2b18      	cmp	r3, #24
 800be30:	d82a      	bhi.n	800be88 <__gethex+0x14c>
 800be32:	f1a0 0210 	sub.w	r2, r0, #16
 800be36:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800be3a:	f7ff ff69 	bl	800bd10 <__hexdig_fun>
 800be3e:	1e43      	subs	r3, r0, #1
 800be40:	b2db      	uxtb	r3, r3
 800be42:	2b18      	cmp	r3, #24
 800be44:	d91b      	bls.n	800be7e <__gethex+0x142>
 800be46:	f1b9 0f00 	cmp.w	r9, #0
 800be4a:	d000      	beq.n	800be4e <__gethex+0x112>
 800be4c:	4252      	negs	r2, r2
 800be4e:	4415      	add	r5, r2
 800be50:	f8cb 1000 	str.w	r1, [fp]
 800be54:	b1d4      	cbz	r4, 800be8c <__gethex+0x150>
 800be56:	9b01      	ldr	r3, [sp, #4]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	bf14      	ite	ne
 800be5c:	2700      	movne	r7, #0
 800be5e:	2706      	moveq	r7, #6
 800be60:	4638      	mov	r0, r7
 800be62:	b00b      	add	sp, #44	; 0x2c
 800be64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be68:	463e      	mov	r6, r7
 800be6a:	4625      	mov	r5, r4
 800be6c:	2401      	movs	r4, #1
 800be6e:	e7cc      	b.n	800be0a <__gethex+0xce>
 800be70:	f04f 0900 	mov.w	r9, #0
 800be74:	1cb1      	adds	r1, r6, #2
 800be76:	e7d5      	b.n	800be24 <__gethex+0xe8>
 800be78:	f04f 0901 	mov.w	r9, #1
 800be7c:	e7fa      	b.n	800be74 <__gethex+0x138>
 800be7e:	230a      	movs	r3, #10
 800be80:	fb03 0202 	mla	r2, r3, r2, r0
 800be84:	3a10      	subs	r2, #16
 800be86:	e7d6      	b.n	800be36 <__gethex+0xfa>
 800be88:	4631      	mov	r1, r6
 800be8a:	e7e1      	b.n	800be50 <__gethex+0x114>
 800be8c:	4621      	mov	r1, r4
 800be8e:	1bf3      	subs	r3, r6, r7
 800be90:	3b01      	subs	r3, #1
 800be92:	2b07      	cmp	r3, #7
 800be94:	dc0a      	bgt.n	800beac <__gethex+0x170>
 800be96:	9802      	ldr	r0, [sp, #8]
 800be98:	f000 fae6 	bl	800c468 <_Balloc>
 800be9c:	4604      	mov	r4, r0
 800be9e:	b940      	cbnz	r0, 800beb2 <__gethex+0x176>
 800bea0:	4602      	mov	r2, r0
 800bea2:	21de      	movs	r1, #222	; 0xde
 800bea4:	4b5b      	ldr	r3, [pc, #364]	; (800c014 <__gethex+0x2d8>)
 800bea6:	485c      	ldr	r0, [pc, #368]	; (800c018 <__gethex+0x2dc>)
 800bea8:	f001 fada 	bl	800d460 <__assert_func>
 800beac:	3101      	adds	r1, #1
 800beae:	105b      	asrs	r3, r3, #1
 800beb0:	e7ef      	b.n	800be92 <__gethex+0x156>
 800beb2:	f04f 0b00 	mov.w	fp, #0
 800beb6:	f100 0914 	add.w	r9, r0, #20
 800beba:	f1ca 0301 	rsb	r3, sl, #1
 800bebe:	f8cd 9010 	str.w	r9, [sp, #16]
 800bec2:	f8cd b004 	str.w	fp, [sp, #4]
 800bec6:	9308      	str	r3, [sp, #32]
 800bec8:	42b7      	cmp	r7, r6
 800beca:	d33f      	bcc.n	800bf4c <__gethex+0x210>
 800becc:	9f04      	ldr	r7, [sp, #16]
 800bece:	9b01      	ldr	r3, [sp, #4]
 800bed0:	f847 3b04 	str.w	r3, [r7], #4
 800bed4:	eba7 0709 	sub.w	r7, r7, r9
 800bed8:	10bf      	asrs	r7, r7, #2
 800beda:	6127      	str	r7, [r4, #16]
 800bedc:	4618      	mov	r0, r3
 800bede:	f000 fbb5 	bl	800c64c <__hi0bits>
 800bee2:	017f      	lsls	r7, r7, #5
 800bee4:	f8d8 6000 	ldr.w	r6, [r8]
 800bee8:	1a3f      	subs	r7, r7, r0
 800beea:	42b7      	cmp	r7, r6
 800beec:	dd62      	ble.n	800bfb4 <__gethex+0x278>
 800beee:	1bbf      	subs	r7, r7, r6
 800bef0:	4639      	mov	r1, r7
 800bef2:	4620      	mov	r0, r4
 800bef4:	f000 ff4f 	bl	800cd96 <__any_on>
 800bef8:	4682      	mov	sl, r0
 800befa:	b1a8      	cbz	r0, 800bf28 <__gethex+0x1ec>
 800befc:	f04f 0a01 	mov.w	sl, #1
 800bf00:	1e7b      	subs	r3, r7, #1
 800bf02:	1159      	asrs	r1, r3, #5
 800bf04:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800bf08:	f003 021f 	and.w	r2, r3, #31
 800bf0c:	fa0a f202 	lsl.w	r2, sl, r2
 800bf10:	420a      	tst	r2, r1
 800bf12:	d009      	beq.n	800bf28 <__gethex+0x1ec>
 800bf14:	4553      	cmp	r3, sl
 800bf16:	dd05      	ble.n	800bf24 <__gethex+0x1e8>
 800bf18:	4620      	mov	r0, r4
 800bf1a:	1eb9      	subs	r1, r7, #2
 800bf1c:	f000 ff3b 	bl	800cd96 <__any_on>
 800bf20:	2800      	cmp	r0, #0
 800bf22:	d144      	bne.n	800bfae <__gethex+0x272>
 800bf24:	f04f 0a02 	mov.w	sl, #2
 800bf28:	4639      	mov	r1, r7
 800bf2a:	4620      	mov	r0, r4
 800bf2c:	f7ff fe9d 	bl	800bc6a <rshift>
 800bf30:	443d      	add	r5, r7
 800bf32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bf36:	42ab      	cmp	r3, r5
 800bf38:	da4a      	bge.n	800bfd0 <__gethex+0x294>
 800bf3a:	4621      	mov	r1, r4
 800bf3c:	9802      	ldr	r0, [sp, #8]
 800bf3e:	f000 fad3 	bl	800c4e8 <_Bfree>
 800bf42:	2300      	movs	r3, #0
 800bf44:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bf46:	27a3      	movs	r7, #163	; 0xa3
 800bf48:	6013      	str	r3, [r2, #0]
 800bf4a:	e789      	b.n	800be60 <__gethex+0x124>
 800bf4c:	1e73      	subs	r3, r6, #1
 800bf4e:	9a06      	ldr	r2, [sp, #24]
 800bf50:	9307      	str	r3, [sp, #28]
 800bf52:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bf56:	4293      	cmp	r3, r2
 800bf58:	d019      	beq.n	800bf8e <__gethex+0x252>
 800bf5a:	f1bb 0f20 	cmp.w	fp, #32
 800bf5e:	d107      	bne.n	800bf70 <__gethex+0x234>
 800bf60:	9b04      	ldr	r3, [sp, #16]
 800bf62:	9a01      	ldr	r2, [sp, #4]
 800bf64:	f843 2b04 	str.w	r2, [r3], #4
 800bf68:	9304      	str	r3, [sp, #16]
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	469b      	mov	fp, r3
 800bf6e:	9301      	str	r3, [sp, #4]
 800bf70:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800bf74:	f7ff fecc 	bl	800bd10 <__hexdig_fun>
 800bf78:	9b01      	ldr	r3, [sp, #4]
 800bf7a:	f000 000f 	and.w	r0, r0, #15
 800bf7e:	fa00 f00b 	lsl.w	r0, r0, fp
 800bf82:	4303      	orrs	r3, r0
 800bf84:	9301      	str	r3, [sp, #4]
 800bf86:	f10b 0b04 	add.w	fp, fp, #4
 800bf8a:	9b07      	ldr	r3, [sp, #28]
 800bf8c:	e00d      	b.n	800bfaa <__gethex+0x26e>
 800bf8e:	9a08      	ldr	r2, [sp, #32]
 800bf90:	1e73      	subs	r3, r6, #1
 800bf92:	4413      	add	r3, r2
 800bf94:	42bb      	cmp	r3, r7
 800bf96:	d3e0      	bcc.n	800bf5a <__gethex+0x21e>
 800bf98:	4618      	mov	r0, r3
 800bf9a:	4652      	mov	r2, sl
 800bf9c:	9903      	ldr	r1, [sp, #12]
 800bf9e:	9309      	str	r3, [sp, #36]	; 0x24
 800bfa0:	f001 fa2b 	bl	800d3fa <strncmp>
 800bfa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfa6:	2800      	cmp	r0, #0
 800bfa8:	d1d7      	bne.n	800bf5a <__gethex+0x21e>
 800bfaa:	461e      	mov	r6, r3
 800bfac:	e78c      	b.n	800bec8 <__gethex+0x18c>
 800bfae:	f04f 0a03 	mov.w	sl, #3
 800bfb2:	e7b9      	b.n	800bf28 <__gethex+0x1ec>
 800bfb4:	da09      	bge.n	800bfca <__gethex+0x28e>
 800bfb6:	1bf7      	subs	r7, r6, r7
 800bfb8:	4621      	mov	r1, r4
 800bfba:	463a      	mov	r2, r7
 800bfbc:	9802      	ldr	r0, [sp, #8]
 800bfbe:	f000 fcab 	bl	800c918 <__lshift>
 800bfc2:	4604      	mov	r4, r0
 800bfc4:	1bed      	subs	r5, r5, r7
 800bfc6:	f100 0914 	add.w	r9, r0, #20
 800bfca:	f04f 0a00 	mov.w	sl, #0
 800bfce:	e7b0      	b.n	800bf32 <__gethex+0x1f6>
 800bfd0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800bfd4:	42a8      	cmp	r0, r5
 800bfd6:	dd72      	ble.n	800c0be <__gethex+0x382>
 800bfd8:	1b45      	subs	r5, r0, r5
 800bfda:	42ae      	cmp	r6, r5
 800bfdc:	dc35      	bgt.n	800c04a <__gethex+0x30e>
 800bfde:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bfe2:	2b02      	cmp	r3, #2
 800bfe4:	d029      	beq.n	800c03a <__gethex+0x2fe>
 800bfe6:	2b03      	cmp	r3, #3
 800bfe8:	d02b      	beq.n	800c042 <__gethex+0x306>
 800bfea:	2b01      	cmp	r3, #1
 800bfec:	d11c      	bne.n	800c028 <__gethex+0x2ec>
 800bfee:	42ae      	cmp	r6, r5
 800bff0:	d11a      	bne.n	800c028 <__gethex+0x2ec>
 800bff2:	2e01      	cmp	r6, #1
 800bff4:	d112      	bne.n	800c01c <__gethex+0x2e0>
 800bff6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bffa:	9a05      	ldr	r2, [sp, #20]
 800bffc:	2762      	movs	r7, #98	; 0x62
 800bffe:	6013      	str	r3, [r2, #0]
 800c000:	2301      	movs	r3, #1
 800c002:	6123      	str	r3, [r4, #16]
 800c004:	f8c9 3000 	str.w	r3, [r9]
 800c008:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c00a:	601c      	str	r4, [r3, #0]
 800c00c:	e728      	b.n	800be60 <__gethex+0x124>
 800c00e:	bf00      	nop
 800c010:	0800ddc4 	.word	0x0800ddc4
 800c014:	0800dce8 	.word	0x0800dce8
 800c018:	0800dd5c 	.word	0x0800dd5c
 800c01c:	4620      	mov	r0, r4
 800c01e:	1e71      	subs	r1, r6, #1
 800c020:	f000 feb9 	bl	800cd96 <__any_on>
 800c024:	2800      	cmp	r0, #0
 800c026:	d1e6      	bne.n	800bff6 <__gethex+0x2ba>
 800c028:	4621      	mov	r1, r4
 800c02a:	9802      	ldr	r0, [sp, #8]
 800c02c:	f000 fa5c 	bl	800c4e8 <_Bfree>
 800c030:	2300      	movs	r3, #0
 800c032:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c034:	2750      	movs	r7, #80	; 0x50
 800c036:	6013      	str	r3, [r2, #0]
 800c038:	e712      	b.n	800be60 <__gethex+0x124>
 800c03a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d1f3      	bne.n	800c028 <__gethex+0x2ec>
 800c040:	e7d9      	b.n	800bff6 <__gethex+0x2ba>
 800c042:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c044:	2b00      	cmp	r3, #0
 800c046:	d1d6      	bne.n	800bff6 <__gethex+0x2ba>
 800c048:	e7ee      	b.n	800c028 <__gethex+0x2ec>
 800c04a:	1e6f      	subs	r7, r5, #1
 800c04c:	f1ba 0f00 	cmp.w	sl, #0
 800c050:	d132      	bne.n	800c0b8 <__gethex+0x37c>
 800c052:	b127      	cbz	r7, 800c05e <__gethex+0x322>
 800c054:	4639      	mov	r1, r7
 800c056:	4620      	mov	r0, r4
 800c058:	f000 fe9d 	bl	800cd96 <__any_on>
 800c05c:	4682      	mov	sl, r0
 800c05e:	2101      	movs	r1, #1
 800c060:	117b      	asrs	r3, r7, #5
 800c062:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c066:	f007 071f 	and.w	r7, r7, #31
 800c06a:	fa01 f707 	lsl.w	r7, r1, r7
 800c06e:	421f      	tst	r7, r3
 800c070:	f04f 0702 	mov.w	r7, #2
 800c074:	4629      	mov	r1, r5
 800c076:	4620      	mov	r0, r4
 800c078:	bf18      	it	ne
 800c07a:	f04a 0a02 	orrne.w	sl, sl, #2
 800c07e:	1b76      	subs	r6, r6, r5
 800c080:	f7ff fdf3 	bl	800bc6a <rshift>
 800c084:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c088:	f1ba 0f00 	cmp.w	sl, #0
 800c08c:	d048      	beq.n	800c120 <__gethex+0x3e4>
 800c08e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c092:	2b02      	cmp	r3, #2
 800c094:	d015      	beq.n	800c0c2 <__gethex+0x386>
 800c096:	2b03      	cmp	r3, #3
 800c098:	d017      	beq.n	800c0ca <__gethex+0x38e>
 800c09a:	2b01      	cmp	r3, #1
 800c09c:	d109      	bne.n	800c0b2 <__gethex+0x376>
 800c09e:	f01a 0f02 	tst.w	sl, #2
 800c0a2:	d006      	beq.n	800c0b2 <__gethex+0x376>
 800c0a4:	f8d9 0000 	ldr.w	r0, [r9]
 800c0a8:	ea4a 0a00 	orr.w	sl, sl, r0
 800c0ac:	f01a 0f01 	tst.w	sl, #1
 800c0b0:	d10e      	bne.n	800c0d0 <__gethex+0x394>
 800c0b2:	f047 0710 	orr.w	r7, r7, #16
 800c0b6:	e033      	b.n	800c120 <__gethex+0x3e4>
 800c0b8:	f04f 0a01 	mov.w	sl, #1
 800c0bc:	e7cf      	b.n	800c05e <__gethex+0x322>
 800c0be:	2701      	movs	r7, #1
 800c0c0:	e7e2      	b.n	800c088 <__gethex+0x34c>
 800c0c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c0c4:	f1c3 0301 	rsb	r3, r3, #1
 800c0c8:	9315      	str	r3, [sp, #84]	; 0x54
 800c0ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d0f0      	beq.n	800c0b2 <__gethex+0x376>
 800c0d0:	f04f 0c00 	mov.w	ip, #0
 800c0d4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c0d8:	f104 0314 	add.w	r3, r4, #20
 800c0dc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c0e0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0ea:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c0ee:	d01c      	beq.n	800c12a <__gethex+0x3ee>
 800c0f0:	3201      	adds	r2, #1
 800c0f2:	6002      	str	r2, [r0, #0]
 800c0f4:	2f02      	cmp	r7, #2
 800c0f6:	f104 0314 	add.w	r3, r4, #20
 800c0fa:	d13d      	bne.n	800c178 <__gethex+0x43c>
 800c0fc:	f8d8 2000 	ldr.w	r2, [r8]
 800c100:	3a01      	subs	r2, #1
 800c102:	42b2      	cmp	r2, r6
 800c104:	d10a      	bne.n	800c11c <__gethex+0x3e0>
 800c106:	2201      	movs	r2, #1
 800c108:	1171      	asrs	r1, r6, #5
 800c10a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c10e:	f006 061f 	and.w	r6, r6, #31
 800c112:	fa02 f606 	lsl.w	r6, r2, r6
 800c116:	421e      	tst	r6, r3
 800c118:	bf18      	it	ne
 800c11a:	4617      	movne	r7, r2
 800c11c:	f047 0720 	orr.w	r7, r7, #32
 800c120:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c122:	601c      	str	r4, [r3, #0]
 800c124:	9b05      	ldr	r3, [sp, #20]
 800c126:	601d      	str	r5, [r3, #0]
 800c128:	e69a      	b.n	800be60 <__gethex+0x124>
 800c12a:	4299      	cmp	r1, r3
 800c12c:	f843 cc04 	str.w	ip, [r3, #-4]
 800c130:	d8d8      	bhi.n	800c0e4 <__gethex+0x3a8>
 800c132:	68a3      	ldr	r3, [r4, #8]
 800c134:	459b      	cmp	fp, r3
 800c136:	db17      	blt.n	800c168 <__gethex+0x42c>
 800c138:	6861      	ldr	r1, [r4, #4]
 800c13a:	9802      	ldr	r0, [sp, #8]
 800c13c:	3101      	adds	r1, #1
 800c13e:	f000 f993 	bl	800c468 <_Balloc>
 800c142:	4681      	mov	r9, r0
 800c144:	b918      	cbnz	r0, 800c14e <__gethex+0x412>
 800c146:	4602      	mov	r2, r0
 800c148:	2184      	movs	r1, #132	; 0x84
 800c14a:	4b19      	ldr	r3, [pc, #100]	; (800c1b0 <__gethex+0x474>)
 800c14c:	e6ab      	b.n	800bea6 <__gethex+0x16a>
 800c14e:	6922      	ldr	r2, [r4, #16]
 800c150:	f104 010c 	add.w	r1, r4, #12
 800c154:	3202      	adds	r2, #2
 800c156:	0092      	lsls	r2, r2, #2
 800c158:	300c      	adds	r0, #12
 800c15a:	f7fc ff0b 	bl	8008f74 <memcpy>
 800c15e:	4621      	mov	r1, r4
 800c160:	9802      	ldr	r0, [sp, #8]
 800c162:	f000 f9c1 	bl	800c4e8 <_Bfree>
 800c166:	464c      	mov	r4, r9
 800c168:	6923      	ldr	r3, [r4, #16]
 800c16a:	1c5a      	adds	r2, r3, #1
 800c16c:	6122      	str	r2, [r4, #16]
 800c16e:	2201      	movs	r2, #1
 800c170:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c174:	615a      	str	r2, [r3, #20]
 800c176:	e7bd      	b.n	800c0f4 <__gethex+0x3b8>
 800c178:	6922      	ldr	r2, [r4, #16]
 800c17a:	455a      	cmp	r2, fp
 800c17c:	dd0b      	ble.n	800c196 <__gethex+0x45a>
 800c17e:	2101      	movs	r1, #1
 800c180:	4620      	mov	r0, r4
 800c182:	f7ff fd72 	bl	800bc6a <rshift>
 800c186:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c18a:	3501      	adds	r5, #1
 800c18c:	42ab      	cmp	r3, r5
 800c18e:	f6ff aed4 	blt.w	800bf3a <__gethex+0x1fe>
 800c192:	2701      	movs	r7, #1
 800c194:	e7c2      	b.n	800c11c <__gethex+0x3e0>
 800c196:	f016 061f 	ands.w	r6, r6, #31
 800c19a:	d0fa      	beq.n	800c192 <__gethex+0x456>
 800c19c:	4453      	add	r3, sl
 800c19e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c1a2:	f000 fa53 	bl	800c64c <__hi0bits>
 800c1a6:	f1c6 0620 	rsb	r6, r6, #32
 800c1aa:	42b0      	cmp	r0, r6
 800c1ac:	dbe7      	blt.n	800c17e <__gethex+0x442>
 800c1ae:	e7f0      	b.n	800c192 <__gethex+0x456>
 800c1b0:	0800dce8 	.word	0x0800dce8

0800c1b4 <L_shift>:
 800c1b4:	f1c2 0208 	rsb	r2, r2, #8
 800c1b8:	0092      	lsls	r2, r2, #2
 800c1ba:	b570      	push	{r4, r5, r6, lr}
 800c1bc:	f1c2 0620 	rsb	r6, r2, #32
 800c1c0:	6843      	ldr	r3, [r0, #4]
 800c1c2:	6804      	ldr	r4, [r0, #0]
 800c1c4:	fa03 f506 	lsl.w	r5, r3, r6
 800c1c8:	432c      	orrs	r4, r5
 800c1ca:	40d3      	lsrs	r3, r2
 800c1cc:	6004      	str	r4, [r0, #0]
 800c1ce:	f840 3f04 	str.w	r3, [r0, #4]!
 800c1d2:	4288      	cmp	r0, r1
 800c1d4:	d3f4      	bcc.n	800c1c0 <L_shift+0xc>
 800c1d6:	bd70      	pop	{r4, r5, r6, pc}

0800c1d8 <__match>:
 800c1d8:	b530      	push	{r4, r5, lr}
 800c1da:	6803      	ldr	r3, [r0, #0]
 800c1dc:	3301      	adds	r3, #1
 800c1de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c1e2:	b914      	cbnz	r4, 800c1ea <__match+0x12>
 800c1e4:	6003      	str	r3, [r0, #0]
 800c1e6:	2001      	movs	r0, #1
 800c1e8:	bd30      	pop	{r4, r5, pc}
 800c1ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1ee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c1f2:	2d19      	cmp	r5, #25
 800c1f4:	bf98      	it	ls
 800c1f6:	3220      	addls	r2, #32
 800c1f8:	42a2      	cmp	r2, r4
 800c1fa:	d0f0      	beq.n	800c1de <__match+0x6>
 800c1fc:	2000      	movs	r0, #0
 800c1fe:	e7f3      	b.n	800c1e8 <__match+0x10>

0800c200 <__hexnan>:
 800c200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c204:	2500      	movs	r5, #0
 800c206:	680b      	ldr	r3, [r1, #0]
 800c208:	4682      	mov	sl, r0
 800c20a:	115e      	asrs	r6, r3, #5
 800c20c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c210:	f013 031f 	ands.w	r3, r3, #31
 800c214:	bf18      	it	ne
 800c216:	3604      	addne	r6, #4
 800c218:	1f37      	subs	r7, r6, #4
 800c21a:	46b9      	mov	r9, r7
 800c21c:	463c      	mov	r4, r7
 800c21e:	46ab      	mov	fp, r5
 800c220:	b087      	sub	sp, #28
 800c222:	4690      	mov	r8, r2
 800c224:	6802      	ldr	r2, [r0, #0]
 800c226:	9301      	str	r3, [sp, #4]
 800c228:	f846 5c04 	str.w	r5, [r6, #-4]
 800c22c:	9502      	str	r5, [sp, #8]
 800c22e:	7851      	ldrb	r1, [r2, #1]
 800c230:	1c53      	adds	r3, r2, #1
 800c232:	9303      	str	r3, [sp, #12]
 800c234:	b341      	cbz	r1, 800c288 <__hexnan+0x88>
 800c236:	4608      	mov	r0, r1
 800c238:	9205      	str	r2, [sp, #20]
 800c23a:	9104      	str	r1, [sp, #16]
 800c23c:	f7ff fd68 	bl	800bd10 <__hexdig_fun>
 800c240:	2800      	cmp	r0, #0
 800c242:	d14f      	bne.n	800c2e4 <__hexnan+0xe4>
 800c244:	9904      	ldr	r1, [sp, #16]
 800c246:	9a05      	ldr	r2, [sp, #20]
 800c248:	2920      	cmp	r1, #32
 800c24a:	d818      	bhi.n	800c27e <__hexnan+0x7e>
 800c24c:	9b02      	ldr	r3, [sp, #8]
 800c24e:	459b      	cmp	fp, r3
 800c250:	dd13      	ble.n	800c27a <__hexnan+0x7a>
 800c252:	454c      	cmp	r4, r9
 800c254:	d206      	bcs.n	800c264 <__hexnan+0x64>
 800c256:	2d07      	cmp	r5, #7
 800c258:	dc04      	bgt.n	800c264 <__hexnan+0x64>
 800c25a:	462a      	mov	r2, r5
 800c25c:	4649      	mov	r1, r9
 800c25e:	4620      	mov	r0, r4
 800c260:	f7ff ffa8 	bl	800c1b4 <L_shift>
 800c264:	4544      	cmp	r4, r8
 800c266:	d950      	bls.n	800c30a <__hexnan+0x10a>
 800c268:	2300      	movs	r3, #0
 800c26a:	f1a4 0904 	sub.w	r9, r4, #4
 800c26e:	f844 3c04 	str.w	r3, [r4, #-4]
 800c272:	461d      	mov	r5, r3
 800c274:	464c      	mov	r4, r9
 800c276:	f8cd b008 	str.w	fp, [sp, #8]
 800c27a:	9a03      	ldr	r2, [sp, #12]
 800c27c:	e7d7      	b.n	800c22e <__hexnan+0x2e>
 800c27e:	2929      	cmp	r1, #41	; 0x29
 800c280:	d156      	bne.n	800c330 <__hexnan+0x130>
 800c282:	3202      	adds	r2, #2
 800c284:	f8ca 2000 	str.w	r2, [sl]
 800c288:	f1bb 0f00 	cmp.w	fp, #0
 800c28c:	d050      	beq.n	800c330 <__hexnan+0x130>
 800c28e:	454c      	cmp	r4, r9
 800c290:	d206      	bcs.n	800c2a0 <__hexnan+0xa0>
 800c292:	2d07      	cmp	r5, #7
 800c294:	dc04      	bgt.n	800c2a0 <__hexnan+0xa0>
 800c296:	462a      	mov	r2, r5
 800c298:	4649      	mov	r1, r9
 800c29a:	4620      	mov	r0, r4
 800c29c:	f7ff ff8a 	bl	800c1b4 <L_shift>
 800c2a0:	4544      	cmp	r4, r8
 800c2a2:	d934      	bls.n	800c30e <__hexnan+0x10e>
 800c2a4:	4623      	mov	r3, r4
 800c2a6:	f1a8 0204 	sub.w	r2, r8, #4
 800c2aa:	f853 1b04 	ldr.w	r1, [r3], #4
 800c2ae:	429f      	cmp	r7, r3
 800c2b0:	f842 1f04 	str.w	r1, [r2, #4]!
 800c2b4:	d2f9      	bcs.n	800c2aa <__hexnan+0xaa>
 800c2b6:	1b3b      	subs	r3, r7, r4
 800c2b8:	f023 0303 	bic.w	r3, r3, #3
 800c2bc:	3304      	adds	r3, #4
 800c2be:	3401      	adds	r4, #1
 800c2c0:	3e03      	subs	r6, #3
 800c2c2:	42b4      	cmp	r4, r6
 800c2c4:	bf88      	it	hi
 800c2c6:	2304      	movhi	r3, #4
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	4443      	add	r3, r8
 800c2cc:	f843 2b04 	str.w	r2, [r3], #4
 800c2d0:	429f      	cmp	r7, r3
 800c2d2:	d2fb      	bcs.n	800c2cc <__hexnan+0xcc>
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	b91b      	cbnz	r3, 800c2e0 <__hexnan+0xe0>
 800c2d8:	4547      	cmp	r7, r8
 800c2da:	d127      	bne.n	800c32c <__hexnan+0x12c>
 800c2dc:	2301      	movs	r3, #1
 800c2de:	603b      	str	r3, [r7, #0]
 800c2e0:	2005      	movs	r0, #5
 800c2e2:	e026      	b.n	800c332 <__hexnan+0x132>
 800c2e4:	3501      	adds	r5, #1
 800c2e6:	2d08      	cmp	r5, #8
 800c2e8:	f10b 0b01 	add.w	fp, fp, #1
 800c2ec:	dd06      	ble.n	800c2fc <__hexnan+0xfc>
 800c2ee:	4544      	cmp	r4, r8
 800c2f0:	d9c3      	bls.n	800c27a <__hexnan+0x7a>
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	2501      	movs	r5, #1
 800c2f6:	f844 3c04 	str.w	r3, [r4, #-4]
 800c2fa:	3c04      	subs	r4, #4
 800c2fc:	6822      	ldr	r2, [r4, #0]
 800c2fe:	f000 000f 	and.w	r0, r0, #15
 800c302:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c306:	6022      	str	r2, [r4, #0]
 800c308:	e7b7      	b.n	800c27a <__hexnan+0x7a>
 800c30a:	2508      	movs	r5, #8
 800c30c:	e7b5      	b.n	800c27a <__hexnan+0x7a>
 800c30e:	9b01      	ldr	r3, [sp, #4]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d0df      	beq.n	800c2d4 <__hexnan+0xd4>
 800c314:	f04f 32ff 	mov.w	r2, #4294967295
 800c318:	f1c3 0320 	rsb	r3, r3, #32
 800c31c:	fa22 f303 	lsr.w	r3, r2, r3
 800c320:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c324:	401a      	ands	r2, r3
 800c326:	f846 2c04 	str.w	r2, [r6, #-4]
 800c32a:	e7d3      	b.n	800c2d4 <__hexnan+0xd4>
 800c32c:	3f04      	subs	r7, #4
 800c32e:	e7d1      	b.n	800c2d4 <__hexnan+0xd4>
 800c330:	2004      	movs	r0, #4
 800c332:	b007      	add	sp, #28
 800c334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c338 <_localeconv_r>:
 800c338:	4800      	ldr	r0, [pc, #0]	; (800c33c <_localeconv_r+0x4>)
 800c33a:	4770      	bx	lr
 800c33c:	20000164 	.word	0x20000164

0800c340 <__retarget_lock_init_recursive>:
 800c340:	4770      	bx	lr

0800c342 <__retarget_lock_acquire_recursive>:
 800c342:	4770      	bx	lr

0800c344 <__retarget_lock_release_recursive>:
 800c344:	4770      	bx	lr

0800c346 <__swhatbuf_r>:
 800c346:	b570      	push	{r4, r5, r6, lr}
 800c348:	460e      	mov	r6, r1
 800c34a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c34e:	4614      	mov	r4, r2
 800c350:	2900      	cmp	r1, #0
 800c352:	461d      	mov	r5, r3
 800c354:	b096      	sub	sp, #88	; 0x58
 800c356:	da08      	bge.n	800c36a <__swhatbuf_r+0x24>
 800c358:	2200      	movs	r2, #0
 800c35a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c35e:	602a      	str	r2, [r5, #0]
 800c360:	061a      	lsls	r2, r3, #24
 800c362:	d410      	bmi.n	800c386 <__swhatbuf_r+0x40>
 800c364:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c368:	e00e      	b.n	800c388 <__swhatbuf_r+0x42>
 800c36a:	466a      	mov	r2, sp
 800c36c:	f001 f8b8 	bl	800d4e0 <_fstat_r>
 800c370:	2800      	cmp	r0, #0
 800c372:	dbf1      	blt.n	800c358 <__swhatbuf_r+0x12>
 800c374:	9a01      	ldr	r2, [sp, #4]
 800c376:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c37a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c37e:	425a      	negs	r2, r3
 800c380:	415a      	adcs	r2, r3
 800c382:	602a      	str	r2, [r5, #0]
 800c384:	e7ee      	b.n	800c364 <__swhatbuf_r+0x1e>
 800c386:	2340      	movs	r3, #64	; 0x40
 800c388:	2000      	movs	r0, #0
 800c38a:	6023      	str	r3, [r4, #0]
 800c38c:	b016      	add	sp, #88	; 0x58
 800c38e:	bd70      	pop	{r4, r5, r6, pc}

0800c390 <__smakebuf_r>:
 800c390:	898b      	ldrh	r3, [r1, #12]
 800c392:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c394:	079d      	lsls	r5, r3, #30
 800c396:	4606      	mov	r6, r0
 800c398:	460c      	mov	r4, r1
 800c39a:	d507      	bpl.n	800c3ac <__smakebuf_r+0x1c>
 800c39c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c3a0:	6023      	str	r3, [r4, #0]
 800c3a2:	6123      	str	r3, [r4, #16]
 800c3a4:	2301      	movs	r3, #1
 800c3a6:	6163      	str	r3, [r4, #20]
 800c3a8:	b002      	add	sp, #8
 800c3aa:	bd70      	pop	{r4, r5, r6, pc}
 800c3ac:	466a      	mov	r2, sp
 800c3ae:	ab01      	add	r3, sp, #4
 800c3b0:	f7ff ffc9 	bl	800c346 <__swhatbuf_r>
 800c3b4:	9900      	ldr	r1, [sp, #0]
 800c3b6:	4605      	mov	r5, r0
 800c3b8:	4630      	mov	r0, r6
 800c3ba:	f7fc fe59 	bl	8009070 <_malloc_r>
 800c3be:	b948      	cbnz	r0, 800c3d4 <__smakebuf_r+0x44>
 800c3c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3c4:	059a      	lsls	r2, r3, #22
 800c3c6:	d4ef      	bmi.n	800c3a8 <__smakebuf_r+0x18>
 800c3c8:	f023 0303 	bic.w	r3, r3, #3
 800c3cc:	f043 0302 	orr.w	r3, r3, #2
 800c3d0:	81a3      	strh	r3, [r4, #12]
 800c3d2:	e7e3      	b.n	800c39c <__smakebuf_r+0xc>
 800c3d4:	4b0d      	ldr	r3, [pc, #52]	; (800c40c <__smakebuf_r+0x7c>)
 800c3d6:	62b3      	str	r3, [r6, #40]	; 0x28
 800c3d8:	89a3      	ldrh	r3, [r4, #12]
 800c3da:	6020      	str	r0, [r4, #0]
 800c3dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3e0:	81a3      	strh	r3, [r4, #12]
 800c3e2:	9b00      	ldr	r3, [sp, #0]
 800c3e4:	6120      	str	r0, [r4, #16]
 800c3e6:	6163      	str	r3, [r4, #20]
 800c3e8:	9b01      	ldr	r3, [sp, #4]
 800c3ea:	b15b      	cbz	r3, 800c404 <__smakebuf_r+0x74>
 800c3ec:	4630      	mov	r0, r6
 800c3ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3f2:	f001 f887 	bl	800d504 <_isatty_r>
 800c3f6:	b128      	cbz	r0, 800c404 <__smakebuf_r+0x74>
 800c3f8:	89a3      	ldrh	r3, [r4, #12]
 800c3fa:	f023 0303 	bic.w	r3, r3, #3
 800c3fe:	f043 0301 	orr.w	r3, r3, #1
 800c402:	81a3      	strh	r3, [r4, #12]
 800c404:	89a0      	ldrh	r0, [r4, #12]
 800c406:	4305      	orrs	r5, r0
 800c408:	81a5      	strh	r5, [r4, #12]
 800c40a:	e7cd      	b.n	800c3a8 <__smakebuf_r+0x18>
 800c40c:	0800bac9 	.word	0x0800bac9

0800c410 <__ascii_mbtowc>:
 800c410:	b082      	sub	sp, #8
 800c412:	b901      	cbnz	r1, 800c416 <__ascii_mbtowc+0x6>
 800c414:	a901      	add	r1, sp, #4
 800c416:	b142      	cbz	r2, 800c42a <__ascii_mbtowc+0x1a>
 800c418:	b14b      	cbz	r3, 800c42e <__ascii_mbtowc+0x1e>
 800c41a:	7813      	ldrb	r3, [r2, #0]
 800c41c:	600b      	str	r3, [r1, #0]
 800c41e:	7812      	ldrb	r2, [r2, #0]
 800c420:	1e10      	subs	r0, r2, #0
 800c422:	bf18      	it	ne
 800c424:	2001      	movne	r0, #1
 800c426:	b002      	add	sp, #8
 800c428:	4770      	bx	lr
 800c42a:	4610      	mov	r0, r2
 800c42c:	e7fb      	b.n	800c426 <__ascii_mbtowc+0x16>
 800c42e:	f06f 0001 	mvn.w	r0, #1
 800c432:	e7f8      	b.n	800c426 <__ascii_mbtowc+0x16>

0800c434 <memchr>:
 800c434:	4603      	mov	r3, r0
 800c436:	b510      	push	{r4, lr}
 800c438:	b2c9      	uxtb	r1, r1
 800c43a:	4402      	add	r2, r0
 800c43c:	4293      	cmp	r3, r2
 800c43e:	4618      	mov	r0, r3
 800c440:	d101      	bne.n	800c446 <memchr+0x12>
 800c442:	2000      	movs	r0, #0
 800c444:	e003      	b.n	800c44e <memchr+0x1a>
 800c446:	7804      	ldrb	r4, [r0, #0]
 800c448:	3301      	adds	r3, #1
 800c44a:	428c      	cmp	r4, r1
 800c44c:	d1f6      	bne.n	800c43c <memchr+0x8>
 800c44e:	bd10      	pop	{r4, pc}

0800c450 <__malloc_lock>:
 800c450:	4801      	ldr	r0, [pc, #4]	; (800c458 <__malloc_lock+0x8>)
 800c452:	f7ff bf76 	b.w	800c342 <__retarget_lock_acquire_recursive>
 800c456:	bf00      	nop
 800c458:	20000804 	.word	0x20000804

0800c45c <__malloc_unlock>:
 800c45c:	4801      	ldr	r0, [pc, #4]	; (800c464 <__malloc_unlock+0x8>)
 800c45e:	f7ff bf71 	b.w	800c344 <__retarget_lock_release_recursive>
 800c462:	bf00      	nop
 800c464:	20000804 	.word	0x20000804

0800c468 <_Balloc>:
 800c468:	b570      	push	{r4, r5, r6, lr}
 800c46a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c46c:	4604      	mov	r4, r0
 800c46e:	460d      	mov	r5, r1
 800c470:	b976      	cbnz	r6, 800c490 <_Balloc+0x28>
 800c472:	2010      	movs	r0, #16
 800c474:	f7fc fd6e 	bl	8008f54 <malloc>
 800c478:	4602      	mov	r2, r0
 800c47a:	6260      	str	r0, [r4, #36]	; 0x24
 800c47c:	b920      	cbnz	r0, 800c488 <_Balloc+0x20>
 800c47e:	2166      	movs	r1, #102	; 0x66
 800c480:	4b17      	ldr	r3, [pc, #92]	; (800c4e0 <_Balloc+0x78>)
 800c482:	4818      	ldr	r0, [pc, #96]	; (800c4e4 <_Balloc+0x7c>)
 800c484:	f000 ffec 	bl	800d460 <__assert_func>
 800c488:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c48c:	6006      	str	r6, [r0, #0]
 800c48e:	60c6      	str	r6, [r0, #12]
 800c490:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c492:	68f3      	ldr	r3, [r6, #12]
 800c494:	b183      	cbz	r3, 800c4b8 <_Balloc+0x50>
 800c496:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c498:	68db      	ldr	r3, [r3, #12]
 800c49a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c49e:	b9b8      	cbnz	r0, 800c4d0 <_Balloc+0x68>
 800c4a0:	2101      	movs	r1, #1
 800c4a2:	fa01 f605 	lsl.w	r6, r1, r5
 800c4a6:	1d72      	adds	r2, r6, #5
 800c4a8:	4620      	mov	r0, r4
 800c4aa:	0092      	lsls	r2, r2, #2
 800c4ac:	f000 fc94 	bl	800cdd8 <_calloc_r>
 800c4b0:	b160      	cbz	r0, 800c4cc <_Balloc+0x64>
 800c4b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c4b6:	e00e      	b.n	800c4d6 <_Balloc+0x6e>
 800c4b8:	2221      	movs	r2, #33	; 0x21
 800c4ba:	2104      	movs	r1, #4
 800c4bc:	4620      	mov	r0, r4
 800c4be:	f000 fc8b 	bl	800cdd8 <_calloc_r>
 800c4c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c4c4:	60f0      	str	r0, [r6, #12]
 800c4c6:	68db      	ldr	r3, [r3, #12]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d1e4      	bne.n	800c496 <_Balloc+0x2e>
 800c4cc:	2000      	movs	r0, #0
 800c4ce:	bd70      	pop	{r4, r5, r6, pc}
 800c4d0:	6802      	ldr	r2, [r0, #0]
 800c4d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c4dc:	e7f7      	b.n	800c4ce <_Balloc+0x66>
 800c4de:	bf00      	nop
 800c4e0:	0800dc76 	.word	0x0800dc76
 800c4e4:	0800ddd8 	.word	0x0800ddd8

0800c4e8 <_Bfree>:
 800c4e8:	b570      	push	{r4, r5, r6, lr}
 800c4ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c4ec:	4605      	mov	r5, r0
 800c4ee:	460c      	mov	r4, r1
 800c4f0:	b976      	cbnz	r6, 800c510 <_Bfree+0x28>
 800c4f2:	2010      	movs	r0, #16
 800c4f4:	f7fc fd2e 	bl	8008f54 <malloc>
 800c4f8:	4602      	mov	r2, r0
 800c4fa:	6268      	str	r0, [r5, #36]	; 0x24
 800c4fc:	b920      	cbnz	r0, 800c508 <_Bfree+0x20>
 800c4fe:	218a      	movs	r1, #138	; 0x8a
 800c500:	4b08      	ldr	r3, [pc, #32]	; (800c524 <_Bfree+0x3c>)
 800c502:	4809      	ldr	r0, [pc, #36]	; (800c528 <_Bfree+0x40>)
 800c504:	f000 ffac 	bl	800d460 <__assert_func>
 800c508:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c50c:	6006      	str	r6, [r0, #0]
 800c50e:	60c6      	str	r6, [r0, #12]
 800c510:	b13c      	cbz	r4, 800c522 <_Bfree+0x3a>
 800c512:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c514:	6862      	ldr	r2, [r4, #4]
 800c516:	68db      	ldr	r3, [r3, #12]
 800c518:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c51c:	6021      	str	r1, [r4, #0]
 800c51e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c522:	bd70      	pop	{r4, r5, r6, pc}
 800c524:	0800dc76 	.word	0x0800dc76
 800c528:	0800ddd8 	.word	0x0800ddd8

0800c52c <__multadd>:
 800c52c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c530:	4607      	mov	r7, r0
 800c532:	460c      	mov	r4, r1
 800c534:	461e      	mov	r6, r3
 800c536:	2000      	movs	r0, #0
 800c538:	690d      	ldr	r5, [r1, #16]
 800c53a:	f101 0c14 	add.w	ip, r1, #20
 800c53e:	f8dc 3000 	ldr.w	r3, [ip]
 800c542:	3001      	adds	r0, #1
 800c544:	b299      	uxth	r1, r3
 800c546:	fb02 6101 	mla	r1, r2, r1, r6
 800c54a:	0c1e      	lsrs	r6, r3, #16
 800c54c:	0c0b      	lsrs	r3, r1, #16
 800c54e:	fb02 3306 	mla	r3, r2, r6, r3
 800c552:	b289      	uxth	r1, r1
 800c554:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c558:	4285      	cmp	r5, r0
 800c55a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c55e:	f84c 1b04 	str.w	r1, [ip], #4
 800c562:	dcec      	bgt.n	800c53e <__multadd+0x12>
 800c564:	b30e      	cbz	r6, 800c5aa <__multadd+0x7e>
 800c566:	68a3      	ldr	r3, [r4, #8]
 800c568:	42ab      	cmp	r3, r5
 800c56a:	dc19      	bgt.n	800c5a0 <__multadd+0x74>
 800c56c:	6861      	ldr	r1, [r4, #4]
 800c56e:	4638      	mov	r0, r7
 800c570:	3101      	adds	r1, #1
 800c572:	f7ff ff79 	bl	800c468 <_Balloc>
 800c576:	4680      	mov	r8, r0
 800c578:	b928      	cbnz	r0, 800c586 <__multadd+0x5a>
 800c57a:	4602      	mov	r2, r0
 800c57c:	21b5      	movs	r1, #181	; 0xb5
 800c57e:	4b0c      	ldr	r3, [pc, #48]	; (800c5b0 <__multadd+0x84>)
 800c580:	480c      	ldr	r0, [pc, #48]	; (800c5b4 <__multadd+0x88>)
 800c582:	f000 ff6d 	bl	800d460 <__assert_func>
 800c586:	6922      	ldr	r2, [r4, #16]
 800c588:	f104 010c 	add.w	r1, r4, #12
 800c58c:	3202      	adds	r2, #2
 800c58e:	0092      	lsls	r2, r2, #2
 800c590:	300c      	adds	r0, #12
 800c592:	f7fc fcef 	bl	8008f74 <memcpy>
 800c596:	4621      	mov	r1, r4
 800c598:	4638      	mov	r0, r7
 800c59a:	f7ff ffa5 	bl	800c4e8 <_Bfree>
 800c59e:	4644      	mov	r4, r8
 800c5a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c5a4:	3501      	adds	r5, #1
 800c5a6:	615e      	str	r6, [r3, #20]
 800c5a8:	6125      	str	r5, [r4, #16]
 800c5aa:	4620      	mov	r0, r4
 800c5ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5b0:	0800dce8 	.word	0x0800dce8
 800c5b4:	0800ddd8 	.word	0x0800ddd8

0800c5b8 <__s2b>:
 800c5b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5bc:	4615      	mov	r5, r2
 800c5be:	2209      	movs	r2, #9
 800c5c0:	461f      	mov	r7, r3
 800c5c2:	3308      	adds	r3, #8
 800c5c4:	460c      	mov	r4, r1
 800c5c6:	fb93 f3f2 	sdiv	r3, r3, r2
 800c5ca:	4606      	mov	r6, r0
 800c5cc:	2201      	movs	r2, #1
 800c5ce:	2100      	movs	r1, #0
 800c5d0:	429a      	cmp	r2, r3
 800c5d2:	db09      	blt.n	800c5e8 <__s2b+0x30>
 800c5d4:	4630      	mov	r0, r6
 800c5d6:	f7ff ff47 	bl	800c468 <_Balloc>
 800c5da:	b940      	cbnz	r0, 800c5ee <__s2b+0x36>
 800c5dc:	4602      	mov	r2, r0
 800c5de:	21ce      	movs	r1, #206	; 0xce
 800c5e0:	4b18      	ldr	r3, [pc, #96]	; (800c644 <__s2b+0x8c>)
 800c5e2:	4819      	ldr	r0, [pc, #100]	; (800c648 <__s2b+0x90>)
 800c5e4:	f000 ff3c 	bl	800d460 <__assert_func>
 800c5e8:	0052      	lsls	r2, r2, #1
 800c5ea:	3101      	adds	r1, #1
 800c5ec:	e7f0      	b.n	800c5d0 <__s2b+0x18>
 800c5ee:	9b08      	ldr	r3, [sp, #32]
 800c5f0:	2d09      	cmp	r5, #9
 800c5f2:	6143      	str	r3, [r0, #20]
 800c5f4:	f04f 0301 	mov.w	r3, #1
 800c5f8:	6103      	str	r3, [r0, #16]
 800c5fa:	dd16      	ble.n	800c62a <__s2b+0x72>
 800c5fc:	f104 0909 	add.w	r9, r4, #9
 800c600:	46c8      	mov	r8, r9
 800c602:	442c      	add	r4, r5
 800c604:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c608:	4601      	mov	r1, r0
 800c60a:	220a      	movs	r2, #10
 800c60c:	4630      	mov	r0, r6
 800c60e:	3b30      	subs	r3, #48	; 0x30
 800c610:	f7ff ff8c 	bl	800c52c <__multadd>
 800c614:	45a0      	cmp	r8, r4
 800c616:	d1f5      	bne.n	800c604 <__s2b+0x4c>
 800c618:	f1a5 0408 	sub.w	r4, r5, #8
 800c61c:	444c      	add	r4, r9
 800c61e:	1b2d      	subs	r5, r5, r4
 800c620:	1963      	adds	r3, r4, r5
 800c622:	42bb      	cmp	r3, r7
 800c624:	db04      	blt.n	800c630 <__s2b+0x78>
 800c626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c62a:	2509      	movs	r5, #9
 800c62c:	340a      	adds	r4, #10
 800c62e:	e7f6      	b.n	800c61e <__s2b+0x66>
 800c630:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c634:	4601      	mov	r1, r0
 800c636:	220a      	movs	r2, #10
 800c638:	4630      	mov	r0, r6
 800c63a:	3b30      	subs	r3, #48	; 0x30
 800c63c:	f7ff ff76 	bl	800c52c <__multadd>
 800c640:	e7ee      	b.n	800c620 <__s2b+0x68>
 800c642:	bf00      	nop
 800c644:	0800dce8 	.word	0x0800dce8
 800c648:	0800ddd8 	.word	0x0800ddd8

0800c64c <__hi0bits>:
 800c64c:	0c02      	lsrs	r2, r0, #16
 800c64e:	0412      	lsls	r2, r2, #16
 800c650:	4603      	mov	r3, r0
 800c652:	b9ca      	cbnz	r2, 800c688 <__hi0bits+0x3c>
 800c654:	0403      	lsls	r3, r0, #16
 800c656:	2010      	movs	r0, #16
 800c658:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c65c:	bf04      	itt	eq
 800c65e:	021b      	lsleq	r3, r3, #8
 800c660:	3008      	addeq	r0, #8
 800c662:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c666:	bf04      	itt	eq
 800c668:	011b      	lsleq	r3, r3, #4
 800c66a:	3004      	addeq	r0, #4
 800c66c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c670:	bf04      	itt	eq
 800c672:	009b      	lsleq	r3, r3, #2
 800c674:	3002      	addeq	r0, #2
 800c676:	2b00      	cmp	r3, #0
 800c678:	db05      	blt.n	800c686 <__hi0bits+0x3a>
 800c67a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800c67e:	f100 0001 	add.w	r0, r0, #1
 800c682:	bf08      	it	eq
 800c684:	2020      	moveq	r0, #32
 800c686:	4770      	bx	lr
 800c688:	2000      	movs	r0, #0
 800c68a:	e7e5      	b.n	800c658 <__hi0bits+0xc>

0800c68c <__lo0bits>:
 800c68c:	6803      	ldr	r3, [r0, #0]
 800c68e:	4602      	mov	r2, r0
 800c690:	f013 0007 	ands.w	r0, r3, #7
 800c694:	d00b      	beq.n	800c6ae <__lo0bits+0x22>
 800c696:	07d9      	lsls	r1, r3, #31
 800c698:	d421      	bmi.n	800c6de <__lo0bits+0x52>
 800c69a:	0798      	lsls	r0, r3, #30
 800c69c:	bf49      	itett	mi
 800c69e:	085b      	lsrmi	r3, r3, #1
 800c6a0:	089b      	lsrpl	r3, r3, #2
 800c6a2:	2001      	movmi	r0, #1
 800c6a4:	6013      	strmi	r3, [r2, #0]
 800c6a6:	bf5c      	itt	pl
 800c6a8:	2002      	movpl	r0, #2
 800c6aa:	6013      	strpl	r3, [r2, #0]
 800c6ac:	4770      	bx	lr
 800c6ae:	b299      	uxth	r1, r3
 800c6b0:	b909      	cbnz	r1, 800c6b6 <__lo0bits+0x2a>
 800c6b2:	2010      	movs	r0, #16
 800c6b4:	0c1b      	lsrs	r3, r3, #16
 800c6b6:	b2d9      	uxtb	r1, r3
 800c6b8:	b909      	cbnz	r1, 800c6be <__lo0bits+0x32>
 800c6ba:	3008      	adds	r0, #8
 800c6bc:	0a1b      	lsrs	r3, r3, #8
 800c6be:	0719      	lsls	r1, r3, #28
 800c6c0:	bf04      	itt	eq
 800c6c2:	091b      	lsreq	r3, r3, #4
 800c6c4:	3004      	addeq	r0, #4
 800c6c6:	0799      	lsls	r1, r3, #30
 800c6c8:	bf04      	itt	eq
 800c6ca:	089b      	lsreq	r3, r3, #2
 800c6cc:	3002      	addeq	r0, #2
 800c6ce:	07d9      	lsls	r1, r3, #31
 800c6d0:	d403      	bmi.n	800c6da <__lo0bits+0x4e>
 800c6d2:	085b      	lsrs	r3, r3, #1
 800c6d4:	f100 0001 	add.w	r0, r0, #1
 800c6d8:	d003      	beq.n	800c6e2 <__lo0bits+0x56>
 800c6da:	6013      	str	r3, [r2, #0]
 800c6dc:	4770      	bx	lr
 800c6de:	2000      	movs	r0, #0
 800c6e0:	4770      	bx	lr
 800c6e2:	2020      	movs	r0, #32
 800c6e4:	4770      	bx	lr
	...

0800c6e8 <__i2b>:
 800c6e8:	b510      	push	{r4, lr}
 800c6ea:	460c      	mov	r4, r1
 800c6ec:	2101      	movs	r1, #1
 800c6ee:	f7ff febb 	bl	800c468 <_Balloc>
 800c6f2:	4602      	mov	r2, r0
 800c6f4:	b928      	cbnz	r0, 800c702 <__i2b+0x1a>
 800c6f6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c6fa:	4b04      	ldr	r3, [pc, #16]	; (800c70c <__i2b+0x24>)
 800c6fc:	4804      	ldr	r0, [pc, #16]	; (800c710 <__i2b+0x28>)
 800c6fe:	f000 feaf 	bl	800d460 <__assert_func>
 800c702:	2301      	movs	r3, #1
 800c704:	6144      	str	r4, [r0, #20]
 800c706:	6103      	str	r3, [r0, #16]
 800c708:	bd10      	pop	{r4, pc}
 800c70a:	bf00      	nop
 800c70c:	0800dce8 	.word	0x0800dce8
 800c710:	0800ddd8 	.word	0x0800ddd8

0800c714 <__multiply>:
 800c714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c718:	4691      	mov	r9, r2
 800c71a:	690a      	ldr	r2, [r1, #16]
 800c71c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c720:	460c      	mov	r4, r1
 800c722:	429a      	cmp	r2, r3
 800c724:	bfbe      	ittt	lt
 800c726:	460b      	movlt	r3, r1
 800c728:	464c      	movlt	r4, r9
 800c72a:	4699      	movlt	r9, r3
 800c72c:	6927      	ldr	r7, [r4, #16]
 800c72e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c732:	68a3      	ldr	r3, [r4, #8]
 800c734:	6861      	ldr	r1, [r4, #4]
 800c736:	eb07 060a 	add.w	r6, r7, sl
 800c73a:	42b3      	cmp	r3, r6
 800c73c:	b085      	sub	sp, #20
 800c73e:	bfb8      	it	lt
 800c740:	3101      	addlt	r1, #1
 800c742:	f7ff fe91 	bl	800c468 <_Balloc>
 800c746:	b930      	cbnz	r0, 800c756 <__multiply+0x42>
 800c748:	4602      	mov	r2, r0
 800c74a:	f240 115d 	movw	r1, #349	; 0x15d
 800c74e:	4b43      	ldr	r3, [pc, #268]	; (800c85c <__multiply+0x148>)
 800c750:	4843      	ldr	r0, [pc, #268]	; (800c860 <__multiply+0x14c>)
 800c752:	f000 fe85 	bl	800d460 <__assert_func>
 800c756:	f100 0514 	add.w	r5, r0, #20
 800c75a:	462b      	mov	r3, r5
 800c75c:	2200      	movs	r2, #0
 800c75e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c762:	4543      	cmp	r3, r8
 800c764:	d321      	bcc.n	800c7aa <__multiply+0x96>
 800c766:	f104 0314 	add.w	r3, r4, #20
 800c76a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c76e:	f109 0314 	add.w	r3, r9, #20
 800c772:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c776:	9202      	str	r2, [sp, #8]
 800c778:	1b3a      	subs	r2, r7, r4
 800c77a:	3a15      	subs	r2, #21
 800c77c:	f022 0203 	bic.w	r2, r2, #3
 800c780:	3204      	adds	r2, #4
 800c782:	f104 0115 	add.w	r1, r4, #21
 800c786:	428f      	cmp	r7, r1
 800c788:	bf38      	it	cc
 800c78a:	2204      	movcc	r2, #4
 800c78c:	9201      	str	r2, [sp, #4]
 800c78e:	9a02      	ldr	r2, [sp, #8]
 800c790:	9303      	str	r3, [sp, #12]
 800c792:	429a      	cmp	r2, r3
 800c794:	d80c      	bhi.n	800c7b0 <__multiply+0x9c>
 800c796:	2e00      	cmp	r6, #0
 800c798:	dd03      	ble.n	800c7a2 <__multiply+0x8e>
 800c79a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d059      	beq.n	800c856 <__multiply+0x142>
 800c7a2:	6106      	str	r6, [r0, #16]
 800c7a4:	b005      	add	sp, #20
 800c7a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7aa:	f843 2b04 	str.w	r2, [r3], #4
 800c7ae:	e7d8      	b.n	800c762 <__multiply+0x4e>
 800c7b0:	f8b3 a000 	ldrh.w	sl, [r3]
 800c7b4:	f1ba 0f00 	cmp.w	sl, #0
 800c7b8:	d023      	beq.n	800c802 <__multiply+0xee>
 800c7ba:	46a9      	mov	r9, r5
 800c7bc:	f04f 0c00 	mov.w	ip, #0
 800c7c0:	f104 0e14 	add.w	lr, r4, #20
 800c7c4:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c7c8:	f8d9 1000 	ldr.w	r1, [r9]
 800c7cc:	fa1f fb82 	uxth.w	fp, r2
 800c7d0:	b289      	uxth	r1, r1
 800c7d2:	fb0a 110b 	mla	r1, sl, fp, r1
 800c7d6:	4461      	add	r1, ip
 800c7d8:	f8d9 c000 	ldr.w	ip, [r9]
 800c7dc:	0c12      	lsrs	r2, r2, #16
 800c7de:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800c7e2:	fb0a c202 	mla	r2, sl, r2, ip
 800c7e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c7ea:	b289      	uxth	r1, r1
 800c7ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c7f0:	4577      	cmp	r7, lr
 800c7f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c7f6:	f849 1b04 	str.w	r1, [r9], #4
 800c7fa:	d8e3      	bhi.n	800c7c4 <__multiply+0xb0>
 800c7fc:	9a01      	ldr	r2, [sp, #4]
 800c7fe:	f845 c002 	str.w	ip, [r5, r2]
 800c802:	9a03      	ldr	r2, [sp, #12]
 800c804:	3304      	adds	r3, #4
 800c806:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c80a:	f1b9 0f00 	cmp.w	r9, #0
 800c80e:	d020      	beq.n	800c852 <__multiply+0x13e>
 800c810:	46ae      	mov	lr, r5
 800c812:	f04f 0a00 	mov.w	sl, #0
 800c816:	6829      	ldr	r1, [r5, #0]
 800c818:	f104 0c14 	add.w	ip, r4, #20
 800c81c:	f8bc b000 	ldrh.w	fp, [ip]
 800c820:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c824:	b289      	uxth	r1, r1
 800c826:	fb09 220b 	mla	r2, r9, fp, r2
 800c82a:	4492      	add	sl, r2
 800c82c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c830:	f84e 1b04 	str.w	r1, [lr], #4
 800c834:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c838:	f8be 1000 	ldrh.w	r1, [lr]
 800c83c:	0c12      	lsrs	r2, r2, #16
 800c83e:	fb09 1102 	mla	r1, r9, r2, r1
 800c842:	4567      	cmp	r7, ip
 800c844:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c848:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c84c:	d8e6      	bhi.n	800c81c <__multiply+0x108>
 800c84e:	9a01      	ldr	r2, [sp, #4]
 800c850:	50a9      	str	r1, [r5, r2]
 800c852:	3504      	adds	r5, #4
 800c854:	e79b      	b.n	800c78e <__multiply+0x7a>
 800c856:	3e01      	subs	r6, #1
 800c858:	e79d      	b.n	800c796 <__multiply+0x82>
 800c85a:	bf00      	nop
 800c85c:	0800dce8 	.word	0x0800dce8
 800c860:	0800ddd8 	.word	0x0800ddd8

0800c864 <__pow5mult>:
 800c864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c868:	4615      	mov	r5, r2
 800c86a:	f012 0203 	ands.w	r2, r2, #3
 800c86e:	4606      	mov	r6, r0
 800c870:	460f      	mov	r7, r1
 800c872:	d007      	beq.n	800c884 <__pow5mult+0x20>
 800c874:	4c25      	ldr	r4, [pc, #148]	; (800c90c <__pow5mult+0xa8>)
 800c876:	3a01      	subs	r2, #1
 800c878:	2300      	movs	r3, #0
 800c87a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c87e:	f7ff fe55 	bl	800c52c <__multadd>
 800c882:	4607      	mov	r7, r0
 800c884:	10ad      	asrs	r5, r5, #2
 800c886:	d03d      	beq.n	800c904 <__pow5mult+0xa0>
 800c888:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c88a:	b97c      	cbnz	r4, 800c8ac <__pow5mult+0x48>
 800c88c:	2010      	movs	r0, #16
 800c88e:	f7fc fb61 	bl	8008f54 <malloc>
 800c892:	4602      	mov	r2, r0
 800c894:	6270      	str	r0, [r6, #36]	; 0x24
 800c896:	b928      	cbnz	r0, 800c8a4 <__pow5mult+0x40>
 800c898:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c89c:	4b1c      	ldr	r3, [pc, #112]	; (800c910 <__pow5mult+0xac>)
 800c89e:	481d      	ldr	r0, [pc, #116]	; (800c914 <__pow5mult+0xb0>)
 800c8a0:	f000 fdde 	bl	800d460 <__assert_func>
 800c8a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c8a8:	6004      	str	r4, [r0, #0]
 800c8aa:	60c4      	str	r4, [r0, #12]
 800c8ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c8b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c8b4:	b94c      	cbnz	r4, 800c8ca <__pow5mult+0x66>
 800c8b6:	f240 2171 	movw	r1, #625	; 0x271
 800c8ba:	4630      	mov	r0, r6
 800c8bc:	f7ff ff14 	bl	800c6e8 <__i2b>
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	4604      	mov	r4, r0
 800c8c4:	f8c8 0008 	str.w	r0, [r8, #8]
 800c8c8:	6003      	str	r3, [r0, #0]
 800c8ca:	f04f 0900 	mov.w	r9, #0
 800c8ce:	07eb      	lsls	r3, r5, #31
 800c8d0:	d50a      	bpl.n	800c8e8 <__pow5mult+0x84>
 800c8d2:	4639      	mov	r1, r7
 800c8d4:	4622      	mov	r2, r4
 800c8d6:	4630      	mov	r0, r6
 800c8d8:	f7ff ff1c 	bl	800c714 <__multiply>
 800c8dc:	4680      	mov	r8, r0
 800c8de:	4639      	mov	r1, r7
 800c8e0:	4630      	mov	r0, r6
 800c8e2:	f7ff fe01 	bl	800c4e8 <_Bfree>
 800c8e6:	4647      	mov	r7, r8
 800c8e8:	106d      	asrs	r5, r5, #1
 800c8ea:	d00b      	beq.n	800c904 <__pow5mult+0xa0>
 800c8ec:	6820      	ldr	r0, [r4, #0]
 800c8ee:	b938      	cbnz	r0, 800c900 <__pow5mult+0x9c>
 800c8f0:	4622      	mov	r2, r4
 800c8f2:	4621      	mov	r1, r4
 800c8f4:	4630      	mov	r0, r6
 800c8f6:	f7ff ff0d 	bl	800c714 <__multiply>
 800c8fa:	6020      	str	r0, [r4, #0]
 800c8fc:	f8c0 9000 	str.w	r9, [r0]
 800c900:	4604      	mov	r4, r0
 800c902:	e7e4      	b.n	800c8ce <__pow5mult+0x6a>
 800c904:	4638      	mov	r0, r7
 800c906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c90a:	bf00      	nop
 800c90c:	0800df28 	.word	0x0800df28
 800c910:	0800dc76 	.word	0x0800dc76
 800c914:	0800ddd8 	.word	0x0800ddd8

0800c918 <__lshift>:
 800c918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c91c:	460c      	mov	r4, r1
 800c91e:	4607      	mov	r7, r0
 800c920:	4691      	mov	r9, r2
 800c922:	6923      	ldr	r3, [r4, #16]
 800c924:	6849      	ldr	r1, [r1, #4]
 800c926:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c92a:	68a3      	ldr	r3, [r4, #8]
 800c92c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c930:	f108 0601 	add.w	r6, r8, #1
 800c934:	42b3      	cmp	r3, r6
 800c936:	db0b      	blt.n	800c950 <__lshift+0x38>
 800c938:	4638      	mov	r0, r7
 800c93a:	f7ff fd95 	bl	800c468 <_Balloc>
 800c93e:	4605      	mov	r5, r0
 800c940:	b948      	cbnz	r0, 800c956 <__lshift+0x3e>
 800c942:	4602      	mov	r2, r0
 800c944:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c948:	4b29      	ldr	r3, [pc, #164]	; (800c9f0 <__lshift+0xd8>)
 800c94a:	482a      	ldr	r0, [pc, #168]	; (800c9f4 <__lshift+0xdc>)
 800c94c:	f000 fd88 	bl	800d460 <__assert_func>
 800c950:	3101      	adds	r1, #1
 800c952:	005b      	lsls	r3, r3, #1
 800c954:	e7ee      	b.n	800c934 <__lshift+0x1c>
 800c956:	2300      	movs	r3, #0
 800c958:	f100 0114 	add.w	r1, r0, #20
 800c95c:	f100 0210 	add.w	r2, r0, #16
 800c960:	4618      	mov	r0, r3
 800c962:	4553      	cmp	r3, sl
 800c964:	db37      	blt.n	800c9d6 <__lshift+0xbe>
 800c966:	6920      	ldr	r0, [r4, #16]
 800c968:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c96c:	f104 0314 	add.w	r3, r4, #20
 800c970:	f019 091f 	ands.w	r9, r9, #31
 800c974:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c978:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c97c:	d02f      	beq.n	800c9de <__lshift+0xc6>
 800c97e:	468a      	mov	sl, r1
 800c980:	f04f 0c00 	mov.w	ip, #0
 800c984:	f1c9 0e20 	rsb	lr, r9, #32
 800c988:	681a      	ldr	r2, [r3, #0]
 800c98a:	fa02 f209 	lsl.w	r2, r2, r9
 800c98e:	ea42 020c 	orr.w	r2, r2, ip
 800c992:	f84a 2b04 	str.w	r2, [sl], #4
 800c996:	f853 2b04 	ldr.w	r2, [r3], #4
 800c99a:	4298      	cmp	r0, r3
 800c99c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c9a0:	d8f2      	bhi.n	800c988 <__lshift+0x70>
 800c9a2:	1b03      	subs	r3, r0, r4
 800c9a4:	3b15      	subs	r3, #21
 800c9a6:	f023 0303 	bic.w	r3, r3, #3
 800c9aa:	3304      	adds	r3, #4
 800c9ac:	f104 0215 	add.w	r2, r4, #21
 800c9b0:	4290      	cmp	r0, r2
 800c9b2:	bf38      	it	cc
 800c9b4:	2304      	movcc	r3, #4
 800c9b6:	f841 c003 	str.w	ip, [r1, r3]
 800c9ba:	f1bc 0f00 	cmp.w	ip, #0
 800c9be:	d001      	beq.n	800c9c4 <__lshift+0xac>
 800c9c0:	f108 0602 	add.w	r6, r8, #2
 800c9c4:	3e01      	subs	r6, #1
 800c9c6:	4638      	mov	r0, r7
 800c9c8:	4621      	mov	r1, r4
 800c9ca:	612e      	str	r6, [r5, #16]
 800c9cc:	f7ff fd8c 	bl	800c4e8 <_Bfree>
 800c9d0:	4628      	mov	r0, r5
 800c9d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9d6:	f842 0f04 	str.w	r0, [r2, #4]!
 800c9da:	3301      	adds	r3, #1
 800c9dc:	e7c1      	b.n	800c962 <__lshift+0x4a>
 800c9de:	3904      	subs	r1, #4
 800c9e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9e4:	4298      	cmp	r0, r3
 800c9e6:	f841 2f04 	str.w	r2, [r1, #4]!
 800c9ea:	d8f9      	bhi.n	800c9e0 <__lshift+0xc8>
 800c9ec:	e7ea      	b.n	800c9c4 <__lshift+0xac>
 800c9ee:	bf00      	nop
 800c9f0:	0800dce8 	.word	0x0800dce8
 800c9f4:	0800ddd8 	.word	0x0800ddd8

0800c9f8 <__mcmp>:
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	690a      	ldr	r2, [r1, #16]
 800c9fc:	6900      	ldr	r0, [r0, #16]
 800c9fe:	b530      	push	{r4, r5, lr}
 800ca00:	1a80      	subs	r0, r0, r2
 800ca02:	d10d      	bne.n	800ca20 <__mcmp+0x28>
 800ca04:	3314      	adds	r3, #20
 800ca06:	3114      	adds	r1, #20
 800ca08:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ca0c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ca10:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ca14:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ca18:	4295      	cmp	r5, r2
 800ca1a:	d002      	beq.n	800ca22 <__mcmp+0x2a>
 800ca1c:	d304      	bcc.n	800ca28 <__mcmp+0x30>
 800ca1e:	2001      	movs	r0, #1
 800ca20:	bd30      	pop	{r4, r5, pc}
 800ca22:	42a3      	cmp	r3, r4
 800ca24:	d3f4      	bcc.n	800ca10 <__mcmp+0x18>
 800ca26:	e7fb      	b.n	800ca20 <__mcmp+0x28>
 800ca28:	f04f 30ff 	mov.w	r0, #4294967295
 800ca2c:	e7f8      	b.n	800ca20 <__mcmp+0x28>
	...

0800ca30 <__mdiff>:
 800ca30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca34:	460d      	mov	r5, r1
 800ca36:	4607      	mov	r7, r0
 800ca38:	4611      	mov	r1, r2
 800ca3a:	4628      	mov	r0, r5
 800ca3c:	4614      	mov	r4, r2
 800ca3e:	f7ff ffdb 	bl	800c9f8 <__mcmp>
 800ca42:	1e06      	subs	r6, r0, #0
 800ca44:	d111      	bne.n	800ca6a <__mdiff+0x3a>
 800ca46:	4631      	mov	r1, r6
 800ca48:	4638      	mov	r0, r7
 800ca4a:	f7ff fd0d 	bl	800c468 <_Balloc>
 800ca4e:	4602      	mov	r2, r0
 800ca50:	b928      	cbnz	r0, 800ca5e <__mdiff+0x2e>
 800ca52:	f240 2132 	movw	r1, #562	; 0x232
 800ca56:	4b3a      	ldr	r3, [pc, #232]	; (800cb40 <__mdiff+0x110>)
 800ca58:	483a      	ldr	r0, [pc, #232]	; (800cb44 <__mdiff+0x114>)
 800ca5a:	f000 fd01 	bl	800d460 <__assert_func>
 800ca5e:	2301      	movs	r3, #1
 800ca60:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ca64:	4610      	mov	r0, r2
 800ca66:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca6a:	bfa4      	itt	ge
 800ca6c:	4623      	movge	r3, r4
 800ca6e:	462c      	movge	r4, r5
 800ca70:	4638      	mov	r0, r7
 800ca72:	6861      	ldr	r1, [r4, #4]
 800ca74:	bfa6      	itte	ge
 800ca76:	461d      	movge	r5, r3
 800ca78:	2600      	movge	r6, #0
 800ca7a:	2601      	movlt	r6, #1
 800ca7c:	f7ff fcf4 	bl	800c468 <_Balloc>
 800ca80:	4602      	mov	r2, r0
 800ca82:	b918      	cbnz	r0, 800ca8c <__mdiff+0x5c>
 800ca84:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ca88:	4b2d      	ldr	r3, [pc, #180]	; (800cb40 <__mdiff+0x110>)
 800ca8a:	e7e5      	b.n	800ca58 <__mdiff+0x28>
 800ca8c:	f102 0814 	add.w	r8, r2, #20
 800ca90:	46c2      	mov	sl, r8
 800ca92:	f04f 0c00 	mov.w	ip, #0
 800ca96:	6927      	ldr	r7, [r4, #16]
 800ca98:	60c6      	str	r6, [r0, #12]
 800ca9a:	692e      	ldr	r6, [r5, #16]
 800ca9c:	f104 0014 	add.w	r0, r4, #20
 800caa0:	f105 0914 	add.w	r9, r5, #20
 800caa4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800caa8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800caac:	3410      	adds	r4, #16
 800caae:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800cab2:	f859 3b04 	ldr.w	r3, [r9], #4
 800cab6:	fa1f f18b 	uxth.w	r1, fp
 800caba:	448c      	add	ip, r1
 800cabc:	b299      	uxth	r1, r3
 800cabe:	0c1b      	lsrs	r3, r3, #16
 800cac0:	ebac 0101 	sub.w	r1, ip, r1
 800cac4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cac8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800cacc:	b289      	uxth	r1, r1
 800cace:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800cad2:	454e      	cmp	r6, r9
 800cad4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800cad8:	f84a 3b04 	str.w	r3, [sl], #4
 800cadc:	d8e7      	bhi.n	800caae <__mdiff+0x7e>
 800cade:	1b73      	subs	r3, r6, r5
 800cae0:	3b15      	subs	r3, #21
 800cae2:	f023 0303 	bic.w	r3, r3, #3
 800cae6:	3515      	adds	r5, #21
 800cae8:	3304      	adds	r3, #4
 800caea:	42ae      	cmp	r6, r5
 800caec:	bf38      	it	cc
 800caee:	2304      	movcc	r3, #4
 800caf0:	4418      	add	r0, r3
 800caf2:	4443      	add	r3, r8
 800caf4:	461e      	mov	r6, r3
 800caf6:	4605      	mov	r5, r0
 800caf8:	4575      	cmp	r5, lr
 800cafa:	d30e      	bcc.n	800cb1a <__mdiff+0xea>
 800cafc:	f10e 0103 	add.w	r1, lr, #3
 800cb00:	1a09      	subs	r1, r1, r0
 800cb02:	f021 0103 	bic.w	r1, r1, #3
 800cb06:	3803      	subs	r0, #3
 800cb08:	4586      	cmp	lr, r0
 800cb0a:	bf38      	it	cc
 800cb0c:	2100      	movcc	r1, #0
 800cb0e:	4419      	add	r1, r3
 800cb10:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800cb14:	b18b      	cbz	r3, 800cb3a <__mdiff+0x10a>
 800cb16:	6117      	str	r7, [r2, #16]
 800cb18:	e7a4      	b.n	800ca64 <__mdiff+0x34>
 800cb1a:	f855 8b04 	ldr.w	r8, [r5], #4
 800cb1e:	fa1f f188 	uxth.w	r1, r8
 800cb22:	4461      	add	r1, ip
 800cb24:	140c      	asrs	r4, r1, #16
 800cb26:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cb2a:	b289      	uxth	r1, r1
 800cb2c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800cb30:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800cb34:	f846 1b04 	str.w	r1, [r6], #4
 800cb38:	e7de      	b.n	800caf8 <__mdiff+0xc8>
 800cb3a:	3f01      	subs	r7, #1
 800cb3c:	e7e8      	b.n	800cb10 <__mdiff+0xe0>
 800cb3e:	bf00      	nop
 800cb40:	0800dce8 	.word	0x0800dce8
 800cb44:	0800ddd8 	.word	0x0800ddd8

0800cb48 <__ulp>:
 800cb48:	4b11      	ldr	r3, [pc, #68]	; (800cb90 <__ulp+0x48>)
 800cb4a:	400b      	ands	r3, r1
 800cb4c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	dd02      	ble.n	800cb5a <__ulp+0x12>
 800cb54:	2000      	movs	r0, #0
 800cb56:	4619      	mov	r1, r3
 800cb58:	4770      	bx	lr
 800cb5a:	425b      	negs	r3, r3
 800cb5c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800cb60:	f04f 0000 	mov.w	r0, #0
 800cb64:	f04f 0100 	mov.w	r1, #0
 800cb68:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cb6c:	da04      	bge.n	800cb78 <__ulp+0x30>
 800cb6e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cb72:	fa43 f102 	asr.w	r1, r3, r2
 800cb76:	4770      	bx	lr
 800cb78:	f1a2 0314 	sub.w	r3, r2, #20
 800cb7c:	2b1e      	cmp	r3, #30
 800cb7e:	bfd6      	itet	le
 800cb80:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800cb84:	2301      	movgt	r3, #1
 800cb86:	fa22 f303 	lsrle.w	r3, r2, r3
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	4770      	bx	lr
 800cb8e:	bf00      	nop
 800cb90:	7ff00000 	.word	0x7ff00000

0800cb94 <__b2d>:
 800cb94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb98:	6907      	ldr	r7, [r0, #16]
 800cb9a:	f100 0914 	add.w	r9, r0, #20
 800cb9e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800cba2:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800cba6:	f1a7 0804 	sub.w	r8, r7, #4
 800cbaa:	4630      	mov	r0, r6
 800cbac:	f7ff fd4e 	bl	800c64c <__hi0bits>
 800cbb0:	f1c0 0320 	rsb	r3, r0, #32
 800cbb4:	280a      	cmp	r0, #10
 800cbb6:	600b      	str	r3, [r1, #0]
 800cbb8:	491f      	ldr	r1, [pc, #124]	; (800cc38 <__b2d+0xa4>)
 800cbba:	dc17      	bgt.n	800cbec <__b2d+0x58>
 800cbbc:	45c1      	cmp	r9, r8
 800cbbe:	bf28      	it	cs
 800cbc0:	2200      	movcs	r2, #0
 800cbc2:	f1c0 0c0b 	rsb	ip, r0, #11
 800cbc6:	fa26 f30c 	lsr.w	r3, r6, ip
 800cbca:	bf38      	it	cc
 800cbcc:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800cbd0:	ea43 0501 	orr.w	r5, r3, r1
 800cbd4:	f100 0315 	add.w	r3, r0, #21
 800cbd8:	fa06 f303 	lsl.w	r3, r6, r3
 800cbdc:	fa22 f20c 	lsr.w	r2, r2, ip
 800cbe0:	ea43 0402 	orr.w	r4, r3, r2
 800cbe4:	4620      	mov	r0, r4
 800cbe6:	4629      	mov	r1, r5
 800cbe8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbec:	45c1      	cmp	r9, r8
 800cbee:	bf2e      	itee	cs
 800cbf0:	2200      	movcs	r2, #0
 800cbf2:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800cbf6:	f1a7 0808 	subcc.w	r8, r7, #8
 800cbfa:	f1b0 030b 	subs.w	r3, r0, #11
 800cbfe:	d016      	beq.n	800cc2e <__b2d+0x9a>
 800cc00:	f1c3 0720 	rsb	r7, r3, #32
 800cc04:	fa22 f107 	lsr.w	r1, r2, r7
 800cc08:	45c8      	cmp	r8, r9
 800cc0a:	fa06 f603 	lsl.w	r6, r6, r3
 800cc0e:	ea46 0601 	orr.w	r6, r6, r1
 800cc12:	bf94      	ite	ls
 800cc14:	2100      	movls	r1, #0
 800cc16:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800cc1a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800cc1e:	fa02 f003 	lsl.w	r0, r2, r3
 800cc22:	40f9      	lsrs	r1, r7
 800cc24:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800cc28:	ea40 0401 	orr.w	r4, r0, r1
 800cc2c:	e7da      	b.n	800cbe4 <__b2d+0x50>
 800cc2e:	4614      	mov	r4, r2
 800cc30:	ea46 0501 	orr.w	r5, r6, r1
 800cc34:	e7d6      	b.n	800cbe4 <__b2d+0x50>
 800cc36:	bf00      	nop
 800cc38:	3ff00000 	.word	0x3ff00000

0800cc3c <__d2b>:
 800cc3c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800cc40:	2101      	movs	r1, #1
 800cc42:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800cc46:	4690      	mov	r8, r2
 800cc48:	461d      	mov	r5, r3
 800cc4a:	f7ff fc0d 	bl	800c468 <_Balloc>
 800cc4e:	4604      	mov	r4, r0
 800cc50:	b930      	cbnz	r0, 800cc60 <__d2b+0x24>
 800cc52:	4602      	mov	r2, r0
 800cc54:	f240 310a 	movw	r1, #778	; 0x30a
 800cc58:	4b24      	ldr	r3, [pc, #144]	; (800ccec <__d2b+0xb0>)
 800cc5a:	4825      	ldr	r0, [pc, #148]	; (800ccf0 <__d2b+0xb4>)
 800cc5c:	f000 fc00 	bl	800d460 <__assert_func>
 800cc60:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800cc64:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800cc68:	bb2d      	cbnz	r5, 800ccb6 <__d2b+0x7a>
 800cc6a:	9301      	str	r3, [sp, #4]
 800cc6c:	f1b8 0300 	subs.w	r3, r8, #0
 800cc70:	d026      	beq.n	800ccc0 <__d2b+0x84>
 800cc72:	4668      	mov	r0, sp
 800cc74:	9300      	str	r3, [sp, #0]
 800cc76:	f7ff fd09 	bl	800c68c <__lo0bits>
 800cc7a:	9900      	ldr	r1, [sp, #0]
 800cc7c:	b1f0      	cbz	r0, 800ccbc <__d2b+0x80>
 800cc7e:	9a01      	ldr	r2, [sp, #4]
 800cc80:	f1c0 0320 	rsb	r3, r0, #32
 800cc84:	fa02 f303 	lsl.w	r3, r2, r3
 800cc88:	430b      	orrs	r3, r1
 800cc8a:	40c2      	lsrs	r2, r0
 800cc8c:	6163      	str	r3, [r4, #20]
 800cc8e:	9201      	str	r2, [sp, #4]
 800cc90:	9b01      	ldr	r3, [sp, #4]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	bf14      	ite	ne
 800cc96:	2102      	movne	r1, #2
 800cc98:	2101      	moveq	r1, #1
 800cc9a:	61a3      	str	r3, [r4, #24]
 800cc9c:	6121      	str	r1, [r4, #16]
 800cc9e:	b1c5      	cbz	r5, 800ccd2 <__d2b+0x96>
 800cca0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cca4:	4405      	add	r5, r0
 800cca6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ccaa:	603d      	str	r5, [r7, #0]
 800ccac:	6030      	str	r0, [r6, #0]
 800ccae:	4620      	mov	r0, r4
 800ccb0:	b002      	add	sp, #8
 800ccb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ccba:	e7d6      	b.n	800cc6a <__d2b+0x2e>
 800ccbc:	6161      	str	r1, [r4, #20]
 800ccbe:	e7e7      	b.n	800cc90 <__d2b+0x54>
 800ccc0:	a801      	add	r0, sp, #4
 800ccc2:	f7ff fce3 	bl	800c68c <__lo0bits>
 800ccc6:	2101      	movs	r1, #1
 800ccc8:	9b01      	ldr	r3, [sp, #4]
 800ccca:	6121      	str	r1, [r4, #16]
 800cccc:	6163      	str	r3, [r4, #20]
 800ccce:	3020      	adds	r0, #32
 800ccd0:	e7e5      	b.n	800cc9e <__d2b+0x62>
 800ccd2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800ccd6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ccda:	6038      	str	r0, [r7, #0]
 800ccdc:	6918      	ldr	r0, [r3, #16]
 800ccde:	f7ff fcb5 	bl	800c64c <__hi0bits>
 800cce2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800cce6:	6031      	str	r1, [r6, #0]
 800cce8:	e7e1      	b.n	800ccae <__d2b+0x72>
 800ccea:	bf00      	nop
 800ccec:	0800dce8 	.word	0x0800dce8
 800ccf0:	0800ddd8 	.word	0x0800ddd8

0800ccf4 <__ratio>:
 800ccf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccf8:	4688      	mov	r8, r1
 800ccfa:	4669      	mov	r1, sp
 800ccfc:	4681      	mov	r9, r0
 800ccfe:	f7ff ff49 	bl	800cb94 <__b2d>
 800cd02:	460f      	mov	r7, r1
 800cd04:	4604      	mov	r4, r0
 800cd06:	460d      	mov	r5, r1
 800cd08:	4640      	mov	r0, r8
 800cd0a:	a901      	add	r1, sp, #4
 800cd0c:	f7ff ff42 	bl	800cb94 <__b2d>
 800cd10:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cd14:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800cd18:	468b      	mov	fp, r1
 800cd1a:	eba3 0c02 	sub.w	ip, r3, r2
 800cd1e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cd22:	1a9b      	subs	r3, r3, r2
 800cd24:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	bfd5      	itete	le
 800cd2c:	460a      	movle	r2, r1
 800cd2e:	462a      	movgt	r2, r5
 800cd30:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cd34:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cd38:	bfd8      	it	le
 800cd3a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800cd3e:	465b      	mov	r3, fp
 800cd40:	4602      	mov	r2, r0
 800cd42:	4639      	mov	r1, r7
 800cd44:	4620      	mov	r0, r4
 800cd46:	f7f3 fcf1 	bl	800072c <__aeabi_ddiv>
 800cd4a:	b003      	add	sp, #12
 800cd4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cd50 <__copybits>:
 800cd50:	3901      	subs	r1, #1
 800cd52:	b570      	push	{r4, r5, r6, lr}
 800cd54:	1149      	asrs	r1, r1, #5
 800cd56:	6914      	ldr	r4, [r2, #16]
 800cd58:	3101      	adds	r1, #1
 800cd5a:	f102 0314 	add.w	r3, r2, #20
 800cd5e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cd62:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cd66:	1f05      	subs	r5, r0, #4
 800cd68:	42a3      	cmp	r3, r4
 800cd6a:	d30c      	bcc.n	800cd86 <__copybits+0x36>
 800cd6c:	1aa3      	subs	r3, r4, r2
 800cd6e:	3b11      	subs	r3, #17
 800cd70:	f023 0303 	bic.w	r3, r3, #3
 800cd74:	3211      	adds	r2, #17
 800cd76:	42a2      	cmp	r2, r4
 800cd78:	bf88      	it	hi
 800cd7a:	2300      	movhi	r3, #0
 800cd7c:	4418      	add	r0, r3
 800cd7e:	2300      	movs	r3, #0
 800cd80:	4288      	cmp	r0, r1
 800cd82:	d305      	bcc.n	800cd90 <__copybits+0x40>
 800cd84:	bd70      	pop	{r4, r5, r6, pc}
 800cd86:	f853 6b04 	ldr.w	r6, [r3], #4
 800cd8a:	f845 6f04 	str.w	r6, [r5, #4]!
 800cd8e:	e7eb      	b.n	800cd68 <__copybits+0x18>
 800cd90:	f840 3b04 	str.w	r3, [r0], #4
 800cd94:	e7f4      	b.n	800cd80 <__copybits+0x30>

0800cd96 <__any_on>:
 800cd96:	f100 0214 	add.w	r2, r0, #20
 800cd9a:	6900      	ldr	r0, [r0, #16]
 800cd9c:	114b      	asrs	r3, r1, #5
 800cd9e:	4298      	cmp	r0, r3
 800cda0:	b510      	push	{r4, lr}
 800cda2:	db11      	blt.n	800cdc8 <__any_on+0x32>
 800cda4:	dd0a      	ble.n	800cdbc <__any_on+0x26>
 800cda6:	f011 011f 	ands.w	r1, r1, #31
 800cdaa:	d007      	beq.n	800cdbc <__any_on+0x26>
 800cdac:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cdb0:	fa24 f001 	lsr.w	r0, r4, r1
 800cdb4:	fa00 f101 	lsl.w	r1, r0, r1
 800cdb8:	428c      	cmp	r4, r1
 800cdba:	d10b      	bne.n	800cdd4 <__any_on+0x3e>
 800cdbc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cdc0:	4293      	cmp	r3, r2
 800cdc2:	d803      	bhi.n	800cdcc <__any_on+0x36>
 800cdc4:	2000      	movs	r0, #0
 800cdc6:	bd10      	pop	{r4, pc}
 800cdc8:	4603      	mov	r3, r0
 800cdca:	e7f7      	b.n	800cdbc <__any_on+0x26>
 800cdcc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cdd0:	2900      	cmp	r1, #0
 800cdd2:	d0f5      	beq.n	800cdc0 <__any_on+0x2a>
 800cdd4:	2001      	movs	r0, #1
 800cdd6:	e7f6      	b.n	800cdc6 <__any_on+0x30>

0800cdd8 <_calloc_r>:
 800cdd8:	b570      	push	{r4, r5, r6, lr}
 800cdda:	fba1 5402 	umull	r5, r4, r1, r2
 800cdde:	b934      	cbnz	r4, 800cdee <_calloc_r+0x16>
 800cde0:	4629      	mov	r1, r5
 800cde2:	f7fc f945 	bl	8009070 <_malloc_r>
 800cde6:	4606      	mov	r6, r0
 800cde8:	b928      	cbnz	r0, 800cdf6 <_calloc_r+0x1e>
 800cdea:	4630      	mov	r0, r6
 800cdec:	bd70      	pop	{r4, r5, r6, pc}
 800cdee:	220c      	movs	r2, #12
 800cdf0:	2600      	movs	r6, #0
 800cdf2:	6002      	str	r2, [r0, #0]
 800cdf4:	e7f9      	b.n	800cdea <_calloc_r+0x12>
 800cdf6:	462a      	mov	r2, r5
 800cdf8:	4621      	mov	r1, r4
 800cdfa:	f7fc f8c9 	bl	8008f90 <memset>
 800cdfe:	e7f4      	b.n	800cdea <_calloc_r+0x12>

0800ce00 <__ssputs_r>:
 800ce00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce04:	688e      	ldr	r6, [r1, #8]
 800ce06:	4682      	mov	sl, r0
 800ce08:	429e      	cmp	r6, r3
 800ce0a:	460c      	mov	r4, r1
 800ce0c:	4690      	mov	r8, r2
 800ce0e:	461f      	mov	r7, r3
 800ce10:	d838      	bhi.n	800ce84 <__ssputs_r+0x84>
 800ce12:	898a      	ldrh	r2, [r1, #12]
 800ce14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ce18:	d032      	beq.n	800ce80 <__ssputs_r+0x80>
 800ce1a:	6825      	ldr	r5, [r4, #0]
 800ce1c:	6909      	ldr	r1, [r1, #16]
 800ce1e:	3301      	adds	r3, #1
 800ce20:	eba5 0901 	sub.w	r9, r5, r1
 800ce24:	6965      	ldr	r5, [r4, #20]
 800ce26:	444b      	add	r3, r9
 800ce28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ce2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ce30:	106d      	asrs	r5, r5, #1
 800ce32:	429d      	cmp	r5, r3
 800ce34:	bf38      	it	cc
 800ce36:	461d      	movcc	r5, r3
 800ce38:	0553      	lsls	r3, r2, #21
 800ce3a:	d531      	bpl.n	800cea0 <__ssputs_r+0xa0>
 800ce3c:	4629      	mov	r1, r5
 800ce3e:	f7fc f917 	bl	8009070 <_malloc_r>
 800ce42:	4606      	mov	r6, r0
 800ce44:	b950      	cbnz	r0, 800ce5c <__ssputs_r+0x5c>
 800ce46:	230c      	movs	r3, #12
 800ce48:	f04f 30ff 	mov.w	r0, #4294967295
 800ce4c:	f8ca 3000 	str.w	r3, [sl]
 800ce50:	89a3      	ldrh	r3, [r4, #12]
 800ce52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce56:	81a3      	strh	r3, [r4, #12]
 800ce58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce5c:	464a      	mov	r2, r9
 800ce5e:	6921      	ldr	r1, [r4, #16]
 800ce60:	f7fc f888 	bl	8008f74 <memcpy>
 800ce64:	89a3      	ldrh	r3, [r4, #12]
 800ce66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ce6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce6e:	81a3      	strh	r3, [r4, #12]
 800ce70:	6126      	str	r6, [r4, #16]
 800ce72:	444e      	add	r6, r9
 800ce74:	6026      	str	r6, [r4, #0]
 800ce76:	463e      	mov	r6, r7
 800ce78:	6165      	str	r5, [r4, #20]
 800ce7a:	eba5 0509 	sub.w	r5, r5, r9
 800ce7e:	60a5      	str	r5, [r4, #8]
 800ce80:	42be      	cmp	r6, r7
 800ce82:	d900      	bls.n	800ce86 <__ssputs_r+0x86>
 800ce84:	463e      	mov	r6, r7
 800ce86:	4632      	mov	r2, r6
 800ce88:	4641      	mov	r1, r8
 800ce8a:	6820      	ldr	r0, [r4, #0]
 800ce8c:	f000 fb5c 	bl	800d548 <memmove>
 800ce90:	68a3      	ldr	r3, [r4, #8]
 800ce92:	2000      	movs	r0, #0
 800ce94:	1b9b      	subs	r3, r3, r6
 800ce96:	60a3      	str	r3, [r4, #8]
 800ce98:	6823      	ldr	r3, [r4, #0]
 800ce9a:	4433      	add	r3, r6
 800ce9c:	6023      	str	r3, [r4, #0]
 800ce9e:	e7db      	b.n	800ce58 <__ssputs_r+0x58>
 800cea0:	462a      	mov	r2, r5
 800cea2:	f000 fb6b 	bl	800d57c <_realloc_r>
 800cea6:	4606      	mov	r6, r0
 800cea8:	2800      	cmp	r0, #0
 800ceaa:	d1e1      	bne.n	800ce70 <__ssputs_r+0x70>
 800ceac:	4650      	mov	r0, sl
 800ceae:	6921      	ldr	r1, [r4, #16]
 800ceb0:	f7fc f876 	bl	8008fa0 <_free_r>
 800ceb4:	e7c7      	b.n	800ce46 <__ssputs_r+0x46>
	...

0800ceb8 <_svfiprintf_r>:
 800ceb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cebc:	4698      	mov	r8, r3
 800cebe:	898b      	ldrh	r3, [r1, #12]
 800cec0:	4607      	mov	r7, r0
 800cec2:	061b      	lsls	r3, r3, #24
 800cec4:	460d      	mov	r5, r1
 800cec6:	4614      	mov	r4, r2
 800cec8:	b09d      	sub	sp, #116	; 0x74
 800ceca:	d50e      	bpl.n	800ceea <_svfiprintf_r+0x32>
 800cecc:	690b      	ldr	r3, [r1, #16]
 800cece:	b963      	cbnz	r3, 800ceea <_svfiprintf_r+0x32>
 800ced0:	2140      	movs	r1, #64	; 0x40
 800ced2:	f7fc f8cd 	bl	8009070 <_malloc_r>
 800ced6:	6028      	str	r0, [r5, #0]
 800ced8:	6128      	str	r0, [r5, #16]
 800ceda:	b920      	cbnz	r0, 800cee6 <_svfiprintf_r+0x2e>
 800cedc:	230c      	movs	r3, #12
 800cede:	603b      	str	r3, [r7, #0]
 800cee0:	f04f 30ff 	mov.w	r0, #4294967295
 800cee4:	e0d1      	b.n	800d08a <_svfiprintf_r+0x1d2>
 800cee6:	2340      	movs	r3, #64	; 0x40
 800cee8:	616b      	str	r3, [r5, #20]
 800ceea:	2300      	movs	r3, #0
 800ceec:	9309      	str	r3, [sp, #36]	; 0x24
 800ceee:	2320      	movs	r3, #32
 800cef0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cef4:	2330      	movs	r3, #48	; 0x30
 800cef6:	f04f 0901 	mov.w	r9, #1
 800cefa:	f8cd 800c 	str.w	r8, [sp, #12]
 800cefe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d0a4 <_svfiprintf_r+0x1ec>
 800cf02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cf06:	4623      	mov	r3, r4
 800cf08:	469a      	mov	sl, r3
 800cf0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf0e:	b10a      	cbz	r2, 800cf14 <_svfiprintf_r+0x5c>
 800cf10:	2a25      	cmp	r2, #37	; 0x25
 800cf12:	d1f9      	bne.n	800cf08 <_svfiprintf_r+0x50>
 800cf14:	ebba 0b04 	subs.w	fp, sl, r4
 800cf18:	d00b      	beq.n	800cf32 <_svfiprintf_r+0x7a>
 800cf1a:	465b      	mov	r3, fp
 800cf1c:	4622      	mov	r2, r4
 800cf1e:	4629      	mov	r1, r5
 800cf20:	4638      	mov	r0, r7
 800cf22:	f7ff ff6d 	bl	800ce00 <__ssputs_r>
 800cf26:	3001      	adds	r0, #1
 800cf28:	f000 80aa 	beq.w	800d080 <_svfiprintf_r+0x1c8>
 800cf2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf2e:	445a      	add	r2, fp
 800cf30:	9209      	str	r2, [sp, #36]	; 0x24
 800cf32:	f89a 3000 	ldrb.w	r3, [sl]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	f000 80a2 	beq.w	800d080 <_svfiprintf_r+0x1c8>
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	f04f 32ff 	mov.w	r2, #4294967295
 800cf42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf46:	f10a 0a01 	add.w	sl, sl, #1
 800cf4a:	9304      	str	r3, [sp, #16]
 800cf4c:	9307      	str	r3, [sp, #28]
 800cf4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cf52:	931a      	str	r3, [sp, #104]	; 0x68
 800cf54:	4654      	mov	r4, sl
 800cf56:	2205      	movs	r2, #5
 800cf58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf5c:	4851      	ldr	r0, [pc, #324]	; (800d0a4 <_svfiprintf_r+0x1ec>)
 800cf5e:	f7ff fa69 	bl	800c434 <memchr>
 800cf62:	9a04      	ldr	r2, [sp, #16]
 800cf64:	b9d8      	cbnz	r0, 800cf9e <_svfiprintf_r+0xe6>
 800cf66:	06d0      	lsls	r0, r2, #27
 800cf68:	bf44      	itt	mi
 800cf6a:	2320      	movmi	r3, #32
 800cf6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf70:	0711      	lsls	r1, r2, #28
 800cf72:	bf44      	itt	mi
 800cf74:	232b      	movmi	r3, #43	; 0x2b
 800cf76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf7a:	f89a 3000 	ldrb.w	r3, [sl]
 800cf7e:	2b2a      	cmp	r3, #42	; 0x2a
 800cf80:	d015      	beq.n	800cfae <_svfiprintf_r+0xf6>
 800cf82:	4654      	mov	r4, sl
 800cf84:	2000      	movs	r0, #0
 800cf86:	f04f 0c0a 	mov.w	ip, #10
 800cf8a:	9a07      	ldr	r2, [sp, #28]
 800cf8c:	4621      	mov	r1, r4
 800cf8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf92:	3b30      	subs	r3, #48	; 0x30
 800cf94:	2b09      	cmp	r3, #9
 800cf96:	d94e      	bls.n	800d036 <_svfiprintf_r+0x17e>
 800cf98:	b1b0      	cbz	r0, 800cfc8 <_svfiprintf_r+0x110>
 800cf9a:	9207      	str	r2, [sp, #28]
 800cf9c:	e014      	b.n	800cfc8 <_svfiprintf_r+0x110>
 800cf9e:	eba0 0308 	sub.w	r3, r0, r8
 800cfa2:	fa09 f303 	lsl.w	r3, r9, r3
 800cfa6:	4313      	orrs	r3, r2
 800cfa8:	46a2      	mov	sl, r4
 800cfaa:	9304      	str	r3, [sp, #16]
 800cfac:	e7d2      	b.n	800cf54 <_svfiprintf_r+0x9c>
 800cfae:	9b03      	ldr	r3, [sp, #12]
 800cfb0:	1d19      	adds	r1, r3, #4
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	9103      	str	r1, [sp, #12]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	bfbb      	ittet	lt
 800cfba:	425b      	neglt	r3, r3
 800cfbc:	f042 0202 	orrlt.w	r2, r2, #2
 800cfc0:	9307      	strge	r3, [sp, #28]
 800cfc2:	9307      	strlt	r3, [sp, #28]
 800cfc4:	bfb8      	it	lt
 800cfc6:	9204      	strlt	r2, [sp, #16]
 800cfc8:	7823      	ldrb	r3, [r4, #0]
 800cfca:	2b2e      	cmp	r3, #46	; 0x2e
 800cfcc:	d10c      	bne.n	800cfe8 <_svfiprintf_r+0x130>
 800cfce:	7863      	ldrb	r3, [r4, #1]
 800cfd0:	2b2a      	cmp	r3, #42	; 0x2a
 800cfd2:	d135      	bne.n	800d040 <_svfiprintf_r+0x188>
 800cfd4:	9b03      	ldr	r3, [sp, #12]
 800cfd6:	3402      	adds	r4, #2
 800cfd8:	1d1a      	adds	r2, r3, #4
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	9203      	str	r2, [sp, #12]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	bfb8      	it	lt
 800cfe2:	f04f 33ff 	movlt.w	r3, #4294967295
 800cfe6:	9305      	str	r3, [sp, #20]
 800cfe8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800d0a8 <_svfiprintf_r+0x1f0>
 800cfec:	2203      	movs	r2, #3
 800cfee:	4650      	mov	r0, sl
 800cff0:	7821      	ldrb	r1, [r4, #0]
 800cff2:	f7ff fa1f 	bl	800c434 <memchr>
 800cff6:	b140      	cbz	r0, 800d00a <_svfiprintf_r+0x152>
 800cff8:	2340      	movs	r3, #64	; 0x40
 800cffa:	eba0 000a 	sub.w	r0, r0, sl
 800cffe:	fa03 f000 	lsl.w	r0, r3, r0
 800d002:	9b04      	ldr	r3, [sp, #16]
 800d004:	3401      	adds	r4, #1
 800d006:	4303      	orrs	r3, r0
 800d008:	9304      	str	r3, [sp, #16]
 800d00a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d00e:	2206      	movs	r2, #6
 800d010:	4826      	ldr	r0, [pc, #152]	; (800d0ac <_svfiprintf_r+0x1f4>)
 800d012:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d016:	f7ff fa0d 	bl	800c434 <memchr>
 800d01a:	2800      	cmp	r0, #0
 800d01c:	d038      	beq.n	800d090 <_svfiprintf_r+0x1d8>
 800d01e:	4b24      	ldr	r3, [pc, #144]	; (800d0b0 <_svfiprintf_r+0x1f8>)
 800d020:	bb1b      	cbnz	r3, 800d06a <_svfiprintf_r+0x1b2>
 800d022:	9b03      	ldr	r3, [sp, #12]
 800d024:	3307      	adds	r3, #7
 800d026:	f023 0307 	bic.w	r3, r3, #7
 800d02a:	3308      	adds	r3, #8
 800d02c:	9303      	str	r3, [sp, #12]
 800d02e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d030:	4433      	add	r3, r6
 800d032:	9309      	str	r3, [sp, #36]	; 0x24
 800d034:	e767      	b.n	800cf06 <_svfiprintf_r+0x4e>
 800d036:	460c      	mov	r4, r1
 800d038:	2001      	movs	r0, #1
 800d03a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d03e:	e7a5      	b.n	800cf8c <_svfiprintf_r+0xd4>
 800d040:	2300      	movs	r3, #0
 800d042:	f04f 0c0a 	mov.w	ip, #10
 800d046:	4619      	mov	r1, r3
 800d048:	3401      	adds	r4, #1
 800d04a:	9305      	str	r3, [sp, #20]
 800d04c:	4620      	mov	r0, r4
 800d04e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d052:	3a30      	subs	r2, #48	; 0x30
 800d054:	2a09      	cmp	r2, #9
 800d056:	d903      	bls.n	800d060 <_svfiprintf_r+0x1a8>
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d0c5      	beq.n	800cfe8 <_svfiprintf_r+0x130>
 800d05c:	9105      	str	r1, [sp, #20]
 800d05e:	e7c3      	b.n	800cfe8 <_svfiprintf_r+0x130>
 800d060:	4604      	mov	r4, r0
 800d062:	2301      	movs	r3, #1
 800d064:	fb0c 2101 	mla	r1, ip, r1, r2
 800d068:	e7f0      	b.n	800d04c <_svfiprintf_r+0x194>
 800d06a:	ab03      	add	r3, sp, #12
 800d06c:	9300      	str	r3, [sp, #0]
 800d06e:	462a      	mov	r2, r5
 800d070:	4638      	mov	r0, r7
 800d072:	4b10      	ldr	r3, [pc, #64]	; (800d0b4 <_svfiprintf_r+0x1fc>)
 800d074:	a904      	add	r1, sp, #16
 800d076:	f7fc f90d 	bl	8009294 <_printf_float>
 800d07a:	1c42      	adds	r2, r0, #1
 800d07c:	4606      	mov	r6, r0
 800d07e:	d1d6      	bne.n	800d02e <_svfiprintf_r+0x176>
 800d080:	89ab      	ldrh	r3, [r5, #12]
 800d082:	065b      	lsls	r3, r3, #25
 800d084:	f53f af2c 	bmi.w	800cee0 <_svfiprintf_r+0x28>
 800d088:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d08a:	b01d      	add	sp, #116	; 0x74
 800d08c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d090:	ab03      	add	r3, sp, #12
 800d092:	9300      	str	r3, [sp, #0]
 800d094:	462a      	mov	r2, r5
 800d096:	4638      	mov	r0, r7
 800d098:	4b06      	ldr	r3, [pc, #24]	; (800d0b4 <_svfiprintf_r+0x1fc>)
 800d09a:	a904      	add	r1, sp, #16
 800d09c:	f7fc fb96 	bl	80097cc <_printf_i>
 800d0a0:	e7eb      	b.n	800d07a <_svfiprintf_r+0x1c2>
 800d0a2:	bf00      	nop
 800d0a4:	0800df34 	.word	0x0800df34
 800d0a8:	0800df3a 	.word	0x0800df3a
 800d0ac:	0800df3e 	.word	0x0800df3e
 800d0b0:	08009295 	.word	0x08009295
 800d0b4:	0800ce01 	.word	0x0800ce01

0800d0b8 <__sfputc_r>:
 800d0b8:	6893      	ldr	r3, [r2, #8]
 800d0ba:	b410      	push	{r4}
 800d0bc:	3b01      	subs	r3, #1
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	6093      	str	r3, [r2, #8]
 800d0c2:	da07      	bge.n	800d0d4 <__sfputc_r+0x1c>
 800d0c4:	6994      	ldr	r4, [r2, #24]
 800d0c6:	42a3      	cmp	r3, r4
 800d0c8:	db01      	blt.n	800d0ce <__sfputc_r+0x16>
 800d0ca:	290a      	cmp	r1, #10
 800d0cc:	d102      	bne.n	800d0d4 <__sfputc_r+0x1c>
 800d0ce:	bc10      	pop	{r4}
 800d0d0:	f7fd bcde 	b.w	800aa90 <__swbuf_r>
 800d0d4:	6813      	ldr	r3, [r2, #0]
 800d0d6:	1c58      	adds	r0, r3, #1
 800d0d8:	6010      	str	r0, [r2, #0]
 800d0da:	7019      	strb	r1, [r3, #0]
 800d0dc:	4608      	mov	r0, r1
 800d0de:	bc10      	pop	{r4}
 800d0e0:	4770      	bx	lr

0800d0e2 <__sfputs_r>:
 800d0e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0e4:	4606      	mov	r6, r0
 800d0e6:	460f      	mov	r7, r1
 800d0e8:	4614      	mov	r4, r2
 800d0ea:	18d5      	adds	r5, r2, r3
 800d0ec:	42ac      	cmp	r4, r5
 800d0ee:	d101      	bne.n	800d0f4 <__sfputs_r+0x12>
 800d0f0:	2000      	movs	r0, #0
 800d0f2:	e007      	b.n	800d104 <__sfputs_r+0x22>
 800d0f4:	463a      	mov	r2, r7
 800d0f6:	4630      	mov	r0, r6
 800d0f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0fc:	f7ff ffdc 	bl	800d0b8 <__sfputc_r>
 800d100:	1c43      	adds	r3, r0, #1
 800d102:	d1f3      	bne.n	800d0ec <__sfputs_r+0xa>
 800d104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d108 <_vfiprintf_r>:
 800d108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d10c:	460d      	mov	r5, r1
 800d10e:	4614      	mov	r4, r2
 800d110:	4698      	mov	r8, r3
 800d112:	4606      	mov	r6, r0
 800d114:	b09d      	sub	sp, #116	; 0x74
 800d116:	b118      	cbz	r0, 800d120 <_vfiprintf_r+0x18>
 800d118:	6983      	ldr	r3, [r0, #24]
 800d11a:	b90b      	cbnz	r3, 800d120 <_vfiprintf_r+0x18>
 800d11c:	f7fe fd08 	bl	800bb30 <__sinit>
 800d120:	4b89      	ldr	r3, [pc, #548]	; (800d348 <_vfiprintf_r+0x240>)
 800d122:	429d      	cmp	r5, r3
 800d124:	d11b      	bne.n	800d15e <_vfiprintf_r+0x56>
 800d126:	6875      	ldr	r5, [r6, #4]
 800d128:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d12a:	07d9      	lsls	r1, r3, #31
 800d12c:	d405      	bmi.n	800d13a <_vfiprintf_r+0x32>
 800d12e:	89ab      	ldrh	r3, [r5, #12]
 800d130:	059a      	lsls	r2, r3, #22
 800d132:	d402      	bmi.n	800d13a <_vfiprintf_r+0x32>
 800d134:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d136:	f7ff f904 	bl	800c342 <__retarget_lock_acquire_recursive>
 800d13a:	89ab      	ldrh	r3, [r5, #12]
 800d13c:	071b      	lsls	r3, r3, #28
 800d13e:	d501      	bpl.n	800d144 <_vfiprintf_r+0x3c>
 800d140:	692b      	ldr	r3, [r5, #16]
 800d142:	b9eb      	cbnz	r3, 800d180 <_vfiprintf_r+0x78>
 800d144:	4629      	mov	r1, r5
 800d146:	4630      	mov	r0, r6
 800d148:	f7fd fcf4 	bl	800ab34 <__swsetup_r>
 800d14c:	b1c0      	cbz	r0, 800d180 <_vfiprintf_r+0x78>
 800d14e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d150:	07dc      	lsls	r4, r3, #31
 800d152:	d50e      	bpl.n	800d172 <_vfiprintf_r+0x6a>
 800d154:	f04f 30ff 	mov.w	r0, #4294967295
 800d158:	b01d      	add	sp, #116	; 0x74
 800d15a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d15e:	4b7b      	ldr	r3, [pc, #492]	; (800d34c <_vfiprintf_r+0x244>)
 800d160:	429d      	cmp	r5, r3
 800d162:	d101      	bne.n	800d168 <_vfiprintf_r+0x60>
 800d164:	68b5      	ldr	r5, [r6, #8]
 800d166:	e7df      	b.n	800d128 <_vfiprintf_r+0x20>
 800d168:	4b79      	ldr	r3, [pc, #484]	; (800d350 <_vfiprintf_r+0x248>)
 800d16a:	429d      	cmp	r5, r3
 800d16c:	bf08      	it	eq
 800d16e:	68f5      	ldreq	r5, [r6, #12]
 800d170:	e7da      	b.n	800d128 <_vfiprintf_r+0x20>
 800d172:	89ab      	ldrh	r3, [r5, #12]
 800d174:	0598      	lsls	r0, r3, #22
 800d176:	d4ed      	bmi.n	800d154 <_vfiprintf_r+0x4c>
 800d178:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d17a:	f7ff f8e3 	bl	800c344 <__retarget_lock_release_recursive>
 800d17e:	e7e9      	b.n	800d154 <_vfiprintf_r+0x4c>
 800d180:	2300      	movs	r3, #0
 800d182:	9309      	str	r3, [sp, #36]	; 0x24
 800d184:	2320      	movs	r3, #32
 800d186:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d18a:	2330      	movs	r3, #48	; 0x30
 800d18c:	f04f 0901 	mov.w	r9, #1
 800d190:	f8cd 800c 	str.w	r8, [sp, #12]
 800d194:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800d354 <_vfiprintf_r+0x24c>
 800d198:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d19c:	4623      	mov	r3, r4
 800d19e:	469a      	mov	sl, r3
 800d1a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d1a4:	b10a      	cbz	r2, 800d1aa <_vfiprintf_r+0xa2>
 800d1a6:	2a25      	cmp	r2, #37	; 0x25
 800d1a8:	d1f9      	bne.n	800d19e <_vfiprintf_r+0x96>
 800d1aa:	ebba 0b04 	subs.w	fp, sl, r4
 800d1ae:	d00b      	beq.n	800d1c8 <_vfiprintf_r+0xc0>
 800d1b0:	465b      	mov	r3, fp
 800d1b2:	4622      	mov	r2, r4
 800d1b4:	4629      	mov	r1, r5
 800d1b6:	4630      	mov	r0, r6
 800d1b8:	f7ff ff93 	bl	800d0e2 <__sfputs_r>
 800d1bc:	3001      	adds	r0, #1
 800d1be:	f000 80aa 	beq.w	800d316 <_vfiprintf_r+0x20e>
 800d1c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d1c4:	445a      	add	r2, fp
 800d1c6:	9209      	str	r2, [sp, #36]	; 0x24
 800d1c8:	f89a 3000 	ldrb.w	r3, [sl]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	f000 80a2 	beq.w	800d316 <_vfiprintf_r+0x20e>
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	f04f 32ff 	mov.w	r2, #4294967295
 800d1d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d1dc:	f10a 0a01 	add.w	sl, sl, #1
 800d1e0:	9304      	str	r3, [sp, #16]
 800d1e2:	9307      	str	r3, [sp, #28]
 800d1e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d1e8:	931a      	str	r3, [sp, #104]	; 0x68
 800d1ea:	4654      	mov	r4, sl
 800d1ec:	2205      	movs	r2, #5
 800d1ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1f2:	4858      	ldr	r0, [pc, #352]	; (800d354 <_vfiprintf_r+0x24c>)
 800d1f4:	f7ff f91e 	bl	800c434 <memchr>
 800d1f8:	9a04      	ldr	r2, [sp, #16]
 800d1fa:	b9d8      	cbnz	r0, 800d234 <_vfiprintf_r+0x12c>
 800d1fc:	06d1      	lsls	r1, r2, #27
 800d1fe:	bf44      	itt	mi
 800d200:	2320      	movmi	r3, #32
 800d202:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d206:	0713      	lsls	r3, r2, #28
 800d208:	bf44      	itt	mi
 800d20a:	232b      	movmi	r3, #43	; 0x2b
 800d20c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d210:	f89a 3000 	ldrb.w	r3, [sl]
 800d214:	2b2a      	cmp	r3, #42	; 0x2a
 800d216:	d015      	beq.n	800d244 <_vfiprintf_r+0x13c>
 800d218:	4654      	mov	r4, sl
 800d21a:	2000      	movs	r0, #0
 800d21c:	f04f 0c0a 	mov.w	ip, #10
 800d220:	9a07      	ldr	r2, [sp, #28]
 800d222:	4621      	mov	r1, r4
 800d224:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d228:	3b30      	subs	r3, #48	; 0x30
 800d22a:	2b09      	cmp	r3, #9
 800d22c:	d94e      	bls.n	800d2cc <_vfiprintf_r+0x1c4>
 800d22e:	b1b0      	cbz	r0, 800d25e <_vfiprintf_r+0x156>
 800d230:	9207      	str	r2, [sp, #28]
 800d232:	e014      	b.n	800d25e <_vfiprintf_r+0x156>
 800d234:	eba0 0308 	sub.w	r3, r0, r8
 800d238:	fa09 f303 	lsl.w	r3, r9, r3
 800d23c:	4313      	orrs	r3, r2
 800d23e:	46a2      	mov	sl, r4
 800d240:	9304      	str	r3, [sp, #16]
 800d242:	e7d2      	b.n	800d1ea <_vfiprintf_r+0xe2>
 800d244:	9b03      	ldr	r3, [sp, #12]
 800d246:	1d19      	adds	r1, r3, #4
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	9103      	str	r1, [sp, #12]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	bfbb      	ittet	lt
 800d250:	425b      	neglt	r3, r3
 800d252:	f042 0202 	orrlt.w	r2, r2, #2
 800d256:	9307      	strge	r3, [sp, #28]
 800d258:	9307      	strlt	r3, [sp, #28]
 800d25a:	bfb8      	it	lt
 800d25c:	9204      	strlt	r2, [sp, #16]
 800d25e:	7823      	ldrb	r3, [r4, #0]
 800d260:	2b2e      	cmp	r3, #46	; 0x2e
 800d262:	d10c      	bne.n	800d27e <_vfiprintf_r+0x176>
 800d264:	7863      	ldrb	r3, [r4, #1]
 800d266:	2b2a      	cmp	r3, #42	; 0x2a
 800d268:	d135      	bne.n	800d2d6 <_vfiprintf_r+0x1ce>
 800d26a:	9b03      	ldr	r3, [sp, #12]
 800d26c:	3402      	adds	r4, #2
 800d26e:	1d1a      	adds	r2, r3, #4
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	9203      	str	r2, [sp, #12]
 800d274:	2b00      	cmp	r3, #0
 800d276:	bfb8      	it	lt
 800d278:	f04f 33ff 	movlt.w	r3, #4294967295
 800d27c:	9305      	str	r3, [sp, #20]
 800d27e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800d358 <_vfiprintf_r+0x250>
 800d282:	2203      	movs	r2, #3
 800d284:	4650      	mov	r0, sl
 800d286:	7821      	ldrb	r1, [r4, #0]
 800d288:	f7ff f8d4 	bl	800c434 <memchr>
 800d28c:	b140      	cbz	r0, 800d2a0 <_vfiprintf_r+0x198>
 800d28e:	2340      	movs	r3, #64	; 0x40
 800d290:	eba0 000a 	sub.w	r0, r0, sl
 800d294:	fa03 f000 	lsl.w	r0, r3, r0
 800d298:	9b04      	ldr	r3, [sp, #16]
 800d29a:	3401      	adds	r4, #1
 800d29c:	4303      	orrs	r3, r0
 800d29e:	9304      	str	r3, [sp, #16]
 800d2a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2a4:	2206      	movs	r2, #6
 800d2a6:	482d      	ldr	r0, [pc, #180]	; (800d35c <_vfiprintf_r+0x254>)
 800d2a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d2ac:	f7ff f8c2 	bl	800c434 <memchr>
 800d2b0:	2800      	cmp	r0, #0
 800d2b2:	d03f      	beq.n	800d334 <_vfiprintf_r+0x22c>
 800d2b4:	4b2a      	ldr	r3, [pc, #168]	; (800d360 <_vfiprintf_r+0x258>)
 800d2b6:	bb1b      	cbnz	r3, 800d300 <_vfiprintf_r+0x1f8>
 800d2b8:	9b03      	ldr	r3, [sp, #12]
 800d2ba:	3307      	adds	r3, #7
 800d2bc:	f023 0307 	bic.w	r3, r3, #7
 800d2c0:	3308      	adds	r3, #8
 800d2c2:	9303      	str	r3, [sp, #12]
 800d2c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2c6:	443b      	add	r3, r7
 800d2c8:	9309      	str	r3, [sp, #36]	; 0x24
 800d2ca:	e767      	b.n	800d19c <_vfiprintf_r+0x94>
 800d2cc:	460c      	mov	r4, r1
 800d2ce:	2001      	movs	r0, #1
 800d2d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800d2d4:	e7a5      	b.n	800d222 <_vfiprintf_r+0x11a>
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	f04f 0c0a 	mov.w	ip, #10
 800d2dc:	4619      	mov	r1, r3
 800d2de:	3401      	adds	r4, #1
 800d2e0:	9305      	str	r3, [sp, #20]
 800d2e2:	4620      	mov	r0, r4
 800d2e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d2e8:	3a30      	subs	r2, #48	; 0x30
 800d2ea:	2a09      	cmp	r2, #9
 800d2ec:	d903      	bls.n	800d2f6 <_vfiprintf_r+0x1ee>
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d0c5      	beq.n	800d27e <_vfiprintf_r+0x176>
 800d2f2:	9105      	str	r1, [sp, #20]
 800d2f4:	e7c3      	b.n	800d27e <_vfiprintf_r+0x176>
 800d2f6:	4604      	mov	r4, r0
 800d2f8:	2301      	movs	r3, #1
 800d2fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800d2fe:	e7f0      	b.n	800d2e2 <_vfiprintf_r+0x1da>
 800d300:	ab03      	add	r3, sp, #12
 800d302:	9300      	str	r3, [sp, #0]
 800d304:	462a      	mov	r2, r5
 800d306:	4630      	mov	r0, r6
 800d308:	4b16      	ldr	r3, [pc, #88]	; (800d364 <_vfiprintf_r+0x25c>)
 800d30a:	a904      	add	r1, sp, #16
 800d30c:	f7fb ffc2 	bl	8009294 <_printf_float>
 800d310:	4607      	mov	r7, r0
 800d312:	1c78      	adds	r0, r7, #1
 800d314:	d1d6      	bne.n	800d2c4 <_vfiprintf_r+0x1bc>
 800d316:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d318:	07d9      	lsls	r1, r3, #31
 800d31a:	d405      	bmi.n	800d328 <_vfiprintf_r+0x220>
 800d31c:	89ab      	ldrh	r3, [r5, #12]
 800d31e:	059a      	lsls	r2, r3, #22
 800d320:	d402      	bmi.n	800d328 <_vfiprintf_r+0x220>
 800d322:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d324:	f7ff f80e 	bl	800c344 <__retarget_lock_release_recursive>
 800d328:	89ab      	ldrh	r3, [r5, #12]
 800d32a:	065b      	lsls	r3, r3, #25
 800d32c:	f53f af12 	bmi.w	800d154 <_vfiprintf_r+0x4c>
 800d330:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d332:	e711      	b.n	800d158 <_vfiprintf_r+0x50>
 800d334:	ab03      	add	r3, sp, #12
 800d336:	9300      	str	r3, [sp, #0]
 800d338:	462a      	mov	r2, r5
 800d33a:	4630      	mov	r0, r6
 800d33c:	4b09      	ldr	r3, [pc, #36]	; (800d364 <_vfiprintf_r+0x25c>)
 800d33e:	a904      	add	r1, sp, #16
 800d340:	f7fc fa44 	bl	80097cc <_printf_i>
 800d344:	e7e4      	b.n	800d310 <_vfiprintf_r+0x208>
 800d346:	bf00      	nop
 800d348:	0800dd1c 	.word	0x0800dd1c
 800d34c:	0800dd3c 	.word	0x0800dd3c
 800d350:	0800dcfc 	.word	0x0800dcfc
 800d354:	0800df34 	.word	0x0800df34
 800d358:	0800df3a 	.word	0x0800df3a
 800d35c:	0800df3e 	.word	0x0800df3e
 800d360:	08009295 	.word	0x08009295
 800d364:	0800d0e3 	.word	0x0800d0e3

0800d368 <nan>:
 800d368:	2000      	movs	r0, #0
 800d36a:	4901      	ldr	r1, [pc, #4]	; (800d370 <nan+0x8>)
 800d36c:	4770      	bx	lr
 800d36e:	bf00      	nop
 800d370:	7ff80000 	.word	0x7ff80000

0800d374 <__sread>:
 800d374:	b510      	push	{r4, lr}
 800d376:	460c      	mov	r4, r1
 800d378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d37c:	f000 f92e 	bl	800d5dc <_read_r>
 800d380:	2800      	cmp	r0, #0
 800d382:	bfab      	itete	ge
 800d384:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d386:	89a3      	ldrhlt	r3, [r4, #12]
 800d388:	181b      	addge	r3, r3, r0
 800d38a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d38e:	bfac      	ite	ge
 800d390:	6563      	strge	r3, [r4, #84]	; 0x54
 800d392:	81a3      	strhlt	r3, [r4, #12]
 800d394:	bd10      	pop	{r4, pc}

0800d396 <__swrite>:
 800d396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d39a:	461f      	mov	r7, r3
 800d39c:	898b      	ldrh	r3, [r1, #12]
 800d39e:	4605      	mov	r5, r0
 800d3a0:	05db      	lsls	r3, r3, #23
 800d3a2:	460c      	mov	r4, r1
 800d3a4:	4616      	mov	r6, r2
 800d3a6:	d505      	bpl.n	800d3b4 <__swrite+0x1e>
 800d3a8:	2302      	movs	r3, #2
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3b0:	f000 f8b8 	bl	800d524 <_lseek_r>
 800d3b4:	89a3      	ldrh	r3, [r4, #12]
 800d3b6:	4632      	mov	r2, r6
 800d3b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d3bc:	81a3      	strh	r3, [r4, #12]
 800d3be:	4628      	mov	r0, r5
 800d3c0:	463b      	mov	r3, r7
 800d3c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d3c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d3ca:	f000 b837 	b.w	800d43c <_write_r>

0800d3ce <__sseek>:
 800d3ce:	b510      	push	{r4, lr}
 800d3d0:	460c      	mov	r4, r1
 800d3d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3d6:	f000 f8a5 	bl	800d524 <_lseek_r>
 800d3da:	1c43      	adds	r3, r0, #1
 800d3dc:	89a3      	ldrh	r3, [r4, #12]
 800d3de:	bf15      	itete	ne
 800d3e0:	6560      	strne	r0, [r4, #84]	; 0x54
 800d3e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d3e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d3ea:	81a3      	strheq	r3, [r4, #12]
 800d3ec:	bf18      	it	ne
 800d3ee:	81a3      	strhne	r3, [r4, #12]
 800d3f0:	bd10      	pop	{r4, pc}

0800d3f2 <__sclose>:
 800d3f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3f6:	f000 b851 	b.w	800d49c <_close_r>

0800d3fa <strncmp>:
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	b510      	push	{r4, lr}
 800d3fe:	b172      	cbz	r2, 800d41e <strncmp+0x24>
 800d400:	3901      	subs	r1, #1
 800d402:	1884      	adds	r4, r0, r2
 800d404:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d408:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d40c:	4290      	cmp	r0, r2
 800d40e:	d101      	bne.n	800d414 <strncmp+0x1a>
 800d410:	42a3      	cmp	r3, r4
 800d412:	d101      	bne.n	800d418 <strncmp+0x1e>
 800d414:	1a80      	subs	r0, r0, r2
 800d416:	bd10      	pop	{r4, pc}
 800d418:	2800      	cmp	r0, #0
 800d41a:	d1f3      	bne.n	800d404 <strncmp+0xa>
 800d41c:	e7fa      	b.n	800d414 <strncmp+0x1a>
 800d41e:	4610      	mov	r0, r2
 800d420:	e7f9      	b.n	800d416 <strncmp+0x1c>

0800d422 <__ascii_wctomb>:
 800d422:	4603      	mov	r3, r0
 800d424:	4608      	mov	r0, r1
 800d426:	b141      	cbz	r1, 800d43a <__ascii_wctomb+0x18>
 800d428:	2aff      	cmp	r2, #255	; 0xff
 800d42a:	d904      	bls.n	800d436 <__ascii_wctomb+0x14>
 800d42c:	228a      	movs	r2, #138	; 0x8a
 800d42e:	f04f 30ff 	mov.w	r0, #4294967295
 800d432:	601a      	str	r2, [r3, #0]
 800d434:	4770      	bx	lr
 800d436:	2001      	movs	r0, #1
 800d438:	700a      	strb	r2, [r1, #0]
 800d43a:	4770      	bx	lr

0800d43c <_write_r>:
 800d43c:	b538      	push	{r3, r4, r5, lr}
 800d43e:	4604      	mov	r4, r0
 800d440:	4608      	mov	r0, r1
 800d442:	4611      	mov	r1, r2
 800d444:	2200      	movs	r2, #0
 800d446:	4d05      	ldr	r5, [pc, #20]	; (800d45c <_write_r+0x20>)
 800d448:	602a      	str	r2, [r5, #0]
 800d44a:	461a      	mov	r2, r3
 800d44c:	f7f4 fc6a 	bl	8001d24 <_write>
 800d450:	1c43      	adds	r3, r0, #1
 800d452:	d102      	bne.n	800d45a <_write_r+0x1e>
 800d454:	682b      	ldr	r3, [r5, #0]
 800d456:	b103      	cbz	r3, 800d45a <_write_r+0x1e>
 800d458:	6023      	str	r3, [r4, #0]
 800d45a:	bd38      	pop	{r3, r4, r5, pc}
 800d45c:	20000808 	.word	0x20000808

0800d460 <__assert_func>:
 800d460:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d462:	4614      	mov	r4, r2
 800d464:	461a      	mov	r2, r3
 800d466:	4b09      	ldr	r3, [pc, #36]	; (800d48c <__assert_func+0x2c>)
 800d468:	4605      	mov	r5, r0
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	68d8      	ldr	r0, [r3, #12]
 800d46e:	b14c      	cbz	r4, 800d484 <__assert_func+0x24>
 800d470:	4b07      	ldr	r3, [pc, #28]	; (800d490 <__assert_func+0x30>)
 800d472:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d476:	9100      	str	r1, [sp, #0]
 800d478:	462b      	mov	r3, r5
 800d47a:	4906      	ldr	r1, [pc, #24]	; (800d494 <__assert_func+0x34>)
 800d47c:	f000 f81e 	bl	800d4bc <fiprintf>
 800d480:	f7fb fd32 	bl	8008ee8 <abort>
 800d484:	4b04      	ldr	r3, [pc, #16]	; (800d498 <__assert_func+0x38>)
 800d486:	461c      	mov	r4, r3
 800d488:	e7f3      	b.n	800d472 <__assert_func+0x12>
 800d48a:	bf00      	nop
 800d48c:	2000000c 	.word	0x2000000c
 800d490:	0800df45 	.word	0x0800df45
 800d494:	0800df52 	.word	0x0800df52
 800d498:	0800df80 	.word	0x0800df80

0800d49c <_close_r>:
 800d49c:	b538      	push	{r3, r4, r5, lr}
 800d49e:	2300      	movs	r3, #0
 800d4a0:	4d05      	ldr	r5, [pc, #20]	; (800d4b8 <_close_r+0x1c>)
 800d4a2:	4604      	mov	r4, r0
 800d4a4:	4608      	mov	r0, r1
 800d4a6:	602b      	str	r3, [r5, #0]
 800d4a8:	f7f6 fab2 	bl	8003a10 <_close>
 800d4ac:	1c43      	adds	r3, r0, #1
 800d4ae:	d102      	bne.n	800d4b6 <_close_r+0x1a>
 800d4b0:	682b      	ldr	r3, [r5, #0]
 800d4b2:	b103      	cbz	r3, 800d4b6 <_close_r+0x1a>
 800d4b4:	6023      	str	r3, [r4, #0]
 800d4b6:	bd38      	pop	{r3, r4, r5, pc}
 800d4b8:	20000808 	.word	0x20000808

0800d4bc <fiprintf>:
 800d4bc:	b40e      	push	{r1, r2, r3}
 800d4be:	b503      	push	{r0, r1, lr}
 800d4c0:	4601      	mov	r1, r0
 800d4c2:	ab03      	add	r3, sp, #12
 800d4c4:	4805      	ldr	r0, [pc, #20]	; (800d4dc <fiprintf+0x20>)
 800d4c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4ca:	6800      	ldr	r0, [r0, #0]
 800d4cc:	9301      	str	r3, [sp, #4]
 800d4ce:	f7ff fe1b 	bl	800d108 <_vfiprintf_r>
 800d4d2:	b002      	add	sp, #8
 800d4d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d4d8:	b003      	add	sp, #12
 800d4da:	4770      	bx	lr
 800d4dc:	2000000c 	.word	0x2000000c

0800d4e0 <_fstat_r>:
 800d4e0:	b538      	push	{r3, r4, r5, lr}
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	4d06      	ldr	r5, [pc, #24]	; (800d500 <_fstat_r+0x20>)
 800d4e6:	4604      	mov	r4, r0
 800d4e8:	4608      	mov	r0, r1
 800d4ea:	4611      	mov	r1, r2
 800d4ec:	602b      	str	r3, [r5, #0]
 800d4ee:	f7f6 fa9a 	bl	8003a26 <_fstat>
 800d4f2:	1c43      	adds	r3, r0, #1
 800d4f4:	d102      	bne.n	800d4fc <_fstat_r+0x1c>
 800d4f6:	682b      	ldr	r3, [r5, #0]
 800d4f8:	b103      	cbz	r3, 800d4fc <_fstat_r+0x1c>
 800d4fa:	6023      	str	r3, [r4, #0]
 800d4fc:	bd38      	pop	{r3, r4, r5, pc}
 800d4fe:	bf00      	nop
 800d500:	20000808 	.word	0x20000808

0800d504 <_isatty_r>:
 800d504:	b538      	push	{r3, r4, r5, lr}
 800d506:	2300      	movs	r3, #0
 800d508:	4d05      	ldr	r5, [pc, #20]	; (800d520 <_isatty_r+0x1c>)
 800d50a:	4604      	mov	r4, r0
 800d50c:	4608      	mov	r0, r1
 800d50e:	602b      	str	r3, [r5, #0]
 800d510:	f7f6 fa98 	bl	8003a44 <_isatty>
 800d514:	1c43      	adds	r3, r0, #1
 800d516:	d102      	bne.n	800d51e <_isatty_r+0x1a>
 800d518:	682b      	ldr	r3, [r5, #0]
 800d51a:	b103      	cbz	r3, 800d51e <_isatty_r+0x1a>
 800d51c:	6023      	str	r3, [r4, #0]
 800d51e:	bd38      	pop	{r3, r4, r5, pc}
 800d520:	20000808 	.word	0x20000808

0800d524 <_lseek_r>:
 800d524:	b538      	push	{r3, r4, r5, lr}
 800d526:	4604      	mov	r4, r0
 800d528:	4608      	mov	r0, r1
 800d52a:	4611      	mov	r1, r2
 800d52c:	2200      	movs	r2, #0
 800d52e:	4d05      	ldr	r5, [pc, #20]	; (800d544 <_lseek_r+0x20>)
 800d530:	602a      	str	r2, [r5, #0]
 800d532:	461a      	mov	r2, r3
 800d534:	f7f6 fa90 	bl	8003a58 <_lseek>
 800d538:	1c43      	adds	r3, r0, #1
 800d53a:	d102      	bne.n	800d542 <_lseek_r+0x1e>
 800d53c:	682b      	ldr	r3, [r5, #0]
 800d53e:	b103      	cbz	r3, 800d542 <_lseek_r+0x1e>
 800d540:	6023      	str	r3, [r4, #0]
 800d542:	bd38      	pop	{r3, r4, r5, pc}
 800d544:	20000808 	.word	0x20000808

0800d548 <memmove>:
 800d548:	4288      	cmp	r0, r1
 800d54a:	b510      	push	{r4, lr}
 800d54c:	eb01 0402 	add.w	r4, r1, r2
 800d550:	d902      	bls.n	800d558 <memmove+0x10>
 800d552:	4284      	cmp	r4, r0
 800d554:	4623      	mov	r3, r4
 800d556:	d807      	bhi.n	800d568 <memmove+0x20>
 800d558:	1e43      	subs	r3, r0, #1
 800d55a:	42a1      	cmp	r1, r4
 800d55c:	d008      	beq.n	800d570 <memmove+0x28>
 800d55e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d562:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d566:	e7f8      	b.n	800d55a <memmove+0x12>
 800d568:	4601      	mov	r1, r0
 800d56a:	4402      	add	r2, r0
 800d56c:	428a      	cmp	r2, r1
 800d56e:	d100      	bne.n	800d572 <memmove+0x2a>
 800d570:	bd10      	pop	{r4, pc}
 800d572:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d576:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d57a:	e7f7      	b.n	800d56c <memmove+0x24>

0800d57c <_realloc_r>:
 800d57c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d580:	4680      	mov	r8, r0
 800d582:	4614      	mov	r4, r2
 800d584:	460e      	mov	r6, r1
 800d586:	b921      	cbnz	r1, 800d592 <_realloc_r+0x16>
 800d588:	4611      	mov	r1, r2
 800d58a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d58e:	f7fb bd6f 	b.w	8009070 <_malloc_r>
 800d592:	b92a      	cbnz	r2, 800d5a0 <_realloc_r+0x24>
 800d594:	f7fb fd04 	bl	8008fa0 <_free_r>
 800d598:	4625      	mov	r5, r4
 800d59a:	4628      	mov	r0, r5
 800d59c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5a0:	f000 f82e 	bl	800d600 <_malloc_usable_size_r>
 800d5a4:	4284      	cmp	r4, r0
 800d5a6:	4607      	mov	r7, r0
 800d5a8:	d802      	bhi.n	800d5b0 <_realloc_r+0x34>
 800d5aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d5ae:	d812      	bhi.n	800d5d6 <_realloc_r+0x5a>
 800d5b0:	4621      	mov	r1, r4
 800d5b2:	4640      	mov	r0, r8
 800d5b4:	f7fb fd5c 	bl	8009070 <_malloc_r>
 800d5b8:	4605      	mov	r5, r0
 800d5ba:	2800      	cmp	r0, #0
 800d5bc:	d0ed      	beq.n	800d59a <_realloc_r+0x1e>
 800d5be:	42bc      	cmp	r4, r7
 800d5c0:	4622      	mov	r2, r4
 800d5c2:	4631      	mov	r1, r6
 800d5c4:	bf28      	it	cs
 800d5c6:	463a      	movcs	r2, r7
 800d5c8:	f7fb fcd4 	bl	8008f74 <memcpy>
 800d5cc:	4631      	mov	r1, r6
 800d5ce:	4640      	mov	r0, r8
 800d5d0:	f7fb fce6 	bl	8008fa0 <_free_r>
 800d5d4:	e7e1      	b.n	800d59a <_realloc_r+0x1e>
 800d5d6:	4635      	mov	r5, r6
 800d5d8:	e7df      	b.n	800d59a <_realloc_r+0x1e>
	...

0800d5dc <_read_r>:
 800d5dc:	b538      	push	{r3, r4, r5, lr}
 800d5de:	4604      	mov	r4, r0
 800d5e0:	4608      	mov	r0, r1
 800d5e2:	4611      	mov	r1, r2
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	4d05      	ldr	r5, [pc, #20]	; (800d5fc <_read_r+0x20>)
 800d5e8:	602a      	str	r2, [r5, #0]
 800d5ea:	461a      	mov	r2, r3
 800d5ec:	f7f6 f9f3 	bl	80039d6 <_read>
 800d5f0:	1c43      	adds	r3, r0, #1
 800d5f2:	d102      	bne.n	800d5fa <_read_r+0x1e>
 800d5f4:	682b      	ldr	r3, [r5, #0]
 800d5f6:	b103      	cbz	r3, 800d5fa <_read_r+0x1e>
 800d5f8:	6023      	str	r3, [r4, #0]
 800d5fa:	bd38      	pop	{r3, r4, r5, pc}
 800d5fc:	20000808 	.word	0x20000808

0800d600 <_malloc_usable_size_r>:
 800d600:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d604:	1f18      	subs	r0, r3, #4
 800d606:	2b00      	cmp	r3, #0
 800d608:	bfbc      	itt	lt
 800d60a:	580b      	ldrlt	r3, [r1, r0]
 800d60c:	18c0      	addlt	r0, r0, r3
 800d60e:	4770      	bx	lr

0800d610 <_init>:
 800d610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d612:	bf00      	nop
 800d614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d616:	bc08      	pop	{r3}
 800d618:	469e      	mov	lr, r3
 800d61a:	4770      	bx	lr

0800d61c <_fini>:
 800d61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d61e:	bf00      	nop
 800d620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d622:	bc08      	pop	{r3}
 800d624:	469e      	mov	lr, r3
 800d626:	4770      	bx	lr
