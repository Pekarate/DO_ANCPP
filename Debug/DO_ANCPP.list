
DO_ANCPP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009284  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e4  08009394  08009394  00019394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009978  08009978  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08009978  08009978  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009978  08009978  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009978  08009978  00019978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009980  08009980  00019980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08009984  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c4  20000070  080099f4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000634  080099f4  00020634  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000169d8  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003137  00000000  00000000  00036a71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001300  00000000  00000000  00039ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001200  00000000  00000000  0003aea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d11a  00000000  00000000  0003c0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018a59  00000000  00000000  000591c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097c85  00000000  00000000  00071c1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001098a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006040  00000000  00000000  001098f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	0800937c 	.word	0x0800937c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	0800937c 	.word	0x0800937c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_dmul>:
 8000160:	b570      	push	{r4, r5, r6, lr}
 8000162:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000166:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800016a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016e:	bf1d      	ittte	ne
 8000170:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000174:	ea94 0f0c 	teqne	r4, ip
 8000178:	ea95 0f0c 	teqne	r5, ip
 800017c:	f000 f8de 	bleq	800033c <__aeabi_dmul+0x1dc>
 8000180:	442c      	add	r4, r5
 8000182:	ea81 0603 	eor.w	r6, r1, r3
 8000186:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800018a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000192:	bf18      	it	ne
 8000194:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000198:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800019c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001a0:	d038      	beq.n	8000214 <__aeabi_dmul+0xb4>
 80001a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a6:	f04f 0500 	mov.w	r5, #0
 80001aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b6:	f04f 0600 	mov.w	r6, #0
 80001ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001be:	f09c 0f00 	teq	ip, #0
 80001c2:	bf18      	it	ne
 80001c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001d4:	d204      	bcs.n	80001e0 <__aeabi_dmul+0x80>
 80001d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001da:	416d      	adcs	r5, r5
 80001dc:	eb46 0606 	adc.w	r6, r6, r6
 80001e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001f8:	bf88      	it	hi
 80001fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001fe:	d81e      	bhi.n	800023e <__aeabi_dmul+0xde>
 8000200:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000204:	bf08      	it	eq
 8000206:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800020a:	f150 0000 	adcs.w	r0, r0, #0
 800020e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000212:	bd70      	pop	{r4, r5, r6, pc}
 8000214:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000218:	ea46 0101 	orr.w	r1, r6, r1
 800021c:	ea40 0002 	orr.w	r0, r0, r2
 8000220:	ea81 0103 	eor.w	r1, r1, r3
 8000224:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000228:	bfc2      	ittt	gt
 800022a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000232:	bd70      	popgt	{r4, r5, r6, pc}
 8000234:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000238:	f04f 0e00 	mov.w	lr, #0
 800023c:	3c01      	subs	r4, #1
 800023e:	f300 80ab 	bgt.w	8000398 <__aeabi_dmul+0x238>
 8000242:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000246:	bfde      	ittt	le
 8000248:	2000      	movle	r0, #0
 800024a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800024e:	bd70      	pople	{r4, r5, r6, pc}
 8000250:	f1c4 0400 	rsb	r4, r4, #0
 8000254:	3c20      	subs	r4, #32
 8000256:	da35      	bge.n	80002c4 <__aeabi_dmul+0x164>
 8000258:	340c      	adds	r4, #12
 800025a:	dc1b      	bgt.n	8000294 <__aeabi_dmul+0x134>
 800025c:	f104 0414 	add.w	r4, r4, #20
 8000260:	f1c4 0520 	rsb	r5, r4, #32
 8000264:	fa00 f305 	lsl.w	r3, r0, r5
 8000268:	fa20 f004 	lsr.w	r0, r0, r4
 800026c:	fa01 f205 	lsl.w	r2, r1, r5
 8000270:	ea40 0002 	orr.w	r0, r0, r2
 8000274:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000278:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800027c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000280:	fa21 f604 	lsr.w	r6, r1, r4
 8000284:	eb42 0106 	adc.w	r1, r2, r6
 8000288:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800028c:	bf08      	it	eq
 800028e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f1c4 040c 	rsb	r4, r4, #12
 8000298:	f1c4 0520 	rsb	r5, r4, #32
 800029c:	fa00 f304 	lsl.w	r3, r0, r4
 80002a0:	fa20 f005 	lsr.w	r0, r0, r5
 80002a4:	fa01 f204 	lsl.w	r2, r1, r4
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002bc:	bf08      	it	eq
 80002be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f1c4 0520 	rsb	r5, r4, #32
 80002c8:	fa00 f205 	lsl.w	r2, r0, r5
 80002cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002d0:	fa20 f304 	lsr.w	r3, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea43 0302 	orr.w	r3, r3, r2
 80002dc:	fa21 f004 	lsr.w	r0, r1, r4
 80002e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	fa21 f204 	lsr.w	r2, r1, r4
 80002e8:	ea20 0002 	bic.w	r0, r0, r2
 80002ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f094 0f00 	teq	r4, #0
 8000300:	d10f      	bne.n	8000322 <__aeabi_dmul+0x1c2>
 8000302:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000306:	0040      	lsls	r0, r0, #1
 8000308:	eb41 0101 	adc.w	r1, r1, r1
 800030c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000310:	bf08      	it	eq
 8000312:	3c01      	subeq	r4, #1
 8000314:	d0f7      	beq.n	8000306 <__aeabi_dmul+0x1a6>
 8000316:	ea41 0106 	orr.w	r1, r1, r6
 800031a:	f095 0f00 	teq	r5, #0
 800031e:	bf18      	it	ne
 8000320:	4770      	bxne	lr
 8000322:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000326:	0052      	lsls	r2, r2, #1
 8000328:	eb43 0303 	adc.w	r3, r3, r3
 800032c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000330:	bf08      	it	eq
 8000332:	3d01      	subeq	r5, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1c6>
 8000336:	ea43 0306 	orr.w	r3, r3, r6
 800033a:	4770      	bx	lr
 800033c:	ea94 0f0c 	teq	r4, ip
 8000340:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000344:	bf18      	it	ne
 8000346:	ea95 0f0c 	teqne	r5, ip
 800034a:	d00c      	beq.n	8000366 <__aeabi_dmul+0x206>
 800034c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000350:	bf18      	it	ne
 8000352:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000356:	d1d1      	bne.n	80002fc <__aeabi_dmul+0x19c>
 8000358:	ea81 0103 	eor.w	r1, r1, r3
 800035c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000360:	f04f 0000 	mov.w	r0, #0
 8000364:	bd70      	pop	{r4, r5, r6, pc}
 8000366:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800036a:	bf06      	itte	eq
 800036c:	4610      	moveq	r0, r2
 800036e:	4619      	moveq	r1, r3
 8000370:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000374:	d019      	beq.n	80003aa <__aeabi_dmul+0x24a>
 8000376:	ea94 0f0c 	teq	r4, ip
 800037a:	d102      	bne.n	8000382 <__aeabi_dmul+0x222>
 800037c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000380:	d113      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000382:	ea95 0f0c 	teq	r5, ip
 8000386:	d105      	bne.n	8000394 <__aeabi_dmul+0x234>
 8000388:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800038c:	bf1c      	itt	ne
 800038e:	4610      	movne	r0, r2
 8000390:	4619      	movne	r1, r3
 8000392:	d10a      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000394:	ea81 0103 	eor.w	r1, r1, r3
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd70      	pop	{r4, r5, r6, pc}
 80003aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003b2:	bd70      	pop	{r4, r5, r6, pc}

080003b4 <__aeabi_drsub>:
 80003b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b8:	e002      	b.n	80003c0 <__adddf3>
 80003ba:	bf00      	nop

080003bc <__aeabi_dsub>:
 80003bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003c0 <__adddf3>:
 80003c0:	b530      	push	{r4, r5, lr}
 80003c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ca:	ea94 0f05 	teq	r4, r5
 80003ce:	bf08      	it	eq
 80003d0:	ea90 0f02 	teqeq	r0, r2
 80003d4:	bf1f      	itttt	ne
 80003d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e6:	f000 80e2 	beq.w	80005ae <__adddf3+0x1ee>
 80003ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003f2:	bfb8      	it	lt
 80003f4:	426d      	neglt	r5, r5
 80003f6:	dd0c      	ble.n	8000412 <__adddf3+0x52>
 80003f8:	442c      	add	r4, r5
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	ea82 0000 	eor.w	r0, r2, r0
 8000406:	ea83 0101 	eor.w	r1, r3, r1
 800040a:	ea80 0202 	eor.w	r2, r0, r2
 800040e:	ea81 0303 	eor.w	r3, r1, r3
 8000412:	2d36      	cmp	r5, #54	; 0x36
 8000414:	bf88      	it	hi
 8000416:	bd30      	pophi	{r4, r5, pc}
 8000418:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800041c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000420:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000424:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x70>
 800042a:	4240      	negs	r0, r0
 800042c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000430:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000434:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000438:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800043c:	d002      	beq.n	8000444 <__adddf3+0x84>
 800043e:	4252      	negs	r2, r2
 8000440:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000444:	ea94 0f05 	teq	r4, r5
 8000448:	f000 80a7 	beq.w	800059a <__adddf3+0x1da>
 800044c:	f1a4 0401 	sub.w	r4, r4, #1
 8000450:	f1d5 0e20 	rsbs	lr, r5, #32
 8000454:	db0d      	blt.n	8000472 <__adddf3+0xb2>
 8000456:	fa02 fc0e 	lsl.w	ip, r2, lr
 800045a:	fa22 f205 	lsr.w	r2, r2, r5
 800045e:	1880      	adds	r0, r0, r2
 8000460:	f141 0100 	adc.w	r1, r1, #0
 8000464:	fa03 f20e 	lsl.w	r2, r3, lr
 8000468:	1880      	adds	r0, r0, r2
 800046a:	fa43 f305 	asr.w	r3, r3, r5
 800046e:	4159      	adcs	r1, r3
 8000470:	e00e      	b.n	8000490 <__adddf3+0xd0>
 8000472:	f1a5 0520 	sub.w	r5, r5, #32
 8000476:	f10e 0e20 	add.w	lr, lr, #32
 800047a:	2a01      	cmp	r2, #1
 800047c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000480:	bf28      	it	cs
 8000482:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000486:	fa43 f305 	asr.w	r3, r3, r5
 800048a:	18c0      	adds	r0, r0, r3
 800048c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	d507      	bpl.n	80004a6 <__adddf3+0xe6>
 8000496:	f04f 0e00 	mov.w	lr, #0
 800049a:	f1dc 0c00 	rsbs	ip, ip, #0
 800049e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004aa:	d31b      	bcc.n	80004e4 <__adddf3+0x124>
 80004ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004b0:	d30c      	bcc.n	80004cc <__adddf3+0x10c>
 80004b2:	0849      	lsrs	r1, r1, #1
 80004b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004bc:	f104 0401 	add.w	r4, r4, #1
 80004c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c8:	f080 809a 	bcs.w	8000600 <__adddf3+0x240>
 80004cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004d0:	bf08      	it	eq
 80004d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d6:	f150 0000 	adcs.w	r0, r0, #0
 80004da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004de:	ea41 0105 	orr.w	r1, r1, r5
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e8:	4140      	adcs	r0, r0
 80004ea:	eb41 0101 	adc.w	r1, r1, r1
 80004ee:	3c01      	subs	r4, #1
 80004f0:	bf28      	it	cs
 80004f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f6:	d2e9      	bcs.n	80004cc <__adddf3+0x10c>
 80004f8:	f091 0f00 	teq	r1, #0
 80004fc:	bf04      	itt	eq
 80004fe:	4601      	moveq	r1, r0
 8000500:	2000      	moveq	r0, #0
 8000502:	fab1 f381 	clz	r3, r1
 8000506:	bf08      	it	eq
 8000508:	3320      	addeq	r3, #32
 800050a:	f1a3 030b 	sub.w	r3, r3, #11
 800050e:	f1b3 0220 	subs.w	r2, r3, #32
 8000512:	da0c      	bge.n	800052e <__adddf3+0x16e>
 8000514:	320c      	adds	r2, #12
 8000516:	dd08      	ble.n	800052a <__adddf3+0x16a>
 8000518:	f102 0c14 	add.w	ip, r2, #20
 800051c:	f1c2 020c 	rsb	r2, r2, #12
 8000520:	fa01 f00c 	lsl.w	r0, r1, ip
 8000524:	fa21 f102 	lsr.w	r1, r1, r2
 8000528:	e00c      	b.n	8000544 <__adddf3+0x184>
 800052a:	f102 0214 	add.w	r2, r2, #20
 800052e:	bfd8      	it	le
 8000530:	f1c2 0c20 	rsble	ip, r2, #32
 8000534:	fa01 f102 	lsl.w	r1, r1, r2
 8000538:	fa20 fc0c 	lsr.w	ip, r0, ip
 800053c:	bfdc      	itt	le
 800053e:	ea41 010c 	orrle.w	r1, r1, ip
 8000542:	4090      	lslle	r0, r2
 8000544:	1ae4      	subs	r4, r4, r3
 8000546:	bfa2      	ittt	ge
 8000548:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800054c:	4329      	orrge	r1, r5
 800054e:	bd30      	popge	{r4, r5, pc}
 8000550:	ea6f 0404 	mvn.w	r4, r4
 8000554:	3c1f      	subs	r4, #31
 8000556:	da1c      	bge.n	8000592 <__adddf3+0x1d2>
 8000558:	340c      	adds	r4, #12
 800055a:	dc0e      	bgt.n	800057a <__adddf3+0x1ba>
 800055c:	f104 0414 	add.w	r4, r4, #20
 8000560:	f1c4 0220 	rsb	r2, r4, #32
 8000564:	fa20 f004 	lsr.w	r0, r0, r4
 8000568:	fa01 f302 	lsl.w	r3, r1, r2
 800056c:	ea40 0003 	orr.w	r0, r0, r3
 8000570:	fa21 f304 	lsr.w	r3, r1, r4
 8000574:	ea45 0103 	orr.w	r1, r5, r3
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	f1c4 040c 	rsb	r4, r4, #12
 800057e:	f1c4 0220 	rsb	r2, r4, #32
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 f304 	lsl.w	r3, r1, r4
 800058a:	ea40 0003 	orr.w	r0, r0, r3
 800058e:	4629      	mov	r1, r5
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	fa21 f004 	lsr.w	r0, r1, r4
 8000596:	4629      	mov	r1, r5
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	f094 0f00 	teq	r4, #0
 800059e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005a2:	bf06      	itte	eq
 80005a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a8:	3401      	addeq	r4, #1
 80005aa:	3d01      	subne	r5, #1
 80005ac:	e74e      	b.n	800044c <__adddf3+0x8c>
 80005ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005b2:	bf18      	it	ne
 80005b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b8:	d029      	beq.n	800060e <__adddf3+0x24e>
 80005ba:	ea94 0f05 	teq	r4, r5
 80005be:	bf08      	it	eq
 80005c0:	ea90 0f02 	teqeq	r0, r2
 80005c4:	d005      	beq.n	80005d2 <__adddf3+0x212>
 80005c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ca:	bf04      	itt	eq
 80005cc:	4619      	moveq	r1, r3
 80005ce:	4610      	moveq	r0, r2
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	ea91 0f03 	teq	r1, r3
 80005d6:	bf1e      	ittt	ne
 80005d8:	2100      	movne	r1, #0
 80005da:	2000      	movne	r0, #0
 80005dc:	bd30      	popne	{r4, r5, pc}
 80005de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005e2:	d105      	bne.n	80005f0 <__adddf3+0x230>
 80005e4:	0040      	lsls	r0, r0, #1
 80005e6:	4149      	adcs	r1, r1
 80005e8:	bf28      	it	cs
 80005ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd30      	pop	{r4, r5, pc}
 80005f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f4:	bf3c      	itt	cc
 80005f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005fa:	bd30      	popcc	{r4, r5, pc}
 80005fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000600:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000604:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000608:	f04f 0000 	mov.w	r0, #0
 800060c:	bd30      	pop	{r4, r5, pc}
 800060e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000612:	bf1a      	itte	ne
 8000614:	4619      	movne	r1, r3
 8000616:	4610      	movne	r0, r2
 8000618:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800061c:	bf1c      	itt	ne
 800061e:	460b      	movne	r3, r1
 8000620:	4602      	movne	r2, r0
 8000622:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000626:	bf06      	itte	eq
 8000628:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800062c:	ea91 0f03 	teqeq	r1, r3
 8000630:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	bf00      	nop

08000638 <__aeabi_ui2d>:
 8000638:	f090 0f00 	teq	r0, #0
 800063c:	bf04      	itt	eq
 800063e:	2100      	moveq	r1, #0
 8000640:	4770      	bxeq	lr
 8000642:	b530      	push	{r4, r5, lr}
 8000644:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000648:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064c:	f04f 0500 	mov.w	r5, #0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e750      	b.n	80004f8 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_i2d>:
 8000658:	f090 0f00 	teq	r0, #0
 800065c:	bf04      	itt	eq
 800065e:	2100      	moveq	r1, #0
 8000660:	4770      	bxeq	lr
 8000662:	b530      	push	{r4, r5, lr}
 8000664:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000668:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000670:	bf48      	it	mi
 8000672:	4240      	negmi	r0, r0
 8000674:	f04f 0100 	mov.w	r1, #0
 8000678:	e73e      	b.n	80004f8 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_f2d>:
 800067c:	0042      	lsls	r2, r0, #1
 800067e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000682:	ea4f 0131 	mov.w	r1, r1, rrx
 8000686:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800068a:	bf1f      	itttt	ne
 800068c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000690:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000694:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000698:	4770      	bxne	lr
 800069a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069e:	bf08      	it	eq
 80006a0:	4770      	bxeq	lr
 80006a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a6:	bf04      	itt	eq
 80006a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006ac:	4770      	bxeq	lr
 80006ae:	b530      	push	{r4, r5, lr}
 80006b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	e71c      	b.n	80004f8 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_ul2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f04f 0500 	mov.w	r5, #0
 80006ce:	e00a      	b.n	80006e6 <__aeabi_l2d+0x16>

080006d0 <__aeabi_l2d>:
 80006d0:	ea50 0201 	orrs.w	r2, r0, r1
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006de:	d502      	bpl.n	80006e6 <__aeabi_l2d+0x16>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006f2:	f43f aed8 	beq.w	80004a6 <__adddf3+0xe6>
 80006f6:	f04f 0203 	mov.w	r2, #3
 80006fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fe:	bf18      	it	ne
 8000700:	3203      	addne	r2, #3
 8000702:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000706:	bf18      	it	ne
 8000708:	3203      	addne	r2, #3
 800070a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070e:	f1c2 0320 	rsb	r3, r2, #32
 8000712:	fa00 fc03 	lsl.w	ip, r0, r3
 8000716:	fa20 f002 	lsr.w	r0, r0, r2
 800071a:	fa01 fe03 	lsl.w	lr, r1, r3
 800071e:	ea40 000e 	orr.w	r0, r0, lr
 8000722:	fa21 f102 	lsr.w	r1, r1, r2
 8000726:	4414      	add	r4, r2
 8000728:	e6bd      	b.n	80004a6 <__adddf3+0xe6>
 800072a:	bf00      	nop

0800072c <__aeabi_d2f>:
 800072c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000730:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000734:	bf24      	itt	cs
 8000736:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800073a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800073e:	d90d      	bls.n	800075c <__aeabi_d2f+0x30>
 8000740:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000744:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000748:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800074c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000750:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000754:	bf08      	it	eq
 8000756:	f020 0001 	biceq.w	r0, r0, #1
 800075a:	4770      	bx	lr
 800075c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000760:	d121      	bne.n	80007a6 <__aeabi_d2f+0x7a>
 8000762:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000766:	bfbc      	itt	lt
 8000768:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800076c:	4770      	bxlt	lr
 800076e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000772:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000776:	f1c2 0218 	rsb	r2, r2, #24
 800077a:	f1c2 0c20 	rsb	ip, r2, #32
 800077e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000782:	fa20 f002 	lsr.w	r0, r0, r2
 8000786:	bf18      	it	ne
 8000788:	f040 0001 	orrne.w	r0, r0, #1
 800078c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000790:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000794:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000798:	ea40 000c 	orr.w	r0, r0, ip
 800079c:	fa23 f302 	lsr.w	r3, r3, r2
 80007a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80007a4:	e7cc      	b.n	8000740 <__aeabi_d2f+0x14>
 80007a6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80007aa:	d107      	bne.n	80007bc <__aeabi_d2f+0x90>
 80007ac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007b0:	bf1e      	ittt	ne
 80007b2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007b6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007ba:	4770      	bxne	lr
 80007bc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop

080007cc <__aeabi_frsub>:
 80007cc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80007d0:	e002      	b.n	80007d8 <__addsf3>
 80007d2:	bf00      	nop

080007d4 <__aeabi_fsub>:
 80007d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080007d8 <__addsf3>:
 80007d8:	0042      	lsls	r2, r0, #1
 80007da:	bf1f      	itttt	ne
 80007dc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80007e0:	ea92 0f03 	teqne	r2, r3
 80007e4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80007e8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80007ec:	d06a      	beq.n	80008c4 <__addsf3+0xec>
 80007ee:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80007f2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80007f6:	bfc1      	itttt	gt
 80007f8:	18d2      	addgt	r2, r2, r3
 80007fa:	4041      	eorgt	r1, r0
 80007fc:	4048      	eorgt	r0, r1
 80007fe:	4041      	eorgt	r1, r0
 8000800:	bfb8      	it	lt
 8000802:	425b      	neglt	r3, r3
 8000804:	2b19      	cmp	r3, #25
 8000806:	bf88      	it	hi
 8000808:	4770      	bxhi	lr
 800080a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800080e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000812:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000816:	bf18      	it	ne
 8000818:	4240      	negne	r0, r0
 800081a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800081e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000822:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000826:	bf18      	it	ne
 8000828:	4249      	negne	r1, r1
 800082a:	ea92 0f03 	teq	r2, r3
 800082e:	d03f      	beq.n	80008b0 <__addsf3+0xd8>
 8000830:	f1a2 0201 	sub.w	r2, r2, #1
 8000834:	fa41 fc03 	asr.w	ip, r1, r3
 8000838:	eb10 000c 	adds.w	r0, r0, ip
 800083c:	f1c3 0320 	rsb	r3, r3, #32
 8000840:	fa01 f103 	lsl.w	r1, r1, r3
 8000844:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000848:	d502      	bpl.n	8000850 <__addsf3+0x78>
 800084a:	4249      	negs	r1, r1
 800084c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000850:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000854:	d313      	bcc.n	800087e <__addsf3+0xa6>
 8000856:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800085a:	d306      	bcc.n	800086a <__addsf3+0x92>
 800085c:	0840      	lsrs	r0, r0, #1
 800085e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000862:	f102 0201 	add.w	r2, r2, #1
 8000866:	2afe      	cmp	r2, #254	; 0xfe
 8000868:	d251      	bcs.n	800090e <__addsf3+0x136>
 800086a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800086e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000872:	bf08      	it	eq
 8000874:	f020 0001 	biceq.w	r0, r0, #1
 8000878:	ea40 0003 	orr.w	r0, r0, r3
 800087c:	4770      	bx	lr
 800087e:	0049      	lsls	r1, r1, #1
 8000880:	eb40 0000 	adc.w	r0, r0, r0
 8000884:	3a01      	subs	r2, #1
 8000886:	bf28      	it	cs
 8000888:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800088c:	d2ed      	bcs.n	800086a <__addsf3+0x92>
 800088e:	fab0 fc80 	clz	ip, r0
 8000892:	f1ac 0c08 	sub.w	ip, ip, #8
 8000896:	ebb2 020c 	subs.w	r2, r2, ip
 800089a:	fa00 f00c 	lsl.w	r0, r0, ip
 800089e:	bfaa      	itet	ge
 80008a0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80008a4:	4252      	neglt	r2, r2
 80008a6:	4318      	orrge	r0, r3
 80008a8:	bfbc      	itt	lt
 80008aa:	40d0      	lsrlt	r0, r2
 80008ac:	4318      	orrlt	r0, r3
 80008ae:	4770      	bx	lr
 80008b0:	f092 0f00 	teq	r2, #0
 80008b4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80008b8:	bf06      	itte	eq
 80008ba:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80008be:	3201      	addeq	r2, #1
 80008c0:	3b01      	subne	r3, #1
 80008c2:	e7b5      	b.n	8000830 <__addsf3+0x58>
 80008c4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80008c8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80008cc:	bf18      	it	ne
 80008ce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008d2:	d021      	beq.n	8000918 <__addsf3+0x140>
 80008d4:	ea92 0f03 	teq	r2, r3
 80008d8:	d004      	beq.n	80008e4 <__addsf3+0x10c>
 80008da:	f092 0f00 	teq	r2, #0
 80008de:	bf08      	it	eq
 80008e0:	4608      	moveq	r0, r1
 80008e2:	4770      	bx	lr
 80008e4:	ea90 0f01 	teq	r0, r1
 80008e8:	bf1c      	itt	ne
 80008ea:	2000      	movne	r0, #0
 80008ec:	4770      	bxne	lr
 80008ee:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80008f2:	d104      	bne.n	80008fe <__addsf3+0x126>
 80008f4:	0040      	lsls	r0, r0, #1
 80008f6:	bf28      	it	cs
 80008f8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80008fc:	4770      	bx	lr
 80008fe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000902:	bf3c      	itt	cc
 8000904:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000908:	4770      	bxcc	lr
 800090a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800090e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000912:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000916:	4770      	bx	lr
 8000918:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800091c:	bf16      	itet	ne
 800091e:	4608      	movne	r0, r1
 8000920:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000924:	4601      	movne	r1, r0
 8000926:	0242      	lsls	r2, r0, #9
 8000928:	bf06      	itte	eq
 800092a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800092e:	ea90 0f01 	teqeq	r0, r1
 8000932:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000936:	4770      	bx	lr

08000938 <__aeabi_ui2f>:
 8000938:	f04f 0300 	mov.w	r3, #0
 800093c:	e004      	b.n	8000948 <__aeabi_i2f+0x8>
 800093e:	bf00      	nop

08000940 <__aeabi_i2f>:
 8000940:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000944:	bf48      	it	mi
 8000946:	4240      	negmi	r0, r0
 8000948:	ea5f 0c00 	movs.w	ip, r0
 800094c:	bf08      	it	eq
 800094e:	4770      	bxeq	lr
 8000950:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000954:	4601      	mov	r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	e01c      	b.n	8000996 <__aeabi_l2f+0x2a>

0800095c <__aeabi_ul2f>:
 800095c:	ea50 0201 	orrs.w	r2, r0, r1
 8000960:	bf08      	it	eq
 8000962:	4770      	bxeq	lr
 8000964:	f04f 0300 	mov.w	r3, #0
 8000968:	e00a      	b.n	8000980 <__aeabi_l2f+0x14>
 800096a:	bf00      	nop

0800096c <__aeabi_l2f>:
 800096c:	ea50 0201 	orrs.w	r2, r0, r1
 8000970:	bf08      	it	eq
 8000972:	4770      	bxeq	lr
 8000974:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000978:	d502      	bpl.n	8000980 <__aeabi_l2f+0x14>
 800097a:	4240      	negs	r0, r0
 800097c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000980:	ea5f 0c01 	movs.w	ip, r1
 8000984:	bf02      	ittt	eq
 8000986:	4684      	moveq	ip, r0
 8000988:	4601      	moveq	r1, r0
 800098a:	2000      	moveq	r0, #0
 800098c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000990:	bf08      	it	eq
 8000992:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000996:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800099a:	fabc f28c 	clz	r2, ip
 800099e:	3a08      	subs	r2, #8
 80009a0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80009a4:	db10      	blt.n	80009c8 <__aeabi_l2f+0x5c>
 80009a6:	fa01 fc02 	lsl.w	ip, r1, r2
 80009aa:	4463      	add	r3, ip
 80009ac:	fa00 fc02 	lsl.w	ip, r0, r2
 80009b0:	f1c2 0220 	rsb	r2, r2, #32
 80009b4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80009b8:	fa20 f202 	lsr.w	r2, r0, r2
 80009bc:	eb43 0002 	adc.w	r0, r3, r2
 80009c0:	bf08      	it	eq
 80009c2:	f020 0001 	biceq.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	f102 0220 	add.w	r2, r2, #32
 80009cc:	fa01 fc02 	lsl.w	ip, r1, r2
 80009d0:	f1c2 0220 	rsb	r2, r2, #32
 80009d4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80009d8:	fa21 f202 	lsr.w	r2, r1, r2
 80009dc:	eb43 0002 	adc.w	r0, r3, r2
 80009e0:	bf08      	it	eq
 80009e2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80009e6:	4770      	bx	lr

080009e8 <__aeabi_fmul>:
 80009e8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009ec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009f0:	bf1e      	ittt	ne
 80009f2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009f6:	ea92 0f0c 	teqne	r2, ip
 80009fa:	ea93 0f0c 	teqne	r3, ip
 80009fe:	d06f      	beq.n	8000ae0 <__aeabi_fmul+0xf8>
 8000a00:	441a      	add	r2, r3
 8000a02:	ea80 0c01 	eor.w	ip, r0, r1
 8000a06:	0240      	lsls	r0, r0, #9
 8000a08:	bf18      	it	ne
 8000a0a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000a0e:	d01e      	beq.n	8000a4e <__aeabi_fmul+0x66>
 8000a10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000a14:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000a18:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000a1c:	fba0 3101 	umull	r3, r1, r0, r1
 8000a20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a24:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000a28:	bf3e      	ittt	cc
 8000a2a:	0049      	lslcc	r1, r1, #1
 8000a2c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000a30:	005b      	lslcc	r3, r3, #1
 8000a32:	ea40 0001 	orr.w	r0, r0, r1
 8000a36:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000a3a:	2afd      	cmp	r2, #253	; 0xfd
 8000a3c:	d81d      	bhi.n	8000a7a <__aeabi_fmul+0x92>
 8000a3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000a42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a46:	bf08      	it	eq
 8000a48:	f020 0001 	biceq.w	r0, r0, #1
 8000a4c:	4770      	bx	lr
 8000a4e:	f090 0f00 	teq	r0, #0
 8000a52:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a56:	bf08      	it	eq
 8000a58:	0249      	lsleq	r1, r1, #9
 8000a5a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a5e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000a62:	3a7f      	subs	r2, #127	; 0x7f
 8000a64:	bfc2      	ittt	gt
 8000a66:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a6a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a6e:	4770      	bxgt	lr
 8000a70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a74:	f04f 0300 	mov.w	r3, #0
 8000a78:	3a01      	subs	r2, #1
 8000a7a:	dc5d      	bgt.n	8000b38 <__aeabi_fmul+0x150>
 8000a7c:	f112 0f19 	cmn.w	r2, #25
 8000a80:	bfdc      	itt	le
 8000a82:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000a86:	4770      	bxle	lr
 8000a88:	f1c2 0200 	rsb	r2, r2, #0
 8000a8c:	0041      	lsls	r1, r0, #1
 8000a8e:	fa21 f102 	lsr.w	r1, r1, r2
 8000a92:	f1c2 0220 	rsb	r2, r2, #32
 8000a96:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a9a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a9e:	f140 0000 	adc.w	r0, r0, #0
 8000aa2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000aa6:	bf08      	it	eq
 8000aa8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000aac:	4770      	bx	lr
 8000aae:	f092 0f00 	teq	r2, #0
 8000ab2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ab6:	bf02      	ittt	eq
 8000ab8:	0040      	lsleq	r0, r0, #1
 8000aba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000abe:	3a01      	subeq	r2, #1
 8000ac0:	d0f9      	beq.n	8000ab6 <__aeabi_fmul+0xce>
 8000ac2:	ea40 000c 	orr.w	r0, r0, ip
 8000ac6:	f093 0f00 	teq	r3, #0
 8000aca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ace:	bf02      	ittt	eq
 8000ad0:	0049      	lsleq	r1, r1, #1
 8000ad2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ad6:	3b01      	subeq	r3, #1
 8000ad8:	d0f9      	beq.n	8000ace <__aeabi_fmul+0xe6>
 8000ada:	ea41 010c 	orr.w	r1, r1, ip
 8000ade:	e78f      	b.n	8000a00 <__aeabi_fmul+0x18>
 8000ae0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ae4:	ea92 0f0c 	teq	r2, ip
 8000ae8:	bf18      	it	ne
 8000aea:	ea93 0f0c 	teqne	r3, ip
 8000aee:	d00a      	beq.n	8000b06 <__aeabi_fmul+0x11e>
 8000af0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000af4:	bf18      	it	ne
 8000af6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000afa:	d1d8      	bne.n	8000aae <__aeabi_fmul+0xc6>
 8000afc:	ea80 0001 	eor.w	r0, r0, r1
 8000b00:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000b04:	4770      	bx	lr
 8000b06:	f090 0f00 	teq	r0, #0
 8000b0a:	bf17      	itett	ne
 8000b0c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000b10:	4608      	moveq	r0, r1
 8000b12:	f091 0f00 	teqne	r1, #0
 8000b16:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000b1a:	d014      	beq.n	8000b46 <__aeabi_fmul+0x15e>
 8000b1c:	ea92 0f0c 	teq	r2, ip
 8000b20:	d101      	bne.n	8000b26 <__aeabi_fmul+0x13e>
 8000b22:	0242      	lsls	r2, r0, #9
 8000b24:	d10f      	bne.n	8000b46 <__aeabi_fmul+0x15e>
 8000b26:	ea93 0f0c 	teq	r3, ip
 8000b2a:	d103      	bne.n	8000b34 <__aeabi_fmul+0x14c>
 8000b2c:	024b      	lsls	r3, r1, #9
 8000b2e:	bf18      	it	ne
 8000b30:	4608      	movne	r0, r1
 8000b32:	d108      	bne.n	8000b46 <__aeabi_fmul+0x15e>
 8000b34:	ea80 0001 	eor.w	r0, r0, r1
 8000b38:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000b3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b44:	4770      	bx	lr
 8000b46:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b4a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_fdiv>:
 8000b50:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b54:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b58:	bf1e      	ittt	ne
 8000b5a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b5e:	ea92 0f0c 	teqne	r2, ip
 8000b62:	ea93 0f0c 	teqne	r3, ip
 8000b66:	d069      	beq.n	8000c3c <__aeabi_fdiv+0xec>
 8000b68:	eba2 0203 	sub.w	r2, r2, r3
 8000b6c:	ea80 0c01 	eor.w	ip, r0, r1
 8000b70:	0249      	lsls	r1, r1, #9
 8000b72:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b76:	d037      	beq.n	8000be8 <__aeabi_fdiv+0x98>
 8000b78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b7c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b80:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b84:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b88:	428b      	cmp	r3, r1
 8000b8a:	bf38      	it	cc
 8000b8c:	005b      	lslcc	r3, r3, #1
 8000b8e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000b92:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000b96:	428b      	cmp	r3, r1
 8000b98:	bf24      	itt	cs
 8000b9a:	1a5b      	subcs	r3, r3, r1
 8000b9c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ba0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ba4:	bf24      	itt	cs
 8000ba6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000baa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000bae:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000bb2:	bf24      	itt	cs
 8000bb4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000bb8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000bbc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000bc0:	bf24      	itt	cs
 8000bc2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000bc6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000bca:	011b      	lsls	r3, r3, #4
 8000bcc:	bf18      	it	ne
 8000bce:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000bd2:	d1e0      	bne.n	8000b96 <__aeabi_fdiv+0x46>
 8000bd4:	2afd      	cmp	r2, #253	; 0xfd
 8000bd6:	f63f af50 	bhi.w	8000a7a <__aeabi_fmul+0x92>
 8000bda:	428b      	cmp	r3, r1
 8000bdc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bec:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bf0:	327f      	adds	r2, #127	; 0x7f
 8000bf2:	bfc2      	ittt	gt
 8000bf4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000bf8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bfc:	4770      	bxgt	lr
 8000bfe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c02:	f04f 0300 	mov.w	r3, #0
 8000c06:	3a01      	subs	r2, #1
 8000c08:	e737      	b.n	8000a7a <__aeabi_fmul+0x92>
 8000c0a:	f092 0f00 	teq	r2, #0
 8000c0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c12:	bf02      	ittt	eq
 8000c14:	0040      	lsleq	r0, r0, #1
 8000c16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c1a:	3a01      	subeq	r2, #1
 8000c1c:	d0f9      	beq.n	8000c12 <__aeabi_fdiv+0xc2>
 8000c1e:	ea40 000c 	orr.w	r0, r0, ip
 8000c22:	f093 0f00 	teq	r3, #0
 8000c26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c2a:	bf02      	ittt	eq
 8000c2c:	0049      	lsleq	r1, r1, #1
 8000c2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c32:	3b01      	subeq	r3, #1
 8000c34:	d0f9      	beq.n	8000c2a <__aeabi_fdiv+0xda>
 8000c36:	ea41 010c 	orr.w	r1, r1, ip
 8000c3a:	e795      	b.n	8000b68 <__aeabi_fdiv+0x18>
 8000c3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c40:	ea92 0f0c 	teq	r2, ip
 8000c44:	d108      	bne.n	8000c58 <__aeabi_fdiv+0x108>
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	f47f af7d 	bne.w	8000b46 <__aeabi_fmul+0x15e>
 8000c4c:	ea93 0f0c 	teq	r3, ip
 8000c50:	f47f af70 	bne.w	8000b34 <__aeabi_fmul+0x14c>
 8000c54:	4608      	mov	r0, r1
 8000c56:	e776      	b.n	8000b46 <__aeabi_fmul+0x15e>
 8000c58:	ea93 0f0c 	teq	r3, ip
 8000c5c:	d104      	bne.n	8000c68 <__aeabi_fdiv+0x118>
 8000c5e:	024b      	lsls	r3, r1, #9
 8000c60:	f43f af4c 	beq.w	8000afc <__aeabi_fmul+0x114>
 8000c64:	4608      	mov	r0, r1
 8000c66:	e76e      	b.n	8000b46 <__aeabi_fmul+0x15e>
 8000c68:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c6c:	bf18      	it	ne
 8000c6e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c72:	d1ca      	bne.n	8000c0a <__aeabi_fdiv+0xba>
 8000c74:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000c78:	f47f af5c 	bne.w	8000b34 <__aeabi_fmul+0x14c>
 8000c7c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000c80:	f47f af3c 	bne.w	8000afc <__aeabi_fmul+0x114>
 8000c84:	e75f      	b.n	8000b46 <__aeabi_fmul+0x15e>
 8000c86:	bf00      	nop

08000c88 <__gesf2>:
 8000c88:	f04f 3cff 	mov.w	ip, #4294967295
 8000c8c:	e006      	b.n	8000c9c <__cmpsf2+0x4>
 8000c8e:	bf00      	nop

08000c90 <__lesf2>:
 8000c90:	f04f 0c01 	mov.w	ip, #1
 8000c94:	e002      	b.n	8000c9c <__cmpsf2+0x4>
 8000c96:	bf00      	nop

08000c98 <__cmpsf2>:
 8000c98:	f04f 0c01 	mov.w	ip, #1
 8000c9c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ca0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ca4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ca8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cac:	bf18      	it	ne
 8000cae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb2:	d011      	beq.n	8000cd8 <__cmpsf2+0x40>
 8000cb4:	b001      	add	sp, #4
 8000cb6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000cba:	bf18      	it	ne
 8000cbc:	ea90 0f01 	teqne	r0, r1
 8000cc0:	bf58      	it	pl
 8000cc2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000cc6:	bf88      	it	hi
 8000cc8:	17c8      	asrhi	r0, r1, #31
 8000cca:	bf38      	it	cc
 8000ccc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000cd0:	bf18      	it	ne
 8000cd2:	f040 0001 	orrne.w	r0, r0, #1
 8000cd6:	4770      	bx	lr
 8000cd8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cdc:	d102      	bne.n	8000ce4 <__cmpsf2+0x4c>
 8000cde:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ce2:	d105      	bne.n	8000cf0 <__cmpsf2+0x58>
 8000ce4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ce8:	d1e4      	bne.n	8000cb4 <__cmpsf2+0x1c>
 8000cea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000cee:	d0e1      	beq.n	8000cb4 <__cmpsf2+0x1c>
 8000cf0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_cfrcmple>:
 8000cf8:	4684      	mov	ip, r0
 8000cfa:	4608      	mov	r0, r1
 8000cfc:	4661      	mov	r1, ip
 8000cfe:	e7ff      	b.n	8000d00 <__aeabi_cfcmpeq>

08000d00 <__aeabi_cfcmpeq>:
 8000d00:	b50f      	push	{r0, r1, r2, r3, lr}
 8000d02:	f7ff ffc9 	bl	8000c98 <__cmpsf2>
 8000d06:	2800      	cmp	r0, #0
 8000d08:	bf48      	it	mi
 8000d0a:	f110 0f00 	cmnmi.w	r0, #0
 8000d0e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d10 <__aeabi_fcmpeq>:
 8000d10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d14:	f7ff fff4 	bl	8000d00 <__aeabi_cfcmpeq>
 8000d18:	bf0c      	ite	eq
 8000d1a:	2001      	moveq	r0, #1
 8000d1c:	2000      	movne	r0, #0
 8000d1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d22:	bf00      	nop

08000d24 <__aeabi_fcmplt>:
 8000d24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d28:	f7ff ffea 	bl	8000d00 <__aeabi_cfcmpeq>
 8000d2c:	bf34      	ite	cc
 8000d2e:	2001      	movcc	r0, #1
 8000d30:	2000      	movcs	r0, #0
 8000d32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d36:	bf00      	nop

08000d38 <__aeabi_fcmple>:
 8000d38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d3c:	f7ff ffe0 	bl	8000d00 <__aeabi_cfcmpeq>
 8000d40:	bf94      	ite	ls
 8000d42:	2001      	movls	r0, #1
 8000d44:	2000      	movhi	r0, #0
 8000d46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d4a:	bf00      	nop

08000d4c <__aeabi_fcmpge>:
 8000d4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d50:	f7ff ffd2 	bl	8000cf8 <__aeabi_cfrcmple>
 8000d54:	bf94      	ite	ls
 8000d56:	2001      	movls	r0, #1
 8000d58:	2000      	movhi	r0, #0
 8000d5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d5e:	bf00      	nop

08000d60 <__aeabi_fcmpgt>:
 8000d60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d64:	f7ff ffc8 	bl	8000cf8 <__aeabi_cfrcmple>
 8000d68:	bf34      	ite	cc
 8000d6a:	2001      	movcc	r0, #1
 8000d6c:	2000      	movcs	r0, #0
 8000d6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d72:	bf00      	nop

08000d74 <__aeabi_fcmpun>:
 8000d74:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d78:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d7c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d80:	d102      	bne.n	8000d88 <__aeabi_fcmpun+0x14>
 8000d82:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d86:	d108      	bne.n	8000d9a <__aeabi_fcmpun+0x26>
 8000d88:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000d8c:	d102      	bne.n	8000d94 <__aeabi_fcmpun+0x20>
 8000d8e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d92:	d102      	bne.n	8000d9a <__aeabi_fcmpun+0x26>
 8000d94:	f04f 0000 	mov.w	r0, #0
 8000d98:	4770      	bx	lr
 8000d9a:	f04f 0001 	mov.w	r0, #1
 8000d9e:	4770      	bx	lr

08000da0 <__aeabi_f2iz>:
 8000da0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000da4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000da8:	d30f      	bcc.n	8000dca <__aeabi_f2iz+0x2a>
 8000daa:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000dae:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000db2:	d90d      	bls.n	8000dd0 <__aeabi_f2iz+0x30>
 8000db4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000db8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000dbc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000dc0:	fa23 f002 	lsr.w	r0, r3, r2
 8000dc4:	bf18      	it	ne
 8000dc6:	4240      	negne	r0, r0
 8000dc8:	4770      	bx	lr
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	4770      	bx	lr
 8000dd0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000dd4:	d101      	bne.n	8000dda <__aeabi_f2iz+0x3a>
 8000dd6:	0242      	lsls	r2, r0, #9
 8000dd8:	d105      	bne.n	8000de6 <__aeabi_f2iz+0x46>
 8000dda:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000dde:	bf08      	it	eq
 8000de0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000de4:	4770      	bx	lr
 8000de6:	f04f 0000 	mov.w	r0, #0
 8000dea:	4770      	bx	lr

08000dec <__aeabi_f2uiz>:
 8000dec:	0042      	lsls	r2, r0, #1
 8000dee:	d20e      	bcs.n	8000e0e <__aeabi_f2uiz+0x22>
 8000df0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000df4:	d30b      	bcc.n	8000e0e <__aeabi_f2uiz+0x22>
 8000df6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000dfa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000dfe:	d409      	bmi.n	8000e14 <__aeabi_f2uiz+0x28>
 8000e00:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e08:	fa23 f002 	lsr.w	r0, r3, r2
 8000e0c:	4770      	bx	lr
 8000e0e:	f04f 0000 	mov.w	r0, #0
 8000e12:	4770      	bx	lr
 8000e14:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e18:	d101      	bne.n	8000e1e <__aeabi_f2uiz+0x32>
 8000e1a:	0242      	lsls	r2, r0, #9
 8000e1c:	d102      	bne.n	8000e24 <__aeabi_f2uiz+0x38>
 8000e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8000e22:	4770      	bx	lr
 8000e24:	f04f 0000 	mov.w	r0, #0
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop

08000e2c <_ZSt3logf>:
  using ::log;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  log(float __x)
  { return __builtin_logf(__x); }
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f006 fd8f 	bl	8007958 <logf>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f006 fdab 	bl	80079a8 <sqrtf>
 8000e52:	4603      	mov	r3, r0
 8000e54:	4618      	mov	r0, r3
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <_ZN8MAX30100C1E4Mode12SamplingRate13LEDPulseWidth10LEDCurrentbb>:
#include "MAX30100.hpp"
#include "main.h"
extern I2C_HandleTypeDef hi2c1;
#define _MAX30100_I2C &hi2c1
#define _MAX30100_I2C_ADDRESS 0xAE
MAX30100::MAX30100(
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	4608      	mov	r0, r1
 8000e66:	4611      	mov	r1, r2
 8000e68:	461a      	mov	r2, r3
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	70fb      	strb	r3, [r7, #3]
 8000e6e:	460b      	mov	r3, r1
 8000e70:	70bb      	strb	r3, [r7, #2]
 8000e72:	4613      	mov	r3, r2
 8000e74:	707b      	strb	r3, [r7, #1]
        LEDPulseWidth pulseWidth,
        LEDCurrent IrLedCurrent,
        bool highResMode,
        bool debug)
{
  this->writeRegister(0x06, 0b01000000); // resst
 8000e76:	2240      	movs	r2, #64	; 0x40
 8000e78:	2106      	movs	r1, #6
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f000 fb3c 	bl	80014f8 <_ZN8MAX3010013writeRegisterEhh>
  this->debug = debug;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	7e3a      	ldrb	r2, [r7, #24]
 8000e84:	701a      	strb	r2, [r3, #0]
  currentPulseDetectorState = PULSE_IDLE;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2200      	movs	r2, #0
 8000e8a:	721a      	strb	r2, [r3, #8]

  setMode(  mode );
 8000e8c:	78fb      	ldrb	r3, [r7, #3]
 8000e8e:	4619      	mov	r1, r3
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f000 fb89 	bl	80015a8 <_ZN8MAX301007setModeE4Mode>

  //Check table 8 in datasheet on page 19. You can't just throw in sample rate and pulse width randomly. 100hz + 1600us is max for that resolution
  setSamplingRate( samplingRate );
 8000e96:	78bb      	ldrb	r3, [r7, #2]
 8000e98:	4619      	mov	r1, r3
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f000 fbc6 	bl	800162c <_ZN8MAX3010015setSamplingRateE12SamplingRate>
  setLEDPulseWidth( pulseWidth );
 8000ea0:	787b      	ldrb	r3, [r7, #1]
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f000 fbe1 	bl	800166c <_ZN8MAX3010016setLEDPulseWidthE13LEDPulseWidth>

  redLEDCurrent = (uint8_t)STARTING_RED_LED_CURRENT;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2208      	movs	r2, #8
 8000eae:	705a      	strb	r2, [r3, #1]
  lastREDLedCurrentCheck = 0;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f04f 0200 	mov.w	r2, #0
 8000eb6:	605a      	str	r2, [r3, #4]

  this->IrLedCurrent = IrLedCurrent;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	7c3a      	ldrb	r2, [r7, #16]
 8000ebc:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
  setLEDCurrents(redLEDCurrent, IrLedCurrent );
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	785b      	ldrb	r3, [r3, #1]
 8000ec4:	7c3a      	ldrb	r2, [r7, #16]
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f000 fbeb 	bl	80016a4 <_ZN8MAX3010014setLEDCurrentsEhh>
  setHighresModeEnabled(highResMode);
 8000ece:	7d3b      	ldrb	r3, [r7, #20]
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f000 fb84 	bl	80015e0 <_ZN8MAX3010021setHighresModeEnabledEb>


  dcFilterIR.w = 0;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f04f 0200 	mov.w	r2, #0
 8000ede:	649a      	str	r2, [r3, #72]	; 0x48
  dcFilterIR.result = 0;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f04f 0200 	mov.w	r2, #0
 8000ee6:	64da      	str	r2, [r3, #76]	; 0x4c

  dcFilterRed.w = 0;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f04f 0200 	mov.w	r2, #0
 8000eee:	651a      	str	r2, [r3, #80]	; 0x50
  dcFilterRed.result = 0;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f04f 0200 	mov.w	r2, #0
 8000ef6:	655a      	str	r2, [r3, #84]	; 0x54


  lpbFilterIR.v[0] = 0;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f04f 0200 	mov.w	r2, #0
 8000efe:	659a      	str	r2, [r3, #88]	; 0x58
  lpbFilterIR.v[1] = 0;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f04f 0200 	mov.w	r2, #0
 8000f06:	65da      	str	r2, [r3, #92]	; 0x5c
  lpbFilterIR.result = 0;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f04f 0200 	mov.w	r2, #0
 8000f0e:	661a      	str	r2, [r3, #96]	; 0x60

  meanDiffIR.index = 0;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2200      	movs	r2, #0
 8000f14:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  meanDiffIR.sum = 0;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f04f 0200 	mov.w	r2, #0
 8000f1e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  meanDiffIR.count = 0;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8


  valuesBPM[0] = 0;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	f04f 0200 	mov.w	r2, #0
 8000f30:	611a      	str	r2, [r3, #16]
  valuesBPMSum = 0;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	f04f 0200 	mov.w	r2, #0
 8000f38:	639a      	str	r2, [r3, #56]	; 0x38
  valuesBPMCount = 0;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  bpmIndex = 0;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2200      	movs	r2, #0
 8000f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d


  irACValueSqSum = 0;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f04f 0200 	mov.w	r2, #0
 8000f50:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  redACValueSqSum = 0;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f04f 0200 	mov.w	r2, #0
 8000f5a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  samplesRecorded = 0;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2200      	movs	r2, #0
 8000f62:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
  pulsesDetected = 0;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
  currentSaO2Value = 0;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f04f 0200 	mov.w	r2, #0
 8000f74:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  lastBeatThreshold = 0;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	641a      	str	r2, [r3, #64]	; 0x40

}
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4618      	mov	r0, r3
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <_ZN8MAX301006updateEv>:

pulseoxymeter_t MAX30100::update()
{
 8000f88:	b5b0      	push	{r4, r5, r7, lr}
 8000f8a:	b08a      	sub	sp, #40	; 0x28
 8000f8c:	af02      	add	r7, sp, #8
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
  pulseoxymeter_t result = {
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	4618      	mov	r0, r3
 8000f96:	2324      	movs	r3, #36	; 0x24
 8000f98:	461a      	mov	r2, r3
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	f006 feec 	bl	8007d78 <memset>
    /*bool pulseDetected*/ false,
    /*float heartBPM*/ 0.0,
    /*float irCardiogram*/ 0.0,
    /*float irDcValue*/ 0.0,
    /*float redDcValue*/ 0.0,
    /*float SaO2*/ currentSaO2Value,
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
    /*uint32_t lastBeatThreshold*/ 0,
    /*float dcFilteredIR*/ 0.0,
    /*float dcFilteredRed*/ 0.0
  };
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	615a      	str	r2, [r3, #20]


  fifo_t rawData = readFIFO();
 8000faa:	68b8      	ldr	r0, [r7, #8]
 8000fac:	f000 fbaa 	bl	8001704 <_ZN8MAX301008readFIFOEv>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	617b      	str	r3, [r7, #20]

  dcFilterIR = dcRemoval( (float)rawData.rawIR, dcFilterIR.w, ALPHA );
 8000fb4:	8abb      	ldrh	r3, [r7, #20]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff fcbe 	bl	8000938 <__aeabi_ui2f>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fc2:	68bc      	ldr	r4, [r7, #8]
 8000fc4:	4638      	mov	r0, r7
 8000fc6:	4988      	ldr	r1, [pc, #544]	; (80011e8 <_ZN8MAX301006updateEv+0x260>)
 8000fc8:	9100      	str	r1, [sp, #0]
 8000fca:	68b9      	ldr	r1, [r7, #8]
 8000fcc:	f000 fbc4 	bl	8001758 <_ZN8MAX301009dcRemovalEfff>
 8000fd0:	f104 0348 	add.w	r3, r4, #72	; 0x48
 8000fd4:	463a      	mov	r2, r7
 8000fd6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fda:	e883 0003 	stmia.w	r3, {r0, r1}
  dcFilterRed = dcRemoval( (float)rawData.rawRed, dcFilterRed.w, ALPHA );
 8000fde:	8afb      	ldrh	r3, [r7, #22]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff fca9 	bl	8000938 <__aeabi_ui2f>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000fec:	68bc      	ldr	r4, [r7, #8]
 8000fee:	4638      	mov	r0, r7
 8000ff0:	497d      	ldr	r1, [pc, #500]	; (80011e8 <_ZN8MAX301006updateEv+0x260>)
 8000ff2:	9100      	str	r1, [sp, #0]
 8000ff4:	68b9      	ldr	r1, [r7, #8]
 8000ff6:	f000 fbaf 	bl	8001758 <_ZN8MAX301009dcRemovalEfff>
 8000ffa:	f104 0350 	add.w	r3, r4, #80	; 0x50
 8000ffe:	463a      	mov	r2, r7
 8001000:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001004:	e883 0003 	stmia.w	r3, {r0, r1}

  float meanDiffResIR = meanDiff( dcFilterIR.result, &meanDiffIR);
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	3364      	adds	r3, #100	; 0x64
 8001010:	461a      	mov	r2, r3
 8001012:	68b8      	ldr	r0, [r7, #8]
 8001014:	f000 fc0c 	bl	8001830 <_ZN8MAX301008meanDiffEfP16meanDiffFilter_t>
 8001018:	61f8      	str	r0, [r7, #28]
  lowPassButterworthFilter( meanDiffResIR/*-dcFilterIR.result*/, &lpbFilterIR );
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	3358      	adds	r3, #88	; 0x58
 800101e:	461a      	mov	r2, r3
 8001020:	69f9      	ldr	r1, [r7, #28]
 8001022:	68b8      	ldr	r0, [r7, #8]
 8001024:	f000 fbbc 	bl	80017a0 <_ZN8MAX3010024lowPassButterworthFilterEfP19butterworthFilter_t>

  irACValueSqSum += dcFilterIR.result * dcFilterIR.result;
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	f8d3 40ac 	ldr.w	r4, [r3, #172]	; 0xac
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001036:	4619      	mov	r1, r3
 8001038:	4610      	mov	r0, r2
 800103a:	f7ff fcd5 	bl	80009e8 <__aeabi_fmul>
 800103e:	4603      	mov	r3, r0
 8001040:	4619      	mov	r1, r3
 8001042:	4620      	mov	r0, r4
 8001044:	f7ff fbc8 	bl	80007d8 <__addsf3>
 8001048:	4603      	mov	r3, r0
 800104a:	461a      	mov	r2, r3
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  redACValueSqSum += dcFilterRed.result * dcFilterRed.result;
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	f8d3 40b0 	ldr.w	r4, [r3, #176]	; 0xb0
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001060:	4619      	mov	r1, r3
 8001062:	4610      	mov	r0, r2
 8001064:	f7ff fcc0 	bl	80009e8 <__aeabi_fmul>
 8001068:	4603      	mov	r3, r0
 800106a:	4619      	mov	r1, r3
 800106c:	4620      	mov	r0, r4
 800106e:	f7ff fbb3 	bl	80007d8 <__addsf3>
 8001072:	4603      	mov	r3, r0
 8001074:	461a      	mov	r2, r3
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  samplesRecorded++;
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 8001082:	3301      	adds	r3, #1
 8001084:	b29a      	uxth	r2, r3
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4

  if( detectPulse( lpbFilterIR.result ) && samplesRecorded > 0 )
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001090:	4619      	mov	r1, r3
 8001092:	68b8      	ldr	r0, [r7, #8]
 8001094:	f000 f8ae 	bl	80011f4 <_ZN8MAX3010011detectPulseEf>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d006      	beq.n	80010ac <_ZN8MAX301006updateEv+0x124>
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <_ZN8MAX301006updateEv+0x124>
 80010a8:	2301      	movs	r3, #1
 80010aa:	e000      	b.n	80010ae <_ZN8MAX301006updateEv+0x126>
 80010ac:	2300      	movs	r3, #0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d071      	beq.n	8001196 <_ZN8MAX301006updateEv+0x20e>
  {
    result.pulseDetected=true;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	2201      	movs	r2, #1
 80010b6:	701a      	strb	r2, [r3, #0]
    pulsesDetected++;
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 80010be:	3301      	adds	r3, #1
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6

    float ratioRMS = log( sqrt(redACValueSqSum/samplesRecorded) ) / log( sqrt(irACValueSqSum/samplesRecorded) );
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	f8d3 40b0 	ldr.w	r4, [r3, #176]	; 0xb0
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff fc33 	bl	8000940 <__aeabi_i2f>
 80010da:	4603      	mov	r3, r0
 80010dc:	4619      	mov	r1, r3
 80010de:	4620      	mov	r0, r4
 80010e0:	f7ff fd36 	bl	8000b50 <__aeabi_fdiv>
 80010e4:	4603      	mov	r3, r0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff feac 	bl	8000e44 <_ZSt4sqrtf>
 80010ec:	4603      	mov	r3, r0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fe9c 	bl	8000e2c <_ZSt3logf>
 80010f4:	4605      	mov	r5, r0
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	f8d3 40ac 	ldr.w	r4, [r3, #172]	; 0xac
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff fc1c 	bl	8000940 <__aeabi_i2f>
 8001108:	4603      	mov	r3, r0
 800110a:	4619      	mov	r1, r3
 800110c:	4620      	mov	r0, r4
 800110e:	f7ff fd1f 	bl	8000b50 <__aeabi_fdiv>
 8001112:	4603      	mov	r3, r0
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff fe95 	bl	8000e44 <_ZSt4sqrtf>
 800111a:	4603      	mov	r3, r0
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fe85 	bl	8000e2c <_ZSt3logf>
 8001122:	4603      	mov	r3, r0
 8001124:	4619      	mov	r1, r3
 8001126:	4628      	mov	r0, r5
 8001128:	f7ff fd12 	bl	8000b50 <__aeabi_fdiv>
 800112c:	4603      	mov	r3, r0
 800112e:	61bb      	str	r3, [r7, #24]
      //Serial.print("RMS Ratio: ");
      //Serial.println(ratioRMS);
    }

    //This is my adjusted standard model, so it shows 0.89 as 94% saturation. It is probably far from correct, requires proper empircal calibration
    currentSaO2Value = 110.0 - 18.0 * ratioRMS;
 8001130:	69b8      	ldr	r0, [r7, #24]
 8001132:	f7ff faa3 	bl	800067c <__aeabi_f2d>
 8001136:	f04f 0200 	mov.w	r2, #0
 800113a:	4b2c      	ldr	r3, [pc, #176]	; (80011ec <_ZN8MAX301006updateEv+0x264>)
 800113c:	f7ff f810 	bl	8000160 <__aeabi_dmul>
 8001140:	4602      	mov	r2, r0
 8001142:	460b      	mov	r3, r1
 8001144:	f04f 0000 	mov.w	r0, #0
 8001148:	4929      	ldr	r1, [pc, #164]	; (80011f0 <_ZN8MAX301006updateEv+0x268>)
 800114a:	f7ff f937 	bl	80003bc <__aeabi_dsub>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	4610      	mov	r0, r2
 8001154:	4619      	mov	r1, r3
 8001156:	f7ff fae9 	bl	800072c <__aeabi_d2f>
 800115a:	4602      	mov	r2, r0
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    result.SaO2 = currentSaO2Value;
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	615a      	str	r2, [r3, #20]

    if( pulsesDetected % RESET_SPO2_EVERY_N_PULSES == 0)
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 8001172:	f003 0303 	and.w	r3, r3, #3
 8001176:	2b00      	cmp	r3, #0
 8001178:	d10d      	bne.n	8001196 <_ZN8MAX301006updateEv+0x20e>
    {
      irACValueSqSum = 0;
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	f04f 0200 	mov.w	r2, #0
 8001180:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
      redACValueSqSum = 0;
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      samplesRecorded = 0;
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	2200      	movs	r2, #0
 8001192:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
    }
  }

  balanceIntesities( dcFilterRed.w, dcFilterIR.w );
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800119e:	461a      	mov	r2, r3
 80011a0:	68b8      	ldr	r0, [r7, #8]
 80011a2:	f000 f937 	bl	8001414 <_ZN8MAX3010017balanceIntesitiesEff>


  result.heartBPM = currentBPM;
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	68da      	ldr	r2, [r3, #12]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	605a      	str	r2, [r3, #4]
  result.irCardiogram = lpbFilterIR.result;
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	609a      	str	r2, [r3, #8]
  result.irDcValue = dcFilterIR.w;
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	60da      	str	r2, [r3, #12]
  result.redDcValue = dcFilterRed.w;
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	611a      	str	r2, [r3, #16]
  result.lastBeatThreshold = lastBeatThreshold;
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	619a      	str	r2, [r3, #24]
  result.dcFilteredIR = dcFilterIR.result;
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	61da      	str	r2, [r3, #28]
  result.dcFilteredRed = dcFilterRed.result;
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	621a      	str	r2, [r3, #32]


  return result;
 80011de:	bf00      	nop
}
 80011e0:	68f8      	ldr	r0, [r7, #12]
 80011e2:	3720      	adds	r7, #32
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bdb0      	pop	{r4, r5, r7, pc}
 80011e8:	3f733333 	.word	0x3f733333
 80011ec:	40320000 	.word	0x40320000
 80011f0:	405b8000 	.word	0x405b8000

080011f4 <_ZN8MAX3010011detectPulseEf>:

bool MAX30100::detectPulse(float sensor_value)
{
 80011f4:	b590      	push	{r4, r7, lr}
 80011f6:	b087      	sub	sp, #28
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
  static float prev_sensor_value = 0;
  static uint8_t values_went_down = 0;
  static uint32_t currentBeat = 0;
  static uint32_t lastBeat = 0;

  if(sensor_value > PULSE_MAX_THRESHOLD)
 80011fe:	497d      	ldr	r1, [pc, #500]	; (80013f4 <_ZN8MAX3010011detectPulseEf+0x200>)
 8001200:	6838      	ldr	r0, [r7, #0]
 8001202:	f7ff fdad 	bl	8000d60 <__aeabi_fcmpgt>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d014      	beq.n	8001236 <_ZN8MAX3010011detectPulseEf+0x42>
  {
    currentPulseDetectorState = PULSE_IDLE;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2200      	movs	r2, #0
 8001210:	721a      	strb	r2, [r3, #8]
    prev_sensor_value = 0;
 8001212:	4b79      	ldr	r3, [pc, #484]	; (80013f8 <_ZN8MAX3010011detectPulseEf+0x204>)
 8001214:	f04f 0200 	mov.w	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
    lastBeat = 0;
 800121a:	4b78      	ldr	r3, [pc, #480]	; (80013fc <_ZN8MAX3010011detectPulseEf+0x208>)
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
    currentBeat = 0;
 8001220:	4b77      	ldr	r3, [pc, #476]	; (8001400 <_ZN8MAX3010011detectPulseEf+0x20c>)
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
    values_went_down = 0;
 8001226:	4b77      	ldr	r3, [pc, #476]	; (8001404 <_ZN8MAX3010011detectPulseEf+0x210>)
 8001228:	2200      	movs	r2, #0
 800122a:	701a      	strb	r2, [r3, #0]
    lastBeatThreshold = 0;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	641a      	str	r2, [r3, #64]	; 0x40
    return false;
 8001232:	2300      	movs	r3, #0
 8001234:	e0d9      	b.n	80013ea <_ZN8MAX3010011detectPulseEf+0x1f6>
  }

  switch(currentPulseDetectorState)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	7a1b      	ldrb	r3, [r3, #8]
 800123a:	2b02      	cmp	r3, #2
 800123c:	f000 80b6 	beq.w	80013ac <_ZN8MAX3010011detectPulseEf+0x1b8>
 8001240:	2b02      	cmp	r3, #2
 8001242:	f300 80ce 	bgt.w	80013e2 <_ZN8MAX3010011detectPulseEf+0x1ee>
 8001246:	2b00      	cmp	r3, #0
 8001248:	d002      	beq.n	8001250 <_ZN8MAX3010011detectPulseEf+0x5c>
 800124a:	2b01      	cmp	r3, #1
 800124c:	d00f      	beq.n	800126e <_ZN8MAX3010011detectPulseEf+0x7a>
 800124e:	e0c8      	b.n	80013e2 <_ZN8MAX3010011detectPulseEf+0x1ee>
  {
    case PULSE_IDLE:
      if(sensor_value >= PULSE_MIN_THRESHOLD) {
 8001250:	496d      	ldr	r1, [pc, #436]	; (8001408 <_ZN8MAX3010011detectPulseEf+0x214>)
 8001252:	6838      	ldr	r0, [r7, #0]
 8001254:	f7ff fd7a 	bl	8000d4c <__aeabi_fcmpge>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d100      	bne.n	8001260 <_ZN8MAX3010011detectPulseEf+0x6c>
        currentPulseDetectorState = PULSE_TRACE_UP;
        values_went_down = 0;
      }
      break;
 800125e:	e0c0      	b.n	80013e2 <_ZN8MAX3010011detectPulseEf+0x1ee>
        currentPulseDetectorState = PULSE_TRACE_UP;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2201      	movs	r2, #1
 8001264:	721a      	strb	r2, [r3, #8]
        values_went_down = 0;
 8001266:	4b67      	ldr	r3, [pc, #412]	; (8001404 <_ZN8MAX3010011detectPulseEf+0x210>)
 8001268:	2200      	movs	r2, #0
 800126a:	701a      	strb	r2, [r3, #0]
      break;
 800126c:	e0b9      	b.n	80013e2 <_ZN8MAX3010011detectPulseEf+0x1ee>

    case PULSE_TRACE_UP:
      if(sensor_value > prev_sensor_value)
 800126e:	4b62      	ldr	r3, [pc, #392]	; (80013f8 <_ZN8MAX3010011detectPulseEf+0x204>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4619      	mov	r1, r3
 8001274:	6838      	ldr	r0, [r7, #0]
 8001276:	f7ff fd73 	bl	8000d60 <__aeabi_fcmpgt>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d00b      	beq.n	8001298 <_ZN8MAX3010011detectPulseEf+0xa4>
      {
        currentBeat = HAL_GetTick();
 8001280:	f002 f8ba 	bl	80033f8 <HAL_GetTick>
 8001284:	4603      	mov	r3, r0
 8001286:	4a5e      	ldr	r2, [pc, #376]	; (8001400 <_ZN8MAX3010011detectPulseEf+0x20c>)
 8001288:	6013      	str	r3, [r2, #0]
        lastBeatThreshold = sensor_value;
 800128a:	6838      	ldr	r0, [r7, #0]
 800128c:	f7ff fdae 	bl	8000dec <__aeabi_f2uiz>
 8001290:	4602      	mov	r2, r0
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	641a      	str	r2, [r3, #64]	; 0x40

        currentPulseDetectorState = PULSE_TRACE_DOWN;

        return true;
      }
      break;
 8001296:	e0a4      	b.n	80013e2 <_ZN8MAX3010011detectPulseEf+0x1ee>
        uint32_t beatDuration = currentBeat - lastBeat;
 8001298:	4b59      	ldr	r3, [pc, #356]	; (8001400 <_ZN8MAX3010011detectPulseEf+0x20c>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	4b57      	ldr	r3, [pc, #348]	; (80013fc <_ZN8MAX3010011detectPulseEf+0x208>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	60bb      	str	r3, [r7, #8]
        lastBeat = currentBeat;
 80012a4:	4b56      	ldr	r3, [pc, #344]	; (8001400 <_ZN8MAX3010011detectPulseEf+0x20c>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a54      	ldr	r2, [pc, #336]	; (80013fc <_ZN8MAX3010011detectPulseEf+0x208>)
 80012aa:	6013      	str	r3, [r2, #0]
        float rawBPM = 0;
 80012ac:	f04f 0300 	mov.w	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
        if(beatDuration > 0)
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d009      	beq.n	80012cc <_ZN8MAX3010011detectPulseEf+0xd8>
          rawBPM = 60000.0 / (float)beatDuration;
 80012b8:	68b8      	ldr	r0, [r7, #8]
 80012ba:	f7ff fb3d 	bl	8000938 <__aeabi_ui2f>
 80012be:	4603      	mov	r3, r0
 80012c0:	4619      	mov	r1, r3
 80012c2:	4852      	ldr	r0, [pc, #328]	; (800140c <_ZN8MAX3010011detectPulseEf+0x218>)
 80012c4:	f7ff fc44 	bl	8000b50 <__aeabi_fdiv>
 80012c8:	4603      	mov	r3, r0
 80012ca:	617b      	str	r3, [r7, #20]
        if(debug == true)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d108      	bne.n	80012e6 <_ZN8MAX3010011detectPulseEf+0xf2>
        valuesBPM[bpmIndex] = rawBPM;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012da:	461a      	mov	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3204      	adds	r2, #4
 80012e0:	6979      	ldr	r1, [r7, #20]
 80012e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        valuesBPMSum = 0;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f04f 0200 	mov.w	r2, #0
 80012ec:	639a      	str	r2, [r3, #56]	; 0x38
        for(int i=0; i<PULSE_BPM_SAMPLE_SIZE; i++)
 80012ee:	2300      	movs	r3, #0
 80012f0:	613b      	str	r3, [r7, #16]
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	2b09      	cmp	r3, #9
 80012f6:	dc11      	bgt.n	800131c <_ZN8MAX3010011detectPulseEf+0x128>
          valuesBPMSum += valuesBPM[i];
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	3204      	adds	r2, #4
 8001302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001306:	4619      	mov	r1, r3
 8001308:	f7ff fa66 	bl	80007d8 <__addsf3>
 800130c:	4603      	mov	r3, r0
 800130e:	461a      	mov	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	639a      	str	r2, [r3, #56]	; 0x38
        for(int i=0; i<PULSE_BPM_SAMPLE_SIZE; i++)
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	3301      	adds	r3, #1
 8001318:	613b      	str	r3, [r7, #16]
 800131a:	e7ea      	b.n	80012f2 <_ZN8MAX3010011detectPulseEf+0xfe>
        if(debug == true)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d108      	bne.n	8001336 <_ZN8MAX3010011detectPulseEf+0x142>
          for(int i=0; i<PULSE_BPM_SAMPLE_SIZE; i++)
 8001324:	2300      	movs	r3, #0
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2b09      	cmp	r3, #9
 800132c:	dc03      	bgt.n	8001336 <_ZN8MAX3010011detectPulseEf+0x142>
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	3301      	adds	r3, #1
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	e7f8      	b.n	8001328 <_ZN8MAX3010011detectPulseEf+0x134>
        bpmIndex++;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800133c:	3301      	adds	r3, #1
 800133e:	b2da      	uxtb	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        bpmIndex = bpmIndex % PULSE_BPM_SAMPLE_SIZE;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 800134c:	4b30      	ldr	r3, [pc, #192]	; (8001410 <_ZN8MAX3010011detectPulseEf+0x21c>)
 800134e:	fba3 1302 	umull	r1, r3, r3, r2
 8001352:	08d9      	lsrs	r1, r3, #3
 8001354:	460b      	mov	r3, r1
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	440b      	add	r3, r1
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	b2da      	uxtb	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if(valuesBPMCount < PULSE_BPM_SAMPLE_SIZE)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800136c:	2b09      	cmp	r3, #9
 800136e:	d807      	bhi.n	8001380 <_ZN8MAX3010011detectPulseEf+0x18c>
          valuesBPMCount++;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001376:	3301      	adds	r3, #1
 8001378:	b2da      	uxtb	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        currentBPM = valuesBPMSum / valuesBPMCount;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff fad8 	bl	8000940 <__aeabi_i2f>
 8001390:	4603      	mov	r3, r0
 8001392:	4619      	mov	r1, r3
 8001394:	4620      	mov	r0, r4
 8001396:	f7ff fbdb 	bl	8000b50 <__aeabi_fdiv>
 800139a:	4603      	mov	r3, r0
 800139c:	461a      	mov	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	60da      	str	r2, [r3, #12]
        currentPulseDetectorState = PULSE_TRACE_DOWN;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2202      	movs	r2, #2
 80013a6:	721a      	strb	r2, [r3, #8]
        return true;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e01e      	b.n	80013ea <_ZN8MAX3010011detectPulseEf+0x1f6>

    case PULSE_TRACE_DOWN:
      if(sensor_value < prev_sensor_value)
 80013ac:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <_ZN8MAX3010011detectPulseEf+0x204>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4619      	mov	r1, r3
 80013b2:	6838      	ldr	r0, [r7, #0]
 80013b4:	f7ff fcb6 	bl	8000d24 <__aeabi_fcmplt>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d005      	beq.n	80013ca <_ZN8MAX3010011detectPulseEf+0x1d6>
      {
        values_went_down++;
 80013be:	4b11      	ldr	r3, [pc, #68]	; (8001404 <_ZN8MAX3010011detectPulseEf+0x210>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	3301      	adds	r3, #1
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <_ZN8MAX3010011detectPulseEf+0x210>)
 80013c8:	701a      	strb	r2, [r3, #0]
      }


      if(sensor_value < PULSE_MIN_THRESHOLD)
 80013ca:	490f      	ldr	r1, [pc, #60]	; (8001408 <_ZN8MAX3010011detectPulseEf+0x214>)
 80013cc:	6838      	ldr	r0, [r7, #0]
 80013ce:	f7ff fca9 	bl	8000d24 <__aeabi_fcmplt>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d100      	bne.n	80013da <_ZN8MAX3010011detectPulseEf+0x1e6>
      {
        currentPulseDetectorState = PULSE_IDLE;
      }
      break;
 80013d8:	e002      	b.n	80013e0 <_ZN8MAX3010011detectPulseEf+0x1ec>
        currentPulseDetectorState = PULSE_IDLE;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	721a      	strb	r2, [r3, #8]
      break;
 80013e0:	bf00      	nop
  }

  prev_sensor_value = sensor_value;
 80013e2:	4a05      	ldr	r2, [pc, #20]	; (80013f8 <_ZN8MAX3010011detectPulseEf+0x204>)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	6013      	str	r3, [r2, #0]
  return false;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	371c      	adds	r7, #28
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd90      	pop	{r4, r7, pc}
 80013f2:	bf00      	nop
 80013f4:	44fa0000 	.word	0x44fa0000
 80013f8:	2000008c 	.word	0x2000008c
 80013fc:	20000098 	.word	0x20000098
 8001400:	20000094 	.word	0x20000094
 8001404:	20000090 	.word	0x20000090
 8001408:	42c80000 	.word	0x42c80000
 800140c:	476a6000 	.word	0x476a6000
 8001410:	cccccccd 	.word	0xcccccccd

08001414 <_ZN8MAX3010017balanceIntesitiesEff>:

void MAX30100::balanceIntesities( float redLedDC, float IRLedDC )
{
 8001414:	b590      	push	{r4, r7, lr}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]

  if( HAL_GetTick() - lastREDLedCurrentCheck >= RED_LED_CURRENT_ADJUSTMENT_MS)
 8001420:	f001 ffea 	bl	80033f8 <HAL_GetTick>
 8001424:	4603      	mov	r3, r0
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff fa86 	bl	8000938 <__aeabi_ui2f>
 800142c:	4602      	mov	r2, r0
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	4619      	mov	r1, r3
 8001434:	4610      	mov	r0, r2
 8001436:	f7ff f9cd 	bl	80007d4 <__aeabi_fsub>
 800143a:	4603      	mov	r3, r0
 800143c:	2201      	movs	r2, #1
 800143e:	4614      	mov	r4, r2
 8001440:	492b      	ldr	r1, [pc, #172]	; (80014f0 <_ZN8MAX3010017balanceIntesitiesEff+0xdc>)
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff fc82 	bl	8000d4c <__aeabi_fcmpge>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d101      	bne.n	8001452 <_ZN8MAX3010017balanceIntesitiesEff+0x3e>
 800144e:	2300      	movs	r3, #0
 8001450:	461c      	mov	r4, r3
 8001452:	b2e3      	uxtb	r3, r4
 8001454:	2b00      	cmp	r3, #0
 8001456:	d047      	beq.n	80014e8 <_ZN8MAX3010017balanceIntesitiesEff+0xd4>
  {
    ////Serial.println( redLedDC - IRLedDC );
    if( IRLedDC - redLedDC > MAGIC_ACCEPTABLE_INTENSITY_DIFF && redLEDCurrent < MAX30100_LED_CURRENT_50MA)
 8001458:	68b9      	ldr	r1, [r7, #8]
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff f9ba 	bl	80007d4 <__aeabi_fsub>
 8001460:	4603      	mov	r3, r0
 8001462:	4924      	ldr	r1, [pc, #144]	; (80014f4 <_ZN8MAX3010017balanceIntesitiesEff+0xe0>)
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff fc7b 	bl	8000d60 <__aeabi_fcmpgt>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d013      	beq.n	8001498 <_ZN8MAX3010017balanceIntesitiesEff+0x84>
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	785b      	ldrb	r3, [r3, #1]
 8001474:	2b0e      	cmp	r3, #14
 8001476:	d80f      	bhi.n	8001498 <_ZN8MAX3010017balanceIntesitiesEff+0x84>
    {
      redLEDCurrent++;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	785b      	ldrb	r3, [r3, #1]
 800147c:	3301      	adds	r3, #1
 800147e:	b2da      	uxtb	r2, r3
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	705a      	strb	r2, [r3, #1]
      setLEDCurrents( redLEDCurrent, IrLedCurrent );
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	7859      	ldrb	r1, [r3, #1]
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800148e:	461a      	mov	r2, r3
 8001490:	68f8      	ldr	r0, [r7, #12]
 8001492:	f000 f907 	bl	80016a4 <_ZN8MAX3010014setLEDCurrentsEhh>
 8001496:	e01e      	b.n	80014d6 <_ZN8MAX3010017balanceIntesitiesEff+0xc2>
    }
    else if(redLedDC - IRLedDC > MAGIC_ACCEPTABLE_INTENSITY_DIFF && redLEDCurrent > 0)
 8001498:	6879      	ldr	r1, [r7, #4]
 800149a:	68b8      	ldr	r0, [r7, #8]
 800149c:	f7ff f99a 	bl	80007d4 <__aeabi_fsub>
 80014a0:	4603      	mov	r3, r0
 80014a2:	4914      	ldr	r1, [pc, #80]	; (80014f4 <_ZN8MAX3010017balanceIntesitiesEff+0xe0>)
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff fc5b 	bl	8000d60 <__aeabi_fcmpgt>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d012      	beq.n	80014d6 <_ZN8MAX3010017balanceIntesitiesEff+0xc2>
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	785b      	ldrb	r3, [r3, #1]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d00e      	beq.n	80014d6 <_ZN8MAX3010017balanceIntesitiesEff+0xc2>
    {
      redLEDCurrent--;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	785b      	ldrb	r3, [r3, #1]
 80014bc:	3b01      	subs	r3, #1
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	705a      	strb	r2, [r3, #1]
      setLEDCurrents( redLEDCurrent, IrLedCurrent );
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	7859      	ldrb	r1, [r3, #1]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80014ce:	461a      	mov	r2, r3
 80014d0:	68f8      	ldr	r0, [r7, #12]
 80014d2:	f000 f8e7 	bl	80016a4 <_ZN8MAX3010014setLEDCurrentsEhh>
    }

    lastREDLedCurrentCheck = HAL_GetTick();
 80014d6:	f001 ff8f 	bl	80033f8 <HAL_GetTick>
 80014da:	4603      	mov	r3, r0
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff fa2b 	bl	8000938 <__aeabi_ui2f>
 80014e2:	4602      	mov	r2, r0
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	605a      	str	r2, [r3, #4]
  }
}
 80014e8:	bf00      	nop
 80014ea:	3714      	adds	r7, #20
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd90      	pop	{r4, r7, pc}
 80014f0:	43fa0000 	.word	0x43fa0000
 80014f4:	477de800 	.word	0x477de800

080014f8 <_ZN8MAX3010013writeRegisterEhh>:


// Writes val to address register on device
void MAX30100::writeRegister(uint8_t address, uint8_t val)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af04      	add	r7, sp, #16
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	460b      	mov	r3, r1
 8001502:	70fb      	strb	r3, [r7, #3]
 8001504:	4613      	mov	r3, r2
 8001506:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(_MAX30100_I2C, _MAX30100_I2C_ADDRESS, address, 1, &val, 1, 100);
 8001508:	78fb      	ldrb	r3, [r7, #3]
 800150a:	b29a      	uxth	r2, r3
 800150c:	2364      	movs	r3, #100	; 0x64
 800150e:	9302      	str	r3, [sp, #8]
 8001510:	2301      	movs	r3, #1
 8001512:	9301      	str	r3, [sp, #4]
 8001514:	1cbb      	adds	r3, r7, #2
 8001516:	9300      	str	r3, [sp, #0]
 8001518:	2301      	movs	r3, #1
 800151a:	21ae      	movs	r1, #174	; 0xae
 800151c:	4803      	ldr	r0, [pc, #12]	; (800152c <_ZN8MAX3010013writeRegisterEhh+0x34>)
 800151e:	f003 fa4d 	bl	80049bc <HAL_I2C_Mem_Write>
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000110 	.word	0x20000110

08001530 <_ZN8MAX3010012readRegisterEh>:

uint8_t MAX30100::readRegister(uint8_t address)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b088      	sub	sp, #32
 8001534:	af04      	add	r7, sp, #16
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	460b      	mov	r3, r1
 800153a:	70fb      	strb	r3, [r7, #3]
	uint8_t rdata = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(_MAX30100_I2C, _MAX30100_I2C_ADDRESS, address, 1, &rdata, 1, 100);
 8001540:	78fb      	ldrb	r3, [r7, #3]
 8001542:	b29a      	uxth	r2, r3
 8001544:	2364      	movs	r3, #100	; 0x64
 8001546:	9302      	str	r3, [sp, #8]
 8001548:	2301      	movs	r3, #1
 800154a:	9301      	str	r3, [sp, #4]
 800154c:	f107 030f 	add.w	r3, r7, #15
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	2301      	movs	r3, #1
 8001554:	21ae      	movs	r1, #174	; 0xae
 8001556:	4804      	ldr	r0, [pc, #16]	; (8001568 <_ZN8MAX3010012readRegisterEh+0x38>)
 8001558:	f003 fb2a 	bl	8004bb0 <HAL_I2C_Mem_Read>
//	if (I2C_MasterByteRead(_MAX30100_I2C, _MAX30100_I2C_ADDRESS, address,
//			&rdata, 100) != BML_OK) {
//		return 255;
//	}
	return rdata;
 800155c:	7bfb      	ldrb	r3, [r7, #15]
}
 800155e:	4618      	mov	r0, r3
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000110 	.word	0x20000110

0800156c <_ZN8MAX301008readFromEhiPh>:

// Reads num bytes starting from address register on device in to _buff array
void MAX30100::readFrom(uint8_t address, int num, uint8_t _buff[])
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b088      	sub	sp, #32
 8001570:	af04      	add	r7, sp, #16
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	607a      	str	r2, [r7, #4]
 8001576:	603b      	str	r3, [r7, #0]
 8001578:	460b      	mov	r3, r1
 800157a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Read(_MAX30100_I2C, _MAX30100_I2C_ADDRESS, address, 1, _buff, num, 1000);
 800157c:	7afb      	ldrb	r3, [r7, #11]
 800157e:	b29a      	uxth	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	b29b      	uxth	r3, r3
 8001584:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001588:	9102      	str	r1, [sp, #8]
 800158a:	9301      	str	r3, [sp, #4]
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	2301      	movs	r3, #1
 8001592:	21ae      	movs	r1, #174	; 0xae
 8001594:	4803      	ldr	r0, [pc, #12]	; (80015a4 <_ZN8MAX301008readFromEhiPh+0x38>)
 8001596:	f003 fb0b 	bl	8004bb0 <HAL_I2C_Mem_Read>
}
 800159a:	bf00      	nop
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000110 	.word	0x20000110

080015a8 <_ZN8MAX301007setModeE4Mode>:

void MAX30100::setMode(Mode mode)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	460b      	mov	r3, r1
 80015b2:	70fb      	strb	r3, [r7, #3]
  uint8_t currentModeReg = readRegister( MAX30100_MODE_CONF );
 80015b4:	2106      	movs	r1, #6
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f7ff ffba 	bl	8001530 <_ZN8MAX3010012readRegisterEh>
 80015bc:	4603      	mov	r3, r0
 80015be:	73fb      	strb	r3, [r7, #15]
  writeRegister( MAX30100_MODE_CONF, (currentModeReg & 0xF8) | mode );
 80015c0:	7bfb      	ldrb	r3, [r7, #15]
 80015c2:	f023 0307 	bic.w	r3, r3, #7
 80015c6:	b2da      	uxtb	r2, r3
 80015c8:	78fb      	ldrb	r3, [r7, #3]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	461a      	mov	r2, r3
 80015d0:	2106      	movs	r1, #6
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff ff90 	bl	80014f8 <_ZN8MAX3010013writeRegisterEhh>
}
 80015d8:	bf00      	nop
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <_ZN8MAX3010021setHighresModeEnabledEb>:

void MAX30100::setHighresModeEnabled(bool enabled)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	460b      	mov	r3, r1
 80015ea:	70fb      	strb	r3, [r7, #3]
    uint8_t previous = readRegister(MAX30100_SPO2_CONF);
 80015ec:	2107      	movs	r1, #7
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7ff ff9e 	bl	8001530 <_ZN8MAX3010012readRegisterEh>
 80015f4:	4603      	mov	r3, r0
 80015f6:	73fb      	strb	r3, [r7, #15]
    if (enabled) {
 80015f8:	78fb      	ldrb	r3, [r7, #3]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d009      	beq.n	8001612 <_ZN8MAX3010021setHighresModeEnabledEb+0x32>
        writeRegister(MAX30100_SPO2_CONF, previous | MAX30100_SPO2_HI_RES_EN);
 80015fe:	7bfb      	ldrb	r3, [r7, #15]
 8001600:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001604:	b2db      	uxtb	r3, r3
 8001606:	461a      	mov	r2, r3
 8001608:	2107      	movs	r1, #7
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7ff ff74 	bl	80014f8 <_ZN8MAX3010013writeRegisterEhh>
    } else {
        writeRegister(MAX30100_SPO2_CONF, previous & ~MAX30100_SPO2_HI_RES_EN);
    }
}
 8001610:	e008      	b.n	8001624 <_ZN8MAX3010021setHighresModeEnabledEb+0x44>
        writeRegister(MAX30100_SPO2_CONF, previous & ~MAX30100_SPO2_HI_RES_EN);
 8001612:	7bfb      	ldrb	r3, [r7, #15]
 8001614:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001618:	b2db      	uxtb	r3, r3
 800161a:	461a      	mov	r2, r3
 800161c:	2107      	movs	r1, #7
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7ff ff6a 	bl	80014f8 <_ZN8MAX3010013writeRegisterEhh>
}
 8001624:	bf00      	nop
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <_ZN8MAX3010015setSamplingRateE12SamplingRate>:

void MAX30100::setSamplingRate(SamplingRate rate)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	460b      	mov	r3, r1
 8001636:	70fb      	strb	r3, [r7, #3]
  uint8_t currentSpO2Reg = readRegister( MAX30100_SPO2_CONF );
 8001638:	2107      	movs	r1, #7
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff ff78 	bl	8001530 <_ZN8MAX3010012readRegisterEh>
 8001640:	4603      	mov	r3, r0
 8001642:	73fb      	strb	r3, [r7, #15]
  writeRegister( MAX30100_SPO2_CONF, ( currentSpO2Reg & 0xE3 ) | (rate<<2) );
 8001644:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001648:	f023 031c 	bic.w	r3, r3, #28
 800164c:	b25a      	sxtb	r2, r3
 800164e:	78fb      	ldrb	r3, [r7, #3]
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	b25b      	sxtb	r3, r3
 8001654:	4313      	orrs	r3, r2
 8001656:	b25b      	sxtb	r3, r3
 8001658:	b2db      	uxtb	r3, r3
 800165a:	461a      	mov	r2, r3
 800165c:	2107      	movs	r1, #7
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7ff ff4a 	bl	80014f8 <_ZN8MAX3010013writeRegisterEhh>
}
 8001664:	bf00      	nop
 8001666:	3710      	adds	r7, #16
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <_ZN8MAX3010016setLEDPulseWidthE13LEDPulseWidth>:

void MAX30100::setLEDPulseWidth(LEDPulseWidth pw)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	460b      	mov	r3, r1
 8001676:	70fb      	strb	r3, [r7, #3]
  uint8_t currentSpO2Reg = readRegister( MAX30100_SPO2_CONF );
 8001678:	2107      	movs	r1, #7
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7ff ff58 	bl	8001530 <_ZN8MAX3010012readRegisterEh>
 8001680:	4603      	mov	r3, r0
 8001682:	73fb      	strb	r3, [r7, #15]
  writeRegister( MAX30100_SPO2_CONF, ( currentSpO2Reg & 0xFC ) | pw );
 8001684:	7bfb      	ldrb	r3, [r7, #15]
 8001686:	f023 0303 	bic.w	r3, r3, #3
 800168a:	b2da      	uxtb	r2, r3
 800168c:	78fb      	ldrb	r3, [r7, #3]
 800168e:	4313      	orrs	r3, r2
 8001690:	b2db      	uxtb	r3, r3
 8001692:	461a      	mov	r2, r3
 8001694:	2107      	movs	r1, #7
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f7ff ff2e 	bl	80014f8 <_ZN8MAX3010013writeRegisterEhh>
}
 800169c:	bf00      	nop
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <_ZN8MAX3010014setLEDCurrentsEhh>:

void MAX30100::setLEDCurrents( uint8_t redLedCurrent, uint8_t IRLedCurrent )
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	460b      	mov	r3, r1
 80016ae:	70fb      	strb	r3, [r7, #3]
 80016b0:	4613      	mov	r3, r2
 80016b2:	70bb      	strb	r3, [r7, #2]
  writeRegister( MAX30100_LED_CONF, (redLedCurrent << 4) | IRLedCurrent );
 80016b4:	78fb      	ldrb	r3, [r7, #3]
 80016b6:	011b      	lsls	r3, r3, #4
 80016b8:	b25a      	sxtb	r2, r3
 80016ba:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80016be:	4313      	orrs	r3, r2
 80016c0:	b25b      	sxtb	r3, r3
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	461a      	mov	r2, r3
 80016c6:	2109      	movs	r1, #9
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff ff15 	bl	80014f8 <_ZN8MAX3010013writeRegisterEhh>
}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <_ZN8MAX301009resetFIFOEv>:

  return (float)temp + tempFraction;
}

void MAX30100::resetFIFO()
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
  writeRegister( 2,0);
 80016de:	2200      	movs	r2, #0
 80016e0:	2102      	movs	r1, #2
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff ff08 	bl	80014f8 <_ZN8MAX3010013writeRegisterEhh>
  writeRegister( 3,0);
 80016e8:	2200      	movs	r2, #0
 80016ea:	2103      	movs	r1, #3
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff ff03 	bl	80014f8 <_ZN8MAX3010013writeRegisterEhh>
  writeRegister( 4,0);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2104      	movs	r1, #4
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7ff fefe 	bl	80014f8 <_ZN8MAX3010013writeRegisterEhh>
}
 80016fc:	bf00      	nop
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <_ZN8MAX301008readFIFOEv>:
fifo_t MAX30100::readFIFO()
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  fifo_t result;

  uint8_t buffer[4];
  readFrom( MAX30100_FIFO_DATA, 4, buffer );
 800170c:	f107 030c 	add.w	r3, r7, #12
 8001710:	2204      	movs	r2, #4
 8001712:	2105      	movs	r1, #5
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff ff29 	bl	800156c <_ZN8MAX301008readFromEhiPh>
  result.rawIR = (buffer[0] << 8) | buffer[1];
 800171a:	7b3b      	ldrb	r3, [r7, #12]
 800171c:	021b      	lsls	r3, r3, #8
 800171e:	b21a      	sxth	r2, r3
 8001720:	7b7b      	ldrb	r3, [r7, #13]
 8001722:	b21b      	sxth	r3, r3
 8001724:	4313      	orrs	r3, r2
 8001726:	b21b      	sxth	r3, r3
 8001728:	b29b      	uxth	r3, r3
 800172a:	823b      	strh	r3, [r7, #16]
  result.rawRed = (buffer[2] << 8) | buffer[3];
 800172c:	7bbb      	ldrb	r3, [r7, #14]
 800172e:	021b      	lsls	r3, r3, #8
 8001730:	b21a      	sxth	r2, r3
 8001732:	7bfb      	ldrb	r3, [r7, #15]
 8001734:	b21b      	sxth	r3, r3
 8001736:	4313      	orrs	r3, r2
 8001738:	b21b      	sxth	r3, r3
 800173a:	b29b      	uxth	r3, r3
 800173c:	827b      	strh	r3, [r7, #18]

  return result;
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	617b      	str	r3, [r7, #20]
 8001742:	2300      	movs	r3, #0
 8001744:	8aba      	ldrh	r2, [r7, #20]
 8001746:	f362 030f 	bfi	r3, r2, #0, #16
 800174a:	8afa      	ldrh	r2, [r7, #22]
 800174c:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001750:	4618      	mov	r0, r3
 8001752:	3718      	adds	r7, #24
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <_ZN8MAX301009dcRemovalEfff>:

dcFilter_t MAX30100::dcRemoval(float x, float prev_w, float alpha)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
 8001764:	603b      	str	r3, [r7, #0]
  dcFilter_t filtered;
  filtered.w = x + alpha * prev_w;
 8001766:	6839      	ldr	r1, [r7, #0]
 8001768:	69b8      	ldr	r0, [r7, #24]
 800176a:	f7ff f93d 	bl	80009e8 <__aeabi_fmul>
 800176e:	4603      	mov	r3, r0
 8001770:	6879      	ldr	r1, [r7, #4]
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff f830 	bl	80007d8 <__addsf3>
 8001778:	4603      	mov	r3, r0
 800177a:	461a      	mov	r2, r3
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	601a      	str	r2, [r3, #0]
  filtered.result = filtered.w - prev_w;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6839      	ldr	r1, [r7, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff f824 	bl	80007d4 <__aeabi_fsub>
 800178c:	4603      	mov	r3, r0
 800178e:	461a      	mov	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	605a      	str	r2, [r3, #4]

  return filtered;
 8001794:	bf00      	nop
}
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
	...

080017a0 <_ZN8MAX3010024lowPassButterworthFilterEfP19butterworthFilter_t>:

void MAX30100::lowPassButterworthFilter( float x, butterworthFilter_t * filterResult )
{
 80017a0:	b5b0      	push	{r4, r5, r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
  filterResult->v[0] = filterResult->v[1];
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685a      	ldr	r2, [r3, #4]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	601a      	str	r2, [r3, #0]

  //Fs = 100Hz and Fc = 10Hz
  filterResult->v[1] = (2.452372752527856026e-1 * x) + (0.50952544949442879485 * filterResult->v[0]);
 80017b4:	68b8      	ldr	r0, [r7, #8]
 80017b6:	f7fe ff61 	bl	800067c <__aeabi_f2d>
 80017ba:	a319      	add	r3, pc, #100	; (adr r3, 8001820 <_ZN8MAX3010024lowPassButterworthFilterEfP19butterworthFilter_t+0x80>)
 80017bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c0:	f7fe fcce 	bl	8000160 <__aeabi_dmul>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4614      	mov	r4, r2
 80017ca:	461d      	mov	r5, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7fe ff53 	bl	800067c <__aeabi_f2d>
 80017d6:	a314      	add	r3, pc, #80	; (adr r3, 8001828 <_ZN8MAX3010024lowPassButterworthFilterEfP19butterworthFilter_t+0x88>)
 80017d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017dc:	f7fe fcc0 	bl	8000160 <__aeabi_dmul>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	4620      	mov	r0, r4
 80017e6:	4629      	mov	r1, r5
 80017e8:	f7fe fdea 	bl	80003c0 <__adddf3>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4610      	mov	r0, r2
 80017f2:	4619      	mov	r1, r3
 80017f4:	f7fe ff9a 	bl	800072c <__aeabi_d2f>
 80017f8:	4602      	mov	r2, r0
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	605a      	str	r2, [r3, #4]

  //Fs = 100Hz and Fc = 4Hz
  //filterResult->v[1] = (1.367287359973195227e-1 * x) + (0.72654252800536101020 * filterResult->v[0]); //Very precise butterworth filter

  filterResult->result = filterResult->v[0] + filterResult->v[1];
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	4619      	mov	r1, r3
 8001808:	4610      	mov	r0, r2
 800180a:	f7fe ffe5 	bl	80007d8 <__addsf3>
 800180e:	4603      	mov	r3, r0
 8001810:	461a      	mov	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	609a      	str	r2, [r3, #8]
}
 8001816:	bf00      	nop
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bdb0      	pop	{r4, r5, r7, pc}
 800181e:	bf00      	nop
 8001820:	5e7c4548 	.word	0x5e7c4548
 8001824:	3fcf63ef 	.word	0x3fcf63ef
 8001828:	50c1dd5c 	.word	0x50c1dd5c
 800182c:	3fe04e08 	.word	0x3fe04e08

08001830 <_ZN8MAX301008meanDiffEfP16meanDiffFilter_t>:

float MAX30100::meanDiff(float M, meanDiffFilter_t* filterValues)
{
 8001830:	b590      	push	{r4, r7, lr}
 8001832:	b087      	sub	sp, #28
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
  float avg = 0;
 800183c:	f04f 0300 	mov.w	r3, #0
 8001840:	617b      	str	r3, [r7, #20]

  filterValues->sum -= filterValues->values[filterValues->index];
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800184c:	4619      	mov	r1, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001854:	4619      	mov	r1, r3
 8001856:	4610      	mov	r0, r2
 8001858:	f7fe ffbc 	bl	80007d4 <__aeabi_fsub>
 800185c:	4603      	mov	r3, r0
 800185e:	461a      	mov	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	641a      	str	r2, [r3, #64]	; 0x40
  filterValues->values[filterValues->index] = M;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800186a:	4619      	mov	r1, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68ba      	ldr	r2, [r7, #8]
 8001870:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
  filterValues->sum += filterValues->values[filterValues->index];
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800187e:	4619      	mov	r1, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001886:	4619      	mov	r1, r3
 8001888:	4610      	mov	r0, r2
 800188a:	f7fe ffa5 	bl	80007d8 <__addsf3>
 800188e:	4603      	mov	r3, r0
 8001890:	461a      	mov	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	641a      	str	r2, [r3, #64]	; 0x40

  filterValues->index++;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800189c:	3301      	adds	r3, #1
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  filterValues->index = filterValues->index % MEAN_FILTER_SIZE;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 80018ac:	4b18      	ldr	r3, [pc, #96]	; (8001910 <_ZN8MAX301008meanDiffEfP16meanDiffFilter_t+0xe0>)
 80018ae:	fba3 1302 	umull	r1, r3, r3, r2
 80018b2:	08d9      	lsrs	r1, r3, #3
 80018b4:	460b      	mov	r3, r1
 80018b6:	011b      	lsls	r3, r3, #4
 80018b8:	1a5b      	subs	r3, r3, r1
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(filterValues->count < MEAN_FILTER_SIZE)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80018ca:	2b0e      	cmp	r3, #14
 80018cc:	d807      	bhi.n	80018de <_ZN8MAX301008meanDiffEfP16meanDiffFilter_t+0xae>
    filterValues->count++;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80018d4:	3301      	adds	r3, #1
 80018d6:	b2da      	uxtb	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  avg = filterValues->sum / filterValues->count;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff f829 	bl	8000940 <__aeabi_i2f>
 80018ee:	4603      	mov	r3, r0
 80018f0:	4619      	mov	r1, r3
 80018f2:	4620      	mov	r0, r4
 80018f4:	f7ff f92c 	bl	8000b50 <__aeabi_fdiv>
 80018f8:	4603      	mov	r3, r0
 80018fa:	617b      	str	r3, [r7, #20]
  return avg - M;
 80018fc:	68b9      	ldr	r1, [r7, #8]
 80018fe:	6978      	ldr	r0, [r7, #20]
 8001900:	f7fe ff68 	bl	80007d4 <__aeabi_fsub>
 8001904:	4603      	mov	r3, r0
}
 8001906:	4618      	mov	r0, r3
 8001908:	371c      	adds	r7, #28
 800190a:	46bd      	mov	sp, r7
 800190c:	bd90      	pop	{r4, r7, pc}
 800190e:	bf00      	nop
 8001910:	88888889 	.word	0x88888889

08001914 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 1000);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	b29a      	uxth	r2, r3
 8001924:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001928:	68b9      	ldr	r1, [r7, #8]
 800192a:	4804      	ldr	r0, [pc, #16]	; (800193c <_write+0x28>)
 800192c:	f005 f9ad 	bl	8006c8a <HAL_UART_Transmit>
	return len;
 8001930:	687b      	ldr	r3, [r7, #4]
}
 8001932:	4618      	mov	r0, r3
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000238 	.word	0x20000238

08001940 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001944:	f001 fd00 	bl	8003348 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001948:	f000 f822 	bl	8001990 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800194c:	f000 f9fc 	bl	8001d48 <MX_GPIO_Init>
  MX_DMA_Init();
 8001950:	f000 f9d4 	bl	8001cfc <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001954:	f000 f97e 	bl	8001c54 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001958:	f000 f9a6 	bl	8001ca8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800195c:	f000 f872 	bl	8001a44 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001960:	f000 f92a 	bl	8001bb8 <MX_TIM3_Init>
  MX_I2C1_Init();
 8001964:	f000 f8ac 	bl	8001ac0 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001968:	f000 f8d8 	bl	8001b1c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  printf("HAL_I2C_IsDeviceReady:%d\r\n",HAL_I2C_IsDeviceReady(&hi2c1, 0xAE, 10, 100));
 800196c:	2364      	movs	r3, #100	; 0x64
 800196e:	220a      	movs	r2, #10
 8001970:	21ae      	movs	r1, #174	; 0xae
 8001972:	4805      	ldr	r0, [pc, #20]	; (8001988 <main+0x48>)
 8001974:	f003 fb84 	bl	8005080 <HAL_I2C_IsDeviceReady>
 8001978:	4603      	mov	r3, r0
 800197a:	4619      	mov	r1, r3
 800197c:	4803      	ldr	r0, [pc, #12]	; (800198c <main+0x4c>)
 800197e:	f006 fadf 	bl	8007f40 <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loopC();
 8001982:	f000 fdb1 	bl	80024e8 <loopC>
 8001986:	e7fc      	b.n	8001982 <main+0x42>
 8001988:	20000110 	.word	0x20000110
 800198c:	08009394 	.word	0x08009394

08001990 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b094      	sub	sp, #80	; 0x50
 8001994:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001996:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800199a:	2228      	movs	r2, #40	; 0x28
 800199c:	2100      	movs	r1, #0
 800199e:	4618      	mov	r0, r3
 80019a0:	f006 f9ea 	bl	8007d78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019b4:	1d3b      	adds	r3, r7, #4
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	605a      	str	r2, [r3, #4]
 80019bc:	609a      	str	r2, [r3, #8]
 80019be:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019c0:	2301      	movs	r3, #1
 80019c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80019ca:	2300      	movs	r3, #0
 80019cc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019ce:	2301      	movs	r3, #1
 80019d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019d2:	2302      	movs	r3, #2
 80019d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80019dc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80019e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019e6:	4618      	mov	r0, r3
 80019e8:	f004 f80a 	bl	8005a00 <HAL_RCC_OscConfig>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80019f2:	f000 fa25 	bl	8001e40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019f6:	230f      	movs	r3, #15
 80019f8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019fa:	2302      	movs	r3, #2
 80019fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80019fe:	2380      	movs	r3, #128	; 0x80
 8001a00:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a02:	2300      	movs	r3, #0
 8001a04:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a06:	2300      	movs	r3, #0
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a0a:	f107 0314 	add.w	r3, r7, #20
 8001a0e:	2102      	movs	r1, #2
 8001a10:	4618      	mov	r0, r3
 8001a12:	f004 fa77 	bl	8005f04 <HAL_RCC_ClockConfig>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001a1c:	f000 fa10 	bl	8001e40 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001a20:	2302      	movs	r3, #2
 8001a22:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8001a24:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a28:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a2a:	1d3b      	adds	r3, r7, #4
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f004 fc01 	bl	8006234 <HAL_RCCEx_PeriphCLKConfig>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001a38:	f000 fa02 	bl	8001e40 <Error_Handler>
  }
}
 8001a3c:	bf00      	nop
 8001a3e:	3750      	adds	r7, #80	; 0x50
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a4a:	1d3b      	adds	r3, r7, #4
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001a54:	4b18      	ldr	r3, [pc, #96]	; (8001ab8 <MX_ADC1_Init+0x74>)
 8001a56:	4a19      	ldr	r2, [pc, #100]	; (8001abc <MX_ADC1_Init+0x78>)
 8001a58:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a5a:	4b17      	ldr	r3, [pc, #92]	; (8001ab8 <MX_ADC1_Init+0x74>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001a60:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <MX_ADC1_Init+0x74>)
 8001a62:	2201      	movs	r2, #1
 8001a64:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a66:	4b14      	ldr	r3, [pc, #80]	; (8001ab8 <MX_ADC1_Init+0x74>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a6c:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <MX_ADC1_Init+0x74>)
 8001a6e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001a72:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a74:	4b10      	ldr	r3, [pc, #64]	; (8001ab8 <MX_ADC1_Init+0x74>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001a7a:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <MX_ADC1_Init+0x74>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a80:	480d      	ldr	r0, [pc, #52]	; (8001ab8 <MX_ADC1_Init+0x74>)
 8001a82:	f001 fd03 	bl	800348c <HAL_ADC_Init>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001a8c:	f000 f9d8 	bl	8001e40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001a90:	2301      	movs	r3, #1
 8001a92:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a94:	2301      	movs	r3, #1
 8001a96:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a9c:	1d3b      	adds	r3, r7, #4
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4805      	ldr	r0, [pc, #20]	; (8001ab8 <MX_ADC1_Init+0x74>)
 8001aa2:	f001 febb 	bl	800381c <HAL_ADC_ConfigChannel>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001aac:	f000 f9c8 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ab0:	bf00      	nop
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	2000009c 	.word	0x2000009c
 8001abc:	40012400 	.word	0x40012400

08001ac0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ac4:	4b12      	ldr	r3, [pc, #72]	; (8001b10 <MX_I2C1_Init+0x50>)
 8001ac6:	4a13      	ldr	r2, [pc, #76]	; (8001b14 <MX_I2C1_Init+0x54>)
 8001ac8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001aca:	4b11      	ldr	r3, [pc, #68]	; (8001b10 <MX_I2C1_Init+0x50>)
 8001acc:	4a12      	ldr	r2, [pc, #72]	; (8001b18 <MX_I2C1_Init+0x58>)
 8001ace:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ad0:	4b0f      	ldr	r3, [pc, #60]	; (8001b10 <MX_I2C1_Init+0x50>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ad6:	4b0e      	ldr	r3, [pc, #56]	; (8001b10 <MX_I2C1_Init+0x50>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001adc:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <MX_I2C1_Init+0x50>)
 8001ade:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ae2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ae4:	4b0a      	ldr	r3, [pc, #40]	; (8001b10 <MX_I2C1_Init+0x50>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001aea:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <MX_I2C1_Init+0x50>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001af0:	4b07      	ldr	r3, [pc, #28]	; (8001b10 <MX_I2C1_Init+0x50>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001af6:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <MX_I2C1_Init+0x50>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001afc:	4804      	ldr	r0, [pc, #16]	; (8001b10 <MX_I2C1_Init+0x50>)
 8001afe:	f002 fe19 	bl	8004734 <HAL_I2C_Init>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b08:	f000 f99a 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b0c:	bf00      	nop
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	20000110 	.word	0x20000110
 8001b14:	40005400 	.word	0x40005400
 8001b18:	000186a0 	.word	0x000186a0

08001b1c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b22:	f107 0308 	add.w	r3, r7, #8
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	605a      	str	r2, [r3, #4]
 8001b2c:	609a      	str	r2, [r3, #8]
 8001b2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b30:	463b      	mov	r3, r7
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b38:	4b1e      	ldr	r3, [pc, #120]	; (8001bb4 <MX_TIM2_Init+0x98>)
 8001b3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b3e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 11999;
 8001b40:	4b1c      	ldr	r3, [pc, #112]	; (8001bb4 <MX_TIM2_Init+0x98>)
 8001b42:	f642 62df 	movw	r2, #11999	; 0x2edf
 8001b46:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b48:	4b1a      	ldr	r3, [pc, #104]	; (8001bb4 <MX_TIM2_Init+0x98>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 11999;
 8001b4e:	4b19      	ldr	r3, [pc, #100]	; (8001bb4 <MX_TIM2_Init+0x98>)
 8001b50:	f642 62df 	movw	r2, #11999	; 0x2edf
 8001b54:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b56:	4b17      	ldr	r3, [pc, #92]	; (8001bb4 <MX_TIM2_Init+0x98>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b5c:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <MX_TIM2_Init+0x98>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b62:	4814      	ldr	r0, [pc, #80]	; (8001bb4 <MX_TIM2_Init+0x98>)
 8001b64:	f004 fc1c 	bl	80063a0 <HAL_TIM_Base_Init>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001b6e:	f000 f967 	bl	8001e40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b76:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b78:	f107 0308 	add.w	r3, r7, #8
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	480d      	ldr	r0, [pc, #52]	; (8001bb4 <MX_TIM2_Init+0x98>)
 8001b80:	f004 fde6 	bl	8006750 <HAL_TIM_ConfigClockSource>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001b8a:	f000 f959 	bl	8001e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b92:	2300      	movs	r3, #0
 8001b94:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b96:	463b      	mov	r3, r7
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4806      	ldr	r0, [pc, #24]	; (8001bb4 <MX_TIM2_Init+0x98>)
 8001b9c:	f004 ffb8 	bl	8006b10 <HAL_TIMEx_MasterConfigSynchronization>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001ba6:	f000 f94b 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001baa:	bf00      	nop
 8001bac:	3718      	adds	r7, #24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000164 	.word	0x20000164

08001bb8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bbe:	f107 0308 	add.w	r3, r7, #8
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	605a      	str	r2, [r3, #4]
 8001bc8:	609a      	str	r2, [r3, #8]
 8001bca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bcc:	463b      	mov	r3, r7
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bd4:	4b1d      	ldr	r3, [pc, #116]	; (8001c4c <MX_TIM3_Init+0x94>)
 8001bd6:	4a1e      	ldr	r2, [pc, #120]	; (8001c50 <MX_TIM3_Init+0x98>)
 8001bd8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 359;
 8001bda:	4b1c      	ldr	r3, [pc, #112]	; (8001c4c <MX_TIM3_Init+0x94>)
 8001bdc:	f240 1267 	movw	r2, #359	; 0x167
 8001be0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be2:	4b1a      	ldr	r3, [pc, #104]	; (8001c4c <MX_TIM3_Init+0x94>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 8001be8:	4b18      	ldr	r3, [pc, #96]	; (8001c4c <MX_TIM3_Init+0x94>)
 8001bea:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001bee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bf0:	4b16      	ldr	r3, [pc, #88]	; (8001c4c <MX_TIM3_Init+0x94>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bf6:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <MX_TIM3_Init+0x94>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001bfc:	4813      	ldr	r0, [pc, #76]	; (8001c4c <MX_TIM3_Init+0x94>)
 8001bfe:	f004 fbcf 	bl	80063a0 <HAL_TIM_Base_Init>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001c08:	f000 f91a 	bl	8001e40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c12:	f107 0308 	add.w	r3, r7, #8
 8001c16:	4619      	mov	r1, r3
 8001c18:	480c      	ldr	r0, [pc, #48]	; (8001c4c <MX_TIM3_Init+0x94>)
 8001c1a:	f004 fd99 	bl	8006750 <HAL_TIM_ConfigClockSource>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001c24:	f000 f90c 	bl	8001e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c30:	463b      	mov	r3, r7
 8001c32:	4619      	mov	r1, r3
 8001c34:	4805      	ldr	r0, [pc, #20]	; (8001c4c <MX_TIM3_Init+0x94>)
 8001c36:	f004 ff6b 	bl	8006b10 <HAL_TIMEx_MasterConfigSynchronization>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001c40:	f000 f8fe 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c44:	bf00      	nop
 8001c46:	3718      	adds	r7, #24
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	200001ac 	.word	0x200001ac
 8001c50:	40000400 	.word	0x40000400

08001c54 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c58:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <MX_USART1_UART_Init+0x4c>)
 8001c5a:	4a12      	ldr	r2, [pc, #72]	; (8001ca4 <MX_USART1_UART_Init+0x50>)
 8001c5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c5e:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <MX_USART1_UART_Init+0x4c>)
 8001c60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c66:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <MX_USART1_UART_Init+0x4c>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <MX_USART1_UART_Init+0x4c>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c72:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <MX_USART1_UART_Init+0x4c>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c78:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <MX_USART1_UART_Init+0x4c>)
 8001c7a:	220c      	movs	r2, #12
 8001c7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c7e:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <MX_USART1_UART_Init+0x4c>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c84:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <MX_USART1_UART_Init+0x4c>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c8a:	4805      	ldr	r0, [pc, #20]	; (8001ca0 <MX_USART1_UART_Init+0x4c>)
 8001c8c:	f004 ffb0 	bl	8006bf0 <HAL_UART_Init>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c96:	f000 f8d3 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	200001f4 	.word	0x200001f4
 8001ca4:	40013800 	.word	0x40013800

08001ca8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cac:	4b11      	ldr	r3, [pc, #68]	; (8001cf4 <MX_USART2_UART_Init+0x4c>)
 8001cae:	4a12      	ldr	r2, [pc, #72]	; (8001cf8 <MX_USART2_UART_Init+0x50>)
 8001cb0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cb2:	4b10      	ldr	r3, [pc, #64]	; (8001cf4 <MX_USART2_UART_Init+0x4c>)
 8001cb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cb8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cba:	4b0e      	ldr	r3, [pc, #56]	; (8001cf4 <MX_USART2_UART_Init+0x4c>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cc0:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <MX_USART2_UART_Init+0x4c>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cc6:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <MX_USART2_UART_Init+0x4c>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ccc:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <MX_USART2_UART_Init+0x4c>)
 8001cce:	220c      	movs	r2, #12
 8001cd0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cd2:	4b08      	ldr	r3, [pc, #32]	; (8001cf4 <MX_USART2_UART_Init+0x4c>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cd8:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <MX_USART2_UART_Init+0x4c>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cde:	4805      	ldr	r0, [pc, #20]	; (8001cf4 <MX_USART2_UART_Init+0x4c>)
 8001ce0:	f004 ff86 	bl	8006bf0 <HAL_UART_Init>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001cea:	f000 f8a9 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20000238 	.word	0x20000238
 8001cf8:	40004400 	.word	0x40004400

08001cfc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d02:	4b10      	ldr	r3, [pc, #64]	; (8001d44 <MX_DMA_Init+0x48>)
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	4a0f      	ldr	r2, [pc, #60]	; (8001d44 <MX_DMA_Init+0x48>)
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	6153      	str	r3, [r2, #20]
 8001d0e:	4b0d      	ldr	r3, [pc, #52]	; (8001d44 <MX_DMA_Init+0x48>)
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	607b      	str	r3, [r7, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	200b      	movs	r0, #11
 8001d20:	f002 f863 	bl	8003dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001d24:	200b      	movs	r0, #11
 8001d26:	f002 f87c 	bl	8003e22 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	200f      	movs	r0, #15
 8001d30:	f002 f85b 	bl	8003dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001d34:	200f      	movs	r0, #15
 8001d36:	f002 f874 	bl	8003e22 <HAL_NVIC_EnableIRQ>

}
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40021000 	.word	0x40021000

08001d48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b088      	sub	sp, #32
 8001d4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4e:	f107 0310 	add.w	r3, r7, #16
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	605a      	str	r2, [r3, #4]
 8001d58:	609a      	str	r2, [r3, #8]
 8001d5a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d5c:	4b34      	ldr	r3, [pc, #208]	; (8001e30 <MX_GPIO_Init+0xe8>)
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	4a33      	ldr	r2, [pc, #204]	; (8001e30 <MX_GPIO_Init+0xe8>)
 8001d62:	f043 0320 	orr.w	r3, r3, #32
 8001d66:	6193      	str	r3, [r2, #24]
 8001d68:	4b31      	ldr	r3, [pc, #196]	; (8001e30 <MX_GPIO_Init+0xe8>)
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	f003 0320 	and.w	r3, r3, #32
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d74:	4b2e      	ldr	r3, [pc, #184]	; (8001e30 <MX_GPIO_Init+0xe8>)
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	4a2d      	ldr	r2, [pc, #180]	; (8001e30 <MX_GPIO_Init+0xe8>)
 8001d7a:	f043 0304 	orr.w	r3, r3, #4
 8001d7e:	6193      	str	r3, [r2, #24]
 8001d80:	4b2b      	ldr	r3, [pc, #172]	; (8001e30 <MX_GPIO_Init+0xe8>)
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	f003 0304 	and.w	r3, r3, #4
 8001d88:	60bb      	str	r3, [r7, #8]
 8001d8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d8c:	4b28      	ldr	r3, [pc, #160]	; (8001e30 <MX_GPIO_Init+0xe8>)
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	4a27      	ldr	r2, [pc, #156]	; (8001e30 <MX_GPIO_Init+0xe8>)
 8001d92:	f043 0308 	orr.w	r3, r3, #8
 8001d96:	6193      	str	r3, [r2, #24]
 8001d98:	4b25      	ldr	r3, [pc, #148]	; (8001e30 <MX_GPIO_Init+0xe8>)
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	f003 0308 	and.w	r3, r3, #8
 8001da0:	607b      	str	r3, [r7, #4]
 8001da2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_SET);
 8001da4:	2201      	movs	r2, #1
 8001da6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001daa:	4822      	ldr	r0, [pc, #136]	; (8001e34 <MX_GPIO_Init+0xec>)
 8001dac:	f002 fc91 	bl	80046d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001db0:	2301      	movs	r3, #1
 8001db2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001db4:	4b20      	ldr	r3, [pc, #128]	; (8001e38 <MX_GPIO_Init+0xf0>)
 8001db6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001db8:	2301      	movs	r3, #1
 8001dba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dbc:	f107 0310 	add.w	r3, r7, #16
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	481c      	ldr	r0, [pc, #112]	; (8001e34 <MX_GPIO_Init+0xec>)
 8001dc4:	f002 faea 	bl	800439c <HAL_GPIO_Init>

  /*Configure GPIO pins : LDN_Pin LDP_Pin */
  GPIO_InitStruct.Pin = LDN_Pin|LDP_Pin;
 8001dc8:	2330      	movs	r3, #48	; 0x30
 8001dca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd4:	f107 0310 	add.w	r3, r7, #16
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4816      	ldr	r0, [pc, #88]	; (8001e34 <MX_GPIO_Init+0xec>)
 8001ddc:	f002 fade 	bl	800439c <HAL_GPIO_Init>

  /*Configure GPIO pin : SIM_DTR_Pin */
  GPIO_InitStruct.Pin = SIM_DTR_Pin;
 8001de0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001de4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001de6:	2300      	movs	r3, #0
 8001de8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SIM_DTR_GPIO_Port, &GPIO_InitStruct);
 8001dee:	f107 0310 	add.w	r3, r7, #16
 8001df2:	4619      	mov	r1, r3
 8001df4:	4811      	ldr	r0, [pc, #68]	; (8001e3c <MX_GPIO_Init+0xf4>)
 8001df6:	f002 fad1 	bl	800439c <HAL_GPIO_Init>

  /*Configure GPIO pin : SIM_PWR_Pin */
  GPIO_InitStruct.Pin = SIM_PWR_Pin;
 8001dfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dfe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e00:	2301      	movs	r3, #1
 8001e02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SIM_PWR_GPIO_Port, &GPIO_InitStruct);
 8001e0c:	f107 0310 	add.w	r3, r7, #16
 8001e10:	4619      	mov	r1, r3
 8001e12:	4808      	ldr	r0, [pc, #32]	; (8001e34 <MX_GPIO_Init+0xec>)
 8001e14:	f002 fac2 	bl	800439c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 10, 0);
 8001e18:	2200      	movs	r2, #0
 8001e1a:	210a      	movs	r1, #10
 8001e1c:	2006      	movs	r0, #6
 8001e1e:	f001 ffe4 	bl	8003dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001e22:	2006      	movs	r0, #6
 8001e24:	f001 fffd 	bl	8003e22 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e28:	bf00      	nop
 8001e2a:	3720      	adds	r7, #32
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40021000 	.word	0x40021000
 8001e34:	40010800 	.word	0x40010800
 8001e38:	10210000 	.word	0x10210000
 8001e3c:	40010c00 	.word	0x40010c00

08001e40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e44:	b672      	cpsid	i
}
 8001e46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e48:	e7fe      	b.n	8001e48 <Error_Handler+0x8>

08001e4a <HAL_GPIO_EXTI_Callback>:
uint16_t BatteryADC[100] = {0};
uint8_t  Battery = 0;
uint8_t sleep_enable = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	4603      	mov	r3, r0
 8001e52:	80fb      	strh	r3, [r7, #6]
//	printf("GPIO %d LOW\r\n",GPIO_Pin);
	HAL_PWR_DisableSleepOnExit ();
 8001e54:	f003 fdc6 	bl	80059e4 <HAL_PWR_DisableSleepOnExit>
}
 8001e58:	bf00      	nop
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <_Z16enter_sleep_modev>:

void enter_sleep_mode(){
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
	if(!sleep_enable){
 8001e64:	4b16      	ldr	r3, [pc, #88]	; (8001ec0 <_Z16enter_sleep_modev+0x60>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d027      	beq.n	8001ebc <_Z16enter_sleep_modev+0x5c>
		return;
	}
	printf("ENTER SLEEP MODE\r\n");
 8001e6c:	4815      	ldr	r0, [pc, #84]	; (8001ec4 <_Z16enter_sleep_modev+0x64>)
 8001e6e:	f006 f8ed 	bl	800804c <puts>
	SIM7600_TURN_OFF();
 8001e72:	f000 fc39 	bl	80026e8 <_Z16SIM7600_TURN_OFFv>
	HAL_Delay(100);
 8001e76:	2064      	movs	r0, #100	; 0x64
 8001e78:	f001 fac8 	bl	800340c <HAL_Delay>
	HAL_TIM_Base_Stop_IT(&htim3);
 8001e7c:	4812      	ldr	r0, [pc, #72]	; (8001ec8 <_Z16enter_sleep_modev+0x68>)
 8001e7e:	f004 fb31 	bl	80064e4 <HAL_TIM_Base_Stop_IT>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001e82:	2006      	movs	r0, #6
 8001e84:	f001 ffcd 	bl	8003e22 <HAL_NVIC_EnableIRQ>
	__HAL_TIM_SET_COUNTER(&htim2,0);
 8001e88:	4b10      	ldr	r3, [pc, #64]	; (8001ecc <_Z16enter_sleep_modev+0x6c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim2);
 8001e90:	480e      	ldr	r0, [pc, #56]	; (8001ecc <_Z16enter_sleep_modev+0x6c>)
 8001e92:	f004 fad5 	bl	8006440 <HAL_TIM_Base_Start_IT>
	HAL_SuspendTick();
 8001e96:	f001 fadd 	bl	8003454 <HAL_SuspendTick>

	HAL_PWR_EnableSleepOnExit ();
 8001e9a:	f003 fd95 	bl	80059c8 <HAL_PWR_EnableSleepOnExit>

	//	  Enter Sleep Mode , wake up is done once User push-button is pressed
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001e9e:	2101      	movs	r1, #1
 8001ea0:	2000      	movs	r0, #0
 8001ea2:	f003 fd75 	bl	8005990 <HAL_PWR_EnterSLEEPMode>
	HAL_ResumeTick();
 8001ea6:	f001 fae3 	bl	8003470 <HAL_ResumeTick>
	HAL_Delay(100);
 8001eaa:	2064      	movs	r0, #100	; 0x64
 8001eac:	f001 faae 	bl	800340c <HAL_Delay>
	printf("EXIT SLEEP MODE\r\n");
 8001eb0:	4807      	ldr	r0, [pc, #28]	; (8001ed0 <_Z16enter_sleep_modev+0x70>)
 8001eb2:	f006 f8cb 	bl	800804c <puts>
	HAL_NVIC_SystemReset();
 8001eb6:	f001 ffc2 	bl	8003e3e <HAL_NVIC_SystemReset>
 8001eba:	e000      	b.n	8001ebe <_Z16enter_sleep_modev+0x5e>
		return;
 8001ebc:	bf00      	nop
}
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	200003a1 	.word	0x200003a1
 8001ec4:	080093b0 	.word	0x080093b0
 8001ec8:	200001ac 	.word	0x200001ac
 8001ecc:	20000164 	.word	0x20000164
 8001ed0:	080093c4 	.word	0x080093c4

08001ed4 <_Z14add_heart_beath>:
void add_heart_beat(uint8_t value)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	71fb      	strb	r3, [r7, #7]
	if(heart_beatcnt ==0)
 8001ede:	4b4d      	ldr	r3, [pc, #308]	; (8002014 <_Z14add_heart_beath+0x140>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d113      	bne.n	8001f0e <_Z14add_heart_beath+0x3a>
	{
		heart_beat[heart_beatcnt] = value;
 8001ee6:	4b4b      	ldr	r3, [pc, #300]	; (8002014 <_Z14add_heart_beath+0x140>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	4619      	mov	r1, r3
 8001eec:	4a4a      	ldr	r2, [pc, #296]	; (8002018 <_Z14add_heart_beath+0x144>)
 8001eee:	79fb      	ldrb	r3, [r7, #7]
 8001ef0:	5453      	strb	r3, [r2, r1]
		adder_time = HAL_GetTick() +1500;
 8001ef2:	f001 fa81 	bl	80033f8 <HAL_GetTick>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8001efc:	4a47      	ldr	r2, [pc, #284]	; (800201c <_Z14add_heart_beath+0x148>)
 8001efe:	6013      	str	r3, [r2, #0]
		heart_beatcnt++;
 8001f00:	4b44      	ldr	r3, [pc, #272]	; (8002014 <_Z14add_heart_beath+0x140>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	3301      	adds	r3, #1
 8001f06:	b2da      	uxtb	r2, r3
 8001f08:	4b42      	ldr	r3, [pc, #264]	; (8002014 <_Z14add_heart_beath+0x140>)
 8001f0a:	701a      	strb	r2, [r3, #0]
 8001f0c:	e078      	b.n	8002000 <_Z14add_heart_beath+0x12c>
	}
	else
	{
		if((abs(value - heart_beat[heart_beatcnt-1]) >3) || (HAL_GetTick()>adder_time))
 8001f0e:	79fb      	ldrb	r3, [r7, #7]
 8001f10:	4a40      	ldr	r2, [pc, #256]	; (8002014 <_Z14add_heart_beath+0x140>)
 8001f12:	7812      	ldrb	r2, [r2, #0]
 8001f14:	3a01      	subs	r2, #1
 8001f16:	4940      	ldr	r1, [pc, #256]	; (8002018 <_Z14add_heart_beath+0x144>)
 8001f18:	5c8a      	ldrb	r2, [r1, r2]
 8001f1a:	1a9b      	subs	r3, r3, r2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	bfb8      	it	lt
 8001f20:	425b      	neglt	r3, r3
 8001f22:	2b03      	cmp	r3, #3
 8001f24:	dc06      	bgt.n	8001f34 <_Z14add_heart_beath+0x60>
 8001f26:	f001 fa67 	bl	80033f8 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	4b3b      	ldr	r3, [pc, #236]	; (800201c <_Z14add_heart_beath+0x148>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d901      	bls.n	8001f38 <_Z14add_heart_beath+0x64>
 8001f34:	2301      	movs	r3, #1
 8001f36:	e000      	b.n	8001f3a <_Z14add_heart_beath+0x66>
 8001f38:	2300      	movs	r3, #0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d01b      	beq.n	8001f76 <_Z14add_heart_beath+0xa2>
		{
			memset(heart_beat,0,NUM_SAMPLE);
 8001f3e:	220a      	movs	r2, #10
 8001f40:	2100      	movs	r1, #0
 8001f42:	4835      	ldr	r0, [pc, #212]	; (8002018 <_Z14add_heart_beath+0x144>)
 8001f44:	f005 ff18 	bl	8007d78 <memset>
			heart_beatcnt = 0;
 8001f48:	4b32      	ldr	r3, [pc, #200]	; (8002014 <_Z14add_heart_beath+0x140>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	701a      	strb	r2, [r3, #0]
			heart_beat[heart_beatcnt] = value;
 8001f4e:	4b31      	ldr	r3, [pc, #196]	; (8002014 <_Z14add_heart_beath+0x140>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	4619      	mov	r1, r3
 8001f54:	4a30      	ldr	r2, [pc, #192]	; (8002018 <_Z14add_heart_beath+0x144>)
 8001f56:	79fb      	ldrb	r3, [r7, #7]
 8001f58:	5453      	strb	r3, [r2, r1]
			adder_time = HAL_GetTick() +1500;
 8001f5a:	f001 fa4d 	bl	80033f8 <HAL_GetTick>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8001f64:	4a2d      	ldr	r2, [pc, #180]	; (800201c <_Z14add_heart_beath+0x148>)
 8001f66:	6013      	str	r3, [r2, #0]
			heart_beatcnt++;
 8001f68:	4b2a      	ldr	r3, [pc, #168]	; (8002014 <_Z14add_heart_beath+0x140>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	b2da      	uxtb	r2, r3
 8001f70:	4b28      	ldr	r3, [pc, #160]	; (8002014 <_Z14add_heart_beath+0x140>)
 8001f72:	701a      	strb	r2, [r3, #0]
			return;
 8001f74:	e04b      	b.n	800200e <_Z14add_heart_beath+0x13a>
		}
		else
		{
			if(heart_beatcnt == NUM_SAMPLE)
 8001f76:	4b27      	ldr	r3, [pc, #156]	; (8002014 <_Z14add_heart_beath+0x140>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	2b0a      	cmp	r3, #10
 8001f7c:	d134      	bne.n	8001fe8 <_Z14add_heart_beath+0x114>
			{
				for(int i =0;i<NUM_SAMPLE-1;i++)
 8001f7e:	2300      	movs	r3, #0
 8001f80:	617b      	str	r3, [r7, #20]
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	2b08      	cmp	r3, #8
 8001f86:	dc0c      	bgt.n	8001fa2 <_Z14add_heart_beath+0xce>
				{
					heart_beat[i] = heart_beat[i+1];
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	4a22      	ldr	r2, [pc, #136]	; (8002018 <_Z14add_heart_beath+0x144>)
 8001f8e:	5cd1      	ldrb	r1, [r2, r3]
 8001f90:	4a21      	ldr	r2, [pc, #132]	; (8002018 <_Z14add_heart_beath+0x144>)
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	4413      	add	r3, r2
 8001f96:	460a      	mov	r2, r1
 8001f98:	701a      	strb	r2, [r3, #0]
				for(int i =0;i<NUM_SAMPLE-1;i++)
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	617b      	str	r3, [r7, #20]
 8001fa0:	e7ef      	b.n	8001f82 <_Z14add_heart_beath+0xae>
				}
				heart_beat[4] = value;
 8001fa2:	4a1d      	ldr	r2, [pc, #116]	; (8002018 <_Z14add_heart_beath+0x144>)
 8001fa4:	79fb      	ldrb	r3, [r7, #7]
 8001fa6:	7113      	strb	r3, [r2, #4]
				heart_beatcnt = NUM_SAMPLE;
 8001fa8:	4b1a      	ldr	r3, [pc, #104]	; (8002014 <_Z14add_heart_beath+0x140>)
 8001faa:	220a      	movs	r2, #10
 8001fac:	701a      	strb	r2, [r3, #0]
				uint16_t total =0;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	827b      	strh	r3, [r7, #18]
				for(int i =0;i<NUM_SAMPLE;i++)
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2b09      	cmp	r3, #9
 8001fba:	dc0b      	bgt.n	8001fd4 <_Z14add_heart_beath+0x100>
				{
					total+=heart_beat[i];
 8001fbc:	4a16      	ldr	r2, [pc, #88]	; (8002018 <_Z14add_heart_beath+0x144>)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	b29a      	uxth	r2, r3
 8001fc6:	8a7b      	ldrh	r3, [r7, #18]
 8001fc8:	4413      	add	r3, r2
 8001fca:	827b      	strh	r3, [r7, #18]
				for(int i =0;i<NUM_SAMPLE;i++)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	e7f0      	b.n	8001fb6 <_Z14add_heart_beath+0xe2>
				}
				result_heartbeat = total/NUM_SAMPLE;
 8001fd4:	8a7b      	ldrh	r3, [r7, #18]
 8001fd6:	4a12      	ldr	r2, [pc, #72]	; (8002020 <_Z14add_heart_beath+0x14c>)
 8001fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fdc:	08db      	lsrs	r3, r3, #3
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	4b10      	ldr	r3, [pc, #64]	; (8002024 <_Z14add_heart_beath+0x150>)
 8001fe4:	701a      	strb	r2, [r3, #0]
 8001fe6:	e00b      	b.n	8002000 <_Z14add_heart_beath+0x12c>
			}
			else
			{
				heart_beat[heart_beatcnt] = value;
 8001fe8:	4b0a      	ldr	r3, [pc, #40]	; (8002014 <_Z14add_heart_beath+0x140>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	4619      	mov	r1, r3
 8001fee:	4a0a      	ldr	r2, [pc, #40]	; (8002018 <_Z14add_heart_beath+0x144>)
 8001ff0:	79fb      	ldrb	r3, [r7, #7]
 8001ff2:	5453      	strb	r3, [r2, r1]
				heart_beatcnt++;
 8001ff4:	4b07      	ldr	r3, [pc, #28]	; (8002014 <_Z14add_heart_beath+0x140>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	4b05      	ldr	r3, [pc, #20]	; (8002014 <_Z14add_heart_beath+0x140>)
 8001ffe:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	adder_time = HAL_GetTick() +1500;
 8002000:	f001 f9fa 	bl	80033f8 <HAL_GetTick>
 8002004:	4603      	mov	r3, r0
 8002006:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 800200a:	4a04      	ldr	r2, [pc, #16]	; (800201c <_Z14add_heart_beath+0x148>)
 800200c:	6013      	str	r3, [r2, #0]

}
 800200e:	3718      	adds	r7, #24
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	200002ce 	.word	0x200002ce
 8002018:	200002c4 	.word	0x200002c4
 800201c:	200002d0 	.word	0x200002d0
 8002020:	cccccccd 	.word	0xcccccccd
 8002024:	200002d4 	.word	0x200002d4

08002028 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == hadc1.Instance)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	4b2a      	ldr	r3, [pc, #168]	; (80020e0 <HAL_ADC_ConvCpltCallback+0xb8>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	429a      	cmp	r2, r3
 800203a:	d14c      	bne.n	80020d6 <HAL_ADC_ConvCpltCallback+0xae>
	{
		uint32_t total = 0;
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]
		for (int i = 0;i<100;i++){
 8002040:	2300      	movs	r3, #0
 8002042:	613b      	str	r3, [r7, #16]
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	2b63      	cmp	r3, #99	; 0x63
 8002048:	dc0b      	bgt.n	8002062 <HAL_ADC_ConvCpltCallback+0x3a>
			total += BatteryADC[i];
 800204a:	4a26      	ldr	r2, [pc, #152]	; (80020e4 <HAL_ADC_ConvCpltCallback+0xbc>)
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002052:	461a      	mov	r2, r3
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	4413      	add	r3, r2
 8002058:	617b      	str	r3, [r7, #20]
		for (int i = 0;i<100;i++){
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	3301      	adds	r3, #1
 800205e:	613b      	str	r3, [r7, #16]
 8002060:	e7f0      	b.n	8002044 <HAL_ADC_ConvCpltCallback+0x1c>
		}
		total = total / 100;
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	4a20      	ldr	r2, [pc, #128]	; (80020e8 <HAL_ADC_ConvCpltCallback+0xc0>)
 8002066:	fba2 2303 	umull	r2, r3, r2, r3
 800206a:	095b      	lsrs	r3, r3, #5
 800206c:	617b      	str	r3, [r7, #20]
		float voltage  = 3.3f;
 800206e:	4b1f      	ldr	r3, [pc, #124]	; (80020ec <HAL_ADC_ConvCpltCallback+0xc4>)
 8002070:	60fb      	str	r3, [r7, #12]
		voltage = (voltage *total/4096)*2; //2 cau phan ap
 8002072:	6978      	ldr	r0, [r7, #20]
 8002074:	f7fe fc60 	bl	8000938 <__aeabi_ui2f>
 8002078:	4603      	mov	r3, r0
 800207a:	68f9      	ldr	r1, [r7, #12]
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe fcb3 	bl	80009e8 <__aeabi_fmul>
 8002082:	4603      	mov	r3, r0
 8002084:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8002088:	4618      	mov	r0, r3
 800208a:	f7fe fd61 	bl	8000b50 <__aeabi_fdiv>
 800208e:	4603      	mov	r3, r0
 8002090:	4619      	mov	r1, r3
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe fba0 	bl	80007d8 <__addsf3>
 8002098:	4603      	mov	r3, r0
 800209a:	60fb      	str	r3, [r7, #12]
		Battery = (voltage - 3.8f)*100/(4.2f-3.8f);
 800209c:	4914      	ldr	r1, [pc, #80]	; (80020f0 <HAL_ADC_ConvCpltCallback+0xc8>)
 800209e:	68f8      	ldr	r0, [r7, #12]
 80020a0:	f7fe fb98 	bl	80007d4 <__aeabi_fsub>
 80020a4:	4603      	mov	r3, r0
 80020a6:	4913      	ldr	r1, [pc, #76]	; (80020f4 <HAL_ADC_ConvCpltCallback+0xcc>)
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7fe fc9d 	bl	80009e8 <__aeabi_fmul>
 80020ae:	4603      	mov	r3, r0
 80020b0:	4911      	ldr	r1, [pc, #68]	; (80020f8 <HAL_ADC_ConvCpltCallback+0xd0>)
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe fd4c 	bl	8000b50 <__aeabi_fdiv>
 80020b8:	4603      	mov	r3, r0
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7fe fe96 	bl	8000dec <__aeabi_f2uiz>
 80020c0:	4603      	mov	r3, r0
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	4b0d      	ldr	r3, [pc, #52]	; (80020fc <HAL_ADC_ConvCpltCallback+0xd4>)
 80020c6:	701a      	strb	r2, [r3, #0]
		if(Battery > 100)
 80020c8:	4b0c      	ldr	r3, [pc, #48]	; (80020fc <HAL_ADC_ConvCpltCallback+0xd4>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b64      	cmp	r3, #100	; 0x64
 80020ce:	d902      	bls.n	80020d6 <HAL_ADC_ConvCpltCallback+0xae>
			Battery = 100;
 80020d0:	4b0a      	ldr	r3, [pc, #40]	; (80020fc <HAL_ADC_ConvCpltCallback+0xd4>)
 80020d2:	2264      	movs	r2, #100	; 0x64
 80020d4:	701a      	strb	r2, [r3, #0]
	}
}
 80020d6:	bf00      	nop
 80020d8:	3718      	adds	r7, #24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	2000009c 	.word	0x2000009c
 80020e4:	200002d8 	.word	0x200002d8
 80020e8:	51eb851f 	.word	0x51eb851f
 80020ec:	40533333 	.word	0x40533333
 80020f0:	40733333 	.word	0x40733333
 80020f4:	42c80000 	.word	0x42c80000
 80020f8:	3eccccc8 	.word	0x3eccccc8
 80020fc:	200003a0 	.word	0x200003a0

08002100 <HAL_TIM_PeriodElapsedCallback>:
char location[100] = {0};
uint32_t Baterry_check_time = 0;
uint32_t pulseDetected = 0;
uint32_t timepulseDetected = HAL_GetTick() +5000;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) // 20ms
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b08c      	sub	sp, #48	; 0x30
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim3.Instance){
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	4b24      	ldr	r3, [pc, #144]	; (80021a0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	429a      	cmp	r2, r3
 8002112:	d136      	bne.n	8002182 <HAL_TIM_PeriodElapsedCallback+0x82>
		  pulseoxymeter_t result = pulseOxymeter->update();
 8002114:	4b23      	ldr	r3, [pc, #140]	; (80021a4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	f107 030c 	add.w	r3, r7, #12
 800211c:	4611      	mov	r1, r2
 800211e:	4618      	mov	r0, r3
 8002120:	f7fe ff32 	bl	8000f88 <_ZN8MAX301006updateEv>
		  if( result.pulseDetected == true )
 8002124:	7b3b      	ldrb	r3, [r7, #12]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d136      	bne.n	8002198 <HAL_TIM_PeriodElapsedCallback+0x98>
		  {
				pulseDetected++;
 800212a:	4b1f      	ldr	r3, [pc, #124]	; (80021a8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	3301      	adds	r3, #1
 8002130:	4a1d      	ldr	r2, [pc, #116]	; (80021a8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002132:	6013      	str	r3, [r2, #0]
				printf("BEAT: %d\r\n",(int)result.heartBPM);
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe fe32 	bl	8000da0 <__aeabi_f2iz>
 800213c:	4603      	mov	r3, r0
 800213e:	4619      	mov	r1, r3
 8002140:	481a      	ldr	r0, [pc, #104]	; (80021ac <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002142:	f005 fefd 	bl	8007f40 <iprintf>
				if((int)result.heartBPM < 200)
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	4618      	mov	r0, r3
 800214a:	f7fe fe29 	bl	8000da0 <__aeabi_f2iz>
 800214e:	4603      	mov	r3, r0
 8002150:	2bc7      	cmp	r3, #199	; 0xc7
 8002152:	dc21      	bgt.n	8002198 <HAL_TIM_PeriodElapsedCallback+0x98>
				{

					add_heart_beat((int)result.heartBPM);
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	4618      	mov	r0, r3
 8002158:	f7fe fe22 	bl	8000da0 <__aeabi_f2iz>
 800215c:	4603      	mov	r3, r0
 800215e:	b2db      	uxtb	r3, r3
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff feb7 	bl	8001ed4 <_Z14add_heart_beath>
					if(result_heartbeat)
 8002166:	4b12      	ldr	r3, [pc, #72]	; (80021b0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d014      	beq.n	8002198 <HAL_TIM_PeriodElapsedCallback+0x98>
					{
						printf("OK: result_heartbeat: %d\r\n",result_heartbeat);
 800216e:	4b10      	ldr	r3, [pc, #64]	; (80021b0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	4619      	mov	r1, r3
 8002174:	480f      	ldr	r0, [pc, #60]	; (80021b4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002176:	f005 fee3 	bl	8007f40 <iprintf>
						HAL_TIM_Base_Stop_IT(&htim3);
 800217a:	4809      	ldr	r0, [pc, #36]	; (80021a0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800217c:	f004 f9b2 	bl	80064e4 <HAL_TIM_Base_Stop_IT>
	}else if(htim->Instance == htim2.Instance){
		HAL_PWR_DisableSleepOnExit ();
		printf("weakup from timer\r\n");
	}

}
 8002180:	e00a      	b.n	8002198 <HAL_TIM_PeriodElapsedCallback+0x98>
	}else if(htim->Instance == htim2.Instance){
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	4b0c      	ldr	r3, [pc, #48]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	429a      	cmp	r2, r3
 800218c:	d104      	bne.n	8002198 <HAL_TIM_PeriodElapsedCallback+0x98>
		HAL_PWR_DisableSleepOnExit ();
 800218e:	f003 fc29 	bl	80059e4 <HAL_PWR_DisableSleepOnExit>
		printf("weakup from timer\r\n");
 8002192:	480a      	ldr	r0, [pc, #40]	; (80021bc <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002194:	f005 ff5a 	bl	800804c <puts>
}
 8002198:	bf00      	nop
 800219a:	3730      	adds	r7, #48	; 0x30
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	200001ac 	.word	0x200001ac
 80021a4:	200002c0 	.word	0x200002c0
 80021a8:	2000040c 	.word	0x2000040c
 80021ac:	080093e4 	.word	0x080093e4
 80021b0:	200002d4 	.word	0x200002d4
 80021b4:	080093f0 	.word	0x080093f0
 80021b8:	20000164 	.word	0x20000164
 80021bc:	0800940c 	.word	0x0800940c

080021c0 <_Z4loopv>:
void loop()
{
 80021c0:	b590      	push	{r4, r7, lr}
 80021c2:	b0b9      	sub	sp, #228	; 0xe4
 80021c4:	af04      	add	r7, sp, #16

	if(HAL_GetTick() > Baterry_check_time)
 80021c6:	f001 f917 	bl	80033f8 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	4ba6      	ldr	r3, [pc, #664]	; (8002468 <_Z4loopv+0x2a8>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	bf8c      	ite	hi
 80021d4:	2301      	movhi	r3, #1
 80021d6:	2300      	movls	r3, #0
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d015      	beq.n	800220a <_Z4loopv+0x4a>
	{
		printf("battety check\r\n");
 80021de:	48a3      	ldr	r0, [pc, #652]	; (800246c <_Z4loopv+0x2ac>)
 80021e0:	f005 ff34 	bl	800804c <puts>
		if(result_heartbeat == 0)
 80021e4:	4ba2      	ldr	r3, [pc, #648]	; (8002470 <_Z4loopv+0x2b0>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d102      	bne.n	80021f2 <_Z4loopv+0x32>
		{
			printf("reading heartbeat\r\n");
 80021ec:	48a1      	ldr	r0, [pc, #644]	; (8002474 <_Z4loopv+0x2b4>)
 80021ee:	f005 ff2d 	bl	800804c <puts>
		}
		HAL_ADC_Start_DMA(&hadc1, (uint32_t *)BatteryADC, 100);
 80021f2:	2264      	movs	r2, #100	; 0x64
 80021f4:	49a0      	ldr	r1, [pc, #640]	; (8002478 <_Z4loopv+0x2b8>)
 80021f6:	48a1      	ldr	r0, [pc, #644]	; (800247c <_Z4loopv+0x2bc>)
 80021f8:	f001 fa20 	bl	800363c <HAL_ADC_Start_DMA>
		Baterry_check_time = HAL_GetTick() +2000;
 80021fc:	f001 f8fc 	bl	80033f8 <HAL_GetTick>
 8002200:	4603      	mov	r3, r0
 8002202:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002206:	4a98      	ldr	r2, [pc, #608]	; (8002468 <_Z4loopv+0x2a8>)
 8002208:	6013      	str	r3, [r2, #0]
	}
	if(HAL_GetTick() > timepulseDetected)
 800220a:	f001 f8f5 	bl	80033f8 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	4b9b      	ldr	r3, [pc, #620]	; (8002480 <_Z4loopv+0x2c0>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	429a      	cmp	r2, r3
 8002216:	bf8c      	ite	hi
 8002218:	2301      	movhi	r3, #1
 800221a:	2300      	movls	r3, #0
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d02e      	beq.n	8002280 <_Z4loopv+0xc0>
	{
		timepulseDetected = HAL_GetTick() +5000;
 8002222:	f001 f8e9 	bl	80033f8 <HAL_GetTick>
 8002226:	4603      	mov	r3, r0
 8002228:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800222c:	3308      	adds	r3, #8
 800222e:	4a94      	ldr	r2, [pc, #592]	; (8002480 <_Z4loopv+0x2c0>)
 8002230:	6013      	str	r3, [r2, #0]
		if(!pulseDetected){
 8002232:	4b94      	ldr	r3, [pc, #592]	; (8002484 <_Z4loopv+0x2c4>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d11f      	bne.n	800227a <_Z4loopv+0xba>
			  delete pulseOxymeter;
 800223a:	4b93      	ldr	r3, [pc, #588]	; (8002488 <_Z4loopv+0x2c8>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <_Z4loopv+0x8a>
 8002242:	21c0      	movs	r1, #192	; 0xc0
 8002244:	4618      	mov	r0, r3
 8002246:	f005 fb69 	bl	800791c <_ZdlPvj>
			  pulseOxymeter = new MAX30100( DEFAULT_OPERATING_MODE, DEFAULT_SAMPLING_RATE, DEFAULT_LED_PULSE_WIDTH, DEFAULT_IR_LED_CURRENT, true, true );
 800224a:	20c0      	movs	r0, #192	; 0xc0
 800224c:	f005 fb68 	bl	8007920 <_Znwj>
 8002250:	4603      	mov	r3, r0
 8002252:	461c      	mov	r4, r3
 8002254:	2301      	movs	r3, #1
 8002256:	9302      	str	r3, [sp, #8]
 8002258:	2301      	movs	r3, #1
 800225a:	9301      	str	r3, [sp, #4]
 800225c:	230f      	movs	r3, #15
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	2303      	movs	r3, #3
 8002262:	2201      	movs	r2, #1
 8002264:	2103      	movs	r1, #3
 8002266:	4620      	mov	r0, r4
 8002268:	f7fe fdf8 	bl	8000e5c <_ZN8MAX30100C1E4Mode12SamplingRate13LEDPulseWidth10LEDCurrentbb>
 800226c:	4b86      	ldr	r3, [pc, #536]	; (8002488 <_Z4loopv+0x2c8>)
 800226e:	601c      	str	r4, [r3, #0]
			  pulseOxymeter->resetFIFO();
 8002270:	4b85      	ldr	r3, [pc, #532]	; (8002488 <_Z4loopv+0x2c8>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff fa2e 	bl	80016d6 <_ZN8MAX301009resetFIFOEv>
		}
		pulseDetected=0;
 800227a:	4b82      	ldr	r3, [pc, #520]	; (8002484 <_Z4loopv+0x2c4>)
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
	}
	switch (simstate) {
 8002280:	4b82      	ldr	r3, [pc, #520]	; (800248c <_Z4loopv+0x2cc>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b03      	cmp	r3, #3
 8002286:	f200 80de 	bhi.w	8002446 <_Z4loopv+0x286>
 800228a:	a201      	add	r2, pc, #4	; (adr r2, 8002290 <_Z4loopv+0xd0>)
 800228c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002290:	080022a1 	.word	0x080022a1
 8002294:	080022cb 	.word	0x080022cb
 8002298:	080022f9 	.word	0x080022f9
 800229c:	08002429 	.word	0x08002429
		case SIM_INIT:
			 if(At_Command((char*)"AT\r\n",(char*)"OK\r\n", 2000)==1){
 80022a0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80022a4:	497a      	ldr	r1, [pc, #488]	; (8002490 <_Z4loopv+0x2d0>)
 80022a6:	487b      	ldr	r0, [pc, #492]	; (8002494 <_Z4loopv+0x2d4>)
 80022a8:	f000 fada 	bl	8002860 <_Z10At_CommandPcS_m>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	bf0c      	ite	eq
 80022b2:	2301      	moveq	r3, #1
 80022b4:	2300      	movne	r3, #0
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f000 80c6 	beq.w	800244a <_Z4loopv+0x28a>
				 Sim7600_init();
 80022be:	f000 fb69 	bl	8002994 <_Z12Sim7600_initv>
				 simstate = SIM_READ_GPS;
 80022c2:	4b72      	ldr	r3, [pc, #456]	; (800248c <_Z4loopv+0x2cc>)
 80022c4:	2201      	movs	r2, #1
 80022c6:	701a      	strb	r2, [r3, #0]
//				 simstate = SIM_REQUEST_HTTP;
			  }
			break;
 80022c8:	e0bf      	b.n	800244a <_Z4loopv+0x28a>
		case SIM_READ_GPS:
			if(SIM_7600_read_GNSS(location))
 80022ca:	4873      	ldr	r0, [pc, #460]	; (8002498 <_Z4loopv+0x2d8>)
 80022cc:	f000 fce0 	bl	8002c90 <_Z18SIM_7600_read_GNSSPc>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	bf14      	ite	ne
 80022d6:	2301      	movne	r3, #1
 80022d8:	2300      	moveq	r3, #0
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d007      	beq.n	80022f0 <_Z4loopv+0x130>
			{
				printf("OK: location: %s\r\n",location);
 80022e0:	496d      	ldr	r1, [pc, #436]	; (8002498 <_Z4loopv+0x2d8>)
 80022e2:	486e      	ldr	r0, [pc, #440]	; (800249c <_Z4loopv+0x2dc>)
 80022e4:	f005 fe2c 	bl	8007f40 <iprintf>
				simstate = SIM_REQUEST_HTTP;
 80022e8:	4b68      	ldr	r3, [pc, #416]	; (800248c <_Z4loopv+0x2cc>)
 80022ea:	2202      	movs	r2, #2
 80022ec:	701a      	strb	r2, [r3, #0]
 80022ee:	e003      	b.n	80022f8 <_Z4loopv+0x138>
			}else
			{
				HAL_Delay(5000);
 80022f0:	f241 3088 	movw	r0, #5000	; 0x1388
 80022f4:	f001 f88a 	bl	800340c <HAL_Delay>
			}
		case SIM_REQUEST_HTTP:
			{
				if(result_heartbeat == 0 && (HAL_GetTick() < 50000))
 80022f8:	4b5d      	ldr	r3, [pc, #372]	; (8002470 <_Z4loopv+0x2b0>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d108      	bne.n	8002312 <_Z4loopv+0x152>
 8002300:	f001 f87a 	bl	80033f8 <HAL_GetTick>
 8002304:	4603      	mov	r3, r0
 8002306:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800230a:	4293      	cmp	r3, r2
 800230c:	d801      	bhi.n	8002312 <_Z4loopv+0x152>
 800230e:	2301      	movs	r3, #1
 8002310:	e000      	b.n	8002314 <_Z4loopv+0x154>
 8002312:	2300      	movs	r3, #0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d007      	beq.n	8002328 <_Z4loopv+0x168>
				{
					printf("wating heart beat \r\n");
 8002318:	4861      	ldr	r0, [pc, #388]	; (80024a0 <_Z4loopv+0x2e0>)
 800231a:	f005 fe97 	bl	800804c <puts>
					HAL_Delay(1000);
 800231e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002322:	f001 f873 	bl	800340c <HAL_Delay>
 8002326:	e091      	b.n	800244c <_Z4loopv+0x28c>
					break;
				}
				static int http_try = 0;
				char request[200];
				if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8002328:	2101      	movs	r1, #1
 800232a:	485e      	ldr	r0, [pc, #376]	; (80024a4 <_Z4loopv+0x2e4>)
 800232c:	f002 f9ba 	bl	80046a4 <HAL_GPIO_ReadPin>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	bf14      	ite	ne
 8002336:	2301      	movne	r3, #1
 8002338:	2300      	moveq	r3, #0
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b00      	cmp	r3, #0
 800233e:	d01f      	beq.n	8002380 <_Z4loopv+0x1c0>
				{
					if(result_heartbeat == 0)
 8002340:	4b4b      	ldr	r3, [pc, #300]	; (8002470 <_Z4loopv+0x2b0>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d10d      	bne.n	8002364 <_Z4loopv+0x1a4>
					{
						snprintf(request,200,"token=00001&location=%s&heart_rate=%d&water_state=0&bat_cap=%d",location,result_heartbeat,Battery);
 8002348:	4b49      	ldr	r3, [pc, #292]	; (8002470 <_Z4loopv+0x2b0>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	461a      	mov	r2, r3
 800234e:	4b56      	ldr	r3, [pc, #344]	; (80024a8 <_Z4loopv+0x2e8>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	1d38      	adds	r0, r7, #4
 8002354:	9301      	str	r3, [sp, #4]
 8002356:	9200      	str	r2, [sp, #0]
 8002358:	4b4f      	ldr	r3, [pc, #316]	; (8002498 <_Z4loopv+0x2d8>)
 800235a:	4a54      	ldr	r2, [pc, #336]	; (80024ac <_Z4loopv+0x2ec>)
 800235c:	21c8      	movs	r1, #200	; 0xc8
 800235e:	f005 fed1 	bl	8008104 <sniprintf>
 8002362:	e02c      	b.n	80023be <_Z4loopv+0x1fe>

					}else
					{
						snprintf(request,200,"token=00001&location=%s&heart_rate=%d&water_state=1&bat_cap=%d",location,result_heartbeat,Battery);
 8002364:	4b42      	ldr	r3, [pc, #264]	; (8002470 <_Z4loopv+0x2b0>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	461a      	mov	r2, r3
 800236a:	4b4f      	ldr	r3, [pc, #316]	; (80024a8 <_Z4loopv+0x2e8>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	1d38      	adds	r0, r7, #4
 8002370:	9301      	str	r3, [sp, #4]
 8002372:	9200      	str	r2, [sp, #0]
 8002374:	4b48      	ldr	r3, [pc, #288]	; (8002498 <_Z4loopv+0x2d8>)
 8002376:	4a4e      	ldr	r2, [pc, #312]	; (80024b0 <_Z4loopv+0x2f0>)
 8002378:	21c8      	movs	r1, #200	; 0xc8
 800237a:	f005 fec3 	bl	8008104 <sniprintf>
 800237e:	e01e      	b.n	80023be <_Z4loopv+0x1fe>
					}
				}else
				{
					if(result_heartbeat <= 100)
 8002380:	4b3b      	ldr	r3, [pc, #236]	; (8002470 <_Z4loopv+0x2b0>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2b64      	cmp	r3, #100	; 0x64
 8002386:	d80d      	bhi.n	80023a4 <_Z4loopv+0x1e4>
					{
						snprintf(request,200,"token=00001&location=%s&heart_rate=%d&water_state=4&bat_cap=%d",location,result_heartbeat,Battery);
 8002388:	4b39      	ldr	r3, [pc, #228]	; (8002470 <_Z4loopv+0x2b0>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	461a      	mov	r2, r3
 800238e:	4b46      	ldr	r3, [pc, #280]	; (80024a8 <_Z4loopv+0x2e8>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	1d38      	adds	r0, r7, #4
 8002394:	9301      	str	r3, [sp, #4]
 8002396:	9200      	str	r2, [sp, #0]
 8002398:	4b3f      	ldr	r3, [pc, #252]	; (8002498 <_Z4loopv+0x2d8>)
 800239a:	4a46      	ldr	r2, [pc, #280]	; (80024b4 <_Z4loopv+0x2f4>)
 800239c:	21c8      	movs	r1, #200	; 0xc8
 800239e:	f005 feb1 	bl	8008104 <sniprintf>
 80023a2:	e00c      	b.n	80023be <_Z4loopv+0x1fe>

					}else
					{
						snprintf(request,200,"token=00001&location=%s&heart_rate=%d&water_state=4&bat_cap=%d",location,result_heartbeat,Battery);
 80023a4:	4b32      	ldr	r3, [pc, #200]	; (8002470 <_Z4loopv+0x2b0>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	461a      	mov	r2, r3
 80023aa:	4b3f      	ldr	r3, [pc, #252]	; (80024a8 <_Z4loopv+0x2e8>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	1d38      	adds	r0, r7, #4
 80023b0:	9301      	str	r3, [sp, #4]
 80023b2:	9200      	str	r2, [sp, #0]
 80023b4:	4b38      	ldr	r3, [pc, #224]	; (8002498 <_Z4loopv+0x2d8>)
 80023b6:	4a3f      	ldr	r2, [pc, #252]	; (80024b4 <_Z4loopv+0x2f4>)
 80023b8:	21c8      	movs	r1, #200	; 0xc8
 80023ba:	f005 fea3 	bl	8008104 <sniprintf>
					}
				}
				int res= AT_SIM7600_HTTP_Get(request,NULL,NULL);
 80023be:	1d3b      	adds	r3, r7, #4
 80023c0:	2200      	movs	r2, #0
 80023c2:	2100      	movs	r1, #0
 80023c4:	4618      	mov	r0, r3
 80023c6:	f000 fbb5 	bl	8002b34 <_Z19AT_SIM7600_HTTP_GetPcS_Pt>
 80023ca:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
				printf("HTTP STATUS CODE: %d\r\n",res);
 80023ce:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80023d2:	4839      	ldr	r0, [pc, #228]	; (80024b8 <_Z4loopv+0x2f8>)
 80023d4:	f005 fdb4 	bl	8007f40 <iprintf>
				if((res== 200) || (http_try ==3)){
 80023d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80023dc:	2bc8      	cmp	r3, #200	; 0xc8
 80023de:	d003      	beq.n	80023e8 <_Z4loopv+0x228>
 80023e0:	4b36      	ldr	r3, [pc, #216]	; (80024bc <_Z4loopv+0x2fc>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2b03      	cmp	r3, #3
 80023e6:	d119      	bne.n	800241c <_Z4loopv+0x25c>
					if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)&& (result_heartbeat >= 100))
 80023e8:	2101      	movs	r1, #1
 80023ea:	482e      	ldr	r0, [pc, #184]	; (80024a4 <_Z4loopv+0x2e4>)
 80023ec:	f002 f95a 	bl	80046a4 <HAL_GPIO_ReadPin>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d005      	beq.n	8002402 <_Z4loopv+0x242>
 80023f6:	4b1e      	ldr	r3, [pc, #120]	; (8002470 <_Z4loopv+0x2b0>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	2b63      	cmp	r3, #99	; 0x63
 80023fc:	d901      	bls.n	8002402 <_Z4loopv+0x242>
 80023fe:	2301      	movs	r3, #1
 8002400:	e000      	b.n	8002404 <_Z4loopv+0x244>
 8002402:	2300      	movs	r3, #0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d003      	beq.n	8002410 <_Z4loopv+0x250>
					{
						simstate = SIM_SEND_SMS;
 8002408:	4b20      	ldr	r3, [pc, #128]	; (800248c <_Z4loopv+0x2cc>)
 800240a:	2203      	movs	r2, #3
 800240c:	701a      	strb	r2, [r3, #0]
 800240e:	e005      	b.n	800241c <_Z4loopv+0x25c>
					}
					else{
						simstate = SIM_DONE;
 8002410:	4b1e      	ldr	r3, [pc, #120]	; (800248c <_Z4loopv+0x2cc>)
 8002412:	2204      	movs	r2, #4
 8002414:	701a      	strb	r2, [r3, #0]
						sleep_enable = 1;
 8002416:	4b2a      	ldr	r3, [pc, #168]	; (80024c0 <_Z4loopv+0x300>)
 8002418:	2201      	movs	r2, #1
 800241a:	701a      	strb	r2, [r3, #0]
					}
				}
				http_try ++;
 800241c:	4b27      	ldr	r3, [pc, #156]	; (80024bc <_Z4loopv+0x2fc>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	3301      	adds	r3, #1
 8002422:	4a26      	ldr	r2, [pc, #152]	; (80024bc <_Z4loopv+0x2fc>)
 8002424:	6013      	str	r3, [r2, #0]
			}
			break;
 8002426:	e011      	b.n	800244c <_Z4loopv+0x28c>
		case SIM_SEND_SMS:
			{

				char request[200];
				sprintf(request,"EMERGENCY MyLocation: %s",location);
 8002428:	1d3b      	adds	r3, r7, #4
 800242a:	4a1b      	ldr	r2, [pc, #108]	; (8002498 <_Z4loopv+0x2d8>)
 800242c:	4925      	ldr	r1, [pc, #148]	; (80024c4 <_Z4loopv+0x304>)
 800242e:	4618      	mov	r0, r3
 8002430:	f005 fe9c 	bl	800816c <siprintf>
				AT_Sms_Send((char *)"+84961548396",request);
 8002434:	1d3b      	adds	r3, r7, #4
 8002436:	4619      	mov	r1, r3
 8002438:	4823      	ldr	r0, [pc, #140]	; (80024c8 <_Z4loopv+0x308>)
 800243a:	f000 fb27 	bl	8002a8c <_Z11AT_Sms_SendPcS_>
				simstate = SIM_READ_GPS;
 800243e:	4b13      	ldr	r3, [pc, #76]	; (800248c <_Z4loopv+0x2cc>)
 8002440:	2201      	movs	r2, #1
 8002442:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002444:	e002      	b.n	800244c <_Z4loopv+0x28c>
		default:
			break;
 8002446:	bf00      	nop
 8002448:	e000      	b.n	800244c <_Z4loopv+0x28c>
			break;
 800244a:	bf00      	nop
	}
	if(HAL_GetTick()>50000 && (result_heartbeat == 0))
 800244c:	f000 ffd4 	bl	80033f8 <HAL_GetTick>
 8002450:	4603      	mov	r3, r0
 8002452:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002456:	4293      	cmp	r3, r2
 8002458:	d938      	bls.n	80024cc <_Z4loopv+0x30c>
 800245a:	4b05      	ldr	r3, [pc, #20]	; (8002470 <_Z4loopv+0x2b0>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d134      	bne.n	80024cc <_Z4loopv+0x30c>
 8002462:	2301      	movs	r3, #1
 8002464:	e033      	b.n	80024ce <_Z4loopv+0x30e>
 8002466:	bf00      	nop
 8002468:	20000408 	.word	0x20000408
 800246c:	08009420 	.word	0x08009420
 8002470:	200002d4 	.word	0x200002d4
 8002474:	08009430 	.word	0x08009430
 8002478:	200002d8 	.word	0x200002d8
 800247c:	2000009c 	.word	0x2000009c
 8002480:	20000410 	.word	0x20000410
 8002484:	2000040c 	.word	0x2000040c
 8002488:	200002c0 	.word	0x200002c0
 800248c:	200003a2 	.word	0x200003a2
 8002490:	08009444 	.word	0x08009444
 8002494:	0800944c 	.word	0x0800944c
 8002498:	200003a4 	.word	0x200003a4
 800249c:	08009454 	.word	0x08009454
 80024a0:	08009468 	.word	0x08009468
 80024a4:	40010800 	.word	0x40010800
 80024a8:	200003a0 	.word	0x200003a0
 80024ac:	0800947c 	.word	0x0800947c
 80024b0:	080094bc 	.word	0x080094bc
 80024b4:	080094fc 	.word	0x080094fc
 80024b8:	0800953c 	.word	0x0800953c
 80024bc:	20000414 	.word	0x20000414
 80024c0:	200003a1 	.word	0x200003a1
 80024c4:	08009554 	.word	0x08009554
 80024c8:	08009570 	.word	0x08009570
 80024cc:	2300      	movs	r3, #0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d002      	beq.n	80024d8 <_Z4loopv+0x318>
	{
		sleep_enable = 1;
 80024d2:	4b04      	ldr	r3, [pc, #16]	; (80024e4 <_Z4loopv+0x324>)
 80024d4:	2201      	movs	r2, #1
 80024d6:	701a      	strb	r2, [r3, #0]
	}
	enter_sleep_mode();
 80024d8:	f7ff fcc2 	bl	8001e60 <_Z16enter_sleep_modev>
}
 80024dc:	bf00      	nop
 80024de:	37d4      	adds	r7, #212	; 0xd4
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd90      	pop	{r4, r7, pc}
 80024e4:	200003a1 	.word	0x200003a1

080024e8 <loopC>:
    }
}
extern "C"
{
    void loopC()
    {
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
    	loop();
 80024ec:	f7ff fe68 	bl	80021c0 <_Z4loopv>
    }
 80024f0:	bf00      	nop
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <_Z41__static_initialization_and_destruction_0ii>:
}
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d10c      	bne.n	800251e <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800250a:	4293      	cmp	r3, r2
 800250c:	d107      	bne.n	800251e <_Z41__static_initialization_and_destruction_0ii+0x2a>
uint32_t timepulseDetected = HAL_GetTick() +5000;
 800250e:	f000 ff73 	bl	80033f8 <HAL_GetTick>
 8002512:	4603      	mov	r3, r0
 8002514:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8002518:	3308      	adds	r3, #8
 800251a:	4a03      	ldr	r2, [pc, #12]	; (8002528 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800251c:	6013      	str	r3, [r2, #0]
}
 800251e:	bf00      	nop
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	20000410 	.word	0x20000410

0800252c <_GLOBAL__sub_I_pulseOxymeter>:
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
 8002530:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002534:	2001      	movs	r0, #1
 8002536:	f7ff ffdd 	bl	80024f4 <_Z41__static_initialization_and_destruction_0ii>
 800253a:	bd80      	pop	{r7, pc}

0800253c <_Z18AT_Getstring_indexPcS_S_i>:

extern UART_HandleTypeDef huart1;
uint8_t uart_rx[512];

int AT_Getstring_index(char *des,char *scr,char *key,int index)
{
 800253c:	b590      	push	{r4, r7, lr}
 800253e:	b08b      	sub	sp, #44	; 0x2c
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
 8002548:	603b      	str	r3, [r7, #0]
   char *p;
   if(!(p = strstr(scr,key))) //tim kiem key
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	68b8      	ldr	r0, [r7, #8]
 800254e:	f005 fe3a 	bl	80081c6 <strstr>
 8002552:	61f8      	str	r0, [r7, #28]
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	2b00      	cmp	r3, #0
 8002558:	bf0c      	ite	eq
 800255a:	2301      	moveq	r3, #1
 800255c:	2300      	movne	r3, #0
 800255e:	b2db      	uxtb	r3, r3
 8002560:	2b00      	cmp	r3, #0
 8002562:	d002      	beq.n	800256a <_Z18AT_Getstring_indexPcS_S_i+0x2e>
      return -1;
 8002564:	f04f 33ff 	mov.w	r3, #4294967295
 8002568:	e092      	b.n	8002690 <_Z18AT_Getstring_indexPcS_S_i+0x154>
   uint16_t len = strlen(p);
 800256a:	69f8      	ldr	r0, [r7, #28]
 800256c:	f7fd fdf0 	bl	8000150 <strlen>
 8002570:	4603      	mov	r3, r0
 8002572:	837b      	strh	r3, [r7, #26]
   char *tmp = (char *)malloc(len);
 8002574:	8b7b      	ldrh	r3, [r7, #26]
 8002576:	4618      	mov	r0, r3
 8002578:	f005 fbe0 	bl	8007d3c <malloc>
 800257c:	4603      	mov	r3, r0
 800257e:	617b      	str	r3, [r7, #20]
   len = sprintf(tmp,",%s",p+2);
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	3302      	adds	r3, #2
 8002584:	461a      	mov	r2, r3
 8002586:	4944      	ldr	r1, [pc, #272]	; (8002698 <_Z18AT_Getstring_indexPcS_S_i+0x15c>)
 8002588:	6978      	ldr	r0, [r7, #20]
 800258a:	f005 fdef 	bl	800816c <siprintf>
 800258e:	4603      	mov	r3, r0
 8002590:	837b      	strh	r3, [r7, #26]
   uint8_t cnt=0;
 8002592:	2300      	movs	r3, #0
 8002594:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   uint16_t i=0;
 8002598:	2300      	movs	r3, #0
 800259a:	84bb      	strh	r3, [r7, #36]	; 0x24
   //printf("%s\n",tmp);
   for(i=0;i<len;i++)
 800259c:	2300      	movs	r3, #0
 800259e:	84bb      	strh	r3, [r7, #36]	; 0x24
 80025a0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80025a2:	8b7b      	ldrh	r3, [r7, #26]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d214      	bcs.n	80025d2 <_Z18AT_Getstring_indexPcS_S_i+0x96>
   {
      if(tmp[i] == ',')
 80025a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80025aa:	697a      	ldr	r2, [r7, #20]
 80025ac:	4413      	add	r3, r2
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	2b2c      	cmp	r3, #44	; 0x2c
 80025b2:	d109      	bne.n	80025c8 <_Z18AT_Getstring_indexPcS_S_i+0x8c>
      {
         if(cnt == index)
 80025b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d008      	beq.n	80025d0 <_Z18AT_Getstring_indexPcS_S_i+0x94>
            break;
         cnt++;
 80025be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025c2:	3301      	adds	r3, #1
 80025c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   for(i=0;i<len;i++)
 80025c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80025ca:	3301      	adds	r3, #1
 80025cc:	84bb      	strh	r3, [r7, #36]	; 0x24
 80025ce:	e7e7      	b.n	80025a0 <_Z18AT_Getstring_indexPcS_S_i+0x64>
            break;
 80025d0:	bf00      	nop
      }
   }
   char *start= (tmp+i+1);
 80025d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80025d4:	3301      	adds	r3, #1
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	4413      	add	r3, r2
 80025da:	613b      	str	r3, [r7, #16]
   if(i != len)
 80025dc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80025de:	8b7b      	ldrh	r3, [r7, #26]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d04d      	beq.n	8002680 <_Z18AT_Getstring_indexPcS_S_i+0x144>
   {
      //printf("find match\n");
      uint8_t tot;
      if(!(p = strstr(start,",")))
 80025e4:	212c      	movs	r1, #44	; 0x2c
 80025e6:	6938      	ldr	r0, [r7, #16]
 80025e8:	f005 fde0 	bl	80081ac <strchr>
 80025ec:	61f8      	str	r0, [r7, #28]
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	bf0c      	ite	eq
 80025f4:	2301      	moveq	r3, #1
 80025f6:	2300      	movne	r3, #0
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d021      	beq.n	8002642 <_Z18AT_Getstring_indexPcS_S_i+0x106>
      {
         if(!(p = strstr(start,"\r")))
 80025fe:	210d      	movs	r1, #13
 8002600:	6938      	ldr	r0, [r7, #16]
 8002602:	f005 fdd3 	bl	80081ac <strchr>
 8002606:	61f8      	str	r0, [r7, #28]
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	2b00      	cmp	r3, #0
 800260c:	bf0c      	ite	eq
 800260e:	2301      	moveq	r3, #1
 8002610:	2300      	movne	r3, #0
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b00      	cmp	r3, #0
 8002616:	d006      	beq.n	8002626 <_Z18AT_Getstring_indexPcS_S_i+0xea>
         {
            tot = strlen(start);
 8002618:	6938      	ldr	r0, [r7, #16]
 800261a:	f7fd fd99 	bl	8000150 <strlen>
 800261e:	4603      	mov	r3, r0
 8002620:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002624:	e01a      	b.n	800265c <_Z18AT_Getstring_indexPcS_S_i+0x120>
         }
         else tot = strlen(start)-strlen(p);
 8002626:	6938      	ldr	r0, [r7, #16]
 8002628:	f7fd fd92 	bl	8000150 <strlen>
 800262c:	4603      	mov	r3, r0
 800262e:	b2dc      	uxtb	r4, r3
 8002630:	69f8      	ldr	r0, [r7, #28]
 8002632:	f7fd fd8d 	bl	8000150 <strlen>
 8002636:	4603      	mov	r3, r0
 8002638:	b2db      	uxtb	r3, r3
 800263a:	1ae3      	subs	r3, r4, r3
 800263c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002640:	e00c      	b.n	800265c <_Z18AT_Getstring_indexPcS_S_i+0x120>
      }
      else
        tot = strlen(start)-strlen(p);
 8002642:	6938      	ldr	r0, [r7, #16]
 8002644:	f7fd fd84 	bl	8000150 <strlen>
 8002648:	4603      	mov	r3, r0
 800264a:	b2dc      	uxtb	r4, r3
 800264c:	69f8      	ldr	r0, [r7, #28]
 800264e:	f7fd fd7f 	bl	8000150 <strlen>
 8002652:	4603      	mov	r3, r0
 8002654:	b2db      	uxtb	r3, r3
 8002656:	1ae3      	subs	r3, r4, r3
 8002658:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      memcpy(des,start,tot);
 800265c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002660:	461a      	mov	r2, r3
 8002662:	6939      	ldr	r1, [r7, #16]
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f005 fb79 	bl	8007d5c <memcpy>
      des[tot]=0;
 800266a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	4413      	add	r3, r2
 8002672:	2200      	movs	r2, #0
 8002674:	701a      	strb	r2, [r3, #0]
      free(tmp);
 8002676:	6978      	ldr	r0, [r7, #20]
 8002678:	f005 fb68 	bl	8007d4c <free>
      return 1;
 800267c:	2301      	movs	r3, #1
 800267e:	e007      	b.n	8002690 <_Z18AT_Getstring_indexPcS_S_i+0x154>
   }
   free(tmp);
 8002680:	6978      	ldr	r0, [r7, #20]
 8002682:	f005 fb63 	bl	8007d4c <free>
   printf("not find index\n" );
 8002686:	4805      	ldr	r0, [pc, #20]	; (800269c <_Z18AT_Getstring_indexPcS_S_i+0x160>)
 8002688:	f005 fce0 	bl	800804c <puts>
   return -3;
 800268c:	f06f 0302 	mvn.w	r3, #2
}
 8002690:	4618      	mov	r0, r3
 8002692:	372c      	adds	r7, #44	; 0x2c
 8002694:	46bd      	mov	sp, r7
 8002696:	bd90      	pop	{r4, r7, pc}
 8002698:	08009580 	.word	0x08009580
 800269c:	08009584 	.word	0x08009584

080026a0 <_Z15AT_Getint_indexPiPcS0_i>:
int AT_Getint_index(int *res,char *src,char *key,int index)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b08a      	sub	sp, #40	; 0x28
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
 80026ac:	603b      	str	r3, [r7, #0]
   char des[20];
   if(AT_Getstring_index(des,src,key,index)<0)
 80026ae:	f107 0014 	add.w	r0, r7, #20
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	68b9      	ldr	r1, [r7, #8]
 80026b8:	f7ff ff40 	bl	800253c <_Z18AT_Getstring_indexPcS_S_i>
 80026bc:	4603      	mov	r3, r0
 80026be:	0fdb      	lsrs	r3, r3, #31
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d002      	beq.n	80026cc <_Z15AT_Getint_indexPiPcS0_i+0x2c>
   {
      return-1;
 80026c6:	f04f 33ff 	mov.w	r3, #4294967295
 80026ca:	e009      	b.n	80026e0 <_Z15AT_Getint_indexPiPcS0_i+0x40>
   }
   *res = atoi(des);
 80026cc:	f107 0314 	add.w	r3, r7, #20
 80026d0:	4618      	mov	r0, r3
 80026d2:	f005 fb04 	bl	8007cde <atoi>
 80026d6:	4602      	mov	r2, r0
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	601a      	str	r2, [r3, #0]
   return *res;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3728      	adds	r7, #40	; 0x28
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <_Z16SIM7600_TURN_OFFv>:
	HAL_Delay(500);
	HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_SET);
}

void SIM7600_TURN_OFF()
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
	printf("turn off module sim\r\n");
 80026ec:	480a      	ldr	r0, [pc, #40]	; (8002718 <_Z16SIM7600_TURN_OFFv+0x30>)
 80026ee:	f005 fcad 	bl	800804c <puts>
	HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_RESET);
 80026f2:	2200      	movs	r2, #0
 80026f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026f8:	4808      	ldr	r0, [pc, #32]	; (800271c <_Z16SIM7600_TURN_OFFv+0x34>)
 80026fa:	f001 ffea 	bl	80046d2 <HAL_GPIO_WritePin>
	HAL_Delay(4000);
 80026fe:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8002702:	f000 fe83 	bl	800340c <HAL_Delay>
	HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_SET);
 8002706:	2201      	movs	r2, #1
 8002708:	f44f 7180 	mov.w	r1, #256	; 0x100
 800270c:	4803      	ldr	r0, [pc, #12]	; (800271c <_Z16SIM7600_TURN_OFFv+0x34>)
 800270e:	f001 ffe0 	bl	80046d2 <HAL_GPIO_WritePin>
}
 8002712:	bf00      	nop
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	080095a8 	.word	0x080095a8
 800271c:	40010800 	.word	0x40010800

08002720 <_Z19At_Command_responsePcS_S_Pim>:
int At_Command_response(char *cmd ,char *RSP1,char* rsp,int *len,uint32_t timeout)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b088      	sub	sp, #32
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
 800272c:	603b      	str	r3, [r7, #0]
	int res =-1;
 800272e:	f04f 33ff 	mov.w	r3, #4294967295
 8002732:	61fb      	str	r3, [r7, #28]
	printf("TX: %s\n",cmd);
 8002734:	68f9      	ldr	r1, [r7, #12]
 8002736:	4845      	ldr	r0, [pc, #276]	; (800284c <_Z19At_Command_responsePcS_S_Pim+0x12c>)
 8002738:	f005 fc02 	bl	8007f40 <iprintf>
	memset(uart_rx,0,512);
 800273c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002740:	2100      	movs	r1, #0
 8002742:	4843      	ldr	r0, [pc, #268]	; (8002850 <_Z19At_Command_responsePcS_S_Pim+0x130>)
 8002744:	f005 fb18 	bl	8007d78 <memset>
	HAL_UART_Transmit(&huart1, (uint8_t *)cmd,strlen(cmd), 1000);
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f7fd fd01 	bl	8000150 <strlen>
 800274e:	4603      	mov	r3, r0
 8002750:	b29a      	uxth	r2, r3
 8002752:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002756:	68f9      	ldr	r1, [r7, #12]
 8002758:	483e      	ldr	r0, [pc, #248]	; (8002854 <_Z19At_Command_responsePcS_S_Pim+0x134>)
 800275a:	f004 fa96 	bl	8006c8a <HAL_UART_Transmit>
	uart_rx[0] = huart1.Instance->DR; // free rx buffer
 800275e:	4b3d      	ldr	r3, [pc, #244]	; (8002854 <_Z19At_Command_responsePcS_S_Pim+0x134>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	b2da      	uxtb	r2, r3
 8002766:	4b3a      	ldr	r3, [pc, #232]	; (8002850 <_Z19At_Command_responsePcS_S_Pim+0x130>)
 8002768:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart1, uart_rx, 512);
 800276a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800276e:	4938      	ldr	r1, [pc, #224]	; (8002850 <_Z19At_Command_responsePcS_S_Pim+0x130>)
 8002770:	4838      	ldr	r0, [pc, #224]	; (8002854 <_Z19At_Command_responsePcS_S_Pim+0x134>)
 8002772:	f004 fb1c 	bl	8006dae <HAL_UART_Receive_DMA>
	timeout += HAL_GetTick();
 8002776:	f000 fe3f 	bl	80033f8 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800277e:	4413      	add	r3, r2
 8002780:	62bb      	str	r3, [r7, #40]	; 0x28
	while(HAL_GetTick() < timeout)
 8002782:	f000 fe39 	bl	80033f8 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800278a:	4293      	cmp	r3, r2
 800278c:	bf8c      	ite	hi
 800278e:	2301      	movhi	r3, #1
 8002790:	2300      	movls	r3, #0
 8002792:	b2db      	uxtb	r3, r3
 8002794:	2b00      	cmp	r3, #0
 8002796:	d008      	beq.n	80027aa <_Z19At_Command_responsePcS_S_Pim+0x8a>
	{
		if(strstr((char *)uart_rx,RSP1))
 8002798:	68b9      	ldr	r1, [r7, #8]
 800279a:	482d      	ldr	r0, [pc, #180]	; (8002850 <_Z19At_Command_responsePcS_S_Pim+0x130>)
 800279c:	f005 fd13 	bl	80081c6 <strstr>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0ed      	beq.n	8002782 <_Z19At_Command_responsePcS_S_Pim+0x62>
		{
			res = 1;
 80027a6:	2301      	movs	r3, #1
 80027a8:	61fb      	str	r3, [r7, #28]
			break;
		}
	}
	uint32_t tt = HAL_GetTick() +3;
 80027aa:	f000 fe25 	bl	80033f8 <HAL_GetTick>
 80027ae:	4603      	mov	r3, r0
 80027b0:	3303      	adds	r3, #3
 80027b2:	61bb      	str	r3, [r7, #24]
	uint32_t old_cnt = huart1.hdmarx->Instance->CNDTR;
 80027b4:	4b27      	ldr	r3, [pc, #156]	; (8002854 <_Z19At_Command_responsePcS_S_Pim+0x134>)
 80027b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	617b      	str	r3, [r7, #20]
	while(HAL_GetTick() < tt)
 80027be:	f000 fe1b 	bl	80033f8 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	4293      	cmp	r3, r2
 80027c8:	bf8c      	ite	hi
 80027ca:	2301      	movhi	r3, #1
 80027cc:	2300      	movls	r3, #0
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d016      	beq.n	8002802 <_Z19At_Command_responsePcS_S_Pim+0xe2>
	{
		if(old_cnt != huart1.hdmarx->Instance->CNDTR)
 80027d4:	4b1f      	ldr	r3, [pc, #124]	; (8002854 <_Z19At_Command_responsePcS_S_Pim+0x134>)
 80027d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	429a      	cmp	r2, r3
 80027e0:	bf14      	ite	ne
 80027e2:	2301      	movne	r3, #1
 80027e4:	2300      	moveq	r3, #0
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d0e8      	beq.n	80027be <_Z19At_Command_responsePcS_S_Pim+0x9e>
		{
			old_cnt = huart1.hdmarx->Instance->CNDTR;
 80027ec:	4b19      	ldr	r3, [pc, #100]	; (8002854 <_Z19At_Command_responsePcS_S_Pim+0x134>)
 80027ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	617b      	str	r3, [r7, #20]
			tt = HAL_GetTick()+3;
 80027f6:	f000 fdff 	bl	80033f8 <HAL_GetTick>
 80027fa:	4603      	mov	r3, r0
 80027fc:	3303      	adds	r3, #3
 80027fe:	61bb      	str	r3, [r7, #24]
	while(HAL_GetTick() < tt)
 8002800:	e7dd      	b.n	80027be <_Z19At_Command_responsePcS_S_Pim+0x9e>
		}
	}
	*len = 512 - huart1.hdmarx->Instance->CNDTR;
 8002802:	4b14      	ldr	r3, [pc, #80]	; (8002854 <_Z19At_Command_responsePcS_S_Pim+0x134>)
 8002804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800280e:	461a      	mov	r2, r3
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	601a      	str	r2, [r3, #0]
	memcpy(rsp,uart_rx,*len);
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	461a      	mov	r2, r3
 800281a:	490d      	ldr	r1, [pc, #52]	; (8002850 <_Z19At_Command_responsePcS_S_Pim+0x130>)
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f005 fa9d 	bl	8007d5c <memcpy>
	HAL_UART_DMAStop(&huart1);
 8002822:	480c      	ldr	r0, [pc, #48]	; (8002854 <_Z19At_Command_responsePcS_S_Pim+0x134>)
 8002824:	f004 faf3 	bl	8006e0e <HAL_UART_DMAStop>
	if(res == 1){
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d104      	bne.n	8002838 <_Z19At_Command_responsePcS_S_Pim+0x118>
		printf("RX=> %s=>OK\n",(char *)uart_rx);
 800282e:	4908      	ldr	r1, [pc, #32]	; (8002850 <_Z19At_Command_responsePcS_S_Pim+0x130>)
 8002830:	4809      	ldr	r0, [pc, #36]	; (8002858 <_Z19At_Command_responsePcS_S_Pim+0x138>)
 8002832:	f005 fb85 	bl	8007f40 <iprintf>
 8002836:	e003      	b.n	8002840 <_Z19At_Command_responsePcS_S_Pim+0x120>
	}
	else{
		printf("RX=> %s=>FAIL\n",(char *)uart_rx);
 8002838:	4905      	ldr	r1, [pc, #20]	; (8002850 <_Z19At_Command_responsePcS_S_Pim+0x130>)
 800283a:	4808      	ldr	r0, [pc, #32]	; (800285c <_Z19At_Command_responsePcS_S_Pim+0x13c>)
 800283c:	f005 fb80 	bl	8007f40 <iprintf>
	}
	return res;
 8002840:	69fb      	ldr	r3, [r7, #28]
}
 8002842:	4618      	mov	r0, r3
 8002844:	3720      	adds	r7, #32
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	080095c0 	.word	0x080095c0
 8002850:	20000418 	.word	0x20000418
 8002854:	200001f4 	.word	0x200001f4
 8002858:	080095c8 	.word	0x080095c8
 800285c:	080095d8 	.word	0x080095d8

08002860 <_Z10At_CommandPcS_m>:
int At_Command(char *cmd ,char *RSP1,uint32_t timeout)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b088      	sub	sp, #32
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
	int res =-1;
 800286c:	f04f 33ff 	mov.w	r3, #4294967295
 8002870:	61fb      	str	r3, [r7, #28]
	printf("TX: %s\n",cmd);
 8002872:	68f9      	ldr	r1, [r7, #12]
 8002874:	4841      	ldr	r0, [pc, #260]	; (800297c <_Z10At_CommandPcS_m+0x11c>)
 8002876:	f005 fb63 	bl	8007f40 <iprintf>
	memset(uart_rx,0,512);
 800287a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800287e:	2100      	movs	r1, #0
 8002880:	483f      	ldr	r0, [pc, #252]	; (8002980 <_Z10At_CommandPcS_m+0x120>)
 8002882:	f005 fa79 	bl	8007d78 <memset>
	HAL_UART_Transmit(&huart1, (uint8_t *)cmd,strlen(cmd), 1000);
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f7fd fc62 	bl	8000150 <strlen>
 800288c:	4603      	mov	r3, r0
 800288e:	b29a      	uxth	r2, r3
 8002890:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002894:	68f9      	ldr	r1, [r7, #12]
 8002896:	483b      	ldr	r0, [pc, #236]	; (8002984 <_Z10At_CommandPcS_m+0x124>)
 8002898:	f004 f9f7 	bl	8006c8a <HAL_UART_Transmit>
	uart_rx[0] = huart1.Instance->DR; // free rx buffer
 800289c:	4b39      	ldr	r3, [pc, #228]	; (8002984 <_Z10At_CommandPcS_m+0x124>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	b2da      	uxtb	r2, r3
 80028a4:	4b36      	ldr	r3, [pc, #216]	; (8002980 <_Z10At_CommandPcS_m+0x120>)
 80028a6:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart1, uart_rx, 512);
 80028a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028ac:	4934      	ldr	r1, [pc, #208]	; (8002980 <_Z10At_CommandPcS_m+0x120>)
 80028ae:	4835      	ldr	r0, [pc, #212]	; (8002984 <_Z10At_CommandPcS_m+0x124>)
 80028b0:	f004 fa7d 	bl	8006dae <HAL_UART_Receive_DMA>
	timeout += HAL_GetTick();
 80028b4:	f000 fda0 	bl	80033f8 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4413      	add	r3, r2
 80028be:	607b      	str	r3, [r7, #4]
	while(HAL_GetTick() < timeout)
 80028c0:	f000 fd9a 	bl	80033f8 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4293      	cmp	r3, r2
 80028ca:	bf8c      	ite	hi
 80028cc:	2301      	movhi	r3, #1
 80028ce:	2300      	movls	r3, #0
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d012      	beq.n	80028fc <_Z10At_CommandPcS_m+0x9c>
	{
		if(strstr((char *)uart_rx,RSP1))
 80028d6:	68b9      	ldr	r1, [r7, #8]
 80028d8:	4829      	ldr	r0, [pc, #164]	; (8002980 <_Z10At_CommandPcS_m+0x120>)
 80028da:	f005 fc74 	bl	80081c6 <strstr>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d002      	beq.n	80028ea <_Z10At_CommandPcS_m+0x8a>
		{
			res = 1;
 80028e4:	2301      	movs	r3, #1
 80028e6:	61fb      	str	r3, [r7, #28]
			break;
 80028e8:	e008      	b.n	80028fc <_Z10At_CommandPcS_m+0x9c>
		}
		else if(strstr((char *)uart_rx,"ERROR\r\n"))
 80028ea:	4927      	ldr	r1, [pc, #156]	; (8002988 <_Z10At_CommandPcS_m+0x128>)
 80028ec:	4824      	ldr	r0, [pc, #144]	; (8002980 <_Z10At_CommandPcS_m+0x120>)
 80028ee:	f005 fc6a 	bl	80081c6 <strstr>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d100      	bne.n	80028fa <_Z10At_CommandPcS_m+0x9a>
	while(HAL_GetTick() < timeout)
 80028f8:	e7e2      	b.n	80028c0 <_Z10At_CommandPcS_m+0x60>
		{
			break;
 80028fa:	bf00      	nop
		}
	}
	uint32_t tt = HAL_GetTick() +3;
 80028fc:	f000 fd7c 	bl	80033f8 <HAL_GetTick>
 8002900:	4603      	mov	r3, r0
 8002902:	3303      	adds	r3, #3
 8002904:	61bb      	str	r3, [r7, #24]
	uint32_t old_cnt = huart1.hdmarx->Instance->CNDTR;
 8002906:	4b1f      	ldr	r3, [pc, #124]	; (8002984 <_Z10At_CommandPcS_m+0x124>)
 8002908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	617b      	str	r3, [r7, #20]
	while(HAL_GetTick() < tt)
 8002910:	f000 fd72 	bl	80033f8 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	4293      	cmp	r3, r2
 800291a:	bf8c      	ite	hi
 800291c:	2301      	movhi	r3, #1
 800291e:	2300      	movls	r3, #0
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d016      	beq.n	8002954 <_Z10At_CommandPcS_m+0xf4>
	{
		if(old_cnt != huart1.hdmarx->Instance->CNDTR)
 8002926:	4b17      	ldr	r3, [pc, #92]	; (8002984 <_Z10At_CommandPcS_m+0x124>)
 8002928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	429a      	cmp	r2, r3
 8002932:	bf14      	ite	ne
 8002934:	2301      	movne	r3, #1
 8002936:	2300      	moveq	r3, #0
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0e8      	beq.n	8002910 <_Z10At_CommandPcS_m+0xb0>
		{
			old_cnt = huart1.hdmarx->Instance->CNDTR;
 800293e:	4b11      	ldr	r3, [pc, #68]	; (8002984 <_Z10At_CommandPcS_m+0x124>)
 8002940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	617b      	str	r3, [r7, #20]
			tt = HAL_GetTick()+3;
 8002948:	f000 fd56 	bl	80033f8 <HAL_GetTick>
 800294c:	4603      	mov	r3, r0
 800294e:	3303      	adds	r3, #3
 8002950:	61bb      	str	r3, [r7, #24]
	while(HAL_GetTick() < tt)
 8002952:	e7dd      	b.n	8002910 <_Z10At_CommandPcS_m+0xb0>
		}
	}
	HAL_UART_DMAStop(&huart1);
 8002954:	480b      	ldr	r0, [pc, #44]	; (8002984 <_Z10At_CommandPcS_m+0x124>)
 8002956:	f004 fa5a 	bl	8006e0e <HAL_UART_DMAStop>
	if(res == 1){
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d104      	bne.n	800296a <_Z10At_CommandPcS_m+0x10a>
		printf("RX=> %s=>OK\n",(char *)uart_rx);
 8002960:	4907      	ldr	r1, [pc, #28]	; (8002980 <_Z10At_CommandPcS_m+0x120>)
 8002962:	480a      	ldr	r0, [pc, #40]	; (800298c <_Z10At_CommandPcS_m+0x12c>)
 8002964:	f005 faec 	bl	8007f40 <iprintf>
 8002968:	e003      	b.n	8002972 <_Z10At_CommandPcS_m+0x112>
	}
	else{
		printf("RX=> %s=>FAIL\n",(char *)uart_rx);
 800296a:	4905      	ldr	r1, [pc, #20]	; (8002980 <_Z10At_CommandPcS_m+0x120>)
 800296c:	4808      	ldr	r0, [pc, #32]	; (8002990 <_Z10At_CommandPcS_m+0x130>)
 800296e:	f005 fae7 	bl	8007f40 <iprintf>
	}
	return res;
 8002972:	69fb      	ldr	r3, [r7, #28]
}
 8002974:	4618      	mov	r0, r3
 8002976:	3720      	adds	r7, #32
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	080095c0 	.word	0x080095c0
 8002980:	20000418 	.word	0x20000418
 8002984:	200001f4 	.word	0x200001f4
 8002988:	080095e8 	.word	0x080095e8
 800298c:	080095c8 	.word	0x080095c8
 8002990:	080095d8 	.word	0x080095d8

08002994 <_Z12Sim7600_initv>:

void Sim7600_init()
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
	for(uint8_t i=0;i<10;i++)
 800299a:	2300      	movs	r3, #0
 800299c:	71fb      	strb	r3, [r7, #7]
 800299e:	79fb      	ldrb	r3, [r7, #7]
 80029a0:	2b09      	cmp	r3, #9
 80029a2:	d815      	bhi.n	80029d0 <_Z12Sim7600_initv+0x3c>
	{
	  if(At_Command((char *)"ATE0\r\n",(char *)"OK\r\n",5000)>0)
 80029a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a8:	492e      	ldr	r1, [pc, #184]	; (8002a64 <_Z12Sim7600_initv+0xd0>)
 80029aa:	482f      	ldr	r0, [pc, #188]	; (8002a68 <_Z12Sim7600_initv+0xd4>)
 80029ac:	f7ff ff58 	bl	8002860 <_Z10At_CommandPcS_m>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	bfcc      	ite	gt
 80029b6:	2301      	movgt	r3, #1
 80029b8:	2300      	movle	r3, #0
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d106      	bne.n	80029ce <_Z12Sim7600_initv+0x3a>
		break;
	  HAL_Delay(20);
 80029c0:	2014      	movs	r0, #20
 80029c2:	f000 fd23 	bl	800340c <HAL_Delay>
	for(uint8_t i=0;i<10;i++)
 80029c6:	79fb      	ldrb	r3, [r7, #7]
 80029c8:	3301      	adds	r3, #1
 80029ca:	71fb      	strb	r3, [r7, #7]
 80029cc:	e7e7      	b.n	800299e <_Z12Sim7600_initv+0xa>
		break;
 80029ce:	bf00      	nop
	}
	for(uint8_t i=0;i<10;i++)
 80029d0:	2300      	movs	r3, #0
 80029d2:	71bb      	strb	r3, [r7, #6]
 80029d4:	79bb      	ldrb	r3, [r7, #6]
 80029d6:	2b09      	cmp	r3, #9
 80029d8:	d815      	bhi.n	8002a06 <_Z12Sim7600_initv+0x72>
	{
	  if(At_Command((char *)"AT+CSCS=\"GSM\"\r\n", (char *)"OK\r\n", 5000)>0)
 80029da:	f241 3288 	movw	r2, #5000	; 0x1388
 80029de:	4921      	ldr	r1, [pc, #132]	; (8002a64 <_Z12Sim7600_initv+0xd0>)
 80029e0:	4822      	ldr	r0, [pc, #136]	; (8002a6c <_Z12Sim7600_initv+0xd8>)
 80029e2:	f7ff ff3d 	bl	8002860 <_Z10At_CommandPcS_m>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	bfcc      	ite	gt
 80029ec:	2301      	movgt	r3, #1
 80029ee:	2300      	movle	r3, #0
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d106      	bne.n	8002a04 <_Z12Sim7600_initv+0x70>
		break;
	  HAL_Delay(20);
 80029f6:	2014      	movs	r0, #20
 80029f8:	f000 fd08 	bl	800340c <HAL_Delay>
	for(uint8_t i=0;i<10;i++)
 80029fc:	79bb      	ldrb	r3, [r7, #6]
 80029fe:	3301      	adds	r3, #1
 8002a00:	71bb      	strb	r3, [r7, #6]
 8002a02:	e7e7      	b.n	80029d4 <_Z12Sim7600_initv+0x40>
		break;
 8002a04:	bf00      	nop
	}
	At_Command((char *)"AT+CGSOCKCONT=1,\"IP\",\"CMNET\"\r\n", (char *)"OK\r\n",1000);
 8002a06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a0a:	4916      	ldr	r1, [pc, #88]	; (8002a64 <_Z12Sim7600_initv+0xd0>)
 8002a0c:	4818      	ldr	r0, [pc, #96]	; (8002a70 <_Z12Sim7600_initv+0xdc>)
 8002a0e:	f7ff ff27 	bl	8002860 <_Z10At_CommandPcS_m>
//	At_Command((char *)"AT+CGPSURL=\"111.222.333.444:8888\"\r\n", (char *)"OK\r\n",1000);
//	At_Command((char *)"AT+CGPSSSL=0\r\n", (char *)"OK\r\n",1000);
	At_Command((char *)"AT+CGPS=1\r\n", (char *)"OK\r\n",1000);
 8002a12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a16:	4913      	ldr	r1, [pc, #76]	; (8002a64 <_Z12Sim7600_initv+0xd0>)
 8002a18:	4816      	ldr	r0, [pc, #88]	; (8002a74 <_Z12Sim7600_initv+0xe0>)
 8002a1a:	f7ff ff21 	bl	8002860 <_Z10At_CommandPcS_m>



	At_Command((char *)"AT+CMGF=1\r\n", (char *)"OK\r\n",1000);
 8002a1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a22:	4910      	ldr	r1, [pc, #64]	; (8002a64 <_Z12Sim7600_initv+0xd0>)
 8002a24:	4814      	ldr	r0, [pc, #80]	; (8002a78 <_Z12Sim7600_initv+0xe4>)
 8002a26:	f7ff ff1b 	bl	8002860 <_Z10At_CommandPcS_m>
	At_Command((char *)"AT+CREG?\r\n", (char *)"OK\r\n",1000);
 8002a2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a2e:	490d      	ldr	r1, [pc, #52]	; (8002a64 <_Z12Sim7600_initv+0xd0>)
 8002a30:	4812      	ldr	r0, [pc, #72]	; (8002a7c <_Z12Sim7600_initv+0xe8>)
 8002a32:	f7ff ff15 	bl	8002860 <_Z10At_CommandPcS_m>
	At_Command((char *)"AT+CSQ\r\n", (char *)"OK\r\n",1000);
 8002a36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a3a:	490a      	ldr	r1, [pc, #40]	; (8002a64 <_Z12Sim7600_initv+0xd0>)
 8002a3c:	4810      	ldr	r0, [pc, #64]	; (8002a80 <_Z12Sim7600_initv+0xec>)
 8002a3e:	f7ff ff0f 	bl	8002860 <_Z10At_CommandPcS_m>
	At_Command((char *)"AT+CGREG?\r\n", (char *)"OK\r\n",1000);
 8002a42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a46:	4907      	ldr	r1, [pc, #28]	; (8002a64 <_Z12Sim7600_initv+0xd0>)
 8002a48:	480e      	ldr	r0, [pc, #56]	; (8002a84 <_Z12Sim7600_initv+0xf0>)
 8002a4a:	f7ff ff09 	bl	8002860 <_Z10At_CommandPcS_m>

	At_Command((char *)"AT+CGPADDR\r\n", (char *)"OK\r\n",1000);
 8002a4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a52:	4904      	ldr	r1, [pc, #16]	; (8002a64 <_Z12Sim7600_initv+0xd0>)
 8002a54:	480c      	ldr	r0, [pc, #48]	; (8002a88 <_Z12Sim7600_initv+0xf4>)
 8002a56:	f7ff ff03 	bl	8002860 <_Z10At_CommandPcS_m>
}
 8002a5a:	bf00      	nop
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	080095f0 	.word	0x080095f0
 8002a68:	080095f8 	.word	0x080095f8
 8002a6c:	08009600 	.word	0x08009600
 8002a70:	08009610 	.word	0x08009610
 8002a74:	08009630 	.word	0x08009630
 8002a78:	0800963c 	.word	0x0800963c
 8002a7c:	08009648 	.word	0x08009648
 8002a80:	08009654 	.word	0x08009654
 8002a84:	08009660 	.word	0x08009660
 8002a88:	0800966c 	.word	0x0800966c

08002a8c <_Z11AT_Sms_SendPcS_>:
int AT_Sms_Send(char* input_number,char* msg)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b0c2      	sub	sp, #264	; 0x108
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002a96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002a9a:	6018      	str	r0, [r3, #0]
 8002a9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002aa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002aa4:	6019      	str	r1, [r3, #0]
  char aux_string[256] = {0};
 8002aa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002aaa:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002aae:	2200      	movs	r2, #0
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	3304      	adds	r3, #4
 8002ab4:	22fc      	movs	r2, #252	; 0xfc
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f005 f95d 	bl	8007d78 <memset>
  sprintf(aux_string,"AT+CMGS=\"%s\"\r\n", input_number);
 8002abe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002ac2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002ac6:	f107 0008 	add.w	r0, r7, #8
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	4913      	ldr	r1, [pc, #76]	; (8002b1c <_Z11AT_Sms_SendPcS_+0x90>)
 8002ace:	f005 fb4d 	bl	800816c <siprintf>
  At_Command(aux_string,(char *)">",5000);     // Send the SMS number
 8002ad2:	f107 0308 	add.w	r3, r7, #8
 8002ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ada:	4911      	ldr	r1, [pc, #68]	; (8002b20 <_Z11AT_Sms_SendPcS_+0x94>)
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff febf 	bl	8002860 <_Z10At_CommandPcS_m>
  sprintf(aux_string,"%s%c",msg,26);
 8002ae2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002ae6:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8002aea:	f107 0008 	add.w	r0, r7, #8
 8002aee:	231a      	movs	r3, #26
 8002af0:	6812      	ldr	r2, [r2, #0]
 8002af2:	490c      	ldr	r1, [pc, #48]	; (8002b24 <_Z11AT_Sms_SendPcS_+0x98>)
 8002af4:	f005 fb3a 	bl	800816c <siprintf>
  printf("send content\n");
 8002af8:	480b      	ldr	r0, [pc, #44]	; (8002b28 <_Z11AT_Sms_SendPcS_+0x9c>)
 8002afa:	f005 faa7 	bl	800804c <puts>
  return  At_Command(aux_string,(char *)"OK\r\n",180000);     // Send the SMS number
 8002afe:	f107 0308 	add.w	r3, r7, #8
 8002b02:	4a0a      	ldr	r2, [pc, #40]	; (8002b2c <_Z11AT_Sms_SendPcS_+0xa0>)
 8002b04:	490a      	ldr	r1, [pc, #40]	; (8002b30 <_Z11AT_Sms_SendPcS_+0xa4>)
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7ff feaa 	bl	8002860 <_Z10At_CommandPcS_m>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	bf00      	nop
  return -1;
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	0800967c 	.word	0x0800967c
 8002b20:	0800968c 	.word	0x0800968c
 8002b24:	08009690 	.word	0x08009690
 8002b28:	08009698 	.word	0x08009698
 8002b2c:	0002bf20 	.word	0x0002bf20
 8002b30:	080095f0 	.word	0x080095f0

08002b34 <_Z19AT_SIM7600_HTTP_GetPcS_Pt>:

int AT_SIM7600_HTTP_Get(char * request_url,char *rsp,uint16_t *sizess)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 8002b3a:	af02      	add	r7, sp, #8
 8002b3c:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8002b40:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8002b44:	6018      	str	r0, [r3, #0]
 8002b46:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8002b4a:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8002b4e:	6019      	str	r1, [r3, #0]
 8002b50:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8002b54:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8002b58:	601a      	str	r2, [r3, #0]
	char buf[1024];
	int buflen;
//	char *para;
	int Status_Code = 0;
 8002b5a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8002b5e:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8002b62:	2200      	movs	r2, #0
 8002b64:	601a      	str	r2, [r3, #0]


	At_Command((char *)"AT+HTTPINIT\r\n",(char *)"OK\r\n",10000);
 8002b66:	f242 7210 	movw	r2, #10000	; 0x2710
 8002b6a:	493e      	ldr	r1, [pc, #248]	; (8002c64 <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x130>)
 8002b6c:	483e      	ldr	r0, [pc, #248]	; (8002c68 <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x134>)
 8002b6e:	f7ff fe77 	bl	8002860 <_Z10At_CommandPcS_m>
	sprintf(buf,"AT+HTTPDATA=%d,1000\r\n",strlen(request_url));
 8002b72:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8002b76:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8002b7a:	6818      	ldr	r0, [r3, #0]
 8002b7c:	f7fd fae8 	bl	8000150 <strlen>
 8002b80:	4602      	mov	r2, r0
 8002b82:	f107 0318 	add.w	r3, r7, #24
 8002b86:	4939      	ldr	r1, [pc, #228]	; (8002c6c <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x138>)
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f005 faef 	bl	800816c <siprintf>
	if(At_Command(buf,(char *)"DOWNLOAD",3000)!=1)
 8002b8e:	f107 0318 	add.w	r3, r7, #24
 8002b92:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002b96:	4936      	ldr	r1, [pc, #216]	; (8002c70 <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x13c>)
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff fe61 	bl	8002860 <_Z10At_CommandPcS_m>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	bf14      	ite	ne
 8002ba4:	2301      	movne	r3, #1
 8002ba6:	2300      	moveq	r3, #0
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00b      	beq.n	8002bc6 <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x92>
	{
		At_Command((char *)"AT+HTTPTERM\r\n",(char *)"OK\r\n",10000);
 8002bae:	f242 7210 	movw	r2, #10000	; 0x2710
 8002bb2:	492c      	ldr	r1, [pc, #176]	; (8002c64 <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x130>)
 8002bb4:	482f      	ldr	r0, [pc, #188]	; (8002c74 <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x140>)
 8002bb6:	f7ff fe53 	bl	8002860 <_Z10At_CommandPcS_m>
		return Status_Code;
 8002bba:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8002bbe:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	e049      	b.n	8002c5a <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x126>
	}
	At_Command(request_url,(char *)"OK\r\n",10000);
 8002bc6:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8002bca:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8002bce:	f242 7210 	movw	r2, #10000	; 0x2710
 8002bd2:	4924      	ldr	r1, [pc, #144]	; (8002c64 <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x130>)
 8002bd4:	6818      	ldr	r0, [r3, #0]
 8002bd6:	f7ff fe43 	bl	8002860 <_Z10At_CommandPcS_m>
	At_Command((char *)"AT+HTTPPARA=\"CONTENT\",\"application/x-www-form-urlencoded\"\r\n",(char *)"OK\r\n",10000);
 8002bda:	f242 7210 	movw	r2, #10000	; 0x2710
 8002bde:	4921      	ldr	r1, [pc, #132]	; (8002c64 <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x130>)
 8002be0:	4825      	ldr	r0, [pc, #148]	; (8002c78 <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x144>)
 8002be2:	f7ff fe3d 	bl	8002860 <_Z10At_CommandPcS_m>
	sprintf(buf,"AT+HTTPPARA=\"URL\",\"http://iot-rb.systems/receive_data.php?\"\r\n");
 8002be6:	f107 0318 	add.w	r3, r7, #24
 8002bea:	4924      	ldr	r1, [pc, #144]	; (8002c7c <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x148>)
 8002bec:	4618      	mov	r0, r3
 8002bee:	f005 fabd 	bl	800816c <siprintf>
	At_Command(buf,(char *)"OK\r\n",10000);
 8002bf2:	f107 0318 	add.w	r3, r7, #24
 8002bf6:	f242 7210 	movw	r2, #10000	; 0x2710
 8002bfa:	491a      	ldr	r1, [pc, #104]	; (8002c64 <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x130>)
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff fe2f 	bl	8002860 <_Z10At_CommandPcS_m>
	memset(buf,0,1024);
 8002c02:	f107 0318 	add.w	r3, r7, #24
 8002c06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f005 f8b3 	bl	8007d78 <memset>
	At_Command_response((char *)"AT+HTTPACTION=1\r\n",(char *)"+HTTPACTION",buf,&buflen,10000);
 8002c12:	f107 0314 	add.w	r3, r7, #20
 8002c16:	f107 0218 	add.w	r2, r7, #24
 8002c1a:	f242 7110 	movw	r1, #10000	; 0x2710
 8002c1e:	9100      	str	r1, [sp, #0]
 8002c20:	4917      	ldr	r1, [pc, #92]	; (8002c80 <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x14c>)
 8002c22:	4818      	ldr	r0, [pc, #96]	; (8002c84 <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x150>)
 8002c24:	f7ff fd7c 	bl	8002720 <_Z19At_Command_responsePcS_S_Pim>
	AT_Getint_index(&Status_Code,buf,(char *)": ",1);
 8002c28:	f107 0118 	add.w	r1, r7, #24
 8002c2c:	f107 0010 	add.w	r0, r7, #16
 8002c30:	2301      	movs	r3, #1
 8002c32:	4a15      	ldr	r2, [pc, #84]	; (8002c88 <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x154>)
 8002c34:	f7ff fd34 	bl	80026a0 <_Z15AT_Getint_indexPiPcS0_i>
	At_Command((char *)"AT+HTTPREAD=0,500\r\n",(char *)"OK\r\n",10000);
 8002c38:	f242 7210 	movw	r2, #10000	; 0x2710
 8002c3c:	4909      	ldr	r1, [pc, #36]	; (8002c64 <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x130>)
 8002c3e:	4813      	ldr	r0, [pc, #76]	; (8002c8c <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x158>)
 8002c40:	f7ff fe0e 	bl	8002860 <_Z10At_CommandPcS_m>
	At_Command((char *)"AT+HTTPTERM\r\n",(char *)"OK\r\n",10000);
 8002c44:	f242 7210 	movw	r2, #10000	; 0x2710
 8002c48:	4906      	ldr	r1, [pc, #24]	; (8002c64 <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x130>)
 8002c4a:	480a      	ldr	r0, [pc, #40]	; (8002c74 <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x140>)
 8002c4c:	f7ff fe08 	bl	8002860 <_Z10At_CommandPcS_m>
	return Status_Code;
 8002c50:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8002c54:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8002c58:	681b      	ldr	r3, [r3, #0]
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f507 6783 	add.w	r7, r7, #1048	; 0x418
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	080095f0 	.word	0x080095f0
 8002c68:	080096a8 	.word	0x080096a8
 8002c6c:	080096b8 	.word	0x080096b8
 8002c70:	080096d0 	.word	0x080096d0
 8002c74:	080096dc 	.word	0x080096dc
 8002c78:	080096ec 	.word	0x080096ec
 8002c7c:	08009728 	.word	0x08009728
 8002c80:	08009768 	.word	0x08009768
 8002c84:	08009774 	.word	0x08009774
 8002c88:	08009788 	.word	0x08009788
 8002c8c:	0800978c 	.word	0x0800978c

08002c90 <_Z18SIM_7600_read_GNSSPc>:
//+CGPSINFO: 16°04'58.6327"N 108°08'98.5204"E,170423,130954.0,34.9,0.0,0.0
//           16°04'35.0"N 108°08'59.8"E
int  SIM_7600_read_GNSS(char *Location)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b0ba      	sub	sp, #232	; 0xe8
 8002c94:	af02      	add	r7, sp, #8
 8002c96:	6078      	str	r0, [r7, #4]
	char rsp[200]={0};
 8002c98:	2300      	movs	r3, #0
 8002c9a:	613b      	str	r3, [r7, #16]
 8002c9c:	f107 0314 	add.w	r3, r7, #20
 8002ca0:	22c4      	movs	r2, #196	; 0xc4
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f005 f867 	bl	8007d78 <memset>
	int len;
	if(At_Command_response((char*)"AT+CGPSINFO\r\n",(char*)"OK\r\n",rsp,&len, 2000)){
 8002caa:	f107 030c 	add.w	r3, r7, #12
 8002cae:	f107 0210 	add.w	r2, r7, #16
 8002cb2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002cb6:	9100      	str	r1, [sp, #0]
 8002cb8:	4920      	ldr	r1, [pc, #128]	; (8002d3c <_Z18SIM_7600_read_GNSSPc+0xac>)
 8002cba:	4821      	ldr	r0, [pc, #132]	; (8002d40 <_Z18SIM_7600_read_GNSSPc+0xb0>)
 8002cbc:	f7ff fd30 	bl	8002720 <_Z19At_Command_responsePcS_S_Pim>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	bf14      	ite	ne
 8002cc6:	2301      	movne	r3, #1
 8002cc8:	2300      	moveq	r3, #0
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d030      	beq.n	8002d32 <_Z18SIM_7600_read_GNSSPc+0xa2>
		char *start = strstr(rsp,": ");
 8002cd0:	f107 0310 	add.w	r3, r7, #16
 8002cd4:	491b      	ldr	r1, [pc, #108]	; (8002d44 <_Z18SIM_7600_read_GNSSPc+0xb4>)
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f005 fa75 	bl	80081c6 <strstr>
 8002cdc:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
		if(start)
 8002ce0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d024      	beq.n	8002d32 <_Z18SIM_7600_read_GNSSPc+0xa2>
		{
			start+=2;
 8002ce8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cec:	3302      	adds	r3, #2
 8002cee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
			char *end = strstr(start,",E,");
 8002cf2:	4915      	ldr	r1, [pc, #84]	; (8002d48 <_Z18SIM_7600_read_GNSSPc+0xb8>)
 8002cf4:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8002cf8:	f005 fa65 	bl	80081c6 <strstr>
 8002cfc:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
			if(end)
 8002d00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d014      	beq.n	8002d32 <_Z18SIM_7600_read_GNSSPc+0xa2>
			{
				if(end - start> 10)
 8002d08:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8002d0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b0a      	cmp	r3, #10
 8002d14:	dd0d      	ble.n	8002d32 <_Z18SIM_7600_read_GNSSPc+0xa2>
				{
					memcpy(Location,start,end - start+2);
 8002d16:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8002d1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	3302      	adds	r3, #2
 8002d22:	461a      	mov	r2, r3
 8002d24:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f005 f817 	bl	8007d5c <memcpy>
					return 1;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e000      	b.n	8002d34 <_Z18SIM_7600_read_GNSSPc+0xa4>
				}
			}
		}
	 }
	return 0;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	37e0      	adds	r7, #224	; 0xe0
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	080095f0 	.word	0x080095f0
 8002d40:	080097a0 	.word	0x080097a0
 8002d44:	08009788 	.word	0x08009788
 8002d48:	080097b0 	.word	0x080097b0

08002d4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002d52:	4b15      	ldr	r3, [pc, #84]	; (8002da8 <HAL_MspInit+0x5c>)
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	4a14      	ldr	r2, [pc, #80]	; (8002da8 <HAL_MspInit+0x5c>)
 8002d58:	f043 0301 	orr.w	r3, r3, #1
 8002d5c:	6193      	str	r3, [r2, #24]
 8002d5e:	4b12      	ldr	r3, [pc, #72]	; (8002da8 <HAL_MspInit+0x5c>)
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	60bb      	str	r3, [r7, #8]
 8002d68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d6a:	4b0f      	ldr	r3, [pc, #60]	; (8002da8 <HAL_MspInit+0x5c>)
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	4a0e      	ldr	r2, [pc, #56]	; (8002da8 <HAL_MspInit+0x5c>)
 8002d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d74:	61d3      	str	r3, [r2, #28]
 8002d76:	4b0c      	ldr	r3, [pc, #48]	; (8002da8 <HAL_MspInit+0x5c>)
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d7e:	607b      	str	r3, [r7, #4]
 8002d80:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002d82:	4b0a      	ldr	r3, [pc, #40]	; (8002dac <HAL_MspInit+0x60>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	60fb      	str	r3, [r7, #12]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002d8e:	60fb      	str	r3, [r7, #12]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d96:	60fb      	str	r3, [r7, #12]
 8002d98:	4a04      	ldr	r2, [pc, #16]	; (8002dac <HAL_MspInit+0x60>)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d9e:	bf00      	nop
 8002da0:	3714      	adds	r7, #20
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bc80      	pop	{r7}
 8002da6:	4770      	bx	lr
 8002da8:	40021000 	.word	0x40021000
 8002dac:	40010000 	.word	0x40010000

08002db0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b088      	sub	sp, #32
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db8:	f107 0310 	add.w	r3, r7, #16
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	605a      	str	r2, [r3, #4]
 8002dc2:	609a      	str	r2, [r3, #8]
 8002dc4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a28      	ldr	r2, [pc, #160]	; (8002e6c <HAL_ADC_MspInit+0xbc>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d149      	bne.n	8002e64 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002dd0:	4b27      	ldr	r3, [pc, #156]	; (8002e70 <HAL_ADC_MspInit+0xc0>)
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	4a26      	ldr	r2, [pc, #152]	; (8002e70 <HAL_ADC_MspInit+0xc0>)
 8002dd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dda:	6193      	str	r3, [r2, #24]
 8002ddc:	4b24      	ldr	r3, [pc, #144]	; (8002e70 <HAL_ADC_MspInit+0xc0>)
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002de4:	60fb      	str	r3, [r7, #12]
 8002de6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002de8:	4b21      	ldr	r3, [pc, #132]	; (8002e70 <HAL_ADC_MspInit+0xc0>)
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	4a20      	ldr	r2, [pc, #128]	; (8002e70 <HAL_ADC_MspInit+0xc0>)
 8002dee:	f043 0304 	orr.w	r3, r3, #4
 8002df2:	6193      	str	r3, [r2, #24]
 8002df4:	4b1e      	ldr	r3, [pc, #120]	; (8002e70 <HAL_ADC_MspInit+0xc0>)
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	60bb      	str	r3, [r7, #8]
 8002dfe:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002e00:	2302      	movs	r3, #2
 8002e02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e04:	2303      	movs	r3, #3
 8002e06:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e08:	f107 0310 	add.w	r3, r7, #16
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4819      	ldr	r0, [pc, #100]	; (8002e74 <HAL_ADC_MspInit+0xc4>)
 8002e10:	f001 fac4 	bl	800439c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002e14:	4b18      	ldr	r3, [pc, #96]	; (8002e78 <HAL_ADC_MspInit+0xc8>)
 8002e16:	4a19      	ldr	r2, [pc, #100]	; (8002e7c <HAL_ADC_MspInit+0xcc>)
 8002e18:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e1a:	4b17      	ldr	r3, [pc, #92]	; (8002e78 <HAL_ADC_MspInit+0xc8>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e20:	4b15      	ldr	r3, [pc, #84]	; (8002e78 <HAL_ADC_MspInit+0xc8>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002e26:	4b14      	ldr	r3, [pc, #80]	; (8002e78 <HAL_ADC_MspInit+0xc8>)
 8002e28:	2280      	movs	r2, #128	; 0x80
 8002e2a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e2c:	4b12      	ldr	r3, [pc, #72]	; (8002e78 <HAL_ADC_MspInit+0xc8>)
 8002e2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e32:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e34:	4b10      	ldr	r3, [pc, #64]	; (8002e78 <HAL_ADC_MspInit+0xc8>)
 8002e36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e3a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002e3c:	4b0e      	ldr	r3, [pc, #56]	; (8002e78 <HAL_ADC_MspInit+0xc8>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002e42:	4b0d      	ldr	r3, [pc, #52]	; (8002e78 <HAL_ADC_MspInit+0xc8>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002e48:	480b      	ldr	r0, [pc, #44]	; (8002e78 <HAL_ADC_MspInit+0xc8>)
 8002e4a:	f001 f809 	bl	8003e60 <HAL_DMA_Init>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8002e54:	f7fe fff4 	bl	8001e40 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4a07      	ldr	r2, [pc, #28]	; (8002e78 <HAL_ADC_MspInit+0xc8>)
 8002e5c:	621a      	str	r2, [r3, #32]
 8002e5e:	4a06      	ldr	r2, [pc, #24]	; (8002e78 <HAL_ADC_MspInit+0xc8>)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002e64:	bf00      	nop
 8002e66:	3720      	adds	r7, #32
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	40012400 	.word	0x40012400
 8002e70:	40021000 	.word	0x40021000
 8002e74:	40010800 	.word	0x40010800
 8002e78:	200000cc 	.word	0x200000cc
 8002e7c:	40020008 	.word	0x40020008

08002e80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b088      	sub	sp, #32
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e88:	f107 0310 	add.w	r3, r7, #16
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	605a      	str	r2, [r3, #4]
 8002e92:	609a      	str	r2, [r3, #8]
 8002e94:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a15      	ldr	r2, [pc, #84]	; (8002ef0 <HAL_I2C_MspInit+0x70>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d123      	bne.n	8002ee8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ea0:	4b14      	ldr	r3, [pc, #80]	; (8002ef4 <HAL_I2C_MspInit+0x74>)
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	4a13      	ldr	r2, [pc, #76]	; (8002ef4 <HAL_I2C_MspInit+0x74>)
 8002ea6:	f043 0308 	orr.w	r3, r3, #8
 8002eaa:	6193      	str	r3, [r2, #24]
 8002eac:	4b11      	ldr	r3, [pc, #68]	; (8002ef4 <HAL_I2C_MspInit+0x74>)
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	f003 0308 	and.w	r3, r3, #8
 8002eb4:	60fb      	str	r3, [r7, #12]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002eb8:	23c0      	movs	r3, #192	; 0xc0
 8002eba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ebc:	2312      	movs	r3, #18
 8002ebe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ec4:	f107 0310 	add.w	r3, r7, #16
 8002ec8:	4619      	mov	r1, r3
 8002eca:	480b      	ldr	r0, [pc, #44]	; (8002ef8 <HAL_I2C_MspInit+0x78>)
 8002ecc:	f001 fa66 	bl	800439c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ed0:	4b08      	ldr	r3, [pc, #32]	; (8002ef4 <HAL_I2C_MspInit+0x74>)
 8002ed2:	69db      	ldr	r3, [r3, #28]
 8002ed4:	4a07      	ldr	r2, [pc, #28]	; (8002ef4 <HAL_I2C_MspInit+0x74>)
 8002ed6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002eda:	61d3      	str	r3, [r2, #28]
 8002edc:	4b05      	ldr	r3, [pc, #20]	; (8002ef4 <HAL_I2C_MspInit+0x74>)
 8002ede:	69db      	ldr	r3, [r3, #28]
 8002ee0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ee4:	60bb      	str	r3, [r7, #8]
 8002ee6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002ee8:	bf00      	nop
 8002eea:	3720      	adds	r7, #32
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	40005400 	.word	0x40005400
 8002ef4:	40021000 	.word	0x40021000
 8002ef8:	40010c00 	.word	0x40010c00

08002efc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f0c:	d114      	bne.n	8002f38 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f0e:	4b19      	ldr	r3, [pc, #100]	; (8002f74 <HAL_TIM_Base_MspInit+0x78>)
 8002f10:	69db      	ldr	r3, [r3, #28]
 8002f12:	4a18      	ldr	r2, [pc, #96]	; (8002f74 <HAL_TIM_Base_MspInit+0x78>)
 8002f14:	f043 0301 	orr.w	r3, r3, #1
 8002f18:	61d3      	str	r3, [r2, #28]
 8002f1a:	4b16      	ldr	r3, [pc, #88]	; (8002f74 <HAL_TIM_Base_MspInit+0x78>)
 8002f1c:	69db      	ldr	r3, [r3, #28]
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	60fb      	str	r3, [r7, #12]
 8002f24:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002f26:	2200      	movs	r2, #0
 8002f28:	2100      	movs	r1, #0
 8002f2a:	201c      	movs	r0, #28
 8002f2c:	f000 ff5d 	bl	8003dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002f30:	201c      	movs	r0, #28
 8002f32:	f000 ff76 	bl	8003e22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002f36:	e018      	b.n	8002f6a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a0e      	ldr	r2, [pc, #56]	; (8002f78 <HAL_TIM_Base_MspInit+0x7c>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d113      	bne.n	8002f6a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f42:	4b0c      	ldr	r3, [pc, #48]	; (8002f74 <HAL_TIM_Base_MspInit+0x78>)
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	4a0b      	ldr	r2, [pc, #44]	; (8002f74 <HAL_TIM_Base_MspInit+0x78>)
 8002f48:	f043 0302 	orr.w	r3, r3, #2
 8002f4c:	61d3      	str	r3, [r2, #28]
 8002f4e:	4b09      	ldr	r3, [pc, #36]	; (8002f74 <HAL_TIM_Base_MspInit+0x78>)
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	60bb      	str	r3, [r7, #8]
 8002f58:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	201d      	movs	r0, #29
 8002f60:	f000 ff43 	bl	8003dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002f64:	201d      	movs	r0, #29
 8002f66:	f000 ff5c 	bl	8003e22 <HAL_NVIC_EnableIRQ>
}
 8002f6a:	bf00      	nop
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	40021000 	.word	0x40021000
 8002f78:	40000400 	.word	0x40000400

08002f7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b08a      	sub	sp, #40	; 0x28
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f84:	f107 0318 	add.w	r3, r7, #24
 8002f88:	2200      	movs	r2, #0
 8002f8a:	601a      	str	r2, [r3, #0]
 8002f8c:	605a      	str	r2, [r3, #4]
 8002f8e:	609a      	str	r2, [r3, #8]
 8002f90:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a4e      	ldr	r2, [pc, #312]	; (80030d0 <HAL_UART_MspInit+0x154>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d160      	bne.n	800305e <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f9c:	4b4d      	ldr	r3, [pc, #308]	; (80030d4 <HAL_UART_MspInit+0x158>)
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	4a4c      	ldr	r2, [pc, #304]	; (80030d4 <HAL_UART_MspInit+0x158>)
 8002fa2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fa6:	6193      	str	r3, [r2, #24]
 8002fa8:	4b4a      	ldr	r3, [pc, #296]	; (80030d4 <HAL_UART_MspInit+0x158>)
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fb0:	617b      	str	r3, [r7, #20]
 8002fb2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fb4:	4b47      	ldr	r3, [pc, #284]	; (80030d4 <HAL_UART_MspInit+0x158>)
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	4a46      	ldr	r2, [pc, #280]	; (80030d4 <HAL_UART_MspInit+0x158>)
 8002fba:	f043 0304 	orr.w	r3, r3, #4
 8002fbe:	6193      	str	r3, [r2, #24]
 8002fc0:	4b44      	ldr	r3, [pc, #272]	; (80030d4 <HAL_UART_MspInit+0x158>)
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	f003 0304 	and.w	r3, r3, #4
 8002fc8:	613b      	str	r3, [r7, #16]
 8002fca:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002fcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fda:	f107 0318 	add.w	r3, r7, #24
 8002fde:	4619      	mov	r1, r3
 8002fe0:	483d      	ldr	r0, [pc, #244]	; (80030d8 <HAL_UART_MspInit+0x15c>)
 8002fe2:	f001 f9db 	bl	800439c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002fe6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fec:	2300      	movs	r3, #0
 8002fee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ff4:	f107 0318 	add.w	r3, r7, #24
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	4837      	ldr	r0, [pc, #220]	; (80030d8 <HAL_UART_MspInit+0x15c>)
 8002ffc:	f001 f9ce 	bl	800439c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003000:	4b36      	ldr	r3, [pc, #216]	; (80030dc <HAL_UART_MspInit+0x160>)
 8003002:	4a37      	ldr	r2, [pc, #220]	; (80030e0 <HAL_UART_MspInit+0x164>)
 8003004:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003006:	4b35      	ldr	r3, [pc, #212]	; (80030dc <HAL_UART_MspInit+0x160>)
 8003008:	2200      	movs	r2, #0
 800300a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800300c:	4b33      	ldr	r3, [pc, #204]	; (80030dc <HAL_UART_MspInit+0x160>)
 800300e:	2200      	movs	r2, #0
 8003010:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003012:	4b32      	ldr	r3, [pc, #200]	; (80030dc <HAL_UART_MspInit+0x160>)
 8003014:	2280      	movs	r2, #128	; 0x80
 8003016:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003018:	4b30      	ldr	r3, [pc, #192]	; (80030dc <HAL_UART_MspInit+0x160>)
 800301a:	2200      	movs	r2, #0
 800301c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800301e:	4b2f      	ldr	r3, [pc, #188]	; (80030dc <HAL_UART_MspInit+0x160>)
 8003020:	2200      	movs	r2, #0
 8003022:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003024:	4b2d      	ldr	r3, [pc, #180]	; (80030dc <HAL_UART_MspInit+0x160>)
 8003026:	2200      	movs	r2, #0
 8003028:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800302a:	4b2c      	ldr	r3, [pc, #176]	; (80030dc <HAL_UART_MspInit+0x160>)
 800302c:	2200      	movs	r2, #0
 800302e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003030:	482a      	ldr	r0, [pc, #168]	; (80030dc <HAL_UART_MspInit+0x160>)
 8003032:	f000 ff15 	bl	8003e60 <HAL_DMA_Init>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 800303c:	f7fe ff00 	bl	8001e40 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a26      	ldr	r2, [pc, #152]	; (80030dc <HAL_UART_MspInit+0x160>)
 8003044:	639a      	str	r2, [r3, #56]	; 0x38
 8003046:	4a25      	ldr	r2, [pc, #148]	; (80030dc <HAL_UART_MspInit+0x160>)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800304c:	2200      	movs	r2, #0
 800304e:	2100      	movs	r1, #0
 8003050:	2025      	movs	r0, #37	; 0x25
 8003052:	f000 feca 	bl	8003dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003056:	2025      	movs	r0, #37	; 0x25
 8003058:	f000 fee3 	bl	8003e22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800305c:	e034      	b.n	80030c8 <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART2)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a20      	ldr	r2, [pc, #128]	; (80030e4 <HAL_UART_MspInit+0x168>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d12f      	bne.n	80030c8 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003068:	4b1a      	ldr	r3, [pc, #104]	; (80030d4 <HAL_UART_MspInit+0x158>)
 800306a:	69db      	ldr	r3, [r3, #28]
 800306c:	4a19      	ldr	r2, [pc, #100]	; (80030d4 <HAL_UART_MspInit+0x158>)
 800306e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003072:	61d3      	str	r3, [r2, #28]
 8003074:	4b17      	ldr	r3, [pc, #92]	; (80030d4 <HAL_UART_MspInit+0x158>)
 8003076:	69db      	ldr	r3, [r3, #28]
 8003078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307c:	60fb      	str	r3, [r7, #12]
 800307e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003080:	4b14      	ldr	r3, [pc, #80]	; (80030d4 <HAL_UART_MspInit+0x158>)
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	4a13      	ldr	r2, [pc, #76]	; (80030d4 <HAL_UART_MspInit+0x158>)
 8003086:	f043 0304 	orr.w	r3, r3, #4
 800308a:	6193      	str	r3, [r2, #24]
 800308c:	4b11      	ldr	r3, [pc, #68]	; (80030d4 <HAL_UART_MspInit+0x158>)
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	f003 0304 	and.w	r3, r3, #4
 8003094:	60bb      	str	r3, [r7, #8]
 8003096:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003098:	2304      	movs	r3, #4
 800309a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800309c:	2302      	movs	r3, #2
 800309e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030a0:	2303      	movs	r3, #3
 80030a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030a4:	f107 0318 	add.w	r3, r7, #24
 80030a8:	4619      	mov	r1, r3
 80030aa:	480b      	ldr	r0, [pc, #44]	; (80030d8 <HAL_UART_MspInit+0x15c>)
 80030ac:	f001 f976 	bl	800439c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80030b0:	2308      	movs	r3, #8
 80030b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030b4:	2300      	movs	r3, #0
 80030b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b8:	2300      	movs	r3, #0
 80030ba:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030bc:	f107 0318 	add.w	r3, r7, #24
 80030c0:	4619      	mov	r1, r3
 80030c2:	4805      	ldr	r0, [pc, #20]	; (80030d8 <HAL_UART_MspInit+0x15c>)
 80030c4:	f001 f96a 	bl	800439c <HAL_GPIO_Init>
}
 80030c8:	bf00      	nop
 80030ca:	3728      	adds	r7, #40	; 0x28
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40013800 	.word	0x40013800
 80030d4:	40021000 	.word	0x40021000
 80030d8:	40010800 	.word	0x40010800
 80030dc:	2000027c 	.word	0x2000027c
 80030e0:	40020058 	.word	0x40020058
 80030e4:	40004400 	.word	0x40004400

080030e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030ec:	e7fe      	b.n	80030ec <NMI_Handler+0x4>

080030ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030ee:	b480      	push	{r7}
 80030f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030f2:	e7fe      	b.n	80030f2 <HardFault_Handler+0x4>

080030f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030f8:	e7fe      	b.n	80030f8 <MemManage_Handler+0x4>

080030fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030fa:	b480      	push	{r7}
 80030fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030fe:	e7fe      	b.n	80030fe <BusFault_Handler+0x4>

08003100 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003104:	e7fe      	b.n	8003104 <UsageFault_Handler+0x4>

08003106 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003106:	b480      	push	{r7}
 8003108:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800310a:	bf00      	nop
 800310c:	46bd      	mov	sp, r7
 800310e:	bc80      	pop	{r7}
 8003110:	4770      	bx	lr

08003112 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003112:	b480      	push	{r7}
 8003114:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003116:	bf00      	nop
 8003118:	46bd      	mov	sp, r7
 800311a:	bc80      	pop	{r7}
 800311c:	4770      	bx	lr

0800311e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800311e:	b480      	push	{r7}
 8003120:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003122:	bf00      	nop
 8003124:	46bd      	mov	sp, r7
 8003126:	bc80      	pop	{r7}
 8003128:	4770      	bx	lr

0800312a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800312e:	f000 f951 	bl	80033d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003132:	bf00      	nop
 8003134:	bd80      	pop	{r7, pc}

08003136 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800313a:	2001      	movs	r0, #1
 800313c:	f001 fae2 	bl	8004704 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003140:	bf00      	nop
 8003142:	bd80      	pop	{r7, pc}

08003144 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003148:	4802      	ldr	r0, [pc, #8]	; (8003154 <DMA1_Channel1_IRQHandler+0x10>)
 800314a:	f000 fff3 	bl	8004134 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800314e:	bf00      	nop
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	200000cc 	.word	0x200000cc

08003158 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800315c:	4802      	ldr	r0, [pc, #8]	; (8003168 <DMA1_Channel5_IRQHandler+0x10>)
 800315e:	f000 ffe9 	bl	8004134 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8003162:	bf00      	nop
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	2000027c 	.word	0x2000027c

0800316c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003170:	4802      	ldr	r0, [pc, #8]	; (800317c <TIM2_IRQHandler+0x10>)
 8003172:	f003 f9e5 	bl	8006540 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003176:	bf00      	nop
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	20000164 	.word	0x20000164

08003180 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003184:	4802      	ldr	r0, [pc, #8]	; (8003190 <TIM3_IRQHandler+0x10>)
 8003186:	f003 f9db 	bl	8006540 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800318a:	bf00      	nop
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	200001ac 	.word	0x200001ac

08003194 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003198:	4802      	ldr	r0, [pc, #8]	; (80031a4 <USART1_IRQHandler+0x10>)
 800319a:	f003 fe93 	bl	8006ec4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800319e:	bf00      	nop
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	200001f4 	.word	0x200001f4

080031a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
  return 1;
 80031ac:	2301      	movs	r3, #1
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bc80      	pop	{r7}
 80031b4:	4770      	bx	lr

080031b6 <_kill>:

int _kill(int pid, int sig)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b082      	sub	sp, #8
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
 80031be:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80031c0:	f004 fd92 	bl	8007ce8 <__errno>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2216      	movs	r2, #22
 80031c8:	601a      	str	r2, [r3, #0]
  return -1;
 80031ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <_exit>:

void _exit (int status)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b082      	sub	sp, #8
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80031de:	f04f 31ff 	mov.w	r1, #4294967295
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f7ff ffe7 	bl	80031b6 <_kill>
  while (1) {}    /* Make sure we hang here */
 80031e8:	e7fe      	b.n	80031e8 <_exit+0x12>

080031ea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b086      	sub	sp, #24
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	60f8      	str	r0, [r7, #12]
 80031f2:	60b9      	str	r1, [r7, #8]
 80031f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031f6:	2300      	movs	r3, #0
 80031f8:	617b      	str	r3, [r7, #20]
 80031fa:	e00a      	b.n	8003212 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80031fc:	f3af 8000 	nop.w
 8003200:	4601      	mov	r1, r0
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	1c5a      	adds	r2, r3, #1
 8003206:	60ba      	str	r2, [r7, #8]
 8003208:	b2ca      	uxtb	r2, r1
 800320a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	3301      	adds	r3, #1
 8003210:	617b      	str	r3, [r7, #20]
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	429a      	cmp	r2, r3
 8003218:	dbf0      	blt.n	80031fc <_read+0x12>
  }

  return len;
 800321a:	687b      	ldr	r3, [r7, #4]
}
 800321c:	4618      	mov	r0, r3
 800321e:	3718      	adds	r7, #24
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800322c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003230:	4618      	mov	r0, r3
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	bc80      	pop	{r7}
 8003238:	4770      	bx	lr

0800323a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800323a:	b480      	push	{r7}
 800323c:	b083      	sub	sp, #12
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
 8003242:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800324a:	605a      	str	r2, [r3, #4]
  return 0;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	bc80      	pop	{r7}
 8003256:	4770      	bx	lr

08003258 <_isatty>:

int _isatty(int file)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003260:	2301      	movs	r3, #1
}
 8003262:	4618      	mov	r0, r3
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	bc80      	pop	{r7}
 800326a:	4770      	bx	lr

0800326c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800326c:	b480      	push	{r7}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	bc80      	pop	{r7}
 8003282:	4770      	bx	lr

08003284 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800328c:	4a14      	ldr	r2, [pc, #80]	; (80032e0 <_sbrk+0x5c>)
 800328e:	4b15      	ldr	r3, [pc, #84]	; (80032e4 <_sbrk+0x60>)
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003298:	4b13      	ldr	r3, [pc, #76]	; (80032e8 <_sbrk+0x64>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d102      	bne.n	80032a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032a0:	4b11      	ldr	r3, [pc, #68]	; (80032e8 <_sbrk+0x64>)
 80032a2:	4a12      	ldr	r2, [pc, #72]	; (80032ec <_sbrk+0x68>)
 80032a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032a6:	4b10      	ldr	r3, [pc, #64]	; (80032e8 <_sbrk+0x64>)
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4413      	add	r3, r2
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d207      	bcs.n	80032c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032b4:	f004 fd18 	bl	8007ce8 <__errno>
 80032b8:	4603      	mov	r3, r0
 80032ba:	220c      	movs	r2, #12
 80032bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032be:	f04f 33ff 	mov.w	r3, #4294967295
 80032c2:	e009      	b.n	80032d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032c4:	4b08      	ldr	r3, [pc, #32]	; (80032e8 <_sbrk+0x64>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032ca:	4b07      	ldr	r3, [pc, #28]	; (80032e8 <_sbrk+0x64>)
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4413      	add	r3, r2
 80032d2:	4a05      	ldr	r2, [pc, #20]	; (80032e8 <_sbrk+0x64>)
 80032d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032d6:	68fb      	ldr	r3, [r7, #12]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3718      	adds	r7, #24
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	20005000 	.word	0x20005000
 80032e4:	00000400 	.word	0x00000400
 80032e8:	20000618 	.word	0x20000618
 80032ec:	20000638 	.word	0x20000638

080032f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032f4:	bf00      	nop
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bc80      	pop	{r7}
 80032fa:	4770      	bx	lr

080032fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032fc:	480c      	ldr	r0, [pc, #48]	; (8003330 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80032fe:	490d      	ldr	r1, [pc, #52]	; (8003334 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003300:	4a0d      	ldr	r2, [pc, #52]	; (8003338 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003302:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003304:	e002      	b.n	800330c <LoopCopyDataInit>

08003306 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003306:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003308:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800330a:	3304      	adds	r3, #4

0800330c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800330c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800330e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003310:	d3f9      	bcc.n	8003306 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003312:	4a0a      	ldr	r2, [pc, #40]	; (800333c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003314:	4c0a      	ldr	r4, [pc, #40]	; (8003340 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003316:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003318:	e001      	b.n	800331e <LoopFillZerobss>

0800331a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800331a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800331c:	3204      	adds	r2, #4

0800331e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800331e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003320:	d3fb      	bcc.n	800331a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003322:	f7ff ffe5 	bl	80032f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003326:	f004 fce5 	bl	8007cf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800332a:	f7fe fb09 	bl	8001940 <main>
  bx lr
 800332e:	4770      	bx	lr
  ldr r0, =_sdata
 8003330:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003334:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8003338:	08009984 	.word	0x08009984
  ldr r2, =_sbss
 800333c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8003340:	20000634 	.word	0x20000634

08003344 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003344:	e7fe      	b.n	8003344 <ADC1_2_IRQHandler>
	...

08003348 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800334c:	4b08      	ldr	r3, [pc, #32]	; (8003370 <HAL_Init+0x28>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a07      	ldr	r2, [pc, #28]	; (8003370 <HAL_Init+0x28>)
 8003352:	f043 0310 	orr.w	r3, r3, #16
 8003356:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003358:	2003      	movs	r0, #3
 800335a:	f000 fd3b 	bl	8003dd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800335e:	200f      	movs	r0, #15
 8003360:	f000 f808 	bl	8003374 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003364:	f7ff fcf2 	bl	8002d4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	40022000 	.word	0x40022000

08003374 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800337c:	4b12      	ldr	r3, [pc, #72]	; (80033c8 <HAL_InitTick+0x54>)
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	4b12      	ldr	r3, [pc, #72]	; (80033cc <HAL_InitTick+0x58>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	4619      	mov	r1, r3
 8003386:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800338a:	fbb3 f3f1 	udiv	r3, r3, r1
 800338e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003392:	4618      	mov	r0, r3
 8003394:	f000 fd57 	bl	8003e46 <HAL_SYSTICK_Config>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e00e      	b.n	80033c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2b0f      	cmp	r3, #15
 80033a6:	d80a      	bhi.n	80033be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033a8:	2200      	movs	r2, #0
 80033aa:	6879      	ldr	r1, [r7, #4]
 80033ac:	f04f 30ff 	mov.w	r0, #4294967295
 80033b0:	f000 fd1b 	bl	8003dea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033b4:	4a06      	ldr	r2, [pc, #24]	; (80033d0 <HAL_InitTick+0x5c>)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
 80033bc:	e000      	b.n	80033c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3708      	adds	r7, #8
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	20000000 	.word	0x20000000
 80033cc:	20000008 	.word	0x20000008
 80033d0:	20000004 	.word	0x20000004

080033d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033d8:	4b05      	ldr	r3, [pc, #20]	; (80033f0 <HAL_IncTick+0x1c>)
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	461a      	mov	r2, r3
 80033de:	4b05      	ldr	r3, [pc, #20]	; (80033f4 <HAL_IncTick+0x20>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4413      	add	r3, r2
 80033e4:	4a03      	ldr	r2, [pc, #12]	; (80033f4 <HAL_IncTick+0x20>)
 80033e6:	6013      	str	r3, [r2, #0]
}
 80033e8:	bf00      	nop
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bc80      	pop	{r7}
 80033ee:	4770      	bx	lr
 80033f0:	20000008 	.word	0x20000008
 80033f4:	2000061c 	.word	0x2000061c

080033f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
  return uwTick;
 80033fc:	4b02      	ldr	r3, [pc, #8]	; (8003408 <HAL_GetTick+0x10>)
 80033fe:	681b      	ldr	r3, [r3, #0]
}
 8003400:	4618      	mov	r0, r3
 8003402:	46bd      	mov	sp, r7
 8003404:	bc80      	pop	{r7}
 8003406:	4770      	bx	lr
 8003408:	2000061c 	.word	0x2000061c

0800340c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003414:	f7ff fff0 	bl	80033f8 <HAL_GetTick>
 8003418:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003424:	d005      	beq.n	8003432 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003426:	4b0a      	ldr	r3, [pc, #40]	; (8003450 <HAL_Delay+0x44>)
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	461a      	mov	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	4413      	add	r3, r2
 8003430:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003432:	bf00      	nop
 8003434:	f7ff ffe0 	bl	80033f8 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	429a      	cmp	r2, r3
 8003442:	d8f7      	bhi.n	8003434 <HAL_Delay+0x28>
  {
  }
}
 8003444:	bf00      	nop
 8003446:	bf00      	nop
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	20000008 	.word	0x20000008

08003454 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003454:	b480      	push	{r7}
 8003456:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003458:	4b04      	ldr	r3, [pc, #16]	; (800346c <HAL_SuspendTick+0x18>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a03      	ldr	r2, [pc, #12]	; (800346c <HAL_SuspendTick+0x18>)
 800345e:	f023 0302 	bic.w	r3, r3, #2
 8003462:	6013      	str	r3, [r2, #0]
}
 8003464:	bf00      	nop
 8003466:	46bd      	mov	sp, r7
 8003468:	bc80      	pop	{r7}
 800346a:	4770      	bx	lr
 800346c:	e000e010 	.word	0xe000e010

08003470 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003474:	4b04      	ldr	r3, [pc, #16]	; (8003488 <HAL_ResumeTick+0x18>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a03      	ldr	r2, [pc, #12]	; (8003488 <HAL_ResumeTick+0x18>)
 800347a:	f043 0302 	orr.w	r3, r3, #2
 800347e:	6013      	str	r3, [r2, #0]
}
 8003480:	bf00      	nop
 8003482:	46bd      	mov	sp, r7
 8003484:	bc80      	pop	{r7}
 8003486:	4770      	bx	lr
 8003488:	e000e010 	.word	0xe000e010

0800348c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003494:	2300      	movs	r3, #0
 8003496:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003498:	2300      	movs	r3, #0
 800349a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800349c:	2300      	movs	r3, #0
 800349e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80034a0:	2300      	movs	r3, #0
 80034a2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e0be      	b.n	800362c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d109      	bne.n	80034d0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7ff fc70 	bl	8002db0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 faf5 	bl	8003ac0 <ADC_ConversionStop_Disable>
 80034d6:	4603      	mov	r3, r0
 80034d8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034de:	f003 0310 	and.w	r3, r3, #16
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f040 8099 	bne.w	800361a <HAL_ADC_Init+0x18e>
 80034e8:	7dfb      	ldrb	r3, [r7, #23]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f040 8095 	bne.w	800361a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80034f8:	f023 0302 	bic.w	r3, r3, #2
 80034fc:	f043 0202 	orr.w	r2, r3, #2
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800350c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	7b1b      	ldrb	r3, [r3, #12]
 8003512:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003514:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003516:	68ba      	ldr	r2, [r7, #8]
 8003518:	4313      	orrs	r3, r2
 800351a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003524:	d003      	beq.n	800352e <HAL_ADC_Init+0xa2>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d102      	bne.n	8003534 <HAL_ADC_Init+0xa8>
 800352e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003532:	e000      	b.n	8003536 <HAL_ADC_Init+0xaa>
 8003534:	2300      	movs	r3, #0
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	4313      	orrs	r3, r2
 800353a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	7d1b      	ldrb	r3, [r3, #20]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d119      	bne.n	8003578 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	7b1b      	ldrb	r3, [r3, #12]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d109      	bne.n	8003560 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	3b01      	subs	r3, #1
 8003552:	035a      	lsls	r2, r3, #13
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	4313      	orrs	r3, r2
 8003558:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800355c:	613b      	str	r3, [r7, #16]
 800355e:	e00b      	b.n	8003578 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003564:	f043 0220 	orr.w	r2, r3, #32
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003570:	f043 0201 	orr.w	r2, r3, #1
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	430a      	orrs	r2, r1
 800358a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689a      	ldr	r2, [r3, #8]
 8003592:	4b28      	ldr	r3, [pc, #160]	; (8003634 <HAL_ADC_Init+0x1a8>)
 8003594:	4013      	ands	r3, r2
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	6812      	ldr	r2, [r2, #0]
 800359a:	68b9      	ldr	r1, [r7, #8]
 800359c:	430b      	orrs	r3, r1
 800359e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035a8:	d003      	beq.n	80035b2 <HAL_ADC_Init+0x126>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d104      	bne.n	80035bc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	3b01      	subs	r3, #1
 80035b8:	051b      	lsls	r3, r3, #20
 80035ba:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	430a      	orrs	r2, r1
 80035ce:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	689a      	ldr	r2, [r3, #8]
 80035d6:	4b18      	ldr	r3, [pc, #96]	; (8003638 <HAL_ADC_Init+0x1ac>)
 80035d8:	4013      	ands	r3, r2
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d10b      	bne.n	80035f8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ea:	f023 0303 	bic.w	r3, r3, #3
 80035ee:	f043 0201 	orr.w	r2, r3, #1
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80035f6:	e018      	b.n	800362a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fc:	f023 0312 	bic.w	r3, r3, #18
 8003600:	f043 0210 	orr.w	r2, r3, #16
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360c:	f043 0201 	orr.w	r2, r3, #1
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003618:	e007      	b.n	800362a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361e:	f043 0210 	orr.w	r2, r3, #16
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800362a:	7dfb      	ldrb	r3, [r7, #23]
}
 800362c:	4618      	mov	r0, r3
 800362e:	3718      	adds	r7, #24
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	ffe1f7fd 	.word	0xffe1f7fd
 8003638:	ff1f0efe 	.word	0xff1f0efe

0800363c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003648:	2300      	movs	r3, #0
 800364a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a64      	ldr	r2, [pc, #400]	; (80037e4 <HAL_ADC_Start_DMA+0x1a8>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d004      	beq.n	8003660 <HAL_ADC_Start_DMA+0x24>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a63      	ldr	r2, [pc, #396]	; (80037e8 <HAL_ADC_Start_DMA+0x1ac>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d106      	bne.n	800366e <HAL_ADC_Start_DMA+0x32>
 8003660:	4b60      	ldr	r3, [pc, #384]	; (80037e4 <HAL_ADC_Start_DMA+0x1a8>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003668:	2b00      	cmp	r3, #0
 800366a:	f040 80b3 	bne.w	80037d4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003674:	2b01      	cmp	r3, #1
 8003676:	d101      	bne.n	800367c <HAL_ADC_Start_DMA+0x40>
 8003678:	2302      	movs	r3, #2
 800367a:	e0ae      	b.n	80037da <HAL_ADC_Start_DMA+0x19e>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f000 f9c1 	bl	8003a0c <ADC_Enable>
 800368a:	4603      	mov	r3, r0
 800368c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800368e:	7dfb      	ldrb	r3, [r7, #23]
 8003690:	2b00      	cmp	r3, #0
 8003692:	f040 809a 	bne.w	80037ca <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800369e:	f023 0301 	bic.w	r3, r3, #1
 80036a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a4e      	ldr	r2, [pc, #312]	; (80037e8 <HAL_ADC_Start_DMA+0x1ac>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d105      	bne.n	80036c0 <HAL_ADC_Start_DMA+0x84>
 80036b4:	4b4b      	ldr	r3, [pc, #300]	; (80037e4 <HAL_ADC_Start_DMA+0x1a8>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d115      	bne.n	80036ec <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d026      	beq.n	8003728 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036de:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80036e2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80036ea:	e01d      	b.n	8003728 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a39      	ldr	r2, [pc, #228]	; (80037e4 <HAL_ADC_Start_DMA+0x1a8>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d004      	beq.n	800370c <HAL_ADC_Start_DMA+0xd0>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a38      	ldr	r2, [pc, #224]	; (80037e8 <HAL_ADC_Start_DMA+0x1ac>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d10d      	bne.n	8003728 <HAL_ADC_Start_DMA+0xec>
 800370c:	4b35      	ldr	r3, [pc, #212]	; (80037e4 <HAL_ADC_Start_DMA+0x1a8>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003714:	2b00      	cmp	r3, #0
 8003716:	d007      	beq.n	8003728 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003720:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d006      	beq.n	8003742 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003738:	f023 0206 	bic.w	r2, r3, #6
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003740:	e002      	b.n	8003748 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	4a25      	ldr	r2, [pc, #148]	; (80037ec <HAL_ADC_Start_DMA+0x1b0>)
 8003756:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6a1b      	ldr	r3, [r3, #32]
 800375c:	4a24      	ldr	r2, [pc, #144]	; (80037f0 <HAL_ADC_Start_DMA+0x1b4>)
 800375e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	4a23      	ldr	r2, [pc, #140]	; (80037f4 <HAL_ADC_Start_DMA+0x1b8>)
 8003766:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f06f 0202 	mvn.w	r2, #2
 8003770:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003780:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6a18      	ldr	r0, [r3, #32]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	334c      	adds	r3, #76	; 0x4c
 800378c:	4619      	mov	r1, r3
 800378e:	68ba      	ldr	r2, [r7, #8]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f000 fbbf 	bl	8003f14 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80037a0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80037a4:	d108      	bne.n	80037b8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	689a      	ldr	r2, [r3, #8]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80037b4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80037b6:	e00f      	b.n	80037d8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689a      	ldr	r2, [r3, #8]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80037c6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80037c8:	e006      	b.n	80037d8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80037d2:	e001      	b.n	80037d8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80037d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3718      	adds	r7, #24
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	40012400 	.word	0x40012400
 80037e8:	40012800 	.word	0x40012800
 80037ec:	08003b43 	.word	0x08003b43
 80037f0:	08003bbf 	.word	0x08003bbf
 80037f4:	08003bdb 	.word	0x08003bdb

080037f8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	bc80      	pop	{r7}
 8003808:	4770      	bx	lr

0800380a <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800380a:	b480      	push	{r7}
 800380c:	b083      	sub	sp, #12
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003812:	bf00      	nop
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	bc80      	pop	{r7}
 800381a:	4770      	bx	lr

0800381c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800381c:	b480      	push	{r7}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003826:	2300      	movs	r3, #0
 8003828:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800382a:	2300      	movs	r3, #0
 800382c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003834:	2b01      	cmp	r3, #1
 8003836:	d101      	bne.n	800383c <HAL_ADC_ConfigChannel+0x20>
 8003838:	2302      	movs	r3, #2
 800383a:	e0dc      	b.n	80039f6 <HAL_ADC_ConfigChannel+0x1da>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	2b06      	cmp	r3, #6
 800384a:	d81c      	bhi.n	8003886 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	4613      	mov	r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	4413      	add	r3, r2
 800385c:	3b05      	subs	r3, #5
 800385e:	221f      	movs	r2, #31
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	43db      	mvns	r3, r3
 8003866:	4019      	ands	r1, r3
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	6818      	ldr	r0, [r3, #0]
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	4613      	mov	r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4413      	add	r3, r2
 8003876:	3b05      	subs	r3, #5
 8003878:	fa00 f203 	lsl.w	r2, r0, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	430a      	orrs	r2, r1
 8003882:	635a      	str	r2, [r3, #52]	; 0x34
 8003884:	e03c      	b.n	8003900 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	2b0c      	cmp	r3, #12
 800388c:	d81c      	bhi.n	80038c8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	4613      	mov	r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	4413      	add	r3, r2
 800389e:	3b23      	subs	r3, #35	; 0x23
 80038a0:	221f      	movs	r2, #31
 80038a2:	fa02 f303 	lsl.w	r3, r2, r3
 80038a6:	43db      	mvns	r3, r3
 80038a8:	4019      	ands	r1, r3
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	6818      	ldr	r0, [r3, #0]
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	4613      	mov	r3, r2
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	4413      	add	r3, r2
 80038b8:	3b23      	subs	r3, #35	; 0x23
 80038ba:	fa00 f203 	lsl.w	r2, r0, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	631a      	str	r2, [r3, #48]	; 0x30
 80038c6:	e01b      	b.n	8003900 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	4613      	mov	r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	4413      	add	r3, r2
 80038d8:	3b41      	subs	r3, #65	; 0x41
 80038da:	221f      	movs	r2, #31
 80038dc:	fa02 f303 	lsl.w	r3, r2, r3
 80038e0:	43db      	mvns	r3, r3
 80038e2:	4019      	ands	r1, r3
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	6818      	ldr	r0, [r3, #0]
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685a      	ldr	r2, [r3, #4]
 80038ec:	4613      	mov	r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4413      	add	r3, r2
 80038f2:	3b41      	subs	r3, #65	; 0x41
 80038f4:	fa00 f203 	lsl.w	r2, r0, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	430a      	orrs	r2, r1
 80038fe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2b09      	cmp	r3, #9
 8003906:	d91c      	bls.n	8003942 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68d9      	ldr	r1, [r3, #12]
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	4613      	mov	r3, r2
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	4413      	add	r3, r2
 8003918:	3b1e      	subs	r3, #30
 800391a:	2207      	movs	r2, #7
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	43db      	mvns	r3, r3
 8003922:	4019      	ands	r1, r3
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	6898      	ldr	r0, [r3, #8]
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	4613      	mov	r3, r2
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	4413      	add	r3, r2
 8003932:	3b1e      	subs	r3, #30
 8003934:	fa00 f203 	lsl.w	r2, r0, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	430a      	orrs	r2, r1
 800393e:	60da      	str	r2, [r3, #12]
 8003940:	e019      	b.n	8003976 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6919      	ldr	r1, [r3, #16]
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	4613      	mov	r3, r2
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	4413      	add	r3, r2
 8003952:	2207      	movs	r2, #7
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	43db      	mvns	r3, r3
 800395a:	4019      	ands	r1, r3
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	6898      	ldr	r0, [r3, #8]
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	4613      	mov	r3, r2
 8003966:	005b      	lsls	r3, r3, #1
 8003968:	4413      	add	r3, r2
 800396a:	fa00 f203 	lsl.w	r2, r0, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	430a      	orrs	r2, r1
 8003974:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2b10      	cmp	r3, #16
 800397c:	d003      	beq.n	8003986 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003982:	2b11      	cmp	r3, #17
 8003984:	d132      	bne.n	80039ec <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a1d      	ldr	r2, [pc, #116]	; (8003a00 <HAL_ADC_ConfigChannel+0x1e4>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d125      	bne.n	80039dc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d126      	bne.n	80039ec <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	689a      	ldr	r2, [r3, #8]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80039ac:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2b10      	cmp	r3, #16
 80039b4:	d11a      	bne.n	80039ec <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80039b6:	4b13      	ldr	r3, [pc, #76]	; (8003a04 <HAL_ADC_ConfigChannel+0x1e8>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a13      	ldr	r2, [pc, #76]	; (8003a08 <HAL_ADC_ConfigChannel+0x1ec>)
 80039bc:	fba2 2303 	umull	r2, r3, r2, r3
 80039c0:	0c9a      	lsrs	r2, r3, #18
 80039c2:	4613      	mov	r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	4413      	add	r3, r2
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80039cc:	e002      	b.n	80039d4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	3b01      	subs	r3, #1
 80039d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1f9      	bne.n	80039ce <HAL_ADC_ConfigChannel+0x1b2>
 80039da:	e007      	b.n	80039ec <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e0:	f043 0220 	orr.w	r2, r3, #32
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80039f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3714      	adds	r7, #20
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bc80      	pop	{r7}
 80039fe:	4770      	bx	lr
 8003a00:	40012400 	.word	0x40012400
 8003a04:	20000000 	.word	0x20000000
 8003a08:	431bde83 	.word	0x431bde83

08003a0c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a14:	2300      	movs	r3, #0
 8003a16:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d040      	beq.n	8003aac <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	689a      	ldr	r2, [r3, #8]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f042 0201 	orr.w	r2, r2, #1
 8003a38:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003a3a:	4b1f      	ldr	r3, [pc, #124]	; (8003ab8 <ADC_Enable+0xac>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a1f      	ldr	r2, [pc, #124]	; (8003abc <ADC_Enable+0xb0>)
 8003a40:	fba2 2303 	umull	r2, r3, r2, r3
 8003a44:	0c9b      	lsrs	r3, r3, #18
 8003a46:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003a48:	e002      	b.n	8003a50 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1f9      	bne.n	8003a4a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003a56:	f7ff fccf 	bl	80033f8 <HAL_GetTick>
 8003a5a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003a5c:	e01f      	b.n	8003a9e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a5e:	f7ff fccb 	bl	80033f8 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d918      	bls.n	8003a9e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d011      	beq.n	8003a9e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a7e:	f043 0210 	orr.w	r2, r3, #16
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8a:	f043 0201 	orr.w	r2, r3, #1
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e007      	b.n	8003aae <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d1d8      	bne.n	8003a5e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	20000000 	.word	0x20000000
 8003abc:	431bde83 	.word	0x431bde83

08003ac0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d12e      	bne.n	8003b38 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	689a      	ldr	r2, [r3, #8]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f022 0201 	bic.w	r2, r2, #1
 8003ae8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003aea:	f7ff fc85 	bl	80033f8 <HAL_GetTick>
 8003aee:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003af0:	e01b      	b.n	8003b2a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003af2:	f7ff fc81 	bl	80033f8 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d914      	bls.n	8003b2a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d10d      	bne.n	8003b2a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b12:	f043 0210 	orr.w	r2, r3, #16
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1e:	f043 0201 	orr.w	r2, r3, #1
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e007      	b.n	8003b3a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d0dc      	beq.n	8003af2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b084      	sub	sp, #16
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d127      	bne.n	8003bac <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b60:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003b72:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003b76:	d115      	bne.n	8003ba4 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d111      	bne.n	8003ba4 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d105      	bne.n	8003ba4 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9c:	f043 0201 	orr.w	r2, r3, #1
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f7fe fa3f 	bl	8002028 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003baa:	e004      	b.n	8003bb6 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	4798      	blx	r3
}
 8003bb6:	bf00      	nop
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b084      	sub	sp, #16
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f7ff fe13 	bl	80037f8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003bd2:	bf00      	nop
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b084      	sub	sp, #16
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf8:	f043 0204 	orr.w	r2, r3, #4
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f7ff fe02 	bl	800380a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c06:	bf00      	nop
 8003c08:	3710      	adds	r7, #16
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
	...

08003c10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f003 0307 	and.w	r3, r3, #7
 8003c1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c20:	4b0c      	ldr	r3, [pc, #48]	; (8003c54 <__NVIC_SetPriorityGrouping+0x44>)
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c42:	4a04      	ldr	r2, [pc, #16]	; (8003c54 <__NVIC_SetPriorityGrouping+0x44>)
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	60d3      	str	r3, [r2, #12]
}
 8003c48:	bf00      	nop
 8003c4a:	3714      	adds	r7, #20
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bc80      	pop	{r7}
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	e000ed00 	.word	0xe000ed00

08003c58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c5c:	4b04      	ldr	r3, [pc, #16]	; (8003c70 <__NVIC_GetPriorityGrouping+0x18>)
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	0a1b      	lsrs	r3, r3, #8
 8003c62:	f003 0307 	and.w	r3, r3, #7
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bc80      	pop	{r7}
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	e000ed00 	.word	0xe000ed00

08003c74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	db0b      	blt.n	8003c9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c86:	79fb      	ldrb	r3, [r7, #7]
 8003c88:	f003 021f 	and.w	r2, r3, #31
 8003c8c:	4906      	ldr	r1, [pc, #24]	; (8003ca8 <__NVIC_EnableIRQ+0x34>)
 8003c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c92:	095b      	lsrs	r3, r3, #5
 8003c94:	2001      	movs	r0, #1
 8003c96:	fa00 f202 	lsl.w	r2, r0, r2
 8003c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c9e:	bf00      	nop
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bc80      	pop	{r7}
 8003ca6:	4770      	bx	lr
 8003ca8:	e000e100 	.word	0xe000e100

08003cac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	6039      	str	r1, [r7, #0]
 8003cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	db0a      	blt.n	8003cd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	b2da      	uxtb	r2, r3
 8003cc4:	490c      	ldr	r1, [pc, #48]	; (8003cf8 <__NVIC_SetPriority+0x4c>)
 8003cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cca:	0112      	lsls	r2, r2, #4
 8003ccc:	b2d2      	uxtb	r2, r2
 8003cce:	440b      	add	r3, r1
 8003cd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cd4:	e00a      	b.n	8003cec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	b2da      	uxtb	r2, r3
 8003cda:	4908      	ldr	r1, [pc, #32]	; (8003cfc <__NVIC_SetPriority+0x50>)
 8003cdc:	79fb      	ldrb	r3, [r7, #7]
 8003cde:	f003 030f 	and.w	r3, r3, #15
 8003ce2:	3b04      	subs	r3, #4
 8003ce4:	0112      	lsls	r2, r2, #4
 8003ce6:	b2d2      	uxtb	r2, r2
 8003ce8:	440b      	add	r3, r1
 8003cea:	761a      	strb	r2, [r3, #24]
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bc80      	pop	{r7}
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	e000e100 	.word	0xe000e100
 8003cfc:	e000ed00 	.word	0xe000ed00

08003d00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b089      	sub	sp, #36	; 0x24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f003 0307 	and.w	r3, r3, #7
 8003d12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	f1c3 0307 	rsb	r3, r3, #7
 8003d1a:	2b04      	cmp	r3, #4
 8003d1c:	bf28      	it	cs
 8003d1e:	2304      	movcs	r3, #4
 8003d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	3304      	adds	r3, #4
 8003d26:	2b06      	cmp	r3, #6
 8003d28:	d902      	bls.n	8003d30 <NVIC_EncodePriority+0x30>
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	3b03      	subs	r3, #3
 8003d2e:	e000      	b.n	8003d32 <NVIC_EncodePriority+0x32>
 8003d30:	2300      	movs	r3, #0
 8003d32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d34:	f04f 32ff 	mov.w	r2, #4294967295
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3e:	43da      	mvns	r2, r3
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	401a      	ands	r2, r3
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d48:	f04f 31ff 	mov.w	r1, #4294967295
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d52:	43d9      	mvns	r1, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d58:	4313      	orrs	r3, r2
         );
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3724      	adds	r7, #36	; 0x24
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bc80      	pop	{r7}
 8003d62:	4770      	bx	lr

08003d64 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003d64:	b480      	push	{r7}
 8003d66:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003d68:	f3bf 8f4f 	dsb	sy
}
 8003d6c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003d6e:	4b06      	ldr	r3, [pc, #24]	; (8003d88 <__NVIC_SystemReset+0x24>)
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003d76:	4904      	ldr	r1, [pc, #16]	; (8003d88 <__NVIC_SystemReset+0x24>)
 8003d78:	4b04      	ldr	r3, [pc, #16]	; (8003d8c <__NVIC_SystemReset+0x28>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003d7e:	f3bf 8f4f 	dsb	sy
}
 8003d82:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003d84:	bf00      	nop
 8003d86:	e7fd      	b.n	8003d84 <__NVIC_SystemReset+0x20>
 8003d88:	e000ed00 	.word	0xe000ed00
 8003d8c:	05fa0004 	.word	0x05fa0004

08003d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003da0:	d301      	bcc.n	8003da6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003da2:	2301      	movs	r3, #1
 8003da4:	e00f      	b.n	8003dc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003da6:	4a0a      	ldr	r2, [pc, #40]	; (8003dd0 <SysTick_Config+0x40>)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	3b01      	subs	r3, #1
 8003dac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003dae:	210f      	movs	r1, #15
 8003db0:	f04f 30ff 	mov.w	r0, #4294967295
 8003db4:	f7ff ff7a 	bl	8003cac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003db8:	4b05      	ldr	r3, [pc, #20]	; (8003dd0 <SysTick_Config+0x40>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dbe:	4b04      	ldr	r3, [pc, #16]	; (8003dd0 <SysTick_Config+0x40>)
 8003dc0:	2207      	movs	r2, #7
 8003dc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3708      	adds	r7, #8
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	e000e010 	.word	0xe000e010

08003dd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f7ff ff17 	bl	8003c10 <__NVIC_SetPriorityGrouping>
}
 8003de2:	bf00      	nop
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b086      	sub	sp, #24
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	4603      	mov	r3, r0
 8003df2:	60b9      	str	r1, [r7, #8]
 8003df4:	607a      	str	r2, [r7, #4]
 8003df6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003dfc:	f7ff ff2c 	bl	8003c58 <__NVIC_GetPriorityGrouping>
 8003e00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	68b9      	ldr	r1, [r7, #8]
 8003e06:	6978      	ldr	r0, [r7, #20]
 8003e08:	f7ff ff7a 	bl	8003d00 <NVIC_EncodePriority>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e12:	4611      	mov	r1, r2
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7ff ff49 	bl	8003cac <__NVIC_SetPriority>
}
 8003e1a:	bf00      	nop
 8003e1c:	3718      	adds	r7, #24
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b082      	sub	sp, #8
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	4603      	mov	r3, r0
 8003e2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7ff ff1f 	bl	8003c74 <__NVIC_EnableIRQ>
}
 8003e36:	bf00      	nop
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003e42:	f7ff ff8f 	bl	8003d64 <__NVIC_SystemReset>

08003e46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b082      	sub	sp, #8
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7ff ff9e 	bl	8003d90 <SysTick_Config>
 8003e54:	4603      	mov	r3, r0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
	...

08003e60 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e043      	b.n	8003efe <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	4b22      	ldr	r3, [pc, #136]	; (8003f08 <HAL_DMA_Init+0xa8>)
 8003e7e:	4413      	add	r3, r2
 8003e80:	4a22      	ldr	r2, [pc, #136]	; (8003f0c <HAL_DMA_Init+0xac>)
 8003e82:	fba2 2303 	umull	r2, r3, r2, r3
 8003e86:	091b      	lsrs	r3, r3, #4
 8003e88:	009a      	lsls	r2, r3, #2
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a1f      	ldr	r2, [pc, #124]	; (8003f10 <HAL_DMA_Init+0xb0>)
 8003e92:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2202      	movs	r2, #2
 8003e98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003eaa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003eae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003eb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ec4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ed0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	69db      	ldr	r3, [r3, #28]
 8003ed6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3714      	adds	r7, #20
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bc80      	pop	{r7}
 8003f06:	4770      	bx	lr
 8003f08:	bffdfff8 	.word	0xbffdfff8
 8003f0c:	cccccccd 	.word	0xcccccccd
 8003f10:	40020000 	.word	0x40020000

08003f14 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
 8003f20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f22:	2300      	movs	r3, #0
 8003f24:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d101      	bne.n	8003f34 <HAL_DMA_Start_IT+0x20>
 8003f30:	2302      	movs	r3, #2
 8003f32:	e04a      	b.n	8003fca <HAL_DMA_Start_IT+0xb6>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d13a      	bne.n	8003fbc <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2202      	movs	r2, #2
 8003f4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f022 0201 	bic.w	r2, r2, #1
 8003f62:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	68b9      	ldr	r1, [r7, #8]
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f000 f9e8 	bl	8004340 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d008      	beq.n	8003f8a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f042 020e 	orr.w	r2, r2, #14
 8003f86:	601a      	str	r2, [r3, #0]
 8003f88:	e00f      	b.n	8003faa <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 0204 	bic.w	r2, r2, #4
 8003f98:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f042 020a 	orr.w	r2, r2, #10
 8003fa8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f042 0201 	orr.w	r2, r2, #1
 8003fb8:	601a      	str	r2, [r3, #0]
 8003fba:	e005      	b.n	8003fc8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003fc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3718      	adds	r7, #24
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b085      	sub	sp, #20
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d008      	beq.n	8003ffa <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2204      	movs	r2, #4
 8003fec:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e020      	b.n	800403c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 020e 	bic.w	r2, r2, #14
 8004008:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f022 0201 	bic.w	r2, r2, #1
 8004018:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004022:	2101      	movs	r1, #1
 8004024:	fa01 f202 	lsl.w	r2, r1, r2
 8004028:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800403a:	7bfb      	ldrb	r3, [r7, #15]
}
 800403c:	4618      	mov	r0, r3
 800403e:	3714      	adds	r7, #20
 8004040:	46bd      	mov	sp, r7
 8004042:	bc80      	pop	{r7}
 8004044:	4770      	bx	lr
	...

08004048 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004050:	2300      	movs	r3, #0
 8004052:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800405a:	2b02      	cmp	r3, #2
 800405c:	d005      	beq.n	800406a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2204      	movs	r2, #4
 8004062:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	73fb      	strb	r3, [r7, #15]
 8004068:	e051      	b.n	800410e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 020e 	bic.w	r2, r2, #14
 8004078:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 0201 	bic.w	r2, r2, #1
 8004088:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a22      	ldr	r2, [pc, #136]	; (8004118 <HAL_DMA_Abort_IT+0xd0>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d029      	beq.n	80040e8 <HAL_DMA_Abort_IT+0xa0>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a20      	ldr	r2, [pc, #128]	; (800411c <HAL_DMA_Abort_IT+0xd4>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d022      	beq.n	80040e4 <HAL_DMA_Abort_IT+0x9c>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a1f      	ldr	r2, [pc, #124]	; (8004120 <HAL_DMA_Abort_IT+0xd8>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d01a      	beq.n	80040de <HAL_DMA_Abort_IT+0x96>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a1d      	ldr	r2, [pc, #116]	; (8004124 <HAL_DMA_Abort_IT+0xdc>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d012      	beq.n	80040d8 <HAL_DMA_Abort_IT+0x90>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a1c      	ldr	r2, [pc, #112]	; (8004128 <HAL_DMA_Abort_IT+0xe0>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d00a      	beq.n	80040d2 <HAL_DMA_Abort_IT+0x8a>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a1a      	ldr	r2, [pc, #104]	; (800412c <HAL_DMA_Abort_IT+0xe4>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d102      	bne.n	80040cc <HAL_DMA_Abort_IT+0x84>
 80040c6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80040ca:	e00e      	b.n	80040ea <HAL_DMA_Abort_IT+0xa2>
 80040cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040d0:	e00b      	b.n	80040ea <HAL_DMA_Abort_IT+0xa2>
 80040d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040d6:	e008      	b.n	80040ea <HAL_DMA_Abort_IT+0xa2>
 80040d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040dc:	e005      	b.n	80040ea <HAL_DMA_Abort_IT+0xa2>
 80040de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040e2:	e002      	b.n	80040ea <HAL_DMA_Abort_IT+0xa2>
 80040e4:	2310      	movs	r3, #16
 80040e6:	e000      	b.n	80040ea <HAL_DMA_Abort_IT+0xa2>
 80040e8:	2301      	movs	r3, #1
 80040ea:	4a11      	ldr	r2, [pc, #68]	; (8004130 <HAL_DMA_Abort_IT+0xe8>)
 80040ec:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004102:	2b00      	cmp	r3, #0
 8004104:	d003      	beq.n	800410e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	4798      	blx	r3
    } 
  }
  return status;
 800410e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004110:	4618      	mov	r0, r3
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	40020008 	.word	0x40020008
 800411c:	4002001c 	.word	0x4002001c
 8004120:	40020030 	.word	0x40020030
 8004124:	40020044 	.word	0x40020044
 8004128:	40020058 	.word	0x40020058
 800412c:	4002006c 	.word	0x4002006c
 8004130:	40020000 	.word	0x40020000

08004134 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004150:	2204      	movs	r2, #4
 8004152:	409a      	lsls	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	4013      	ands	r3, r2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d04f      	beq.n	80041fc <HAL_DMA_IRQHandler+0xc8>
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	f003 0304 	and.w	r3, r3, #4
 8004162:	2b00      	cmp	r3, #0
 8004164:	d04a      	beq.n	80041fc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0320 	and.w	r3, r3, #32
 8004170:	2b00      	cmp	r3, #0
 8004172:	d107      	bne.n	8004184 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f022 0204 	bic.w	r2, r2, #4
 8004182:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a66      	ldr	r2, [pc, #408]	; (8004324 <HAL_DMA_IRQHandler+0x1f0>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d029      	beq.n	80041e2 <HAL_DMA_IRQHandler+0xae>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a65      	ldr	r2, [pc, #404]	; (8004328 <HAL_DMA_IRQHandler+0x1f4>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d022      	beq.n	80041de <HAL_DMA_IRQHandler+0xaa>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a63      	ldr	r2, [pc, #396]	; (800432c <HAL_DMA_IRQHandler+0x1f8>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d01a      	beq.n	80041d8 <HAL_DMA_IRQHandler+0xa4>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a62      	ldr	r2, [pc, #392]	; (8004330 <HAL_DMA_IRQHandler+0x1fc>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d012      	beq.n	80041d2 <HAL_DMA_IRQHandler+0x9e>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a60      	ldr	r2, [pc, #384]	; (8004334 <HAL_DMA_IRQHandler+0x200>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d00a      	beq.n	80041cc <HAL_DMA_IRQHandler+0x98>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a5f      	ldr	r2, [pc, #380]	; (8004338 <HAL_DMA_IRQHandler+0x204>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d102      	bne.n	80041c6 <HAL_DMA_IRQHandler+0x92>
 80041c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80041c4:	e00e      	b.n	80041e4 <HAL_DMA_IRQHandler+0xb0>
 80041c6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80041ca:	e00b      	b.n	80041e4 <HAL_DMA_IRQHandler+0xb0>
 80041cc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80041d0:	e008      	b.n	80041e4 <HAL_DMA_IRQHandler+0xb0>
 80041d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80041d6:	e005      	b.n	80041e4 <HAL_DMA_IRQHandler+0xb0>
 80041d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041dc:	e002      	b.n	80041e4 <HAL_DMA_IRQHandler+0xb0>
 80041de:	2340      	movs	r3, #64	; 0x40
 80041e0:	e000      	b.n	80041e4 <HAL_DMA_IRQHandler+0xb0>
 80041e2:	2304      	movs	r3, #4
 80041e4:	4a55      	ldr	r2, [pc, #340]	; (800433c <HAL_DMA_IRQHandler+0x208>)
 80041e6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f000 8094 	beq.w	800431a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80041fa:	e08e      	b.n	800431a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004200:	2202      	movs	r2, #2
 8004202:	409a      	lsls	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	4013      	ands	r3, r2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d056      	beq.n	80042ba <HAL_DMA_IRQHandler+0x186>
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d051      	beq.n	80042ba <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0320 	and.w	r3, r3, #32
 8004220:	2b00      	cmp	r3, #0
 8004222:	d10b      	bne.n	800423c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f022 020a 	bic.w	r2, r2, #10
 8004232:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a38      	ldr	r2, [pc, #224]	; (8004324 <HAL_DMA_IRQHandler+0x1f0>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d029      	beq.n	800429a <HAL_DMA_IRQHandler+0x166>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a37      	ldr	r2, [pc, #220]	; (8004328 <HAL_DMA_IRQHandler+0x1f4>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d022      	beq.n	8004296 <HAL_DMA_IRQHandler+0x162>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a35      	ldr	r2, [pc, #212]	; (800432c <HAL_DMA_IRQHandler+0x1f8>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d01a      	beq.n	8004290 <HAL_DMA_IRQHandler+0x15c>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a34      	ldr	r2, [pc, #208]	; (8004330 <HAL_DMA_IRQHandler+0x1fc>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d012      	beq.n	800428a <HAL_DMA_IRQHandler+0x156>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a32      	ldr	r2, [pc, #200]	; (8004334 <HAL_DMA_IRQHandler+0x200>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d00a      	beq.n	8004284 <HAL_DMA_IRQHandler+0x150>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a31      	ldr	r2, [pc, #196]	; (8004338 <HAL_DMA_IRQHandler+0x204>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d102      	bne.n	800427e <HAL_DMA_IRQHandler+0x14a>
 8004278:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800427c:	e00e      	b.n	800429c <HAL_DMA_IRQHandler+0x168>
 800427e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004282:	e00b      	b.n	800429c <HAL_DMA_IRQHandler+0x168>
 8004284:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004288:	e008      	b.n	800429c <HAL_DMA_IRQHandler+0x168>
 800428a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800428e:	e005      	b.n	800429c <HAL_DMA_IRQHandler+0x168>
 8004290:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004294:	e002      	b.n	800429c <HAL_DMA_IRQHandler+0x168>
 8004296:	2320      	movs	r3, #32
 8004298:	e000      	b.n	800429c <HAL_DMA_IRQHandler+0x168>
 800429a:	2302      	movs	r3, #2
 800429c:	4a27      	ldr	r2, [pc, #156]	; (800433c <HAL_DMA_IRQHandler+0x208>)
 800429e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d034      	beq.n	800431a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80042b8:	e02f      	b.n	800431a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	2208      	movs	r2, #8
 80042c0:	409a      	lsls	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	4013      	ands	r3, r2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d028      	beq.n	800431c <HAL_DMA_IRQHandler+0x1e8>
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	f003 0308 	and.w	r3, r3, #8
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d023      	beq.n	800431c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f022 020e 	bic.w	r2, r2, #14
 80042e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ec:	2101      	movs	r1, #1
 80042ee:	fa01 f202 	lsl.w	r2, r1, r2
 80042f2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430e:	2b00      	cmp	r3, #0
 8004310:	d004      	beq.n	800431c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	4798      	blx	r3
    }
  }
  return;
 800431a:	bf00      	nop
 800431c:	bf00      	nop
}
 800431e:	3710      	adds	r7, #16
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	40020008 	.word	0x40020008
 8004328:	4002001c 	.word	0x4002001c
 800432c:	40020030 	.word	0x40020030
 8004330:	40020044 	.word	0x40020044
 8004334:	40020058 	.word	0x40020058
 8004338:	4002006c 	.word	0x4002006c
 800433c:	40020000 	.word	0x40020000

08004340 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
 800434c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004356:	2101      	movs	r1, #1
 8004358:	fa01 f202 	lsl.w	r2, r1, r2
 800435c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	683a      	ldr	r2, [r7, #0]
 8004364:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	2b10      	cmp	r3, #16
 800436c:	d108      	bne.n	8004380 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68ba      	ldr	r2, [r7, #8]
 800437c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800437e:	e007      	b.n	8004390 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68ba      	ldr	r2, [r7, #8]
 8004386:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	60da      	str	r2, [r3, #12]
}
 8004390:	bf00      	nop
 8004392:	3714      	adds	r7, #20
 8004394:	46bd      	mov	sp, r7
 8004396:	bc80      	pop	{r7}
 8004398:	4770      	bx	lr
	...

0800439c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800439c:	b480      	push	{r7}
 800439e:	b08b      	sub	sp, #44	; 0x2c
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80043a6:	2300      	movs	r3, #0
 80043a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80043aa:	2300      	movs	r3, #0
 80043ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043ae:	e169      	b.n	8004684 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80043b0:	2201      	movs	r2, #1
 80043b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b4:	fa02 f303 	lsl.w	r3, r2, r3
 80043b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	69fa      	ldr	r2, [r7, #28]
 80043c0:	4013      	ands	r3, r2
 80043c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	f040 8158 	bne.w	800467e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	4a9a      	ldr	r2, [pc, #616]	; (800463c <HAL_GPIO_Init+0x2a0>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d05e      	beq.n	8004496 <HAL_GPIO_Init+0xfa>
 80043d8:	4a98      	ldr	r2, [pc, #608]	; (800463c <HAL_GPIO_Init+0x2a0>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d875      	bhi.n	80044ca <HAL_GPIO_Init+0x12e>
 80043de:	4a98      	ldr	r2, [pc, #608]	; (8004640 <HAL_GPIO_Init+0x2a4>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d058      	beq.n	8004496 <HAL_GPIO_Init+0xfa>
 80043e4:	4a96      	ldr	r2, [pc, #600]	; (8004640 <HAL_GPIO_Init+0x2a4>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d86f      	bhi.n	80044ca <HAL_GPIO_Init+0x12e>
 80043ea:	4a96      	ldr	r2, [pc, #600]	; (8004644 <HAL_GPIO_Init+0x2a8>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d052      	beq.n	8004496 <HAL_GPIO_Init+0xfa>
 80043f0:	4a94      	ldr	r2, [pc, #592]	; (8004644 <HAL_GPIO_Init+0x2a8>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d869      	bhi.n	80044ca <HAL_GPIO_Init+0x12e>
 80043f6:	4a94      	ldr	r2, [pc, #592]	; (8004648 <HAL_GPIO_Init+0x2ac>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d04c      	beq.n	8004496 <HAL_GPIO_Init+0xfa>
 80043fc:	4a92      	ldr	r2, [pc, #584]	; (8004648 <HAL_GPIO_Init+0x2ac>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d863      	bhi.n	80044ca <HAL_GPIO_Init+0x12e>
 8004402:	4a92      	ldr	r2, [pc, #584]	; (800464c <HAL_GPIO_Init+0x2b0>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d046      	beq.n	8004496 <HAL_GPIO_Init+0xfa>
 8004408:	4a90      	ldr	r2, [pc, #576]	; (800464c <HAL_GPIO_Init+0x2b0>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d85d      	bhi.n	80044ca <HAL_GPIO_Init+0x12e>
 800440e:	2b12      	cmp	r3, #18
 8004410:	d82a      	bhi.n	8004468 <HAL_GPIO_Init+0xcc>
 8004412:	2b12      	cmp	r3, #18
 8004414:	d859      	bhi.n	80044ca <HAL_GPIO_Init+0x12e>
 8004416:	a201      	add	r2, pc, #4	; (adr r2, 800441c <HAL_GPIO_Init+0x80>)
 8004418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800441c:	08004497 	.word	0x08004497
 8004420:	08004471 	.word	0x08004471
 8004424:	08004483 	.word	0x08004483
 8004428:	080044c5 	.word	0x080044c5
 800442c:	080044cb 	.word	0x080044cb
 8004430:	080044cb 	.word	0x080044cb
 8004434:	080044cb 	.word	0x080044cb
 8004438:	080044cb 	.word	0x080044cb
 800443c:	080044cb 	.word	0x080044cb
 8004440:	080044cb 	.word	0x080044cb
 8004444:	080044cb 	.word	0x080044cb
 8004448:	080044cb 	.word	0x080044cb
 800444c:	080044cb 	.word	0x080044cb
 8004450:	080044cb 	.word	0x080044cb
 8004454:	080044cb 	.word	0x080044cb
 8004458:	080044cb 	.word	0x080044cb
 800445c:	080044cb 	.word	0x080044cb
 8004460:	08004479 	.word	0x08004479
 8004464:	0800448d 	.word	0x0800448d
 8004468:	4a79      	ldr	r2, [pc, #484]	; (8004650 <HAL_GPIO_Init+0x2b4>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d013      	beq.n	8004496 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800446e:	e02c      	b.n	80044ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	623b      	str	r3, [r7, #32]
          break;
 8004476:	e029      	b.n	80044cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	3304      	adds	r3, #4
 800447e:	623b      	str	r3, [r7, #32]
          break;
 8004480:	e024      	b.n	80044cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	3308      	adds	r3, #8
 8004488:	623b      	str	r3, [r7, #32]
          break;
 800448a:	e01f      	b.n	80044cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	330c      	adds	r3, #12
 8004492:	623b      	str	r3, [r7, #32]
          break;
 8004494:	e01a      	b.n	80044cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d102      	bne.n	80044a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800449e:	2304      	movs	r3, #4
 80044a0:	623b      	str	r3, [r7, #32]
          break;
 80044a2:	e013      	b.n	80044cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d105      	bne.n	80044b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80044ac:	2308      	movs	r3, #8
 80044ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	69fa      	ldr	r2, [r7, #28]
 80044b4:	611a      	str	r2, [r3, #16]
          break;
 80044b6:	e009      	b.n	80044cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80044b8:	2308      	movs	r3, #8
 80044ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	69fa      	ldr	r2, [r7, #28]
 80044c0:	615a      	str	r2, [r3, #20]
          break;
 80044c2:	e003      	b.n	80044cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80044c4:	2300      	movs	r3, #0
 80044c6:	623b      	str	r3, [r7, #32]
          break;
 80044c8:	e000      	b.n	80044cc <HAL_GPIO_Init+0x130>
          break;
 80044ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	2bff      	cmp	r3, #255	; 0xff
 80044d0:	d801      	bhi.n	80044d6 <HAL_GPIO_Init+0x13a>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	e001      	b.n	80044da <HAL_GPIO_Init+0x13e>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	3304      	adds	r3, #4
 80044da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	2bff      	cmp	r3, #255	; 0xff
 80044e0:	d802      	bhi.n	80044e8 <HAL_GPIO_Init+0x14c>
 80044e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	e002      	b.n	80044ee <HAL_GPIO_Init+0x152>
 80044e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ea:	3b08      	subs	r3, #8
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	210f      	movs	r1, #15
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	fa01 f303 	lsl.w	r3, r1, r3
 80044fc:	43db      	mvns	r3, r3
 80044fe:	401a      	ands	r2, r3
 8004500:	6a39      	ldr	r1, [r7, #32]
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	fa01 f303 	lsl.w	r3, r1, r3
 8004508:	431a      	orrs	r2, r3
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004516:	2b00      	cmp	r3, #0
 8004518:	f000 80b1 	beq.w	800467e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800451c:	4b4d      	ldr	r3, [pc, #308]	; (8004654 <HAL_GPIO_Init+0x2b8>)
 800451e:	699b      	ldr	r3, [r3, #24]
 8004520:	4a4c      	ldr	r2, [pc, #304]	; (8004654 <HAL_GPIO_Init+0x2b8>)
 8004522:	f043 0301 	orr.w	r3, r3, #1
 8004526:	6193      	str	r3, [r2, #24]
 8004528:	4b4a      	ldr	r3, [pc, #296]	; (8004654 <HAL_GPIO_Init+0x2b8>)
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	60bb      	str	r3, [r7, #8]
 8004532:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004534:	4a48      	ldr	r2, [pc, #288]	; (8004658 <HAL_GPIO_Init+0x2bc>)
 8004536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004538:	089b      	lsrs	r3, r3, #2
 800453a:	3302      	adds	r3, #2
 800453c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004540:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004544:	f003 0303 	and.w	r3, r3, #3
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	220f      	movs	r2, #15
 800454c:	fa02 f303 	lsl.w	r3, r2, r3
 8004550:	43db      	mvns	r3, r3
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	4013      	ands	r3, r2
 8004556:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a40      	ldr	r2, [pc, #256]	; (800465c <HAL_GPIO_Init+0x2c0>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d013      	beq.n	8004588 <HAL_GPIO_Init+0x1ec>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a3f      	ldr	r2, [pc, #252]	; (8004660 <HAL_GPIO_Init+0x2c4>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d00d      	beq.n	8004584 <HAL_GPIO_Init+0x1e8>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a3e      	ldr	r2, [pc, #248]	; (8004664 <HAL_GPIO_Init+0x2c8>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d007      	beq.n	8004580 <HAL_GPIO_Init+0x1e4>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a3d      	ldr	r2, [pc, #244]	; (8004668 <HAL_GPIO_Init+0x2cc>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d101      	bne.n	800457c <HAL_GPIO_Init+0x1e0>
 8004578:	2303      	movs	r3, #3
 800457a:	e006      	b.n	800458a <HAL_GPIO_Init+0x1ee>
 800457c:	2304      	movs	r3, #4
 800457e:	e004      	b.n	800458a <HAL_GPIO_Init+0x1ee>
 8004580:	2302      	movs	r3, #2
 8004582:	e002      	b.n	800458a <HAL_GPIO_Init+0x1ee>
 8004584:	2301      	movs	r3, #1
 8004586:	e000      	b.n	800458a <HAL_GPIO_Init+0x1ee>
 8004588:	2300      	movs	r3, #0
 800458a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800458c:	f002 0203 	and.w	r2, r2, #3
 8004590:	0092      	lsls	r2, r2, #2
 8004592:	4093      	lsls	r3, r2
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	4313      	orrs	r3, r2
 8004598:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800459a:	492f      	ldr	r1, [pc, #188]	; (8004658 <HAL_GPIO_Init+0x2bc>)
 800459c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459e:	089b      	lsrs	r3, r3, #2
 80045a0:	3302      	adds	r3, #2
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d006      	beq.n	80045c2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80045b4:	4b2d      	ldr	r3, [pc, #180]	; (800466c <HAL_GPIO_Init+0x2d0>)
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	492c      	ldr	r1, [pc, #176]	; (800466c <HAL_GPIO_Init+0x2d0>)
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	4313      	orrs	r3, r2
 80045be:	600b      	str	r3, [r1, #0]
 80045c0:	e006      	b.n	80045d0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80045c2:	4b2a      	ldr	r3, [pc, #168]	; (800466c <HAL_GPIO_Init+0x2d0>)
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	43db      	mvns	r3, r3
 80045ca:	4928      	ldr	r1, [pc, #160]	; (800466c <HAL_GPIO_Init+0x2d0>)
 80045cc:	4013      	ands	r3, r2
 80045ce:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d006      	beq.n	80045ea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80045dc:	4b23      	ldr	r3, [pc, #140]	; (800466c <HAL_GPIO_Init+0x2d0>)
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	4922      	ldr	r1, [pc, #136]	; (800466c <HAL_GPIO_Init+0x2d0>)
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	604b      	str	r3, [r1, #4]
 80045e8:	e006      	b.n	80045f8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80045ea:	4b20      	ldr	r3, [pc, #128]	; (800466c <HAL_GPIO_Init+0x2d0>)
 80045ec:	685a      	ldr	r2, [r3, #4]
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	43db      	mvns	r3, r3
 80045f2:	491e      	ldr	r1, [pc, #120]	; (800466c <HAL_GPIO_Init+0x2d0>)
 80045f4:	4013      	ands	r3, r2
 80045f6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d006      	beq.n	8004612 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004604:	4b19      	ldr	r3, [pc, #100]	; (800466c <HAL_GPIO_Init+0x2d0>)
 8004606:	689a      	ldr	r2, [r3, #8]
 8004608:	4918      	ldr	r1, [pc, #96]	; (800466c <HAL_GPIO_Init+0x2d0>)
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	4313      	orrs	r3, r2
 800460e:	608b      	str	r3, [r1, #8]
 8004610:	e006      	b.n	8004620 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004612:	4b16      	ldr	r3, [pc, #88]	; (800466c <HAL_GPIO_Init+0x2d0>)
 8004614:	689a      	ldr	r2, [r3, #8]
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	43db      	mvns	r3, r3
 800461a:	4914      	ldr	r1, [pc, #80]	; (800466c <HAL_GPIO_Init+0x2d0>)
 800461c:	4013      	ands	r3, r2
 800461e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d021      	beq.n	8004670 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800462c:	4b0f      	ldr	r3, [pc, #60]	; (800466c <HAL_GPIO_Init+0x2d0>)
 800462e:	68da      	ldr	r2, [r3, #12]
 8004630:	490e      	ldr	r1, [pc, #56]	; (800466c <HAL_GPIO_Init+0x2d0>)
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	4313      	orrs	r3, r2
 8004636:	60cb      	str	r3, [r1, #12]
 8004638:	e021      	b.n	800467e <HAL_GPIO_Init+0x2e2>
 800463a:	bf00      	nop
 800463c:	10320000 	.word	0x10320000
 8004640:	10310000 	.word	0x10310000
 8004644:	10220000 	.word	0x10220000
 8004648:	10210000 	.word	0x10210000
 800464c:	10120000 	.word	0x10120000
 8004650:	10110000 	.word	0x10110000
 8004654:	40021000 	.word	0x40021000
 8004658:	40010000 	.word	0x40010000
 800465c:	40010800 	.word	0x40010800
 8004660:	40010c00 	.word	0x40010c00
 8004664:	40011000 	.word	0x40011000
 8004668:	40011400 	.word	0x40011400
 800466c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004670:	4b0b      	ldr	r3, [pc, #44]	; (80046a0 <HAL_GPIO_Init+0x304>)
 8004672:	68da      	ldr	r2, [r3, #12]
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	43db      	mvns	r3, r3
 8004678:	4909      	ldr	r1, [pc, #36]	; (80046a0 <HAL_GPIO_Init+0x304>)
 800467a:	4013      	ands	r3, r2
 800467c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800467e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004680:	3301      	adds	r3, #1
 8004682:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468a:	fa22 f303 	lsr.w	r3, r2, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	f47f ae8e 	bne.w	80043b0 <HAL_GPIO_Init+0x14>
  }
}
 8004694:	bf00      	nop
 8004696:	bf00      	nop
 8004698:	372c      	adds	r7, #44	; 0x2c
 800469a:	46bd      	mov	sp, r7
 800469c:	bc80      	pop	{r7}
 800469e:	4770      	bx	lr
 80046a0:	40010400 	.word	0x40010400

080046a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	460b      	mov	r3, r1
 80046ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	689a      	ldr	r2, [r3, #8]
 80046b4:	887b      	ldrh	r3, [r7, #2]
 80046b6:	4013      	ands	r3, r2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d002      	beq.n	80046c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80046bc:	2301      	movs	r3, #1
 80046be:	73fb      	strb	r3, [r7, #15]
 80046c0:	e001      	b.n	80046c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80046c2:	2300      	movs	r3, #0
 80046c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80046c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3714      	adds	r7, #20
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bc80      	pop	{r7}
 80046d0:	4770      	bx	lr

080046d2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046d2:	b480      	push	{r7}
 80046d4:	b083      	sub	sp, #12
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
 80046da:	460b      	mov	r3, r1
 80046dc:	807b      	strh	r3, [r7, #2]
 80046de:	4613      	mov	r3, r2
 80046e0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80046e2:	787b      	ldrb	r3, [r7, #1]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d003      	beq.n	80046f0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046e8:	887a      	ldrh	r2, [r7, #2]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80046ee:	e003      	b.n	80046f8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80046f0:	887b      	ldrh	r3, [r7, #2]
 80046f2:	041a      	lsls	r2, r3, #16
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	611a      	str	r2, [r3, #16]
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bc80      	pop	{r7}
 8004700:	4770      	bx	lr
	...

08004704 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	4603      	mov	r3, r0
 800470c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800470e:	4b08      	ldr	r3, [pc, #32]	; (8004730 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004710:	695a      	ldr	r2, [r3, #20]
 8004712:	88fb      	ldrh	r3, [r7, #6]
 8004714:	4013      	ands	r3, r2
 8004716:	2b00      	cmp	r3, #0
 8004718:	d006      	beq.n	8004728 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800471a:	4a05      	ldr	r2, [pc, #20]	; (8004730 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800471c:	88fb      	ldrh	r3, [r7, #6]
 800471e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004720:	88fb      	ldrh	r3, [r7, #6]
 8004722:	4618      	mov	r0, r3
 8004724:	f7fd fb91 	bl	8001e4a <HAL_GPIO_EXTI_Callback>
  }
}
 8004728:	bf00      	nop
 800472a:	3708      	adds	r7, #8
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	40010400 	.word	0x40010400

08004734 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d101      	bne.n	8004746 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e12b      	b.n	800499e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800474c:	b2db      	uxtb	r3, r3
 800474e:	2b00      	cmp	r3, #0
 8004750:	d106      	bne.n	8004760 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f7fe fb90 	bl	8002e80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2224      	movs	r2, #36	; 0x24
 8004764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f022 0201 	bic.w	r2, r2, #1
 8004776:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004786:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004796:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004798:	f001 fd06 	bl	80061a8 <HAL_RCC_GetPCLK1Freq>
 800479c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	4a81      	ldr	r2, [pc, #516]	; (80049a8 <HAL_I2C_Init+0x274>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d807      	bhi.n	80047b8 <HAL_I2C_Init+0x84>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	4a80      	ldr	r2, [pc, #512]	; (80049ac <HAL_I2C_Init+0x278>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	bf94      	ite	ls
 80047b0:	2301      	movls	r3, #1
 80047b2:	2300      	movhi	r3, #0
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	e006      	b.n	80047c6 <HAL_I2C_Init+0x92>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	4a7d      	ldr	r2, [pc, #500]	; (80049b0 <HAL_I2C_Init+0x27c>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	bf94      	ite	ls
 80047c0:	2301      	movls	r3, #1
 80047c2:	2300      	movhi	r3, #0
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d001      	beq.n	80047ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e0e7      	b.n	800499e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	4a78      	ldr	r2, [pc, #480]	; (80049b4 <HAL_I2C_Init+0x280>)
 80047d2:	fba2 2303 	umull	r2, r3, r2, r3
 80047d6:	0c9b      	lsrs	r3, r3, #18
 80047d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68ba      	ldr	r2, [r7, #8]
 80047ea:	430a      	orrs	r2, r1
 80047ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	6a1b      	ldr	r3, [r3, #32]
 80047f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	4a6a      	ldr	r2, [pc, #424]	; (80049a8 <HAL_I2C_Init+0x274>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d802      	bhi.n	8004808 <HAL_I2C_Init+0xd4>
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	3301      	adds	r3, #1
 8004806:	e009      	b.n	800481c <HAL_I2C_Init+0xe8>
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800480e:	fb02 f303 	mul.w	r3, r2, r3
 8004812:	4a69      	ldr	r2, [pc, #420]	; (80049b8 <HAL_I2C_Init+0x284>)
 8004814:	fba2 2303 	umull	r2, r3, r2, r3
 8004818:	099b      	lsrs	r3, r3, #6
 800481a:	3301      	adds	r3, #1
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	6812      	ldr	r2, [r2, #0]
 8004820:	430b      	orrs	r3, r1
 8004822:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	69db      	ldr	r3, [r3, #28]
 800482a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800482e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	495c      	ldr	r1, [pc, #368]	; (80049a8 <HAL_I2C_Init+0x274>)
 8004838:	428b      	cmp	r3, r1
 800483a:	d819      	bhi.n	8004870 <HAL_I2C_Init+0x13c>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	1e59      	subs	r1, r3, #1
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	005b      	lsls	r3, r3, #1
 8004846:	fbb1 f3f3 	udiv	r3, r1, r3
 800484a:	1c59      	adds	r1, r3, #1
 800484c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004850:	400b      	ands	r3, r1
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00a      	beq.n	800486c <HAL_I2C_Init+0x138>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	1e59      	subs	r1, r3, #1
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	005b      	lsls	r3, r3, #1
 8004860:	fbb1 f3f3 	udiv	r3, r1, r3
 8004864:	3301      	adds	r3, #1
 8004866:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800486a:	e051      	b.n	8004910 <HAL_I2C_Init+0x1dc>
 800486c:	2304      	movs	r3, #4
 800486e:	e04f      	b.n	8004910 <HAL_I2C_Init+0x1dc>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d111      	bne.n	800489c <HAL_I2C_Init+0x168>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	1e58      	subs	r0, r3, #1
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6859      	ldr	r1, [r3, #4]
 8004880:	460b      	mov	r3, r1
 8004882:	005b      	lsls	r3, r3, #1
 8004884:	440b      	add	r3, r1
 8004886:	fbb0 f3f3 	udiv	r3, r0, r3
 800488a:	3301      	adds	r3, #1
 800488c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004890:	2b00      	cmp	r3, #0
 8004892:	bf0c      	ite	eq
 8004894:	2301      	moveq	r3, #1
 8004896:	2300      	movne	r3, #0
 8004898:	b2db      	uxtb	r3, r3
 800489a:	e012      	b.n	80048c2 <HAL_I2C_Init+0x18e>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	1e58      	subs	r0, r3, #1
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6859      	ldr	r1, [r3, #4]
 80048a4:	460b      	mov	r3, r1
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	440b      	add	r3, r1
 80048aa:	0099      	lsls	r1, r3, #2
 80048ac:	440b      	add	r3, r1
 80048ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80048b2:	3301      	adds	r3, #1
 80048b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	bf0c      	ite	eq
 80048bc:	2301      	moveq	r3, #1
 80048be:	2300      	movne	r3, #0
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d001      	beq.n	80048ca <HAL_I2C_Init+0x196>
 80048c6:	2301      	movs	r3, #1
 80048c8:	e022      	b.n	8004910 <HAL_I2C_Init+0x1dc>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10e      	bne.n	80048f0 <HAL_I2C_Init+0x1bc>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	1e58      	subs	r0, r3, #1
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6859      	ldr	r1, [r3, #4]
 80048da:	460b      	mov	r3, r1
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	440b      	add	r3, r1
 80048e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80048e4:	3301      	adds	r3, #1
 80048e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048ee:	e00f      	b.n	8004910 <HAL_I2C_Init+0x1dc>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	1e58      	subs	r0, r3, #1
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6859      	ldr	r1, [r3, #4]
 80048f8:	460b      	mov	r3, r1
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	440b      	add	r3, r1
 80048fe:	0099      	lsls	r1, r3, #2
 8004900:	440b      	add	r3, r1
 8004902:	fbb0 f3f3 	udiv	r3, r0, r3
 8004906:	3301      	adds	r3, #1
 8004908:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800490c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004910:	6879      	ldr	r1, [r7, #4]
 8004912:	6809      	ldr	r1, [r1, #0]
 8004914:	4313      	orrs	r3, r2
 8004916:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	69da      	ldr	r2, [r3, #28]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	431a      	orrs	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	430a      	orrs	r2, r1
 8004932:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800493e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	6911      	ldr	r1, [r2, #16]
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	68d2      	ldr	r2, [r2, #12]
 800494a:	4311      	orrs	r1, r2
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	6812      	ldr	r2, [r2, #0]
 8004950:	430b      	orrs	r3, r1
 8004952:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	695a      	ldr	r2, [r3, #20]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	431a      	orrs	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	430a      	orrs	r2, r1
 800496e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f042 0201 	orr.w	r2, r2, #1
 800497e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2220      	movs	r2, #32
 800498a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	000186a0 	.word	0x000186a0
 80049ac:	001e847f 	.word	0x001e847f
 80049b0:	003d08ff 	.word	0x003d08ff
 80049b4:	431bde83 	.word	0x431bde83
 80049b8:	10624dd3 	.word	0x10624dd3

080049bc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b088      	sub	sp, #32
 80049c0:	af02      	add	r7, sp, #8
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	4608      	mov	r0, r1
 80049c6:	4611      	mov	r1, r2
 80049c8:	461a      	mov	r2, r3
 80049ca:	4603      	mov	r3, r0
 80049cc:	817b      	strh	r3, [r7, #10]
 80049ce:	460b      	mov	r3, r1
 80049d0:	813b      	strh	r3, [r7, #8]
 80049d2:	4613      	mov	r3, r2
 80049d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80049d6:	f7fe fd0f 	bl	80033f8 <HAL_GetTick>
 80049da:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	2b20      	cmp	r3, #32
 80049e6:	f040 80d9 	bne.w	8004b9c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	9300      	str	r3, [sp, #0]
 80049ee:	2319      	movs	r3, #25
 80049f0:	2201      	movs	r2, #1
 80049f2:	496d      	ldr	r1, [pc, #436]	; (8004ba8 <HAL_I2C_Mem_Write+0x1ec>)
 80049f4:	68f8      	ldr	r0, [r7, #12]
 80049f6:	f000 fdef 	bl	80055d8 <I2C_WaitOnFlagUntilTimeout>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d001      	beq.n	8004a04 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004a00:	2302      	movs	r3, #2
 8004a02:	e0cc      	b.n	8004b9e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d101      	bne.n	8004a12 <HAL_I2C_Mem_Write+0x56>
 8004a0e:	2302      	movs	r3, #2
 8004a10:	e0c5      	b.n	8004b9e <HAL_I2C_Mem_Write+0x1e2>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0301 	and.w	r3, r3, #1
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d007      	beq.n	8004a38 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f042 0201 	orr.w	r2, r2, #1
 8004a36:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a46:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2221      	movs	r2, #33	; 0x21
 8004a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2240      	movs	r2, #64	; 0x40
 8004a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6a3a      	ldr	r2, [r7, #32]
 8004a62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004a68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a6e:	b29a      	uxth	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	4a4d      	ldr	r2, [pc, #308]	; (8004bac <HAL_I2C_Mem_Write+0x1f0>)
 8004a78:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a7a:	88f8      	ldrh	r0, [r7, #6]
 8004a7c:	893a      	ldrh	r2, [r7, #8]
 8004a7e:	8979      	ldrh	r1, [r7, #10]
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	9301      	str	r3, [sp, #4]
 8004a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a86:	9300      	str	r3, [sp, #0]
 8004a88:	4603      	mov	r3, r0
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f000 fc26 	bl	80052dc <I2C_RequestMemoryWrite>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d052      	beq.n	8004b3c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e081      	b.n	8004b9e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a9e:	68f8      	ldr	r0, [r7, #12]
 8004aa0:	f000 fe70 	bl	8005784 <I2C_WaitOnTXEFlagUntilTimeout>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00d      	beq.n	8004ac6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aae:	2b04      	cmp	r3, #4
 8004ab0:	d107      	bne.n	8004ac2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ac0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e06b      	b.n	8004b9e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aca:	781a      	ldrb	r2, [r3, #0]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad6:	1c5a      	adds	r2, r3, #1
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	3b01      	subs	r3, #1
 8004af0:	b29a      	uxth	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	695b      	ldr	r3, [r3, #20]
 8004afc:	f003 0304 	and.w	r3, r3, #4
 8004b00:	2b04      	cmp	r3, #4
 8004b02:	d11b      	bne.n	8004b3c <HAL_I2C_Mem_Write+0x180>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d017      	beq.n	8004b3c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b10:	781a      	ldrb	r2, [r3, #0]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1c:	1c5a      	adds	r2, r3, #1
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b26:	3b01      	subs	r3, #1
 8004b28:	b29a      	uxth	r2, r3
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	3b01      	subs	r3, #1
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1aa      	bne.n	8004a9a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b44:	697a      	ldr	r2, [r7, #20]
 8004b46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f000 fe5c 	bl	8005806 <I2C_WaitOnBTFFlagUntilTimeout>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00d      	beq.n	8004b70 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b58:	2b04      	cmp	r3, #4
 8004b5a:	d107      	bne.n	8004b6c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b6a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e016      	b.n	8004b9e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2220      	movs	r2, #32
 8004b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	e000      	b.n	8004b9e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004b9c:	2302      	movs	r3, #2
  }
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3718      	adds	r7, #24
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	00100002 	.word	0x00100002
 8004bac:	ffff0000 	.word	0xffff0000

08004bb0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b08c      	sub	sp, #48	; 0x30
 8004bb4:	af02      	add	r7, sp, #8
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	4608      	mov	r0, r1
 8004bba:	4611      	mov	r1, r2
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	817b      	strh	r3, [r7, #10]
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	813b      	strh	r3, [r7, #8]
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004bce:	f7fe fc13 	bl	80033f8 <HAL_GetTick>
 8004bd2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	2b20      	cmp	r3, #32
 8004bde:	f040 8244 	bne.w	800506a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be4:	9300      	str	r3, [sp, #0]
 8004be6:	2319      	movs	r3, #25
 8004be8:	2201      	movs	r2, #1
 8004bea:	4982      	ldr	r1, [pc, #520]	; (8004df4 <HAL_I2C_Mem_Read+0x244>)
 8004bec:	68f8      	ldr	r0, [r7, #12]
 8004bee:	f000 fcf3 	bl	80055d8 <I2C_WaitOnFlagUntilTimeout>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d001      	beq.n	8004bfc <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	e237      	b.n	800506c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d101      	bne.n	8004c0a <HAL_I2C_Mem_Read+0x5a>
 8004c06:	2302      	movs	r3, #2
 8004c08:	e230      	b.n	800506c <HAL_I2C_Mem_Read+0x4bc>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0301 	and.w	r3, r3, #1
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d007      	beq.n	8004c30 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f042 0201 	orr.w	r2, r2, #1
 8004c2e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c3e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2222      	movs	r2, #34	; 0x22
 8004c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2240      	movs	r2, #64	; 0x40
 8004c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004c60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c66:	b29a      	uxth	r2, r3
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	4a62      	ldr	r2, [pc, #392]	; (8004df8 <HAL_I2C_Mem_Read+0x248>)
 8004c70:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c72:	88f8      	ldrh	r0, [r7, #6]
 8004c74:	893a      	ldrh	r2, [r7, #8]
 8004c76:	8979      	ldrh	r1, [r7, #10]
 8004c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7a:	9301      	str	r3, [sp, #4]
 8004c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c7e:	9300      	str	r3, [sp, #0]
 8004c80:	4603      	mov	r3, r0
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	f000 fbc0 	bl	8005408 <I2C_RequestMemoryRead>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d001      	beq.n	8004c92 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e1ec      	b.n	800506c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d113      	bne.n	8004cc2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	61fb      	str	r3, [r7, #28]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	695b      	ldr	r3, [r3, #20]
 8004ca4:	61fb      	str	r3, [r7, #28]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	699b      	ldr	r3, [r3, #24]
 8004cac:	61fb      	str	r3, [r7, #28]
 8004cae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cbe:	601a      	str	r2, [r3, #0]
 8004cc0:	e1c0      	b.n	8005044 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d11e      	bne.n	8004d08 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cd8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004cda:	b672      	cpsid	i
}
 8004cdc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cde:	2300      	movs	r3, #0
 8004ce0:	61bb      	str	r3, [r7, #24]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	695b      	ldr	r3, [r3, #20]
 8004ce8:	61bb      	str	r3, [r7, #24]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	61bb      	str	r3, [r7, #24]
 8004cf2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d02:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004d04:	b662      	cpsie	i
}
 8004d06:	e035      	b.n	8004d74 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d11e      	bne.n	8004d4e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d1e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004d20:	b672      	cpsid	i
}
 8004d22:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d24:	2300      	movs	r3, #0
 8004d26:	617b      	str	r3, [r7, #20]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	617b      	str	r3, [r7, #20]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	699b      	ldr	r3, [r3, #24]
 8004d36:	617b      	str	r3, [r7, #20]
 8004d38:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d48:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004d4a:	b662      	cpsie	i
}
 8004d4c:	e012      	b.n	8004d74 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d5c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d5e:	2300      	movs	r3, #0
 8004d60:	613b      	str	r3, [r7, #16]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	695b      	ldr	r3, [r3, #20]
 8004d68:	613b      	str	r3, [r7, #16]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	613b      	str	r3, [r7, #16]
 8004d72:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004d74:	e166      	b.n	8005044 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d7a:	2b03      	cmp	r3, #3
 8004d7c:	f200 811f 	bhi.w	8004fbe <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d123      	bne.n	8004dd0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d8a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	f000 fd7b 	bl	8005888 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d001      	beq.n	8004d9c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e167      	b.n	800506c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	691a      	ldr	r2, [r3, #16]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da6:	b2d2      	uxtb	r2, r2
 8004da8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dae:	1c5a      	adds	r2, r3, #1
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db8:	3b01      	subs	r3, #1
 8004dba:	b29a      	uxth	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004dce:	e139      	b.n	8005044 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d152      	bne.n	8004e7e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dda:	9300      	str	r3, [sp, #0]
 8004ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dde:	2200      	movs	r2, #0
 8004de0:	4906      	ldr	r1, [pc, #24]	; (8004dfc <HAL_I2C_Mem_Read+0x24c>)
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	f000 fbf8 	bl	80055d8 <I2C_WaitOnFlagUntilTimeout>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d008      	beq.n	8004e00 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e13c      	b.n	800506c <HAL_I2C_Mem_Read+0x4bc>
 8004df2:	bf00      	nop
 8004df4:	00100002 	.word	0x00100002
 8004df8:	ffff0000 	.word	0xffff0000
 8004dfc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004e00:	b672      	cpsid	i
}
 8004e02:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	691a      	ldr	r2, [r3, #16]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1e:	b2d2      	uxtb	r2, r2
 8004e20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e26:	1c5a      	adds	r2, r3, #1
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e30:	3b01      	subs	r3, #1
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004e46:	b662      	cpsie	i
}
 8004e48:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	691a      	ldr	r2, [r3, #16]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e54:	b2d2      	uxtb	r2, r2
 8004e56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5c:	1c5a      	adds	r2, r3, #1
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e66:	3b01      	subs	r3, #1
 8004e68:	b29a      	uxth	r2, r3
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	3b01      	subs	r3, #1
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e7c:	e0e2      	b.n	8005044 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e80:	9300      	str	r3, [sp, #0]
 8004e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e84:	2200      	movs	r2, #0
 8004e86:	497b      	ldr	r1, [pc, #492]	; (8005074 <HAL_I2C_Mem_Read+0x4c4>)
 8004e88:	68f8      	ldr	r0, [r7, #12]
 8004e8a:	f000 fba5 	bl	80055d8 <I2C_WaitOnFlagUntilTimeout>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d001      	beq.n	8004e98 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e0e9      	b.n	800506c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ea6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004ea8:	b672      	cpsid	i
}
 8004eaa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	691a      	ldr	r2, [r3, #16]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb6:	b2d2      	uxtb	r2, r2
 8004eb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebe:	1c5a      	adds	r2, r3, #1
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	b29a      	uxth	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	b29a      	uxth	r2, r3
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004ede:	4b66      	ldr	r3, [pc, #408]	; (8005078 <HAL_I2C_Mem_Read+0x4c8>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	08db      	lsrs	r3, r3, #3
 8004ee4:	4a65      	ldr	r2, [pc, #404]	; (800507c <HAL_I2C_Mem_Read+0x4cc>)
 8004ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eea:	0a1a      	lsrs	r2, r3, #8
 8004eec:	4613      	mov	r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	4413      	add	r3, r2
 8004ef2:	00da      	lsls	r2, r3, #3
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004ef8:	6a3b      	ldr	r3, [r7, #32]
 8004efa:	3b01      	subs	r3, #1
 8004efc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004efe:	6a3b      	ldr	r3, [r7, #32]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d118      	bne.n	8004f36 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2220      	movs	r2, #32
 8004f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1e:	f043 0220 	orr.w	r2, r3, #32
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004f26:	b662      	cpsie	i
}
 8004f28:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e09a      	b.n	800506c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	695b      	ldr	r3, [r3, #20]
 8004f3c:	f003 0304 	and.w	r3, r3, #4
 8004f40:	2b04      	cmp	r3, #4
 8004f42:	d1d9      	bne.n	8004ef8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	691a      	ldr	r2, [r3, #16]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5e:	b2d2      	uxtb	r2, r2
 8004f60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f66:	1c5a      	adds	r2, r3, #1
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f70:	3b01      	subs	r3, #1
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	b29a      	uxth	r2, r3
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004f86:	b662      	cpsie	i
}
 8004f88:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	691a      	ldr	r2, [r3, #16]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f94:	b2d2      	uxtb	r2, r2
 8004f96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9c:	1c5a      	adds	r2, r3, #1
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	b29a      	uxth	r2, r3
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004fbc:	e042      	b.n	8005044 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fc0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f000 fc60 	bl	8005888 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d001      	beq.n	8004fd2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e04c      	b.n	800506c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	691a      	ldr	r2, [r3, #16]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fdc:	b2d2      	uxtb	r2, r2
 8004fde:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe4:	1c5a      	adds	r2, r3, #1
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	b29a      	uxth	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	f003 0304 	and.w	r3, r3, #4
 800500e:	2b04      	cmp	r3, #4
 8005010:	d118      	bne.n	8005044 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	691a      	ldr	r2, [r3, #16]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501c:	b2d2      	uxtb	r2, r2
 800501e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005024:	1c5a      	adds	r2, r3, #1
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800502e:	3b01      	subs	r3, #1
 8005030:	b29a      	uxth	r2, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800503a:	b29b      	uxth	r3, r3
 800503c:	3b01      	subs	r3, #1
 800503e:	b29a      	uxth	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005048:	2b00      	cmp	r3, #0
 800504a:	f47f ae94 	bne.w	8004d76 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2220      	movs	r2, #32
 8005052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005066:	2300      	movs	r3, #0
 8005068:	e000      	b.n	800506c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800506a:	2302      	movs	r3, #2
  }
}
 800506c:	4618      	mov	r0, r3
 800506e:	3728      	adds	r7, #40	; 0x28
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	00010004 	.word	0x00010004
 8005078:	20000000 	.word	0x20000000
 800507c:	14f8b589 	.word	0x14f8b589

08005080 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b08a      	sub	sp, #40	; 0x28
 8005084:	af02      	add	r7, sp, #8
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	607a      	str	r2, [r7, #4]
 800508a:	603b      	str	r3, [r7, #0]
 800508c:	460b      	mov	r3, r1
 800508e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005090:	f7fe f9b2 	bl	80033f8 <HAL_GetTick>
 8005094:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8005096:	2301      	movs	r3, #1
 8005098:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b20      	cmp	r3, #32
 80050a4:	f040 8111 	bne.w	80052ca <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	9300      	str	r3, [sp, #0]
 80050ac:	2319      	movs	r3, #25
 80050ae:	2201      	movs	r2, #1
 80050b0:	4988      	ldr	r1, [pc, #544]	; (80052d4 <HAL_I2C_IsDeviceReady+0x254>)
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f000 fa90 	bl	80055d8 <I2C_WaitOnFlagUntilTimeout>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d001      	beq.n	80050c2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80050be:	2302      	movs	r3, #2
 80050c0:	e104      	b.n	80052cc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d101      	bne.n	80050d0 <HAL_I2C_IsDeviceReady+0x50>
 80050cc:	2302      	movs	r3, #2
 80050ce:	e0fd      	b.n	80052cc <HAL_I2C_IsDeviceReady+0x24c>
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d007      	beq.n	80050f6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f042 0201 	orr.w	r2, r2, #1
 80050f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005104:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2224      	movs	r2, #36	; 0x24
 800510a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	4a70      	ldr	r2, [pc, #448]	; (80052d8 <HAL_I2C_IsDeviceReady+0x258>)
 8005118:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005128:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	9300      	str	r3, [sp, #0]
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	2200      	movs	r2, #0
 8005132:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005136:	68f8      	ldr	r0, [r7, #12]
 8005138:	f000 fa4e 	bl	80055d8 <I2C_WaitOnFlagUntilTimeout>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00d      	beq.n	800515e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800514c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005150:	d103      	bne.n	800515a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005158:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e0b6      	b.n	80052cc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800515e:	897b      	ldrh	r3, [r7, #10]
 8005160:	b2db      	uxtb	r3, r3
 8005162:	461a      	mov	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800516c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800516e:	f7fe f943 	bl	80033f8 <HAL_GetTick>
 8005172:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	f003 0302 	and.w	r3, r3, #2
 800517e:	2b02      	cmp	r3, #2
 8005180:	bf0c      	ite	eq
 8005182:	2301      	moveq	r3, #1
 8005184:	2300      	movne	r3, #0
 8005186:	b2db      	uxtb	r3, r3
 8005188:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	695b      	ldr	r3, [r3, #20]
 8005190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005194:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005198:	bf0c      	ite	eq
 800519a:	2301      	moveq	r3, #1
 800519c:	2300      	movne	r3, #0
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80051a2:	e025      	b.n	80051f0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80051a4:	f7fe f928 	bl	80033f8 <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	683a      	ldr	r2, [r7, #0]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d302      	bcc.n	80051ba <HAL_I2C_IsDeviceReady+0x13a>
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d103      	bne.n	80051c2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	22a0      	movs	r2, #160	; 0xa0
 80051be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	695b      	ldr	r3, [r3, #20]
 80051c8:	f003 0302 	and.w	r3, r3, #2
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	bf0c      	ite	eq
 80051d0:	2301      	moveq	r3, #1
 80051d2:	2300      	movne	r3, #0
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051e6:	bf0c      	ite	eq
 80051e8:	2301      	moveq	r3, #1
 80051ea:	2300      	movne	r3, #0
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2ba0      	cmp	r3, #160	; 0xa0
 80051fa:	d005      	beq.n	8005208 <HAL_I2C_IsDeviceReady+0x188>
 80051fc:	7dfb      	ldrb	r3, [r7, #23]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d102      	bne.n	8005208 <HAL_I2C_IsDeviceReady+0x188>
 8005202:	7dbb      	ldrb	r3, [r7, #22]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d0cd      	beq.n	80051a4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2220      	movs	r2, #32
 800520c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	2b02      	cmp	r3, #2
 800521c:	d129      	bne.n	8005272 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800522c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800522e:	2300      	movs	r3, #0
 8005230:	613b      	str	r3, [r7, #16]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	695b      	ldr	r3, [r3, #20]
 8005238:	613b      	str	r3, [r7, #16]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	613b      	str	r3, [r7, #16]
 8005242:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	9300      	str	r3, [sp, #0]
 8005248:	2319      	movs	r3, #25
 800524a:	2201      	movs	r2, #1
 800524c:	4921      	ldr	r1, [pc, #132]	; (80052d4 <HAL_I2C_IsDeviceReady+0x254>)
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f000 f9c2 	bl	80055d8 <I2C_WaitOnFlagUntilTimeout>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d001      	beq.n	800525e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e036      	b.n	80052cc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2220      	movs	r2, #32
 8005262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800526e:	2300      	movs	r3, #0
 8005270:	e02c      	b.n	80052cc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005280:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800528a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	9300      	str	r3, [sp, #0]
 8005290:	2319      	movs	r3, #25
 8005292:	2201      	movs	r2, #1
 8005294:	490f      	ldr	r1, [pc, #60]	; (80052d4 <HAL_I2C_IsDeviceReady+0x254>)
 8005296:	68f8      	ldr	r0, [r7, #12]
 8005298:	f000 f99e 	bl	80055d8 <I2C_WaitOnFlagUntilTimeout>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d001      	beq.n	80052a6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e012      	b.n	80052cc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	3301      	adds	r3, #1
 80052aa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80052ac:	69ba      	ldr	r2, [r7, #24]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	f4ff af32 	bcc.w	800511a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2220      	movs	r2, #32
 80052ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e000      	b.n	80052cc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80052ca:	2302      	movs	r3, #2
  }
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3720      	adds	r7, #32
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	00100002 	.word	0x00100002
 80052d8:	ffff0000 	.word	0xffff0000

080052dc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b088      	sub	sp, #32
 80052e0:	af02      	add	r7, sp, #8
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	4608      	mov	r0, r1
 80052e6:	4611      	mov	r1, r2
 80052e8:	461a      	mov	r2, r3
 80052ea:	4603      	mov	r3, r0
 80052ec:	817b      	strh	r3, [r7, #10]
 80052ee:	460b      	mov	r3, r1
 80052f0:	813b      	strh	r3, [r7, #8]
 80052f2:	4613      	mov	r3, r2
 80052f4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005304:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005308:	9300      	str	r3, [sp, #0]
 800530a:	6a3b      	ldr	r3, [r7, #32]
 800530c:	2200      	movs	r2, #0
 800530e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005312:	68f8      	ldr	r0, [r7, #12]
 8005314:	f000 f960 	bl	80055d8 <I2C_WaitOnFlagUntilTimeout>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00d      	beq.n	800533a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005328:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800532c:	d103      	bne.n	8005336 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005334:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e05f      	b.n	80053fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800533a:	897b      	ldrh	r3, [r7, #10]
 800533c:	b2db      	uxtb	r3, r3
 800533e:	461a      	mov	r2, r3
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005348:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800534a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534c:	6a3a      	ldr	r2, [r7, #32]
 800534e:	492d      	ldr	r1, [pc, #180]	; (8005404 <I2C_RequestMemoryWrite+0x128>)
 8005350:	68f8      	ldr	r0, [r7, #12]
 8005352:	f000 f998 	bl	8005686 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d001      	beq.n	8005360 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e04c      	b.n	80053fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005360:	2300      	movs	r3, #0
 8005362:	617b      	str	r3, [r7, #20]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	617b      	str	r3, [r7, #20]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	699b      	ldr	r3, [r3, #24]
 8005372:	617b      	str	r3, [r7, #20]
 8005374:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005378:	6a39      	ldr	r1, [r7, #32]
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	f000 fa02 	bl	8005784 <I2C_WaitOnTXEFlagUntilTimeout>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00d      	beq.n	80053a2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538a:	2b04      	cmp	r3, #4
 800538c:	d107      	bne.n	800539e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800539c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e02b      	b.n	80053fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80053a2:	88fb      	ldrh	r3, [r7, #6]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d105      	bne.n	80053b4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053a8:	893b      	ldrh	r3, [r7, #8]
 80053aa:	b2da      	uxtb	r2, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	611a      	str	r2, [r3, #16]
 80053b2:	e021      	b.n	80053f8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80053b4:	893b      	ldrh	r3, [r7, #8]
 80053b6:	0a1b      	lsrs	r3, r3, #8
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	b2da      	uxtb	r2, r3
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053c4:	6a39      	ldr	r1, [r7, #32]
 80053c6:	68f8      	ldr	r0, [r7, #12]
 80053c8:	f000 f9dc 	bl	8005784 <I2C_WaitOnTXEFlagUntilTimeout>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00d      	beq.n	80053ee <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d6:	2b04      	cmp	r3, #4
 80053d8:	d107      	bne.n	80053ea <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e005      	b.n	80053fa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053ee:	893b      	ldrh	r3, [r7, #8]
 80053f0:	b2da      	uxtb	r2, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3718      	adds	r7, #24
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	00010002 	.word	0x00010002

08005408 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b088      	sub	sp, #32
 800540c:	af02      	add	r7, sp, #8
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	4608      	mov	r0, r1
 8005412:	4611      	mov	r1, r2
 8005414:	461a      	mov	r2, r3
 8005416:	4603      	mov	r3, r0
 8005418:	817b      	strh	r3, [r7, #10]
 800541a:	460b      	mov	r3, r1
 800541c:	813b      	strh	r3, [r7, #8]
 800541e:	4613      	mov	r3, r2
 8005420:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005430:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005440:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005444:	9300      	str	r3, [sp, #0]
 8005446:	6a3b      	ldr	r3, [r7, #32]
 8005448:	2200      	movs	r2, #0
 800544a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800544e:	68f8      	ldr	r0, [r7, #12]
 8005450:	f000 f8c2 	bl	80055d8 <I2C_WaitOnFlagUntilTimeout>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00d      	beq.n	8005476 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005464:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005468:	d103      	bne.n	8005472 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005470:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e0aa      	b.n	80055cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005476:	897b      	ldrh	r3, [r7, #10]
 8005478:	b2db      	uxtb	r3, r3
 800547a:	461a      	mov	r2, r3
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005484:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005488:	6a3a      	ldr	r2, [r7, #32]
 800548a:	4952      	ldr	r1, [pc, #328]	; (80055d4 <I2C_RequestMemoryRead+0x1cc>)
 800548c:	68f8      	ldr	r0, [r7, #12]
 800548e:	f000 f8fa 	bl	8005686 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d001      	beq.n	800549c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e097      	b.n	80055cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800549c:	2300      	movs	r3, #0
 800549e:	617b      	str	r3, [r7, #20]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	617b      	str	r3, [r7, #20]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	699b      	ldr	r3, [r3, #24]
 80054ae:	617b      	str	r3, [r7, #20]
 80054b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054b4:	6a39      	ldr	r1, [r7, #32]
 80054b6:	68f8      	ldr	r0, [r7, #12]
 80054b8:	f000 f964 	bl	8005784 <I2C_WaitOnTXEFlagUntilTimeout>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00d      	beq.n	80054de <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c6:	2b04      	cmp	r3, #4
 80054c8:	d107      	bne.n	80054da <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e076      	b.n	80055cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054de:	88fb      	ldrh	r3, [r7, #6]
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d105      	bne.n	80054f0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054e4:	893b      	ldrh	r3, [r7, #8]
 80054e6:	b2da      	uxtb	r2, r3
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	611a      	str	r2, [r3, #16]
 80054ee:	e021      	b.n	8005534 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80054f0:	893b      	ldrh	r3, [r7, #8]
 80054f2:	0a1b      	lsrs	r3, r3, #8
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	b2da      	uxtb	r2, r3
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005500:	6a39      	ldr	r1, [r7, #32]
 8005502:	68f8      	ldr	r0, [r7, #12]
 8005504:	f000 f93e 	bl	8005784 <I2C_WaitOnTXEFlagUntilTimeout>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00d      	beq.n	800552a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005512:	2b04      	cmp	r3, #4
 8005514:	d107      	bne.n	8005526 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005524:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e050      	b.n	80055cc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800552a:	893b      	ldrh	r3, [r7, #8]
 800552c:	b2da      	uxtb	r2, r3
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005536:	6a39      	ldr	r1, [r7, #32]
 8005538:	68f8      	ldr	r0, [r7, #12]
 800553a:	f000 f923 	bl	8005784 <I2C_WaitOnTXEFlagUntilTimeout>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00d      	beq.n	8005560 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005548:	2b04      	cmp	r3, #4
 800554a:	d107      	bne.n	800555c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800555a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e035      	b.n	80055cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800556e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005572:	9300      	str	r3, [sp, #0]
 8005574:	6a3b      	ldr	r3, [r7, #32]
 8005576:	2200      	movs	r2, #0
 8005578:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800557c:	68f8      	ldr	r0, [r7, #12]
 800557e:	f000 f82b 	bl	80055d8 <I2C_WaitOnFlagUntilTimeout>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00d      	beq.n	80055a4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005596:	d103      	bne.n	80055a0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800559e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e013      	b.n	80055cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80055a4:	897b      	ldrh	r3, [r7, #10]
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	f043 0301 	orr.w	r3, r3, #1
 80055ac:	b2da      	uxtb	r2, r3
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b6:	6a3a      	ldr	r2, [r7, #32]
 80055b8:	4906      	ldr	r1, [pc, #24]	; (80055d4 <I2C_RequestMemoryRead+0x1cc>)
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	f000 f863 	bl	8005686 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d001      	beq.n	80055ca <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e000      	b.n	80055cc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3718      	adds	r7, #24
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	00010002 	.word	0x00010002

080055d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	603b      	str	r3, [r7, #0]
 80055e4:	4613      	mov	r3, r2
 80055e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055e8:	e025      	b.n	8005636 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f0:	d021      	beq.n	8005636 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055f2:	f7fd ff01 	bl	80033f8 <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	683a      	ldr	r2, [r7, #0]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d302      	bcc.n	8005608 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d116      	bne.n	8005636 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2220      	movs	r2, #32
 8005612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005622:	f043 0220 	orr.w	r2, r3, #32
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e023      	b.n	800567e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	0c1b      	lsrs	r3, r3, #16
 800563a:	b2db      	uxtb	r3, r3
 800563c:	2b01      	cmp	r3, #1
 800563e:	d10d      	bne.n	800565c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	43da      	mvns	r2, r3
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	4013      	ands	r3, r2
 800564c:	b29b      	uxth	r3, r3
 800564e:	2b00      	cmp	r3, #0
 8005650:	bf0c      	ite	eq
 8005652:	2301      	moveq	r3, #1
 8005654:	2300      	movne	r3, #0
 8005656:	b2db      	uxtb	r3, r3
 8005658:	461a      	mov	r2, r3
 800565a:	e00c      	b.n	8005676 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	43da      	mvns	r2, r3
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	4013      	ands	r3, r2
 8005668:	b29b      	uxth	r3, r3
 800566a:	2b00      	cmp	r3, #0
 800566c:	bf0c      	ite	eq
 800566e:	2301      	moveq	r3, #1
 8005670:	2300      	movne	r3, #0
 8005672:	b2db      	uxtb	r3, r3
 8005674:	461a      	mov	r2, r3
 8005676:	79fb      	ldrb	r3, [r7, #7]
 8005678:	429a      	cmp	r2, r3
 800567a:	d0b6      	beq.n	80055ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005686:	b580      	push	{r7, lr}
 8005688:	b084      	sub	sp, #16
 800568a:	af00      	add	r7, sp, #0
 800568c:	60f8      	str	r0, [r7, #12]
 800568e:	60b9      	str	r1, [r7, #8]
 8005690:	607a      	str	r2, [r7, #4]
 8005692:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005694:	e051      	b.n	800573a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	695b      	ldr	r3, [r3, #20]
 800569c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056a4:	d123      	bne.n	80056ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056b4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056be:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2220      	movs	r2, #32
 80056ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056da:	f043 0204 	orr.w	r2, r3, #4
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e046      	b.n	800577c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f4:	d021      	beq.n	800573a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056f6:	f7fd fe7f 	bl	80033f8 <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	429a      	cmp	r2, r3
 8005704:	d302      	bcc.n	800570c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d116      	bne.n	800573a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2200      	movs	r2, #0
 8005710:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2220      	movs	r2, #32
 8005716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005726:	f043 0220 	orr.w	r2, r3, #32
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e020      	b.n	800577c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	0c1b      	lsrs	r3, r3, #16
 800573e:	b2db      	uxtb	r3, r3
 8005740:	2b01      	cmp	r3, #1
 8005742:	d10c      	bne.n	800575e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	43da      	mvns	r2, r3
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	4013      	ands	r3, r2
 8005750:	b29b      	uxth	r3, r3
 8005752:	2b00      	cmp	r3, #0
 8005754:	bf14      	ite	ne
 8005756:	2301      	movne	r3, #1
 8005758:	2300      	moveq	r3, #0
 800575a:	b2db      	uxtb	r3, r3
 800575c:	e00b      	b.n	8005776 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	43da      	mvns	r2, r3
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	4013      	ands	r3, r2
 800576a:	b29b      	uxth	r3, r3
 800576c:	2b00      	cmp	r3, #0
 800576e:	bf14      	ite	ne
 8005770:	2301      	movne	r3, #1
 8005772:	2300      	moveq	r3, #0
 8005774:	b2db      	uxtb	r3, r3
 8005776:	2b00      	cmp	r3, #0
 8005778:	d18d      	bne.n	8005696 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3710      	adds	r7, #16
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005790:	e02d      	b.n	80057ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005792:	68f8      	ldr	r0, [r7, #12]
 8005794:	f000 f8ce 	bl	8005934 <I2C_IsAcknowledgeFailed>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d001      	beq.n	80057a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e02d      	b.n	80057fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a8:	d021      	beq.n	80057ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057aa:	f7fd fe25 	bl	80033f8 <HAL_GetTick>
 80057ae:	4602      	mov	r2, r0
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	68ba      	ldr	r2, [r7, #8]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d302      	bcc.n	80057c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d116      	bne.n	80057ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2200      	movs	r2, #0
 80057c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2220      	movs	r2, #32
 80057ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057da:	f043 0220 	orr.w	r2, r3, #32
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e007      	b.n	80057fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	695b      	ldr	r3, [r3, #20]
 80057f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057f8:	2b80      	cmp	r3, #128	; 0x80
 80057fa:	d1ca      	bne.n	8005792 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3710      	adds	r7, #16
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}

08005806 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005806:	b580      	push	{r7, lr}
 8005808:	b084      	sub	sp, #16
 800580a:	af00      	add	r7, sp, #0
 800580c:	60f8      	str	r0, [r7, #12]
 800580e:	60b9      	str	r1, [r7, #8]
 8005810:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005812:	e02d      	b.n	8005870 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005814:	68f8      	ldr	r0, [r7, #12]
 8005816:	f000 f88d 	bl	8005934 <I2C_IsAcknowledgeFailed>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d001      	beq.n	8005824 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e02d      	b.n	8005880 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800582a:	d021      	beq.n	8005870 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800582c:	f7fd fde4 	bl	80033f8 <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	68ba      	ldr	r2, [r7, #8]
 8005838:	429a      	cmp	r2, r3
 800583a:	d302      	bcc.n	8005842 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d116      	bne.n	8005870 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2220      	movs	r2, #32
 800584c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585c:	f043 0220 	orr.w	r2, r3, #32
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e007      	b.n	8005880 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	f003 0304 	and.w	r3, r3, #4
 800587a:	2b04      	cmp	r3, #4
 800587c:	d1ca      	bne.n	8005814 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3710      	adds	r7, #16
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005894:	e042      	b.n	800591c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	695b      	ldr	r3, [r3, #20]
 800589c:	f003 0310 	and.w	r3, r3, #16
 80058a0:	2b10      	cmp	r3, #16
 80058a2:	d119      	bne.n	80058d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f06f 0210 	mvn.w	r2, #16
 80058ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2220      	movs	r2, #32
 80058b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	e029      	b.n	800592c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058d8:	f7fd fd8e 	bl	80033f8 <HAL_GetTick>
 80058dc:	4602      	mov	r2, r0
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	68ba      	ldr	r2, [r7, #8]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d302      	bcc.n	80058ee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d116      	bne.n	800591c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2220      	movs	r2, #32
 80058f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005908:	f043 0220 	orr.w	r2, r3, #32
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e007      	b.n	800592c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	695b      	ldr	r3, [r3, #20]
 8005922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005926:	2b40      	cmp	r3, #64	; 0x40
 8005928:	d1b5      	bne.n	8005896 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	3710      	adds	r7, #16
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005946:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800594a:	d11b      	bne.n	8005984 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005954:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2220      	movs	r2, #32
 8005960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005970:	f043 0204 	orr.w	r2, r3, #4
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e000      	b.n	8005986 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	370c      	adds	r7, #12
 800598a:	46bd      	mov	sp, r7
 800598c:	bc80      	pop	{r7}
 800598e:	4770      	bx	lr

08005990 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	460b      	mov	r3, r1
 800599a:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800599c:	4b09      	ldr	r3, [pc, #36]	; (80059c4 <HAL_PWR_EnterSLEEPMode+0x34>)
 800599e:	691b      	ldr	r3, [r3, #16]
 80059a0:	4a08      	ldr	r2, [pc, #32]	; (80059c4 <HAL_PWR_EnterSLEEPMode+0x34>)
 80059a2:	f023 0304 	bic.w	r3, r3, #4
 80059a6:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80059a8:	78fb      	ldrb	r3, [r7, #3]
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d101      	bne.n	80059b2 <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80059ae:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 80059b0:	e002      	b.n	80059b8 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 80059b2:	bf40      	sev
    __WFE();
 80059b4:	bf20      	wfe
    __WFE();
 80059b6:	bf20      	wfe
}
 80059b8:	bf00      	nop
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	bc80      	pop	{r7}
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	e000ed00 	.word	0xe000ed00

080059c8 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 80059c8:	b480      	push	{r7}
 80059ca:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 80059cc:	4b04      	ldr	r3, [pc, #16]	; (80059e0 <HAL_PWR_EnableSleepOnExit+0x18>)
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	4a03      	ldr	r2, [pc, #12]	; (80059e0 <HAL_PWR_EnableSleepOnExit+0x18>)
 80059d2:	f043 0302 	orr.w	r3, r3, #2
 80059d6:	6113      	str	r3, [r2, #16]
}
 80059d8:	bf00      	nop
 80059da:	46bd      	mov	sp, r7
 80059dc:	bc80      	pop	{r7}
 80059de:	4770      	bx	lr
 80059e0:	e000ed00 	.word	0xe000ed00

080059e4 <HAL_PWR_DisableSleepOnExit>:
  * @note Clears SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
  *       re-enters SLEEP mode when an interruption handling is over.          
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 80059e4:	b480      	push	{r7}
 80059e6:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 80059e8:	4b04      	ldr	r3, [pc, #16]	; (80059fc <HAL_PWR_DisableSleepOnExit+0x18>)
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	4a03      	ldr	r2, [pc, #12]	; (80059fc <HAL_PWR_DisableSleepOnExit+0x18>)
 80059ee:	f023 0302 	bic.w	r3, r3, #2
 80059f2:	6113      	str	r3, [r2, #16]
}
 80059f4:	bf00      	nop
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bc80      	pop	{r7}
 80059fa:	4770      	bx	lr
 80059fc:	e000ed00 	.word	0xe000ed00

08005a00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b086      	sub	sp, #24
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d101      	bne.n	8005a12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e272      	b.n	8005ef8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0301 	and.w	r3, r3, #1
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	f000 8087 	beq.w	8005b2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a20:	4b92      	ldr	r3, [pc, #584]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	f003 030c 	and.w	r3, r3, #12
 8005a28:	2b04      	cmp	r3, #4
 8005a2a:	d00c      	beq.n	8005a46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005a2c:	4b8f      	ldr	r3, [pc, #572]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	f003 030c 	and.w	r3, r3, #12
 8005a34:	2b08      	cmp	r3, #8
 8005a36:	d112      	bne.n	8005a5e <HAL_RCC_OscConfig+0x5e>
 8005a38:	4b8c      	ldr	r3, [pc, #560]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a44:	d10b      	bne.n	8005a5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a46:	4b89      	ldr	r3, [pc, #548]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d06c      	beq.n	8005b2c <HAL_RCC_OscConfig+0x12c>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d168      	bne.n	8005b2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e24c      	b.n	8005ef8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a66:	d106      	bne.n	8005a76 <HAL_RCC_OscConfig+0x76>
 8005a68:	4b80      	ldr	r3, [pc, #512]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a7f      	ldr	r2, [pc, #508]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005a6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a72:	6013      	str	r3, [r2, #0]
 8005a74:	e02e      	b.n	8005ad4 <HAL_RCC_OscConfig+0xd4>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d10c      	bne.n	8005a98 <HAL_RCC_OscConfig+0x98>
 8005a7e:	4b7b      	ldr	r3, [pc, #492]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a7a      	ldr	r2, [pc, #488]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005a84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a88:	6013      	str	r3, [r2, #0]
 8005a8a:	4b78      	ldr	r3, [pc, #480]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a77      	ldr	r2, [pc, #476]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005a90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a94:	6013      	str	r3, [r2, #0]
 8005a96:	e01d      	b.n	8005ad4 <HAL_RCC_OscConfig+0xd4>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005aa0:	d10c      	bne.n	8005abc <HAL_RCC_OscConfig+0xbc>
 8005aa2:	4b72      	ldr	r3, [pc, #456]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a71      	ldr	r2, [pc, #452]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005aa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005aac:	6013      	str	r3, [r2, #0]
 8005aae:	4b6f      	ldr	r3, [pc, #444]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a6e      	ldr	r2, [pc, #440]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ab8:	6013      	str	r3, [r2, #0]
 8005aba:	e00b      	b.n	8005ad4 <HAL_RCC_OscConfig+0xd4>
 8005abc:	4b6b      	ldr	r3, [pc, #428]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a6a      	ldr	r2, [pc, #424]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005ac2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ac6:	6013      	str	r3, [r2, #0]
 8005ac8:	4b68      	ldr	r3, [pc, #416]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a67      	ldr	r2, [pc, #412]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005ace:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ad2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d013      	beq.n	8005b04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005adc:	f7fd fc8c 	bl	80033f8 <HAL_GetTick>
 8005ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ae2:	e008      	b.n	8005af6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ae4:	f7fd fc88 	bl	80033f8 <HAL_GetTick>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	2b64      	cmp	r3, #100	; 0x64
 8005af0:	d901      	bls.n	8005af6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e200      	b.n	8005ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005af6:	4b5d      	ldr	r3, [pc, #372]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d0f0      	beq.n	8005ae4 <HAL_RCC_OscConfig+0xe4>
 8005b02:	e014      	b.n	8005b2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b04:	f7fd fc78 	bl	80033f8 <HAL_GetTick>
 8005b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b0a:	e008      	b.n	8005b1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b0c:	f7fd fc74 	bl	80033f8 <HAL_GetTick>
 8005b10:	4602      	mov	r2, r0
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	2b64      	cmp	r3, #100	; 0x64
 8005b18:	d901      	bls.n	8005b1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e1ec      	b.n	8005ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b1e:	4b53      	ldr	r3, [pc, #332]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d1f0      	bne.n	8005b0c <HAL_RCC_OscConfig+0x10c>
 8005b2a:	e000      	b.n	8005b2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 0302 	and.w	r3, r3, #2
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d063      	beq.n	8005c02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b3a:	4b4c      	ldr	r3, [pc, #304]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	f003 030c 	and.w	r3, r3, #12
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00b      	beq.n	8005b5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005b46:	4b49      	ldr	r3, [pc, #292]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	f003 030c 	and.w	r3, r3, #12
 8005b4e:	2b08      	cmp	r3, #8
 8005b50:	d11c      	bne.n	8005b8c <HAL_RCC_OscConfig+0x18c>
 8005b52:	4b46      	ldr	r3, [pc, #280]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d116      	bne.n	8005b8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b5e:	4b43      	ldr	r3, [pc, #268]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 0302 	and.w	r3, r3, #2
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d005      	beq.n	8005b76 <HAL_RCC_OscConfig+0x176>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d001      	beq.n	8005b76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e1c0      	b.n	8005ef8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b76:	4b3d      	ldr	r3, [pc, #244]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	695b      	ldr	r3, [r3, #20]
 8005b82:	00db      	lsls	r3, r3, #3
 8005b84:	4939      	ldr	r1, [pc, #228]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005b86:	4313      	orrs	r3, r2
 8005b88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b8a:	e03a      	b.n	8005c02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d020      	beq.n	8005bd6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b94:	4b36      	ldr	r3, [pc, #216]	; (8005c70 <HAL_RCC_OscConfig+0x270>)
 8005b96:	2201      	movs	r2, #1
 8005b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b9a:	f7fd fc2d 	bl	80033f8 <HAL_GetTick>
 8005b9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ba0:	e008      	b.n	8005bb4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ba2:	f7fd fc29 	bl	80033f8 <HAL_GetTick>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d901      	bls.n	8005bb4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	e1a1      	b.n	8005ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bb4:	4b2d      	ldr	r3, [pc, #180]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0302 	and.w	r3, r3, #2
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d0f0      	beq.n	8005ba2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bc0:	4b2a      	ldr	r3, [pc, #168]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	695b      	ldr	r3, [r3, #20]
 8005bcc:	00db      	lsls	r3, r3, #3
 8005bce:	4927      	ldr	r1, [pc, #156]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	600b      	str	r3, [r1, #0]
 8005bd4:	e015      	b.n	8005c02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bd6:	4b26      	ldr	r3, [pc, #152]	; (8005c70 <HAL_RCC_OscConfig+0x270>)
 8005bd8:	2200      	movs	r2, #0
 8005bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bdc:	f7fd fc0c 	bl	80033f8 <HAL_GetTick>
 8005be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005be2:	e008      	b.n	8005bf6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005be4:	f7fd fc08 	bl	80033f8 <HAL_GetTick>
 8005be8:	4602      	mov	r2, r0
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	d901      	bls.n	8005bf6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e180      	b.n	8005ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bf6:	4b1d      	ldr	r3, [pc, #116]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 0302 	and.w	r3, r3, #2
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d1f0      	bne.n	8005be4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 0308 	and.w	r3, r3, #8
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d03a      	beq.n	8005c84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	699b      	ldr	r3, [r3, #24]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d019      	beq.n	8005c4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c16:	4b17      	ldr	r3, [pc, #92]	; (8005c74 <HAL_RCC_OscConfig+0x274>)
 8005c18:	2201      	movs	r2, #1
 8005c1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c1c:	f7fd fbec 	bl	80033f8 <HAL_GetTick>
 8005c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c22:	e008      	b.n	8005c36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c24:	f7fd fbe8 	bl	80033f8 <HAL_GetTick>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d901      	bls.n	8005c36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	e160      	b.n	8005ef8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c36:	4b0d      	ldr	r3, [pc, #52]	; (8005c6c <HAL_RCC_OscConfig+0x26c>)
 8005c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3a:	f003 0302 	and.w	r3, r3, #2
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d0f0      	beq.n	8005c24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005c42:	2001      	movs	r0, #1
 8005c44:	f000 fad8 	bl	80061f8 <RCC_Delay>
 8005c48:	e01c      	b.n	8005c84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c4a:	4b0a      	ldr	r3, [pc, #40]	; (8005c74 <HAL_RCC_OscConfig+0x274>)
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c50:	f7fd fbd2 	bl	80033f8 <HAL_GetTick>
 8005c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c56:	e00f      	b.n	8005c78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c58:	f7fd fbce 	bl	80033f8 <HAL_GetTick>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d908      	bls.n	8005c78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e146      	b.n	8005ef8 <HAL_RCC_OscConfig+0x4f8>
 8005c6a:	bf00      	nop
 8005c6c:	40021000 	.word	0x40021000
 8005c70:	42420000 	.word	0x42420000
 8005c74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c78:	4b92      	ldr	r3, [pc, #584]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7c:	f003 0302 	and.w	r3, r3, #2
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d1e9      	bne.n	8005c58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0304 	and.w	r3, r3, #4
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f000 80a6 	beq.w	8005dde <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c92:	2300      	movs	r3, #0
 8005c94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c96:	4b8b      	ldr	r3, [pc, #556]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005c98:	69db      	ldr	r3, [r3, #28]
 8005c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d10d      	bne.n	8005cbe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ca2:	4b88      	ldr	r3, [pc, #544]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005ca4:	69db      	ldr	r3, [r3, #28]
 8005ca6:	4a87      	ldr	r2, [pc, #540]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cac:	61d3      	str	r3, [r2, #28]
 8005cae:	4b85      	ldr	r3, [pc, #532]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005cb0:	69db      	ldr	r3, [r3, #28]
 8005cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cb6:	60bb      	str	r3, [r7, #8]
 8005cb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cbe:	4b82      	ldr	r3, [pc, #520]	; (8005ec8 <HAL_RCC_OscConfig+0x4c8>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d118      	bne.n	8005cfc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cca:	4b7f      	ldr	r3, [pc, #508]	; (8005ec8 <HAL_RCC_OscConfig+0x4c8>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a7e      	ldr	r2, [pc, #504]	; (8005ec8 <HAL_RCC_OscConfig+0x4c8>)
 8005cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cd6:	f7fd fb8f 	bl	80033f8 <HAL_GetTick>
 8005cda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cdc:	e008      	b.n	8005cf0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cde:	f7fd fb8b 	bl	80033f8 <HAL_GetTick>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	1ad3      	subs	r3, r2, r3
 8005ce8:	2b64      	cmp	r3, #100	; 0x64
 8005cea:	d901      	bls.n	8005cf0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005cec:	2303      	movs	r3, #3
 8005cee:	e103      	b.n	8005ef8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cf0:	4b75      	ldr	r3, [pc, #468]	; (8005ec8 <HAL_RCC_OscConfig+0x4c8>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d0f0      	beq.n	8005cde <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d106      	bne.n	8005d12 <HAL_RCC_OscConfig+0x312>
 8005d04:	4b6f      	ldr	r3, [pc, #444]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005d06:	6a1b      	ldr	r3, [r3, #32]
 8005d08:	4a6e      	ldr	r2, [pc, #440]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005d0a:	f043 0301 	orr.w	r3, r3, #1
 8005d0e:	6213      	str	r3, [r2, #32]
 8005d10:	e02d      	b.n	8005d6e <HAL_RCC_OscConfig+0x36e>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d10c      	bne.n	8005d34 <HAL_RCC_OscConfig+0x334>
 8005d1a:	4b6a      	ldr	r3, [pc, #424]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005d1c:	6a1b      	ldr	r3, [r3, #32]
 8005d1e:	4a69      	ldr	r2, [pc, #420]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005d20:	f023 0301 	bic.w	r3, r3, #1
 8005d24:	6213      	str	r3, [r2, #32]
 8005d26:	4b67      	ldr	r3, [pc, #412]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005d28:	6a1b      	ldr	r3, [r3, #32]
 8005d2a:	4a66      	ldr	r2, [pc, #408]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005d2c:	f023 0304 	bic.w	r3, r3, #4
 8005d30:	6213      	str	r3, [r2, #32]
 8005d32:	e01c      	b.n	8005d6e <HAL_RCC_OscConfig+0x36e>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	2b05      	cmp	r3, #5
 8005d3a:	d10c      	bne.n	8005d56 <HAL_RCC_OscConfig+0x356>
 8005d3c:	4b61      	ldr	r3, [pc, #388]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005d3e:	6a1b      	ldr	r3, [r3, #32]
 8005d40:	4a60      	ldr	r2, [pc, #384]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005d42:	f043 0304 	orr.w	r3, r3, #4
 8005d46:	6213      	str	r3, [r2, #32]
 8005d48:	4b5e      	ldr	r3, [pc, #376]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005d4a:	6a1b      	ldr	r3, [r3, #32]
 8005d4c:	4a5d      	ldr	r2, [pc, #372]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005d4e:	f043 0301 	orr.w	r3, r3, #1
 8005d52:	6213      	str	r3, [r2, #32]
 8005d54:	e00b      	b.n	8005d6e <HAL_RCC_OscConfig+0x36e>
 8005d56:	4b5b      	ldr	r3, [pc, #364]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005d58:	6a1b      	ldr	r3, [r3, #32]
 8005d5a:	4a5a      	ldr	r2, [pc, #360]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005d5c:	f023 0301 	bic.w	r3, r3, #1
 8005d60:	6213      	str	r3, [r2, #32]
 8005d62:	4b58      	ldr	r3, [pc, #352]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005d64:	6a1b      	ldr	r3, [r3, #32]
 8005d66:	4a57      	ldr	r2, [pc, #348]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005d68:	f023 0304 	bic.w	r3, r3, #4
 8005d6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d015      	beq.n	8005da2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d76:	f7fd fb3f 	bl	80033f8 <HAL_GetTick>
 8005d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d7c:	e00a      	b.n	8005d94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d7e:	f7fd fb3b 	bl	80033f8 <HAL_GetTick>
 8005d82:	4602      	mov	r2, r0
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d901      	bls.n	8005d94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e0b1      	b.n	8005ef8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d94:	4b4b      	ldr	r3, [pc, #300]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005d96:	6a1b      	ldr	r3, [r3, #32]
 8005d98:	f003 0302 	and.w	r3, r3, #2
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d0ee      	beq.n	8005d7e <HAL_RCC_OscConfig+0x37e>
 8005da0:	e014      	b.n	8005dcc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005da2:	f7fd fb29 	bl	80033f8 <HAL_GetTick>
 8005da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005da8:	e00a      	b.n	8005dc0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005daa:	f7fd fb25 	bl	80033f8 <HAL_GetTick>
 8005dae:	4602      	mov	r2, r0
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	1ad3      	subs	r3, r2, r3
 8005db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d901      	bls.n	8005dc0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	e09b      	b.n	8005ef8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005dc0:	4b40      	ldr	r3, [pc, #256]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005dc2:	6a1b      	ldr	r3, [r3, #32]
 8005dc4:	f003 0302 	and.w	r3, r3, #2
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d1ee      	bne.n	8005daa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005dcc:	7dfb      	ldrb	r3, [r7, #23]
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d105      	bne.n	8005dde <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dd2:	4b3c      	ldr	r3, [pc, #240]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005dd4:	69db      	ldr	r3, [r3, #28]
 8005dd6:	4a3b      	ldr	r2, [pc, #236]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005dd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ddc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	69db      	ldr	r3, [r3, #28]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	f000 8087 	beq.w	8005ef6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005de8:	4b36      	ldr	r3, [pc, #216]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	f003 030c 	and.w	r3, r3, #12
 8005df0:	2b08      	cmp	r3, #8
 8005df2:	d061      	beq.n	8005eb8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	69db      	ldr	r3, [r3, #28]
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d146      	bne.n	8005e8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dfc:	4b33      	ldr	r3, [pc, #204]	; (8005ecc <HAL_RCC_OscConfig+0x4cc>)
 8005dfe:	2200      	movs	r2, #0
 8005e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e02:	f7fd faf9 	bl	80033f8 <HAL_GetTick>
 8005e06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e08:	e008      	b.n	8005e1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e0a:	f7fd faf5 	bl	80033f8 <HAL_GetTick>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	1ad3      	subs	r3, r2, r3
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d901      	bls.n	8005e1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005e18:	2303      	movs	r3, #3
 8005e1a:	e06d      	b.n	8005ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e1c:	4b29      	ldr	r3, [pc, #164]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d1f0      	bne.n	8005e0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a1b      	ldr	r3, [r3, #32]
 8005e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e30:	d108      	bne.n	8005e44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005e32:	4b24      	ldr	r3, [pc, #144]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	4921      	ldr	r1, [pc, #132]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005e40:	4313      	orrs	r3, r2
 8005e42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e44:	4b1f      	ldr	r3, [pc, #124]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a19      	ldr	r1, [r3, #32]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e54:	430b      	orrs	r3, r1
 8005e56:	491b      	ldr	r1, [pc, #108]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e5c:	4b1b      	ldr	r3, [pc, #108]	; (8005ecc <HAL_RCC_OscConfig+0x4cc>)
 8005e5e:	2201      	movs	r2, #1
 8005e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e62:	f7fd fac9 	bl	80033f8 <HAL_GetTick>
 8005e66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005e68:	e008      	b.n	8005e7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e6a:	f7fd fac5 	bl	80033f8 <HAL_GetTick>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	2b02      	cmp	r3, #2
 8005e76:	d901      	bls.n	8005e7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	e03d      	b.n	8005ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005e7c:	4b11      	ldr	r3, [pc, #68]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d0f0      	beq.n	8005e6a <HAL_RCC_OscConfig+0x46a>
 8005e88:	e035      	b.n	8005ef6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e8a:	4b10      	ldr	r3, [pc, #64]	; (8005ecc <HAL_RCC_OscConfig+0x4cc>)
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e90:	f7fd fab2 	bl	80033f8 <HAL_GetTick>
 8005e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e96:	e008      	b.n	8005eaa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e98:	f7fd faae 	bl	80033f8 <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d901      	bls.n	8005eaa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e026      	b.n	8005ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005eaa:	4b06      	ldr	r3, [pc, #24]	; (8005ec4 <HAL_RCC_OscConfig+0x4c4>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d1f0      	bne.n	8005e98 <HAL_RCC_OscConfig+0x498>
 8005eb6:	e01e      	b.n	8005ef6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	69db      	ldr	r3, [r3, #28]
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d107      	bne.n	8005ed0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e019      	b.n	8005ef8 <HAL_RCC_OscConfig+0x4f8>
 8005ec4:	40021000 	.word	0x40021000
 8005ec8:	40007000 	.word	0x40007000
 8005ecc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005ed0:	4b0b      	ldr	r3, [pc, #44]	; (8005f00 <HAL_RCC_OscConfig+0x500>)
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a1b      	ldr	r3, [r3, #32]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d106      	bne.n	8005ef2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d001      	beq.n	8005ef6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e000      	b.n	8005ef8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3718      	adds	r7, #24
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	40021000 	.word	0x40021000

08005f04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d101      	bne.n	8005f18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	e0d0      	b.n	80060ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f18:	4b6a      	ldr	r3, [pc, #424]	; (80060c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 0307 	and.w	r3, r3, #7
 8005f20:	683a      	ldr	r2, [r7, #0]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d910      	bls.n	8005f48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f26:	4b67      	ldr	r3, [pc, #412]	; (80060c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f023 0207 	bic.w	r2, r3, #7
 8005f2e:	4965      	ldr	r1, [pc, #404]	; (80060c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f36:	4b63      	ldr	r3, [pc, #396]	; (80060c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0307 	and.w	r3, r3, #7
 8005f3e:	683a      	ldr	r2, [r7, #0]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d001      	beq.n	8005f48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e0b8      	b.n	80060ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 0302 	and.w	r3, r3, #2
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d020      	beq.n	8005f96 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 0304 	and.w	r3, r3, #4
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d005      	beq.n	8005f6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f60:	4b59      	ldr	r3, [pc, #356]	; (80060c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	4a58      	ldr	r2, [pc, #352]	; (80060c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005f66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005f6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0308 	and.w	r3, r3, #8
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d005      	beq.n	8005f84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f78:	4b53      	ldr	r3, [pc, #332]	; (80060c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	4a52      	ldr	r2, [pc, #328]	; (80060c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005f7e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005f82:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f84:	4b50      	ldr	r3, [pc, #320]	; (80060c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	494d      	ldr	r1, [pc, #308]	; (80060c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0301 	and.w	r3, r3, #1
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d040      	beq.n	8006024 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d107      	bne.n	8005fba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005faa:	4b47      	ldr	r3, [pc, #284]	; (80060c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d115      	bne.n	8005fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e07f      	b.n	80060ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d107      	bne.n	8005fd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fc2:	4b41      	ldr	r3, [pc, #260]	; (80060c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d109      	bne.n	8005fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e073      	b.n	80060ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fd2:	4b3d      	ldr	r3, [pc, #244]	; (80060c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 0302 	and.w	r3, r3, #2
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d101      	bne.n	8005fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e06b      	b.n	80060ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005fe2:	4b39      	ldr	r3, [pc, #228]	; (80060c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	f023 0203 	bic.w	r2, r3, #3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	4936      	ldr	r1, [pc, #216]	; (80060c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ff4:	f7fd fa00 	bl	80033f8 <HAL_GetTick>
 8005ff8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ffa:	e00a      	b.n	8006012 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ffc:	f7fd f9fc 	bl	80033f8 <HAL_GetTick>
 8006000:	4602      	mov	r2, r0
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	f241 3288 	movw	r2, #5000	; 0x1388
 800600a:	4293      	cmp	r3, r2
 800600c:	d901      	bls.n	8006012 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e053      	b.n	80060ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006012:	4b2d      	ldr	r3, [pc, #180]	; (80060c8 <HAL_RCC_ClockConfig+0x1c4>)
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	f003 020c 	and.w	r2, r3, #12
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	429a      	cmp	r2, r3
 8006022:	d1eb      	bne.n	8005ffc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006024:	4b27      	ldr	r3, [pc, #156]	; (80060c4 <HAL_RCC_ClockConfig+0x1c0>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 0307 	and.w	r3, r3, #7
 800602c:	683a      	ldr	r2, [r7, #0]
 800602e:	429a      	cmp	r2, r3
 8006030:	d210      	bcs.n	8006054 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006032:	4b24      	ldr	r3, [pc, #144]	; (80060c4 <HAL_RCC_ClockConfig+0x1c0>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f023 0207 	bic.w	r2, r3, #7
 800603a:	4922      	ldr	r1, [pc, #136]	; (80060c4 <HAL_RCC_ClockConfig+0x1c0>)
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	4313      	orrs	r3, r2
 8006040:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006042:	4b20      	ldr	r3, [pc, #128]	; (80060c4 <HAL_RCC_ClockConfig+0x1c0>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 0307 	and.w	r3, r3, #7
 800604a:	683a      	ldr	r2, [r7, #0]
 800604c:	429a      	cmp	r2, r3
 800604e:	d001      	beq.n	8006054 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e032      	b.n	80060ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 0304 	and.w	r3, r3, #4
 800605c:	2b00      	cmp	r3, #0
 800605e:	d008      	beq.n	8006072 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006060:	4b19      	ldr	r3, [pc, #100]	; (80060c8 <HAL_RCC_ClockConfig+0x1c4>)
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	4916      	ldr	r1, [pc, #88]	; (80060c8 <HAL_RCC_ClockConfig+0x1c4>)
 800606e:	4313      	orrs	r3, r2
 8006070:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 0308 	and.w	r3, r3, #8
 800607a:	2b00      	cmp	r3, #0
 800607c:	d009      	beq.n	8006092 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800607e:	4b12      	ldr	r3, [pc, #72]	; (80060c8 <HAL_RCC_ClockConfig+0x1c4>)
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	00db      	lsls	r3, r3, #3
 800608c:	490e      	ldr	r1, [pc, #56]	; (80060c8 <HAL_RCC_ClockConfig+0x1c4>)
 800608e:	4313      	orrs	r3, r2
 8006090:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006092:	f000 f821 	bl	80060d8 <HAL_RCC_GetSysClockFreq>
 8006096:	4602      	mov	r2, r0
 8006098:	4b0b      	ldr	r3, [pc, #44]	; (80060c8 <HAL_RCC_ClockConfig+0x1c4>)
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	091b      	lsrs	r3, r3, #4
 800609e:	f003 030f 	and.w	r3, r3, #15
 80060a2:	490a      	ldr	r1, [pc, #40]	; (80060cc <HAL_RCC_ClockConfig+0x1c8>)
 80060a4:	5ccb      	ldrb	r3, [r1, r3]
 80060a6:	fa22 f303 	lsr.w	r3, r2, r3
 80060aa:	4a09      	ldr	r2, [pc, #36]	; (80060d0 <HAL_RCC_ClockConfig+0x1cc>)
 80060ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80060ae:	4b09      	ldr	r3, [pc, #36]	; (80060d4 <HAL_RCC_ClockConfig+0x1d0>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4618      	mov	r0, r3
 80060b4:	f7fd f95e 	bl	8003374 <HAL_InitTick>

  return HAL_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3710      	adds	r7, #16
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	40022000 	.word	0x40022000
 80060c8:	40021000 	.word	0x40021000
 80060cc:	080097c4 	.word	0x080097c4
 80060d0:	20000000 	.word	0x20000000
 80060d4:	20000004 	.word	0x20000004

080060d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060d8:	b490      	push	{r4, r7}
 80060da:	b08a      	sub	sp, #40	; 0x28
 80060dc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80060de:	4b29      	ldr	r3, [pc, #164]	; (8006184 <HAL_RCC_GetSysClockFreq+0xac>)
 80060e0:	1d3c      	adds	r4, r7, #4
 80060e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80060e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80060e8:	f240 2301 	movw	r3, #513	; 0x201
 80060ec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80060ee:	2300      	movs	r3, #0
 80060f0:	61fb      	str	r3, [r7, #28]
 80060f2:	2300      	movs	r3, #0
 80060f4:	61bb      	str	r3, [r7, #24]
 80060f6:	2300      	movs	r3, #0
 80060f8:	627b      	str	r3, [r7, #36]	; 0x24
 80060fa:	2300      	movs	r3, #0
 80060fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80060fe:	2300      	movs	r3, #0
 8006100:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006102:	4b21      	ldr	r3, [pc, #132]	; (8006188 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	f003 030c 	and.w	r3, r3, #12
 800610e:	2b04      	cmp	r3, #4
 8006110:	d002      	beq.n	8006118 <HAL_RCC_GetSysClockFreq+0x40>
 8006112:	2b08      	cmp	r3, #8
 8006114:	d003      	beq.n	800611e <HAL_RCC_GetSysClockFreq+0x46>
 8006116:	e02b      	b.n	8006170 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006118:	4b1c      	ldr	r3, [pc, #112]	; (800618c <HAL_RCC_GetSysClockFreq+0xb4>)
 800611a:	623b      	str	r3, [r7, #32]
      break;
 800611c:	e02b      	b.n	8006176 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	0c9b      	lsrs	r3, r3, #18
 8006122:	f003 030f 	and.w	r3, r3, #15
 8006126:	3328      	adds	r3, #40	; 0x28
 8006128:	443b      	add	r3, r7
 800612a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800612e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006136:	2b00      	cmp	r3, #0
 8006138:	d012      	beq.n	8006160 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800613a:	4b13      	ldr	r3, [pc, #76]	; (8006188 <HAL_RCC_GetSysClockFreq+0xb0>)
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	0c5b      	lsrs	r3, r3, #17
 8006140:	f003 0301 	and.w	r3, r3, #1
 8006144:	3328      	adds	r3, #40	; 0x28
 8006146:	443b      	add	r3, r7
 8006148:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800614c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	4a0e      	ldr	r2, [pc, #56]	; (800618c <HAL_RCC_GetSysClockFreq+0xb4>)
 8006152:	fb03 f202 	mul.w	r2, r3, r2
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	fbb2 f3f3 	udiv	r3, r2, r3
 800615c:	627b      	str	r3, [r7, #36]	; 0x24
 800615e:	e004      	b.n	800616a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	4a0b      	ldr	r2, [pc, #44]	; (8006190 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006164:	fb02 f303 	mul.w	r3, r2, r3
 8006168:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800616a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616c:	623b      	str	r3, [r7, #32]
      break;
 800616e:	e002      	b.n	8006176 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006170:	4b06      	ldr	r3, [pc, #24]	; (800618c <HAL_RCC_GetSysClockFreq+0xb4>)
 8006172:	623b      	str	r3, [r7, #32]
      break;
 8006174:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006176:	6a3b      	ldr	r3, [r7, #32]
}
 8006178:	4618      	mov	r0, r3
 800617a:	3728      	adds	r7, #40	; 0x28
 800617c:	46bd      	mov	sp, r7
 800617e:	bc90      	pop	{r4, r7}
 8006180:	4770      	bx	lr
 8006182:	bf00      	nop
 8006184:	080097b4 	.word	0x080097b4
 8006188:	40021000 	.word	0x40021000
 800618c:	007a1200 	.word	0x007a1200
 8006190:	003d0900 	.word	0x003d0900

08006194 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006194:	b480      	push	{r7}
 8006196:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006198:	4b02      	ldr	r3, [pc, #8]	; (80061a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800619a:	681b      	ldr	r3, [r3, #0]
}
 800619c:	4618      	mov	r0, r3
 800619e:	46bd      	mov	sp, r7
 80061a0:	bc80      	pop	{r7}
 80061a2:	4770      	bx	lr
 80061a4:	20000000 	.word	0x20000000

080061a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80061ac:	f7ff fff2 	bl	8006194 <HAL_RCC_GetHCLKFreq>
 80061b0:	4602      	mov	r2, r0
 80061b2:	4b05      	ldr	r3, [pc, #20]	; (80061c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	0a1b      	lsrs	r3, r3, #8
 80061b8:	f003 0307 	and.w	r3, r3, #7
 80061bc:	4903      	ldr	r1, [pc, #12]	; (80061cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80061be:	5ccb      	ldrb	r3, [r1, r3]
 80061c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	40021000 	.word	0x40021000
 80061cc:	080097d4 	.word	0x080097d4

080061d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80061d4:	f7ff ffde 	bl	8006194 <HAL_RCC_GetHCLKFreq>
 80061d8:	4602      	mov	r2, r0
 80061da:	4b05      	ldr	r3, [pc, #20]	; (80061f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	0adb      	lsrs	r3, r3, #11
 80061e0:	f003 0307 	and.w	r3, r3, #7
 80061e4:	4903      	ldr	r1, [pc, #12]	; (80061f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80061e6:	5ccb      	ldrb	r3, [r1, r3]
 80061e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	bd80      	pop	{r7, pc}
 80061f0:	40021000 	.word	0x40021000
 80061f4:	080097d4 	.word	0x080097d4

080061f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b085      	sub	sp, #20
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006200:	4b0a      	ldr	r3, [pc, #40]	; (800622c <RCC_Delay+0x34>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a0a      	ldr	r2, [pc, #40]	; (8006230 <RCC_Delay+0x38>)
 8006206:	fba2 2303 	umull	r2, r3, r2, r3
 800620a:	0a5b      	lsrs	r3, r3, #9
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	fb02 f303 	mul.w	r3, r2, r3
 8006212:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006214:	bf00      	nop
  }
  while (Delay --);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	1e5a      	subs	r2, r3, #1
 800621a:	60fa      	str	r2, [r7, #12]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d1f9      	bne.n	8006214 <RCC_Delay+0x1c>
}
 8006220:	bf00      	nop
 8006222:	bf00      	nop
 8006224:	3714      	adds	r7, #20
 8006226:	46bd      	mov	sp, r7
 8006228:	bc80      	pop	{r7}
 800622a:	4770      	bx	lr
 800622c:	20000000 	.word	0x20000000
 8006230:	10624dd3 	.word	0x10624dd3

08006234 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b086      	sub	sp, #24
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800623c:	2300      	movs	r3, #0
 800623e:	613b      	str	r3, [r7, #16]
 8006240:	2300      	movs	r3, #0
 8006242:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 0301 	and.w	r3, r3, #1
 800624c:	2b00      	cmp	r3, #0
 800624e:	d07d      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006250:	2300      	movs	r3, #0
 8006252:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006254:	4b4f      	ldr	r3, [pc, #316]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006256:	69db      	ldr	r3, [r3, #28]
 8006258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800625c:	2b00      	cmp	r3, #0
 800625e:	d10d      	bne.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006260:	4b4c      	ldr	r3, [pc, #304]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006262:	69db      	ldr	r3, [r3, #28]
 8006264:	4a4b      	ldr	r2, [pc, #300]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800626a:	61d3      	str	r3, [r2, #28]
 800626c:	4b49      	ldr	r3, [pc, #292]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800626e:	69db      	ldr	r3, [r3, #28]
 8006270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006274:	60bb      	str	r3, [r7, #8]
 8006276:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006278:	2301      	movs	r3, #1
 800627a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800627c:	4b46      	ldr	r3, [pc, #280]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006284:	2b00      	cmp	r3, #0
 8006286:	d118      	bne.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006288:	4b43      	ldr	r3, [pc, #268]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a42      	ldr	r2, [pc, #264]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800628e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006292:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006294:	f7fd f8b0 	bl	80033f8 <HAL_GetTick>
 8006298:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800629a:	e008      	b.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800629c:	f7fd f8ac 	bl	80033f8 <HAL_GetTick>
 80062a0:	4602      	mov	r2, r0
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	2b64      	cmp	r3, #100	; 0x64
 80062a8:	d901      	bls.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e06d      	b.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062ae:	4b3a      	ldr	r3, [pc, #232]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d0f0      	beq.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80062ba:	4b36      	ldr	r3, [pc, #216]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062bc:	6a1b      	ldr	r3, [r3, #32]
 80062be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062c2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d02e      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062d2:	68fa      	ldr	r2, [r7, #12]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d027      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80062d8:	4b2e      	ldr	r3, [pc, #184]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062da:	6a1b      	ldr	r3, [r3, #32]
 80062dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062e0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80062e2:	4b2e      	ldr	r3, [pc, #184]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80062e4:	2201      	movs	r2, #1
 80062e6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80062e8:	4b2c      	ldr	r3, [pc, #176]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80062ea:	2200      	movs	r2, #0
 80062ec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80062ee:	4a29      	ldr	r2, [pc, #164]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f003 0301 	and.w	r3, r3, #1
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d014      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062fe:	f7fd f87b 	bl	80033f8 <HAL_GetTick>
 8006302:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006304:	e00a      	b.n	800631c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006306:	f7fd f877 	bl	80033f8 <HAL_GetTick>
 800630a:	4602      	mov	r2, r0
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	1ad3      	subs	r3, r2, r3
 8006310:	f241 3288 	movw	r2, #5000	; 0x1388
 8006314:	4293      	cmp	r3, r2
 8006316:	d901      	bls.n	800631c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006318:	2303      	movs	r3, #3
 800631a:	e036      	b.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800631c:	4b1d      	ldr	r3, [pc, #116]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800631e:	6a1b      	ldr	r3, [r3, #32]
 8006320:	f003 0302 	and.w	r3, r3, #2
 8006324:	2b00      	cmp	r3, #0
 8006326:	d0ee      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006328:	4b1a      	ldr	r3, [pc, #104]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800632a:	6a1b      	ldr	r3, [r3, #32]
 800632c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	4917      	ldr	r1, [pc, #92]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006336:	4313      	orrs	r3, r2
 8006338:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800633a:	7dfb      	ldrb	r3, [r7, #23]
 800633c:	2b01      	cmp	r3, #1
 800633e:	d105      	bne.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006340:	4b14      	ldr	r3, [pc, #80]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006342:	69db      	ldr	r3, [r3, #28]
 8006344:	4a13      	ldr	r2, [pc, #76]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006346:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800634a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f003 0302 	and.w	r3, r3, #2
 8006354:	2b00      	cmp	r3, #0
 8006356:	d008      	beq.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006358:	4b0e      	ldr	r3, [pc, #56]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	490b      	ldr	r1, [pc, #44]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006366:	4313      	orrs	r3, r2
 8006368:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 0310 	and.w	r3, r3, #16
 8006372:	2b00      	cmp	r3, #0
 8006374:	d008      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006376:	4b07      	ldr	r3, [pc, #28]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	4904      	ldr	r1, [pc, #16]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006384:	4313      	orrs	r3, r2
 8006386:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3718      	adds	r7, #24
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	40021000 	.word	0x40021000
 8006398:	40007000 	.word	0x40007000
 800639c:	42420440 	.word	0x42420440

080063a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d101      	bne.n	80063b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e041      	b.n	8006436 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d106      	bne.n	80063cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f7fc fd98 	bl	8002efc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2202      	movs	r2, #2
 80063d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	3304      	adds	r3, #4
 80063dc:	4619      	mov	r1, r3
 80063de:	4610      	mov	r0, r2
 80063e0:	f000 fa9e 	bl	8006920 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2201      	movs	r2, #1
 8006420:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3708      	adds	r7, #8
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
	...

08006440 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006440:	b480      	push	{r7}
 8006442:	b085      	sub	sp, #20
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800644e:	b2db      	uxtb	r3, r3
 8006450:	2b01      	cmp	r3, #1
 8006452:	d001      	beq.n	8006458 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	e03a      	b.n	80064ce <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2202      	movs	r2, #2
 800645c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68da      	ldr	r2, [r3, #12]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f042 0201 	orr.w	r2, r2, #1
 800646e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a18      	ldr	r2, [pc, #96]	; (80064d8 <HAL_TIM_Base_Start_IT+0x98>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d00e      	beq.n	8006498 <HAL_TIM_Base_Start_IT+0x58>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006482:	d009      	beq.n	8006498 <HAL_TIM_Base_Start_IT+0x58>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a14      	ldr	r2, [pc, #80]	; (80064dc <HAL_TIM_Base_Start_IT+0x9c>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d004      	beq.n	8006498 <HAL_TIM_Base_Start_IT+0x58>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a13      	ldr	r2, [pc, #76]	; (80064e0 <HAL_TIM_Base_Start_IT+0xa0>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d111      	bne.n	80064bc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	f003 0307 	and.w	r3, r3, #7
 80064a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2b06      	cmp	r3, #6
 80064a8:	d010      	beq.n	80064cc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f042 0201 	orr.w	r2, r2, #1
 80064b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064ba:	e007      	b.n	80064cc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f042 0201 	orr.w	r2, r2, #1
 80064ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3714      	adds	r7, #20
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bc80      	pop	{r7}
 80064d6:	4770      	bx	lr
 80064d8:	40012c00 	.word	0x40012c00
 80064dc:	40000400 	.word	0x40000400
 80064e0:	40000800 	.word	0x40000800

080064e4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	68da      	ldr	r2, [r3, #12]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f022 0201 	bic.w	r2, r2, #1
 80064fa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	6a1a      	ldr	r2, [r3, #32]
 8006502:	f241 1311 	movw	r3, #4369	; 0x1111
 8006506:	4013      	ands	r3, r2
 8006508:	2b00      	cmp	r3, #0
 800650a:	d10f      	bne.n	800652c <HAL_TIM_Base_Stop_IT+0x48>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	6a1a      	ldr	r2, [r3, #32]
 8006512:	f240 4344 	movw	r3, #1092	; 0x444
 8006516:	4013      	ands	r3, r2
 8006518:	2b00      	cmp	r3, #0
 800651a:	d107      	bne.n	800652c <HAL_TIM_Base_Stop_IT+0x48>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f022 0201 	bic.w	r2, r2, #1
 800652a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	370c      	adds	r7, #12
 800653a:	46bd      	mov	sp, r7
 800653c:	bc80      	pop	{r7}
 800653e:	4770      	bx	lr

08006540 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b082      	sub	sp, #8
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	f003 0302 	and.w	r3, r3, #2
 8006552:	2b02      	cmp	r3, #2
 8006554:	d122      	bne.n	800659c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	f003 0302 	and.w	r3, r3, #2
 8006560:	2b02      	cmp	r3, #2
 8006562:	d11b      	bne.n	800659c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f06f 0202 	mvn.w	r2, #2
 800656c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2201      	movs	r2, #1
 8006572:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	699b      	ldr	r3, [r3, #24]
 800657a:	f003 0303 	and.w	r3, r3, #3
 800657e:	2b00      	cmp	r3, #0
 8006580:	d003      	beq.n	800658a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 f9b1 	bl	80068ea <HAL_TIM_IC_CaptureCallback>
 8006588:	e005      	b.n	8006596 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 f9a4 	bl	80068d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 f9b3 	bl	80068fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	f003 0304 	and.w	r3, r3, #4
 80065a6:	2b04      	cmp	r3, #4
 80065a8:	d122      	bne.n	80065f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	f003 0304 	and.w	r3, r3, #4
 80065b4:	2b04      	cmp	r3, #4
 80065b6:	d11b      	bne.n	80065f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f06f 0204 	mvn.w	r2, #4
 80065c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2202      	movs	r2, #2
 80065c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	699b      	ldr	r3, [r3, #24]
 80065ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d003      	beq.n	80065de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 f987 	bl	80068ea <HAL_TIM_IC_CaptureCallback>
 80065dc:	e005      	b.n	80065ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 f97a 	bl	80068d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 f989 	bl	80068fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	f003 0308 	and.w	r3, r3, #8
 80065fa:	2b08      	cmp	r3, #8
 80065fc:	d122      	bne.n	8006644 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	f003 0308 	and.w	r3, r3, #8
 8006608:	2b08      	cmp	r3, #8
 800660a:	d11b      	bne.n	8006644 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f06f 0208 	mvn.w	r2, #8
 8006614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2204      	movs	r2, #4
 800661a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	69db      	ldr	r3, [r3, #28]
 8006622:	f003 0303 	and.w	r3, r3, #3
 8006626:	2b00      	cmp	r3, #0
 8006628:	d003      	beq.n	8006632 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 f95d 	bl	80068ea <HAL_TIM_IC_CaptureCallback>
 8006630:	e005      	b.n	800663e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 f950 	bl	80068d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 f95f 	bl	80068fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	f003 0310 	and.w	r3, r3, #16
 800664e:	2b10      	cmp	r3, #16
 8006650:	d122      	bne.n	8006698 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	f003 0310 	and.w	r3, r3, #16
 800665c:	2b10      	cmp	r3, #16
 800665e:	d11b      	bne.n	8006698 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f06f 0210 	mvn.w	r2, #16
 8006668:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2208      	movs	r2, #8
 800666e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	69db      	ldr	r3, [r3, #28]
 8006676:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800667a:	2b00      	cmp	r3, #0
 800667c:	d003      	beq.n	8006686 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 f933 	bl	80068ea <HAL_TIM_IC_CaptureCallback>
 8006684:	e005      	b.n	8006692 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 f926 	bl	80068d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 f935 	bl	80068fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	f003 0301 	and.w	r3, r3, #1
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d10e      	bne.n	80066c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	f003 0301 	and.w	r3, r3, #1
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d107      	bne.n	80066c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f06f 0201 	mvn.w	r2, #1
 80066bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f7fb fd1e 	bl	8002100 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ce:	2b80      	cmp	r3, #128	; 0x80
 80066d0:	d10e      	bne.n	80066f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066dc:	2b80      	cmp	r3, #128	; 0x80
 80066de:	d107      	bne.n	80066f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80066e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 fa77 	bl	8006bde <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066fa:	2b40      	cmp	r3, #64	; 0x40
 80066fc:	d10e      	bne.n	800671c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006708:	2b40      	cmp	r3, #64	; 0x40
 800670a:	d107      	bne.n	800671c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 f8f9 	bl	800690e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	f003 0320 	and.w	r3, r3, #32
 8006726:	2b20      	cmp	r3, #32
 8006728:	d10e      	bne.n	8006748 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	f003 0320 	and.w	r3, r3, #32
 8006734:	2b20      	cmp	r3, #32
 8006736:	d107      	bne.n	8006748 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f06f 0220 	mvn.w	r2, #32
 8006740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 fa42 	bl	8006bcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006748:	bf00      	nop
 800674a:	3708      	adds	r7, #8
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006760:	2b01      	cmp	r3, #1
 8006762:	d101      	bne.n	8006768 <HAL_TIM_ConfigClockSource+0x18>
 8006764:	2302      	movs	r3, #2
 8006766:	e0b3      	b.n	80068d0 <HAL_TIM_ConfigClockSource+0x180>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2202      	movs	r2, #2
 8006774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006786:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800678e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067a0:	d03e      	beq.n	8006820 <HAL_TIM_ConfigClockSource+0xd0>
 80067a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067a6:	f200 8087 	bhi.w	80068b8 <HAL_TIM_ConfigClockSource+0x168>
 80067aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067ae:	f000 8085 	beq.w	80068bc <HAL_TIM_ConfigClockSource+0x16c>
 80067b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067b6:	d87f      	bhi.n	80068b8 <HAL_TIM_ConfigClockSource+0x168>
 80067b8:	2b70      	cmp	r3, #112	; 0x70
 80067ba:	d01a      	beq.n	80067f2 <HAL_TIM_ConfigClockSource+0xa2>
 80067bc:	2b70      	cmp	r3, #112	; 0x70
 80067be:	d87b      	bhi.n	80068b8 <HAL_TIM_ConfigClockSource+0x168>
 80067c0:	2b60      	cmp	r3, #96	; 0x60
 80067c2:	d050      	beq.n	8006866 <HAL_TIM_ConfigClockSource+0x116>
 80067c4:	2b60      	cmp	r3, #96	; 0x60
 80067c6:	d877      	bhi.n	80068b8 <HAL_TIM_ConfigClockSource+0x168>
 80067c8:	2b50      	cmp	r3, #80	; 0x50
 80067ca:	d03c      	beq.n	8006846 <HAL_TIM_ConfigClockSource+0xf6>
 80067cc:	2b50      	cmp	r3, #80	; 0x50
 80067ce:	d873      	bhi.n	80068b8 <HAL_TIM_ConfigClockSource+0x168>
 80067d0:	2b40      	cmp	r3, #64	; 0x40
 80067d2:	d058      	beq.n	8006886 <HAL_TIM_ConfigClockSource+0x136>
 80067d4:	2b40      	cmp	r3, #64	; 0x40
 80067d6:	d86f      	bhi.n	80068b8 <HAL_TIM_ConfigClockSource+0x168>
 80067d8:	2b30      	cmp	r3, #48	; 0x30
 80067da:	d064      	beq.n	80068a6 <HAL_TIM_ConfigClockSource+0x156>
 80067dc:	2b30      	cmp	r3, #48	; 0x30
 80067de:	d86b      	bhi.n	80068b8 <HAL_TIM_ConfigClockSource+0x168>
 80067e0:	2b20      	cmp	r3, #32
 80067e2:	d060      	beq.n	80068a6 <HAL_TIM_ConfigClockSource+0x156>
 80067e4:	2b20      	cmp	r3, #32
 80067e6:	d867      	bhi.n	80068b8 <HAL_TIM_ConfigClockSource+0x168>
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d05c      	beq.n	80068a6 <HAL_TIM_ConfigClockSource+0x156>
 80067ec:	2b10      	cmp	r3, #16
 80067ee:	d05a      	beq.n	80068a6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80067f0:	e062      	b.n	80068b8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6818      	ldr	r0, [r3, #0]
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	6899      	ldr	r1, [r3, #8]
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	685a      	ldr	r2, [r3, #4]
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	f000 f966 	bl	8006ad2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006814:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	609a      	str	r2, [r3, #8]
      break;
 800681e:	e04e      	b.n	80068be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6818      	ldr	r0, [r3, #0]
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	6899      	ldr	r1, [r3, #8]
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	685a      	ldr	r2, [r3, #4]
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	f000 f94f 	bl	8006ad2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	689a      	ldr	r2, [r3, #8]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006842:	609a      	str	r2, [r3, #8]
      break;
 8006844:	e03b      	b.n	80068be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6818      	ldr	r0, [r3, #0]
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	6859      	ldr	r1, [r3, #4]
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	461a      	mov	r2, r3
 8006854:	f000 f8c6 	bl	80069e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2150      	movs	r1, #80	; 0x50
 800685e:	4618      	mov	r0, r3
 8006860:	f000 f91d 	bl	8006a9e <TIM_ITRx_SetConfig>
      break;
 8006864:	e02b      	b.n	80068be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6818      	ldr	r0, [r3, #0]
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	6859      	ldr	r1, [r3, #4]
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	461a      	mov	r2, r3
 8006874:	f000 f8e4 	bl	8006a40 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2160      	movs	r1, #96	; 0x60
 800687e:	4618      	mov	r0, r3
 8006880:	f000 f90d 	bl	8006a9e <TIM_ITRx_SetConfig>
      break;
 8006884:	e01b      	b.n	80068be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6818      	ldr	r0, [r3, #0]
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	6859      	ldr	r1, [r3, #4]
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	461a      	mov	r2, r3
 8006894:	f000 f8a6 	bl	80069e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2140      	movs	r1, #64	; 0x40
 800689e:	4618      	mov	r0, r3
 80068a0:	f000 f8fd 	bl	8006a9e <TIM_ITRx_SetConfig>
      break;
 80068a4:	e00b      	b.n	80068be <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4619      	mov	r1, r3
 80068b0:	4610      	mov	r0, r2
 80068b2:	f000 f8f4 	bl	8006a9e <TIM_ITRx_SetConfig>
        break;
 80068b6:	e002      	b.n	80068be <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80068b8:	bf00      	nop
 80068ba:	e000      	b.n	80068be <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80068bc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2201      	movs	r2, #1
 80068c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3710      	adds	r7, #16
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068e0:	bf00      	nop
 80068e2:	370c      	adds	r7, #12
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bc80      	pop	{r7}
 80068e8:	4770      	bx	lr

080068ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80068ea:	b480      	push	{r7}
 80068ec:	b083      	sub	sp, #12
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80068f2:	bf00      	nop
 80068f4:	370c      	adds	r7, #12
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bc80      	pop	{r7}
 80068fa:	4770      	bx	lr

080068fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006904:	bf00      	nop
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	bc80      	pop	{r7}
 800690c:	4770      	bx	lr

0800690e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800690e:	b480      	push	{r7}
 8006910:	b083      	sub	sp, #12
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006916:	bf00      	nop
 8006918:	370c      	adds	r7, #12
 800691a:	46bd      	mov	sp, r7
 800691c:	bc80      	pop	{r7}
 800691e:	4770      	bx	lr

08006920 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006920:	b480      	push	{r7}
 8006922:	b085      	sub	sp, #20
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a29      	ldr	r2, [pc, #164]	; (80069d8 <TIM_Base_SetConfig+0xb8>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d00b      	beq.n	8006950 <TIM_Base_SetConfig+0x30>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800693e:	d007      	beq.n	8006950 <TIM_Base_SetConfig+0x30>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4a26      	ldr	r2, [pc, #152]	; (80069dc <TIM_Base_SetConfig+0xbc>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d003      	beq.n	8006950 <TIM_Base_SetConfig+0x30>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a25      	ldr	r2, [pc, #148]	; (80069e0 <TIM_Base_SetConfig+0xc0>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d108      	bne.n	8006962 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006956:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	4313      	orrs	r3, r2
 8006960:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a1c      	ldr	r2, [pc, #112]	; (80069d8 <TIM_Base_SetConfig+0xb8>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d00b      	beq.n	8006982 <TIM_Base_SetConfig+0x62>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006970:	d007      	beq.n	8006982 <TIM_Base_SetConfig+0x62>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a19      	ldr	r2, [pc, #100]	; (80069dc <TIM_Base_SetConfig+0xbc>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d003      	beq.n	8006982 <TIM_Base_SetConfig+0x62>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a18      	ldr	r2, [pc, #96]	; (80069e0 <TIM_Base_SetConfig+0xc0>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d108      	bne.n	8006994 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006988:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	4313      	orrs	r3, r2
 8006992:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	4313      	orrs	r3, r2
 80069a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	68fa      	ldr	r2, [r7, #12]
 80069a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	689a      	ldr	r2, [r3, #8]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a07      	ldr	r2, [pc, #28]	; (80069d8 <TIM_Base_SetConfig+0xb8>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d103      	bne.n	80069c8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	691a      	ldr	r2, [r3, #16]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	615a      	str	r2, [r3, #20]
}
 80069ce:	bf00      	nop
 80069d0:	3714      	adds	r7, #20
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bc80      	pop	{r7}
 80069d6:	4770      	bx	lr
 80069d8:	40012c00 	.word	0x40012c00
 80069dc:	40000400 	.word	0x40000400
 80069e0:	40000800 	.word	0x40000800

080069e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b087      	sub	sp, #28
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6a1b      	ldr	r3, [r3, #32]
 80069f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6a1b      	ldr	r3, [r3, #32]
 80069fa:	f023 0201 	bic.w	r2, r3, #1
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	699b      	ldr	r3, [r3, #24]
 8006a06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	011b      	lsls	r3, r3, #4
 8006a14:	693a      	ldr	r2, [r7, #16]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	f023 030a 	bic.w	r3, r3, #10
 8006a20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a22:	697a      	ldr	r2, [r7, #20]
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	693a      	ldr	r2, [r7, #16]
 8006a2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	697a      	ldr	r2, [r7, #20]
 8006a34:	621a      	str	r2, [r3, #32]
}
 8006a36:	bf00      	nop
 8006a38:	371c      	adds	r7, #28
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bc80      	pop	{r7}
 8006a3e:	4770      	bx	lr

08006a40 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b087      	sub	sp, #28
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6a1b      	ldr	r3, [r3, #32]
 8006a50:	f023 0210 	bic.w	r2, r3, #16
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	699b      	ldr	r3, [r3, #24]
 8006a5c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6a1b      	ldr	r3, [r3, #32]
 8006a62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a6a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	031b      	lsls	r3, r3, #12
 8006a70:	697a      	ldr	r2, [r7, #20]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a7c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	011b      	lsls	r3, r3, #4
 8006a82:	693a      	ldr	r2, [r7, #16]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	697a      	ldr	r2, [r7, #20]
 8006a8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	693a      	ldr	r2, [r7, #16]
 8006a92:	621a      	str	r2, [r3, #32]
}
 8006a94:	bf00      	nop
 8006a96:	371c      	adds	r7, #28
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bc80      	pop	{r7}
 8006a9c:	4770      	bx	lr

08006a9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a9e:	b480      	push	{r7}
 8006aa0:	b085      	sub	sp, #20
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
 8006aa6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ab4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ab6:	683a      	ldr	r2, [r7, #0]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	f043 0307 	orr.w	r3, r3, #7
 8006ac0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	609a      	str	r2, [r3, #8]
}
 8006ac8:	bf00      	nop
 8006aca:	3714      	adds	r7, #20
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bc80      	pop	{r7}
 8006ad0:	4770      	bx	lr

08006ad2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ad2:	b480      	push	{r7}
 8006ad4:	b087      	sub	sp, #28
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	60f8      	str	r0, [r7, #12]
 8006ada:	60b9      	str	r1, [r7, #8]
 8006adc:	607a      	str	r2, [r7, #4]
 8006ade:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006aec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	021a      	lsls	r2, r3, #8
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	431a      	orrs	r2, r3
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	697a      	ldr	r2, [r7, #20]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	697a      	ldr	r2, [r7, #20]
 8006b04:	609a      	str	r2, [r3, #8]
}
 8006b06:	bf00      	nop
 8006b08:	371c      	adds	r7, #28
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bc80      	pop	{r7}
 8006b0e:	4770      	bx	lr

08006b10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b085      	sub	sp, #20
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d101      	bne.n	8006b28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b24:	2302      	movs	r3, #2
 8006b26:	e046      	b.n	8006bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2202      	movs	r2, #2
 8006b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	68fa      	ldr	r2, [r7, #12]
 8006b60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a16      	ldr	r2, [pc, #88]	; (8006bc0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d00e      	beq.n	8006b8a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b74:	d009      	beq.n	8006b8a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a12      	ldr	r2, [pc, #72]	; (8006bc4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d004      	beq.n	8006b8a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a10      	ldr	r2, [pc, #64]	; (8006bc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d10c      	bne.n	8006ba4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	68ba      	ldr	r2, [r7, #8]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	68ba      	ldr	r2, [r7, #8]
 8006ba2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bb4:	2300      	movs	r3, #0
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3714      	adds	r7, #20
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bc80      	pop	{r7}
 8006bbe:	4770      	bx	lr
 8006bc0:	40012c00 	.word	0x40012c00
 8006bc4:	40000400 	.word	0x40000400
 8006bc8:	40000800 	.word	0x40000800

08006bcc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006bd4:	bf00      	nop
 8006bd6:	370c      	adds	r7, #12
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bc80      	pop	{r7}
 8006bdc:	4770      	bx	lr

08006bde <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006bde:	b480      	push	{r7}
 8006be0:	b083      	sub	sp, #12
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006be6:	bf00      	nop
 8006be8:	370c      	adds	r7, #12
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bc80      	pop	{r7}
 8006bee:	4770      	bx	lr

08006bf0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b082      	sub	sp, #8
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d101      	bne.n	8006c02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e03f      	b.n	8006c82 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d106      	bne.n	8006c1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f7fc f9b0 	bl	8002f7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2224      	movs	r2, #36	; 0x24
 8006c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	68da      	ldr	r2, [r3, #12]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 fde3 	bl	8007800 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	691a      	ldr	r2, [r3, #16]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	695a      	ldr	r2, [r3, #20]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	68da      	ldr	r2, [r3, #12]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2220      	movs	r2, #32
 8006c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2220      	movs	r2, #32
 8006c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006c80:	2300      	movs	r3, #0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3708      	adds	r7, #8
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}

08006c8a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c8a:	b580      	push	{r7, lr}
 8006c8c:	b08a      	sub	sp, #40	; 0x28
 8006c8e:	af02      	add	r7, sp, #8
 8006c90:	60f8      	str	r0, [r7, #12]
 8006c92:	60b9      	str	r1, [r7, #8]
 8006c94:	603b      	str	r3, [r7, #0]
 8006c96:	4613      	mov	r3, r2
 8006c98:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	2b20      	cmp	r3, #32
 8006ca8:	d17c      	bne.n	8006da4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d002      	beq.n	8006cb6 <HAL_UART_Transmit+0x2c>
 8006cb0:	88fb      	ldrh	r3, [r7, #6]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d101      	bne.n	8006cba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e075      	b.n	8006da6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d101      	bne.n	8006cc8 <HAL_UART_Transmit+0x3e>
 8006cc4:	2302      	movs	r3, #2
 8006cc6:	e06e      	b.n	8006da6 <HAL_UART_Transmit+0x11c>
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2221      	movs	r2, #33	; 0x21
 8006cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006cde:	f7fc fb8b 	bl	80033f8 <HAL_GetTick>
 8006ce2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	88fa      	ldrh	r2, [r7, #6]
 8006ce8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	88fa      	ldrh	r2, [r7, #6]
 8006cee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cf8:	d108      	bne.n	8006d0c <HAL_UART_Transmit+0x82>
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d104      	bne.n	8006d0c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006d02:	2300      	movs	r3, #0
 8006d04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	61bb      	str	r3, [r7, #24]
 8006d0a:	e003      	b.n	8006d14 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d10:	2300      	movs	r3, #0
 8006d12:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006d1c:	e02a      	b.n	8006d74 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	9300      	str	r3, [sp, #0]
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	2200      	movs	r2, #0
 8006d26:	2180      	movs	r1, #128	; 0x80
 8006d28:	68f8      	ldr	r0, [r7, #12]
 8006d2a:	f000 fb54 	bl	80073d6 <UART_WaitOnFlagUntilTimeout>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d001      	beq.n	8006d38 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006d34:	2303      	movs	r3, #3
 8006d36:	e036      	b.n	8006da6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d10b      	bne.n	8006d56 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	881b      	ldrh	r3, [r3, #0]
 8006d42:	461a      	mov	r2, r3
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d4c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006d4e:	69bb      	ldr	r3, [r7, #24]
 8006d50:	3302      	adds	r3, #2
 8006d52:	61bb      	str	r3, [r7, #24]
 8006d54:	e007      	b.n	8006d66 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	781a      	ldrb	r2, [r3, #0]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	3301      	adds	r3, #1
 8006d64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	b29a      	uxth	r2, r3
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d1cf      	bne.n	8006d1e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	9300      	str	r3, [sp, #0]
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	2200      	movs	r2, #0
 8006d86:	2140      	movs	r1, #64	; 0x40
 8006d88:	68f8      	ldr	r0, [r7, #12]
 8006d8a:	f000 fb24 	bl	80073d6 <UART_WaitOnFlagUntilTimeout>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d001      	beq.n	8006d98 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006d94:	2303      	movs	r3, #3
 8006d96:	e006      	b.n	8006da6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2220      	movs	r2, #32
 8006d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006da0:	2300      	movs	r3, #0
 8006da2:	e000      	b.n	8006da6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006da4:	2302      	movs	r3, #2
  }
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3720      	adds	r7, #32
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}

08006dae <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b084      	sub	sp, #16
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	60f8      	str	r0, [r7, #12]
 8006db6:	60b9      	str	r1, [r7, #8]
 8006db8:	4613      	mov	r3, r2
 8006dba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	2b20      	cmp	r3, #32
 8006dc6:	d11d      	bne.n	8006e04 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d002      	beq.n	8006dd4 <HAL_UART_Receive_DMA+0x26>
 8006dce:	88fb      	ldrh	r3, [r7, #6]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d101      	bne.n	8006dd8 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e016      	b.n	8006e06 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d101      	bne.n	8006de6 <HAL_UART_Receive_DMA+0x38>
 8006de2:	2302      	movs	r3, #2
 8006de4:	e00f      	b.n	8006e06 <HAL_UART_Receive_DMA+0x58>
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2201      	movs	r2, #1
 8006dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2200      	movs	r2, #0
 8006df2:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8006df4:	88fb      	ldrh	r3, [r7, #6]
 8006df6:	461a      	mov	r2, r3
 8006df8:	68b9      	ldr	r1, [r7, #8]
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	f000 fb36 	bl	800746c <UART_Start_Receive_DMA>
 8006e00:	4603      	mov	r3, r0
 8006e02:	e000      	b.n	8006e06 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006e04:	2302      	movs	r3, #2
  }
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3710      	adds	r7, #16
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}

08006e0e <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8006e0e:	b580      	push	{r7, lr}
 8006e10:	b084      	sub	sp, #16
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006e16:	2300      	movs	r3, #0
 8006e18:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	695b      	ldr	r3, [r3, #20]
 8006e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	bf14      	ite	ne
 8006e28:	2301      	movne	r3, #1
 8006e2a:	2300      	moveq	r3, #0
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	2b21      	cmp	r3, #33	; 0x21
 8006e3a:	d116      	bne.n	8006e6a <HAL_UART_DMAStop+0x5c>
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d013      	beq.n	8006e6a <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	695a      	ldr	r2, [r3, #20]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e50:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d004      	beq.n	8006e64 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f7fd f8b7 	bl	8003fd2 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 fb65 	bl	8007534 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	695b      	ldr	r3, [r3, #20]
 8006e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	bf14      	ite	ne
 8006e78:	2301      	movne	r3, #1
 8006e7a:	2300      	moveq	r3, #0
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	2b22      	cmp	r3, #34	; 0x22
 8006e8a:	d116      	bne.n	8006eba <HAL_UART_DMAStop+0xac>
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d013      	beq.n	8006eba <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	695a      	ldr	r2, [r3, #20]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ea0:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d004      	beq.n	8006eb4 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f7fd f88f 	bl	8003fd2 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 fb52 	bl	800755e <UART_EndRxTransfer>
  }

  return HAL_OK;
 8006eba:	2300      	movs	r3, #0
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3710      	adds	r7, #16
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b08a      	sub	sp, #40	; 0x28
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	695b      	ldr	r3, [r3, #20]
 8006ee2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eee:	f003 030f 	and.w	r3, r3, #15
 8006ef2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d10d      	bne.n	8006f16 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efc:	f003 0320 	and.w	r3, r3, #32
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d008      	beq.n	8006f16 <HAL_UART_IRQHandler+0x52>
 8006f04:	6a3b      	ldr	r3, [r7, #32]
 8006f06:	f003 0320 	and.w	r3, r3, #32
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d003      	beq.n	8006f16 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 fbcc 	bl	80076ac <UART_Receive_IT>
      return;
 8006f14:	e17b      	b.n	800720e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006f16:	69bb      	ldr	r3, [r7, #24]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f000 80b1 	beq.w	8007080 <HAL_UART_IRQHandler+0x1bc>
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	f003 0301 	and.w	r3, r3, #1
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d105      	bne.n	8006f34 <HAL_UART_IRQHandler+0x70>
 8006f28:	6a3b      	ldr	r3, [r7, #32]
 8006f2a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	f000 80a6 	beq.w	8007080 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f36:	f003 0301 	and.w	r3, r3, #1
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00a      	beq.n	8006f54 <HAL_UART_IRQHandler+0x90>
 8006f3e:	6a3b      	ldr	r3, [r7, #32]
 8006f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d005      	beq.n	8006f54 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4c:	f043 0201 	orr.w	r2, r3, #1
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f56:	f003 0304 	and.w	r3, r3, #4
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00a      	beq.n	8006f74 <HAL_UART_IRQHandler+0xb0>
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	f003 0301 	and.w	r3, r3, #1
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d005      	beq.n	8006f74 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f6c:	f043 0202 	orr.w	r2, r3, #2
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f76:	f003 0302 	and.w	r3, r3, #2
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00a      	beq.n	8006f94 <HAL_UART_IRQHandler+0xd0>
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	f003 0301 	and.w	r3, r3, #1
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d005      	beq.n	8006f94 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8c:	f043 0204 	orr.w	r2, r3, #4
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f96:	f003 0308 	and.w	r3, r3, #8
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d00f      	beq.n	8006fbe <HAL_UART_IRQHandler+0xfa>
 8006f9e:	6a3b      	ldr	r3, [r7, #32]
 8006fa0:	f003 0320 	and.w	r3, r3, #32
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d104      	bne.n	8006fb2 <HAL_UART_IRQHandler+0xee>
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	f003 0301 	and.w	r3, r3, #1
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d005      	beq.n	8006fbe <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb6:	f043 0208 	orr.w	r2, r3, #8
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	f000 811e 	beq.w	8007204 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fca:	f003 0320 	and.w	r3, r3, #32
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d007      	beq.n	8006fe2 <HAL_UART_IRQHandler+0x11e>
 8006fd2:	6a3b      	ldr	r3, [r7, #32]
 8006fd4:	f003 0320 	and.w	r3, r3, #32
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d002      	beq.n	8006fe2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 fb65 	bl	80076ac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	695b      	ldr	r3, [r3, #20]
 8006fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	bf14      	ite	ne
 8006ff0:	2301      	movne	r3, #1
 8006ff2:	2300      	moveq	r3, #0
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ffc:	f003 0308 	and.w	r3, r3, #8
 8007000:	2b00      	cmp	r3, #0
 8007002:	d102      	bne.n	800700a <HAL_UART_IRQHandler+0x146>
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d031      	beq.n	800706e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 faa7 	bl	800755e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	695b      	ldr	r3, [r3, #20]
 8007016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800701a:	2b00      	cmp	r3, #0
 800701c:	d023      	beq.n	8007066 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	695a      	ldr	r2, [r3, #20]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800702c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007032:	2b00      	cmp	r3, #0
 8007034:	d013      	beq.n	800705e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800703a:	4a76      	ldr	r2, [pc, #472]	; (8007214 <HAL_UART_IRQHandler+0x350>)
 800703c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007042:	4618      	mov	r0, r3
 8007044:	f7fd f800 	bl	8004048 <HAL_DMA_Abort_IT>
 8007048:	4603      	mov	r3, r0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d016      	beq.n	800707c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007058:	4610      	mov	r0, r2
 800705a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800705c:	e00e      	b.n	800707c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 f8f5 	bl	800724e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007064:	e00a      	b.n	800707c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 f8f1 	bl	800724e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800706c:	e006      	b.n	800707c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 f8ed 	bl	800724e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800707a:	e0c3      	b.n	8007204 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800707c:	bf00      	nop
    return;
 800707e:	e0c1      	b.n	8007204 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007084:	2b01      	cmp	r3, #1
 8007086:	f040 80a1 	bne.w	80071cc <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800708a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708c:	f003 0310 	and.w	r3, r3, #16
 8007090:	2b00      	cmp	r3, #0
 8007092:	f000 809b 	beq.w	80071cc <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007096:	6a3b      	ldr	r3, [r7, #32]
 8007098:	f003 0310 	and.w	r3, r3, #16
 800709c:	2b00      	cmp	r3, #0
 800709e:	f000 8095 	beq.w	80071cc <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80070a2:	2300      	movs	r3, #0
 80070a4:	60fb      	str	r3, [r7, #12]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	60fb      	str	r3, [r7, #12]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	60fb      	str	r3, [r7, #12]
 80070b6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	695b      	ldr	r3, [r3, #20]
 80070be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d04e      	beq.n	8007164 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80070d0:	8a3b      	ldrh	r3, [r7, #16]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	f000 8098 	beq.w	8007208 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80070dc:	8a3a      	ldrh	r2, [r7, #16]
 80070de:	429a      	cmp	r2, r3
 80070e0:	f080 8092 	bcs.w	8007208 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	8a3a      	ldrh	r2, [r7, #16]
 80070e8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ee:	699b      	ldr	r3, [r3, #24]
 80070f0:	2b20      	cmp	r3, #32
 80070f2:	d02b      	beq.n	800714c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	68da      	ldr	r2, [r3, #12]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007102:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	695a      	ldr	r2, [r3, #20]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f022 0201 	bic.w	r2, r2, #1
 8007112:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	695a      	ldr	r2, [r3, #20]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007122:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2220      	movs	r2, #32
 8007128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	68da      	ldr	r2, [r3, #12]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f022 0210 	bic.w	r2, r2, #16
 8007140:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007146:	4618      	mov	r0, r3
 8007148:	f7fc ff43 	bl	8003fd2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007154:	b29b      	uxth	r3, r3
 8007156:	1ad3      	subs	r3, r2, r3
 8007158:	b29b      	uxth	r3, r3
 800715a:	4619      	mov	r1, r3
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 f87f 	bl	8007260 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007162:	e051      	b.n	8007208 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800716c:	b29b      	uxth	r3, r3
 800716e:	1ad3      	subs	r3, r2, r3
 8007170:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007176:	b29b      	uxth	r3, r3
 8007178:	2b00      	cmp	r3, #0
 800717a:	d047      	beq.n	800720c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800717c:	8a7b      	ldrh	r3, [r7, #18]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d044      	beq.n	800720c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68da      	ldr	r2, [r3, #12]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007190:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	695a      	ldr	r2, [r3, #20]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f022 0201 	bic.w	r2, r2, #1
 80071a0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2220      	movs	r2, #32
 80071a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68da      	ldr	r2, [r3, #12]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f022 0210 	bic.w	r2, r2, #16
 80071be:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80071c0:	8a7b      	ldrh	r3, [r7, #18]
 80071c2:	4619      	mov	r1, r3
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 f84b 	bl	8007260 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80071ca:	e01f      	b.n	800720c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80071cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d008      	beq.n	80071e8 <HAL_UART_IRQHandler+0x324>
 80071d6:	6a3b      	ldr	r3, [r7, #32]
 80071d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d003      	beq.n	80071e8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 f9fc 	bl	80075de <UART_Transmit_IT>
    return;
 80071e6:	e012      	b.n	800720e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80071e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d00d      	beq.n	800720e <HAL_UART_IRQHandler+0x34a>
 80071f2:	6a3b      	ldr	r3, [r7, #32]
 80071f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d008      	beq.n	800720e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 fa3d 	bl	800767c <UART_EndTransmit_IT>
    return;
 8007202:	e004      	b.n	800720e <HAL_UART_IRQHandler+0x34a>
    return;
 8007204:	bf00      	nop
 8007206:	e002      	b.n	800720e <HAL_UART_IRQHandler+0x34a>
      return;
 8007208:	bf00      	nop
 800720a:	e000      	b.n	800720e <HAL_UART_IRQHandler+0x34a>
      return;
 800720c:	bf00      	nop
  }
}
 800720e:	3728      	adds	r7, #40	; 0x28
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}
 8007214:	080075b7 	.word	0x080075b7

08007218 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007218:	b480      	push	{r7}
 800721a:	b083      	sub	sp, #12
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007220:	bf00      	nop
 8007222:	370c      	adds	r7, #12
 8007224:	46bd      	mov	sp, r7
 8007226:	bc80      	pop	{r7}
 8007228:	4770      	bx	lr

0800722a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800722a:	b480      	push	{r7}
 800722c:	b083      	sub	sp, #12
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007232:	bf00      	nop
 8007234:	370c      	adds	r7, #12
 8007236:	46bd      	mov	sp, r7
 8007238:	bc80      	pop	{r7}
 800723a:	4770      	bx	lr

0800723c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007244:	bf00      	nop
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	bc80      	pop	{r7}
 800724c:	4770      	bx	lr

0800724e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800724e:	b480      	push	{r7}
 8007250:	b083      	sub	sp, #12
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007256:	bf00      	nop
 8007258:	370c      	adds	r7, #12
 800725a:	46bd      	mov	sp, r7
 800725c:	bc80      	pop	{r7}
 800725e:	4770      	bx	lr

08007260 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007260:	b480      	push	{r7}
 8007262:	b083      	sub	sp, #12
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	460b      	mov	r3, r1
 800726a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800726c:	bf00      	nop
 800726e:	370c      	adds	r7, #12
 8007270:	46bd      	mov	sp, r7
 8007272:	bc80      	pop	{r7}
 8007274:	4770      	bx	lr

08007276 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007276:	b580      	push	{r7, lr}
 8007278:	b084      	sub	sp, #16
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007282:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f003 0320 	and.w	r3, r3, #32
 800728e:	2b00      	cmp	r3, #0
 8007290:	d12a      	bne.n	80072e8 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2200      	movs	r2, #0
 8007296:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	68da      	ldr	r2, [r3, #12]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072a6:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	695a      	ldr	r2, [r3, #20]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f022 0201 	bic.w	r2, r2, #1
 80072b6:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	695a      	ldr	r2, [r3, #20]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072c6:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2220      	movs	r2, #32
 80072cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d107      	bne.n	80072e8 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	68da      	ldr	r2, [r3, #12]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f022 0210 	bic.w	r2, r2, #16
 80072e6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d106      	bne.n	80072fe <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80072f4:	4619      	mov	r1, r3
 80072f6:	68f8      	ldr	r0, [r7, #12]
 80072f8:	f7ff ffb2 	bl	8007260 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80072fc:	e002      	b.n	8007304 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80072fe:	68f8      	ldr	r0, [r7, #12]
 8007300:	f7ff ff93 	bl	800722a <HAL_UART_RxCpltCallback>
}
 8007304:	bf00      	nop
 8007306:	3710      	adds	r7, #16
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007318:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800731e:	2b01      	cmp	r3, #1
 8007320:	d108      	bne.n	8007334 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007326:	085b      	lsrs	r3, r3, #1
 8007328:	b29b      	uxth	r3, r3
 800732a:	4619      	mov	r1, r3
 800732c:	68f8      	ldr	r0, [r7, #12]
 800732e:	f7ff ff97 	bl	8007260 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007332:	e002      	b.n	800733a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007334:	68f8      	ldr	r0, [r7, #12]
 8007336:	f7ff ff81 	bl	800723c <HAL_UART_RxHalfCpltCallback>
}
 800733a:	bf00      	nop
 800733c:	3710      	adds	r7, #16
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}

08007342 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007342:	b580      	push	{r7, lr}
 8007344:	b084      	sub	sp, #16
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800734a:	2300      	movs	r3, #0
 800734c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007352:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	695b      	ldr	r3, [r3, #20]
 800735a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800735e:	2b00      	cmp	r3, #0
 8007360:	bf14      	ite	ne
 8007362:	2301      	movne	r3, #1
 8007364:	2300      	moveq	r3, #0
 8007366:	b2db      	uxtb	r3, r3
 8007368:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007370:	b2db      	uxtb	r3, r3
 8007372:	2b21      	cmp	r3, #33	; 0x21
 8007374:	d108      	bne.n	8007388 <UART_DMAError+0x46>
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d005      	beq.n	8007388 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	2200      	movs	r2, #0
 8007380:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007382:	68b8      	ldr	r0, [r7, #8]
 8007384:	f000 f8d6 	bl	8007534 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	695b      	ldr	r3, [r3, #20]
 800738e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007392:	2b00      	cmp	r3, #0
 8007394:	bf14      	ite	ne
 8007396:	2301      	movne	r3, #1
 8007398:	2300      	moveq	r3, #0
 800739a:	b2db      	uxtb	r3, r3
 800739c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	2b22      	cmp	r3, #34	; 0x22
 80073a8:	d108      	bne.n	80073bc <UART_DMAError+0x7a>
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d005      	beq.n	80073bc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	2200      	movs	r2, #0
 80073b4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80073b6:	68b8      	ldr	r0, [r7, #8]
 80073b8:	f000 f8d1 	bl	800755e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c0:	f043 0210 	orr.w	r2, r3, #16
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80073c8:	68b8      	ldr	r0, [r7, #8]
 80073ca:	f7ff ff40 	bl	800724e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073ce:	bf00      	nop
 80073d0:	3710      	adds	r7, #16
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}

080073d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b084      	sub	sp, #16
 80073da:	af00      	add	r7, sp, #0
 80073dc:	60f8      	str	r0, [r7, #12]
 80073de:	60b9      	str	r1, [r7, #8]
 80073e0:	603b      	str	r3, [r7, #0]
 80073e2:	4613      	mov	r3, r2
 80073e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073e6:	e02c      	b.n	8007442 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ee:	d028      	beq.n	8007442 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80073f0:	69bb      	ldr	r3, [r7, #24]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d007      	beq.n	8007406 <UART_WaitOnFlagUntilTimeout+0x30>
 80073f6:	f7fb ffff 	bl	80033f8 <HAL_GetTick>
 80073fa:	4602      	mov	r2, r0
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	1ad3      	subs	r3, r2, r3
 8007400:	69ba      	ldr	r2, [r7, #24]
 8007402:	429a      	cmp	r2, r3
 8007404:	d21d      	bcs.n	8007442 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	68da      	ldr	r2, [r3, #12]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007414:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	695a      	ldr	r2, [r3, #20]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f022 0201 	bic.w	r2, r2, #1
 8007424:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2220      	movs	r2, #32
 800742a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2220      	movs	r2, #32
 8007432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2200      	movs	r2, #0
 800743a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800743e:	2303      	movs	r3, #3
 8007440:	e00f      	b.n	8007462 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	4013      	ands	r3, r2
 800744c:	68ba      	ldr	r2, [r7, #8]
 800744e:	429a      	cmp	r2, r3
 8007450:	bf0c      	ite	eq
 8007452:	2301      	moveq	r3, #1
 8007454:	2300      	movne	r3, #0
 8007456:	b2db      	uxtb	r3, r3
 8007458:	461a      	mov	r2, r3
 800745a:	79fb      	ldrb	r3, [r7, #7]
 800745c:	429a      	cmp	r2, r3
 800745e:	d0c3      	beq.n	80073e8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007460:	2300      	movs	r3, #0
}
 8007462:	4618      	mov	r0, r3
 8007464:	3710      	adds	r7, #16
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
	...

0800746c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b086      	sub	sp, #24
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	4613      	mov	r3, r2
 8007478:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800747a:	68ba      	ldr	r2, [r7, #8]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	88fa      	ldrh	r2, [r7, #6]
 8007484:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2200      	movs	r2, #0
 800748a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2222      	movs	r2, #34	; 0x22
 8007490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007498:	4a23      	ldr	r2, [pc, #140]	; (8007528 <UART_Start_Receive_DMA+0xbc>)
 800749a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a0:	4a22      	ldr	r2, [pc, #136]	; (800752c <UART_Start_Receive_DMA+0xc0>)
 80074a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a8:	4a21      	ldr	r2, [pc, #132]	; (8007530 <UART_Start_Receive_DMA+0xc4>)
 80074aa:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b0:	2200      	movs	r2, #0
 80074b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80074b4:	f107 0308 	add.w	r3, r7, #8
 80074b8:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	3304      	adds	r3, #4
 80074c4:	4619      	mov	r1, r3
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	88fb      	ldrh	r3, [r7, #6]
 80074cc:	f7fc fd22 	bl	8003f14 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80074d0:	2300      	movs	r3, #0
 80074d2:	613b      	str	r3, [r7, #16]
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	613b      	str	r3, [r7, #16]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	613b      	str	r3, [r7, #16]
 80074e4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	68da      	ldr	r2, [r3, #12]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074fc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	695a      	ldr	r2, [r3, #20]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f042 0201 	orr.w	r2, r2, #1
 800750c:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	695a      	ldr	r2, [r3, #20]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800751c:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800751e:	2300      	movs	r3, #0
}
 8007520:	4618      	mov	r0, r3
 8007522:	3718      	adds	r7, #24
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}
 8007528:	08007277 	.word	0x08007277
 800752c:	0800730d 	.word	0x0800730d
 8007530:	08007343 	.word	0x08007343

08007534 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007534:	b480      	push	{r7}
 8007536:	b083      	sub	sp, #12
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	68da      	ldr	r2, [r3, #12]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800754a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2220      	movs	r2, #32
 8007550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007554:	bf00      	nop
 8007556:	370c      	adds	r7, #12
 8007558:	46bd      	mov	sp, r7
 800755a:	bc80      	pop	{r7}
 800755c:	4770      	bx	lr

0800755e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800755e:	b480      	push	{r7}
 8007560:	b083      	sub	sp, #12
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	68da      	ldr	r2, [r3, #12]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007574:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	695a      	ldr	r2, [r3, #20]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f022 0201 	bic.w	r2, r2, #1
 8007584:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800758a:	2b01      	cmp	r3, #1
 800758c:	d107      	bne.n	800759e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	68da      	ldr	r2, [r3, #12]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f022 0210 	bic.w	r2, r2, #16
 800759c:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2220      	movs	r2, #32
 80075a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2200      	movs	r2, #0
 80075aa:	631a      	str	r2, [r3, #48]	; 0x30
}
 80075ac:	bf00      	nop
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bc80      	pop	{r7}
 80075b4:	4770      	bx	lr

080075b6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b084      	sub	sp, #16
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2200      	movs	r2, #0
 80075c8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2200      	movs	r2, #0
 80075ce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80075d0:	68f8      	ldr	r0, [r7, #12]
 80075d2:	f7ff fe3c 	bl	800724e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075d6:	bf00      	nop
 80075d8:	3710      	adds	r7, #16
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80075de:	b480      	push	{r7}
 80075e0:	b085      	sub	sp, #20
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	2b21      	cmp	r3, #33	; 0x21
 80075f0:	d13e      	bne.n	8007670 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075fa:	d114      	bne.n	8007626 <UART_Transmit_IT+0x48>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	691b      	ldr	r3, [r3, #16]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d110      	bne.n	8007626 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6a1b      	ldr	r3, [r3, #32]
 8007608:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	881b      	ldrh	r3, [r3, #0]
 800760e:	461a      	mov	r2, r3
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007618:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6a1b      	ldr	r3, [r3, #32]
 800761e:	1c9a      	adds	r2, r3, #2
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	621a      	str	r2, [r3, #32]
 8007624:	e008      	b.n	8007638 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6a1b      	ldr	r3, [r3, #32]
 800762a:	1c59      	adds	r1, r3, #1
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	6211      	str	r1, [r2, #32]
 8007630:	781a      	ldrb	r2, [r3, #0]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800763c:	b29b      	uxth	r3, r3
 800763e:	3b01      	subs	r3, #1
 8007640:	b29b      	uxth	r3, r3
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	4619      	mov	r1, r3
 8007646:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007648:	2b00      	cmp	r3, #0
 800764a:	d10f      	bne.n	800766c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68da      	ldr	r2, [r3, #12]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800765a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	68da      	ldr	r2, [r3, #12]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800766a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800766c:	2300      	movs	r3, #0
 800766e:	e000      	b.n	8007672 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007670:	2302      	movs	r3, #2
  }
}
 8007672:	4618      	mov	r0, r3
 8007674:	3714      	adds	r7, #20
 8007676:	46bd      	mov	sp, r7
 8007678:	bc80      	pop	{r7}
 800767a:	4770      	bx	lr

0800767c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b082      	sub	sp, #8
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	68da      	ldr	r2, [r3, #12]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007692:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2220      	movs	r2, #32
 8007698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f7ff fdbb 	bl	8007218 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80076a2:	2300      	movs	r3, #0
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3708      	adds	r7, #8
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b086      	sub	sp, #24
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	2b22      	cmp	r3, #34	; 0x22
 80076be:	f040 8099 	bne.w	80077f4 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076ca:	d117      	bne.n	80076fc <UART_Receive_IT+0x50>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	691b      	ldr	r3, [r3, #16]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d113      	bne.n	80076fc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80076d4:	2300      	movs	r3, #0
 80076d6:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076dc:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ea:	b29a      	uxth	r2, r3
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076f4:	1c9a      	adds	r2, r3, #2
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	629a      	str	r2, [r3, #40]	; 0x28
 80076fa:	e026      	b.n	800774a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007700:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8007702:	2300      	movs	r3, #0
 8007704:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800770e:	d007      	beq.n	8007720 <UART_Receive_IT+0x74>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d10a      	bne.n	800772e <UART_Receive_IT+0x82>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	691b      	ldr	r3, [r3, #16]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d106      	bne.n	800772e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	b2da      	uxtb	r2, r3
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	701a      	strb	r2, [r3, #0]
 800772c:	e008      	b.n	8007740 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	b2db      	uxtb	r3, r3
 8007736:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800773a:	b2da      	uxtb	r2, r3
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007744:	1c5a      	adds	r2, r3, #1
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800774e:	b29b      	uxth	r3, r3
 8007750:	3b01      	subs	r3, #1
 8007752:	b29b      	uxth	r3, r3
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	4619      	mov	r1, r3
 8007758:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800775a:	2b00      	cmp	r3, #0
 800775c:	d148      	bne.n	80077f0 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	68da      	ldr	r2, [r3, #12]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f022 0220 	bic.w	r2, r2, #32
 800776c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	68da      	ldr	r2, [r3, #12]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800777c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	695a      	ldr	r2, [r3, #20]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f022 0201 	bic.w	r2, r2, #1
 800778c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2220      	movs	r2, #32
 8007792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800779a:	2b01      	cmp	r3, #1
 800779c:	d123      	bne.n	80077e6 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	68da      	ldr	r2, [r3, #12]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f022 0210 	bic.w	r2, r2, #16
 80077b2:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f003 0310 	and.w	r3, r3, #16
 80077be:	2b10      	cmp	r3, #16
 80077c0:	d10a      	bne.n	80077d8 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80077c2:	2300      	movs	r3, #0
 80077c4:	60fb      	str	r3, [r7, #12]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	60fb      	str	r3, [r7, #12]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	60fb      	str	r3, [r7, #12]
 80077d6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80077dc:	4619      	mov	r1, r3
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f7ff fd3e 	bl	8007260 <HAL_UARTEx_RxEventCallback>
 80077e4:	e002      	b.n	80077ec <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f7ff fd1f 	bl	800722a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80077ec:	2300      	movs	r3, #0
 80077ee:	e002      	b.n	80077f6 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80077f0:	2300      	movs	r3, #0
 80077f2:	e000      	b.n	80077f6 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80077f4:	2302      	movs	r3, #2
  }
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3718      	adds	r7, #24
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
	...

08007800 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	691b      	ldr	r3, [r3, #16]
 800780e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	68da      	ldr	r2, [r3, #12]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	430a      	orrs	r2, r1
 800781c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	689a      	ldr	r2, [r3, #8]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	691b      	ldr	r3, [r3, #16]
 8007826:	431a      	orrs	r2, r3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	695b      	ldr	r3, [r3, #20]
 800782c:	4313      	orrs	r3, r2
 800782e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800783a:	f023 030c 	bic.w	r3, r3, #12
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	6812      	ldr	r2, [r2, #0]
 8007842:	68b9      	ldr	r1, [r7, #8]
 8007844:	430b      	orrs	r3, r1
 8007846:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	695b      	ldr	r3, [r3, #20]
 800784e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	699a      	ldr	r2, [r3, #24]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	430a      	orrs	r2, r1
 800785c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a2c      	ldr	r2, [pc, #176]	; (8007914 <UART_SetConfig+0x114>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d103      	bne.n	8007870 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007868:	f7fe fcb2 	bl	80061d0 <HAL_RCC_GetPCLK2Freq>
 800786c:	60f8      	str	r0, [r7, #12]
 800786e:	e002      	b.n	8007876 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007870:	f7fe fc9a 	bl	80061a8 <HAL_RCC_GetPCLK1Freq>
 8007874:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007876:	68fa      	ldr	r2, [r7, #12]
 8007878:	4613      	mov	r3, r2
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	4413      	add	r3, r2
 800787e:	009a      	lsls	r2, r3, #2
 8007880:	441a      	add	r2, r3
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	fbb2 f3f3 	udiv	r3, r2, r3
 800788c:	4a22      	ldr	r2, [pc, #136]	; (8007918 <UART_SetConfig+0x118>)
 800788e:	fba2 2303 	umull	r2, r3, r2, r3
 8007892:	095b      	lsrs	r3, r3, #5
 8007894:	0119      	lsls	r1, r3, #4
 8007896:	68fa      	ldr	r2, [r7, #12]
 8007898:	4613      	mov	r3, r2
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	4413      	add	r3, r2
 800789e:	009a      	lsls	r2, r3, #2
 80078a0:	441a      	add	r2, r3
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	009b      	lsls	r3, r3, #2
 80078a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80078ac:	4b1a      	ldr	r3, [pc, #104]	; (8007918 <UART_SetConfig+0x118>)
 80078ae:	fba3 0302 	umull	r0, r3, r3, r2
 80078b2:	095b      	lsrs	r3, r3, #5
 80078b4:	2064      	movs	r0, #100	; 0x64
 80078b6:	fb00 f303 	mul.w	r3, r0, r3
 80078ba:	1ad3      	subs	r3, r2, r3
 80078bc:	011b      	lsls	r3, r3, #4
 80078be:	3332      	adds	r3, #50	; 0x32
 80078c0:	4a15      	ldr	r2, [pc, #84]	; (8007918 <UART_SetConfig+0x118>)
 80078c2:	fba2 2303 	umull	r2, r3, r2, r3
 80078c6:	095b      	lsrs	r3, r3, #5
 80078c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80078cc:	4419      	add	r1, r3
 80078ce:	68fa      	ldr	r2, [r7, #12]
 80078d0:	4613      	mov	r3, r2
 80078d2:	009b      	lsls	r3, r3, #2
 80078d4:	4413      	add	r3, r2
 80078d6:	009a      	lsls	r2, r3, #2
 80078d8:	441a      	add	r2, r3
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80078e4:	4b0c      	ldr	r3, [pc, #48]	; (8007918 <UART_SetConfig+0x118>)
 80078e6:	fba3 0302 	umull	r0, r3, r3, r2
 80078ea:	095b      	lsrs	r3, r3, #5
 80078ec:	2064      	movs	r0, #100	; 0x64
 80078ee:	fb00 f303 	mul.w	r3, r0, r3
 80078f2:	1ad3      	subs	r3, r2, r3
 80078f4:	011b      	lsls	r3, r3, #4
 80078f6:	3332      	adds	r3, #50	; 0x32
 80078f8:	4a07      	ldr	r2, [pc, #28]	; (8007918 <UART_SetConfig+0x118>)
 80078fa:	fba2 2303 	umull	r2, r3, r2, r3
 80078fe:	095b      	lsrs	r3, r3, #5
 8007900:	f003 020f 	and.w	r2, r3, #15
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	440a      	add	r2, r1
 800790a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800790c:	bf00      	nop
 800790e:	3710      	adds	r7, #16
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}
 8007914:	40013800 	.word	0x40013800
 8007918:	51eb851f 	.word	0x51eb851f

0800791c <_ZdlPvj>:
 800791c:	f000 b811 	b.w	8007942 <_ZdlPv>

08007920 <_Znwj>:
 8007920:	2801      	cmp	r0, #1
 8007922:	bf38      	it	cc
 8007924:	2001      	movcc	r0, #1
 8007926:	b510      	push	{r4, lr}
 8007928:	4604      	mov	r4, r0
 800792a:	4620      	mov	r0, r4
 800792c:	f000 fa06 	bl	8007d3c <malloc>
 8007930:	b930      	cbnz	r0, 8007940 <_Znwj+0x20>
 8007932:	f000 f809 	bl	8007948 <_ZSt15get_new_handlerv>
 8007936:	b908      	cbnz	r0, 800793c <_Znwj+0x1c>
 8007938:	f000 f9ca 	bl	8007cd0 <abort>
 800793c:	4780      	blx	r0
 800793e:	e7f4      	b.n	800792a <_Znwj+0xa>
 8007940:	bd10      	pop	{r4, pc}

08007942 <_ZdlPv>:
 8007942:	f000 ba03 	b.w	8007d4c <free>
	...

08007948 <_ZSt15get_new_handlerv>:
 8007948:	4b02      	ldr	r3, [pc, #8]	; (8007954 <_ZSt15get_new_handlerv+0xc>)
 800794a:	6818      	ldr	r0, [r3, #0]
 800794c:	f3bf 8f5b 	dmb	ish
 8007950:	4770      	bx	lr
 8007952:	bf00      	nop
 8007954:	20000620 	.word	0x20000620

08007958 <logf>:
 8007958:	b538      	push	{r3, r4, r5, lr}
 800795a:	4604      	mov	r4, r0
 800795c:	f000 f83e 	bl	80079dc <__ieee754_logf>
 8007960:	4621      	mov	r1, r4
 8007962:	4605      	mov	r5, r0
 8007964:	4620      	mov	r0, r4
 8007966:	f7f9 fa05 	bl	8000d74 <__aeabi_fcmpun>
 800796a:	b970      	cbnz	r0, 800798a <logf+0x32>
 800796c:	2100      	movs	r1, #0
 800796e:	4620      	mov	r0, r4
 8007970:	f7f9 f9f6 	bl	8000d60 <__aeabi_fcmpgt>
 8007974:	b948      	cbnz	r0, 800798a <logf+0x32>
 8007976:	2100      	movs	r1, #0
 8007978:	4620      	mov	r0, r4
 800797a:	f7f9 f9c9 	bl	8000d10 <__aeabi_fcmpeq>
 800797e:	b130      	cbz	r0, 800798e <logf+0x36>
 8007980:	f000 f9b2 	bl	8007ce8 <__errno>
 8007984:	2322      	movs	r3, #34	; 0x22
 8007986:	4d06      	ldr	r5, [pc, #24]	; (80079a0 <logf+0x48>)
 8007988:	6003      	str	r3, [r0, #0]
 800798a:	4628      	mov	r0, r5
 800798c:	bd38      	pop	{r3, r4, r5, pc}
 800798e:	f000 f9ab 	bl	8007ce8 <__errno>
 8007992:	2321      	movs	r3, #33	; 0x21
 8007994:	6003      	str	r3, [r0, #0]
 8007996:	4803      	ldr	r0, [pc, #12]	; (80079a4 <logf+0x4c>)
 8007998:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800799c:	f000 b994 	b.w	8007cc8 <nanf>
 80079a0:	ff800000 	.word	0xff800000
 80079a4:	08009949 	.word	0x08009949

080079a8 <sqrtf>:
 80079a8:	b538      	push	{r3, r4, r5, lr}
 80079aa:	4605      	mov	r5, r0
 80079ac:	f000 f93a 	bl	8007c24 <__ieee754_sqrtf>
 80079b0:	4629      	mov	r1, r5
 80079b2:	4604      	mov	r4, r0
 80079b4:	4628      	mov	r0, r5
 80079b6:	f7f9 f9dd 	bl	8000d74 <__aeabi_fcmpun>
 80079ba:	b968      	cbnz	r0, 80079d8 <sqrtf+0x30>
 80079bc:	2100      	movs	r1, #0
 80079be:	4628      	mov	r0, r5
 80079c0:	f7f9 f9b0 	bl	8000d24 <__aeabi_fcmplt>
 80079c4:	b140      	cbz	r0, 80079d8 <sqrtf+0x30>
 80079c6:	f000 f98f 	bl	8007ce8 <__errno>
 80079ca:	2321      	movs	r3, #33	; 0x21
 80079cc:	2100      	movs	r1, #0
 80079ce:	6003      	str	r3, [r0, #0]
 80079d0:	4608      	mov	r0, r1
 80079d2:	f7f9 f8bd 	bl	8000b50 <__aeabi_fdiv>
 80079d6:	4604      	mov	r4, r0
 80079d8:	4620      	mov	r0, r4
 80079da:	bd38      	pop	{r3, r4, r5, pc}

080079dc <__ieee754_logf>:
 80079dc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80079e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079e4:	4601      	mov	r1, r0
 80079e6:	4603      	mov	r3, r0
 80079e8:	d106      	bne.n	80079f8 <__ieee754_logf+0x1c>
 80079ea:	2100      	movs	r1, #0
 80079ec:	f04f 404c 	mov.w	r0, #3422552064	; 0xcc000000
 80079f0:	f7f9 f8ae 	bl	8000b50 <__aeabi_fdiv>
 80079f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079f8:	2800      	cmp	r0, #0
 80079fa:	da03      	bge.n	8007a04 <__ieee754_logf+0x28>
 80079fc:	f7f8 feea 	bl	80007d4 <__aeabi_fsub>
 8007a00:	2100      	movs	r1, #0
 8007a02:	e7f5      	b.n	80079f0 <__ieee754_logf+0x14>
 8007a04:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8007a08:	db02      	blt.n	8007a10 <__ieee754_logf+0x34>
 8007a0a:	f7f8 fee5 	bl	80007d8 <__addsf3>
 8007a0e:	e7f1      	b.n	80079f4 <__ieee754_logf+0x18>
 8007a10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8007a14:	da35      	bge.n	8007a82 <__ieee754_logf+0xa6>
 8007a16:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8007a1a:	f7f8 ffe5 	bl	80009e8 <__aeabi_fmul>
 8007a1e:	f06f 0218 	mvn.w	r2, #24
 8007a22:	4603      	mov	r3, r0
 8007a24:	f3c3 0416 	ubfx	r4, r3, #0, #23
 8007a28:	15de      	asrs	r6, r3, #23
 8007a2a:	4b71      	ldr	r3, [pc, #452]	; (8007bf0 <__ieee754_logf+0x214>)
 8007a2c:	3e7f      	subs	r6, #127	; 0x7f
 8007a2e:	4423      	add	r3, r4
 8007a30:	f403 0000 	and.w	r0, r3, #8388608	; 0x800000
 8007a34:	f080 507e 	eor.w	r0, r0, #1065353216	; 0x3f800000
 8007a38:	4416      	add	r6, r2
 8007a3a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8007a3e:	4320      	orrs	r0, r4
 8007a40:	eb06 56d3 	add.w	r6, r6, r3, lsr #23
 8007a44:	f7f8 fec6 	bl	80007d4 <__aeabi_fsub>
 8007a48:	4b6a      	ldr	r3, [pc, #424]	; (8007bf4 <__ieee754_logf+0x218>)
 8007a4a:	f104 020f 	add.w	r2, r4, #15
 8007a4e:	4013      	ands	r3, r2
 8007a50:	4605      	mov	r5, r0
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d13a      	bne.n	8007acc <__ieee754_logf+0xf0>
 8007a56:	2100      	movs	r1, #0
 8007a58:	f7f9 f95a 	bl	8000d10 <__aeabi_fcmpeq>
 8007a5c:	b198      	cbz	r0, 8007a86 <__ieee754_logf+0xaa>
 8007a5e:	2e00      	cmp	r6, #0
 8007a60:	f000 80c4 	beq.w	8007bec <__ieee754_logf+0x210>
 8007a64:	4630      	mov	r0, r6
 8007a66:	f7f8 ff6b 	bl	8000940 <__aeabi_i2f>
 8007a6a:	4963      	ldr	r1, [pc, #396]	; (8007bf8 <__ieee754_logf+0x21c>)
 8007a6c:	4605      	mov	r5, r0
 8007a6e:	f7f8 ffbb 	bl	80009e8 <__aeabi_fmul>
 8007a72:	4962      	ldr	r1, [pc, #392]	; (8007bfc <__ieee754_logf+0x220>)
 8007a74:	4604      	mov	r4, r0
 8007a76:	4628      	mov	r0, r5
 8007a78:	f7f8 ffb6 	bl	80009e8 <__aeabi_fmul>
 8007a7c:	4601      	mov	r1, r0
 8007a7e:	4620      	mov	r0, r4
 8007a80:	e7c3      	b.n	8007a0a <__ieee754_logf+0x2e>
 8007a82:	2200      	movs	r2, #0
 8007a84:	e7ce      	b.n	8007a24 <__ieee754_logf+0x48>
 8007a86:	495e      	ldr	r1, [pc, #376]	; (8007c00 <__ieee754_logf+0x224>)
 8007a88:	4628      	mov	r0, r5
 8007a8a:	f7f8 ffad 	bl	80009e8 <__aeabi_fmul>
 8007a8e:	4601      	mov	r1, r0
 8007a90:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8007a94:	f7f8 fe9e 	bl	80007d4 <__aeabi_fsub>
 8007a98:	4629      	mov	r1, r5
 8007a9a:	4604      	mov	r4, r0
 8007a9c:	4628      	mov	r0, r5
 8007a9e:	f7f8 ffa3 	bl	80009e8 <__aeabi_fmul>
 8007aa2:	4601      	mov	r1, r0
 8007aa4:	4620      	mov	r0, r4
 8007aa6:	f7f8 ff9f 	bl	80009e8 <__aeabi_fmul>
 8007aaa:	4604      	mov	r4, r0
 8007aac:	b90e      	cbnz	r6, 8007ab2 <__ieee754_logf+0xd6>
 8007aae:	4621      	mov	r1, r4
 8007ab0:	e06f      	b.n	8007b92 <__ieee754_logf+0x1b6>
 8007ab2:	4630      	mov	r0, r6
 8007ab4:	f7f8 ff44 	bl	8000940 <__aeabi_i2f>
 8007ab8:	494f      	ldr	r1, [pc, #316]	; (8007bf8 <__ieee754_logf+0x21c>)
 8007aba:	4607      	mov	r7, r0
 8007abc:	f7f8 ff94 	bl	80009e8 <__aeabi_fmul>
 8007ac0:	4606      	mov	r6, r0
 8007ac2:	4638      	mov	r0, r7
 8007ac4:	494d      	ldr	r1, [pc, #308]	; (8007bfc <__ieee754_logf+0x220>)
 8007ac6:	f7f8 ff8f 	bl	80009e8 <__aeabi_fmul>
 8007aca:	e072      	b.n	8007bb2 <__ieee754_logf+0x1d6>
 8007acc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007ad0:	f7f8 fe82 	bl	80007d8 <__addsf3>
 8007ad4:	4601      	mov	r1, r0
 8007ad6:	4628      	mov	r0, r5
 8007ad8:	f7f9 f83a 	bl	8000b50 <__aeabi_fdiv>
 8007adc:	4681      	mov	r9, r0
 8007ade:	4630      	mov	r0, r6
 8007ae0:	f7f8 ff2e 	bl	8000940 <__aeabi_i2f>
 8007ae4:	4649      	mov	r1, r9
 8007ae6:	4680      	mov	r8, r0
 8007ae8:	4648      	mov	r0, r9
 8007aea:	f7f8 ff7d 	bl	80009e8 <__aeabi_fmul>
 8007aee:	4601      	mov	r1, r0
 8007af0:	4683      	mov	fp, r0
 8007af2:	f7f8 ff79 	bl	80009e8 <__aeabi_fmul>
 8007af6:	4607      	mov	r7, r0
 8007af8:	4942      	ldr	r1, [pc, #264]	; (8007c04 <__ieee754_logf+0x228>)
 8007afa:	f7f8 ff75 	bl	80009e8 <__aeabi_fmul>
 8007afe:	4942      	ldr	r1, [pc, #264]	; (8007c08 <__ieee754_logf+0x22c>)
 8007b00:	f7f8 fe6a 	bl	80007d8 <__addsf3>
 8007b04:	4639      	mov	r1, r7
 8007b06:	f7f8 ff6f 	bl	80009e8 <__aeabi_fmul>
 8007b0a:	4940      	ldr	r1, [pc, #256]	; (8007c0c <__ieee754_logf+0x230>)
 8007b0c:	f7f8 fe64 	bl	80007d8 <__addsf3>
 8007b10:	4639      	mov	r1, r7
 8007b12:	f7f8 ff69 	bl	80009e8 <__aeabi_fmul>
 8007b16:	493e      	ldr	r1, [pc, #248]	; (8007c10 <__ieee754_logf+0x234>)
 8007b18:	f7f8 fe5e 	bl	80007d8 <__addsf3>
 8007b1c:	4659      	mov	r1, fp
 8007b1e:	f7f8 ff63 	bl	80009e8 <__aeabi_fmul>
 8007b22:	493c      	ldr	r1, [pc, #240]	; (8007c14 <__ieee754_logf+0x238>)
 8007b24:	4683      	mov	fp, r0
 8007b26:	4638      	mov	r0, r7
 8007b28:	f7f8 ff5e 	bl	80009e8 <__aeabi_fmul>
 8007b2c:	493a      	ldr	r1, [pc, #232]	; (8007c18 <__ieee754_logf+0x23c>)
 8007b2e:	f7f8 fe53 	bl	80007d8 <__addsf3>
 8007b32:	4639      	mov	r1, r7
 8007b34:	f7f8 ff58 	bl	80009e8 <__aeabi_fmul>
 8007b38:	4938      	ldr	r1, [pc, #224]	; (8007c1c <__ieee754_logf+0x240>)
 8007b3a:	f7f8 fe4d 	bl	80007d8 <__addsf3>
 8007b3e:	4639      	mov	r1, r7
 8007b40:	f7f8 ff52 	bl	80009e8 <__aeabi_fmul>
 8007b44:	4601      	mov	r1, r0
 8007b46:	4658      	mov	r0, fp
 8007b48:	f7f8 fe46 	bl	80007d8 <__addsf3>
 8007b4c:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 8007c20 <__ieee754_logf+0x244>
 8007b50:	f5c4 1357 	rsb	r3, r4, #3522560	; 0x35c000
 8007b54:	44a2      	add	sl, r4
 8007b56:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8007b5a:	ea43 030a 	orr.w	r3, r3, sl
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	4607      	mov	r7, r0
 8007b62:	dd30      	ble.n	8007bc6 <__ieee754_logf+0x1ea>
 8007b64:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8007b68:	4628      	mov	r0, r5
 8007b6a:	f7f8 ff3d 	bl	80009e8 <__aeabi_fmul>
 8007b6e:	4629      	mov	r1, r5
 8007b70:	f7f8 ff3a 	bl	80009e8 <__aeabi_fmul>
 8007b74:	4601      	mov	r1, r0
 8007b76:	4604      	mov	r4, r0
 8007b78:	4638      	mov	r0, r7
 8007b7a:	f7f8 fe2d 	bl	80007d8 <__addsf3>
 8007b7e:	4649      	mov	r1, r9
 8007b80:	f7f8 ff32 	bl	80009e8 <__aeabi_fmul>
 8007b84:	4607      	mov	r7, r0
 8007b86:	b946      	cbnz	r6, 8007b9a <__ieee754_logf+0x1be>
 8007b88:	4601      	mov	r1, r0
 8007b8a:	4620      	mov	r0, r4
 8007b8c:	f7f8 fe22 	bl	80007d4 <__aeabi_fsub>
 8007b90:	4601      	mov	r1, r0
 8007b92:	4628      	mov	r0, r5
 8007b94:	f7f8 fe1e 	bl	80007d4 <__aeabi_fsub>
 8007b98:	e72c      	b.n	80079f4 <__ieee754_logf+0x18>
 8007b9a:	4917      	ldr	r1, [pc, #92]	; (8007bf8 <__ieee754_logf+0x21c>)
 8007b9c:	4640      	mov	r0, r8
 8007b9e:	f7f8 ff23 	bl	80009e8 <__aeabi_fmul>
 8007ba2:	4916      	ldr	r1, [pc, #88]	; (8007bfc <__ieee754_logf+0x220>)
 8007ba4:	4606      	mov	r6, r0
 8007ba6:	4640      	mov	r0, r8
 8007ba8:	f7f8 ff1e 	bl	80009e8 <__aeabi_fmul>
 8007bac:	4639      	mov	r1, r7
 8007bae:	f7f8 fe13 	bl	80007d8 <__addsf3>
 8007bb2:	4601      	mov	r1, r0
 8007bb4:	4620      	mov	r0, r4
 8007bb6:	f7f8 fe0d 	bl	80007d4 <__aeabi_fsub>
 8007bba:	4629      	mov	r1, r5
 8007bbc:	f7f8 fe0a 	bl	80007d4 <__aeabi_fsub>
 8007bc0:	4601      	mov	r1, r0
 8007bc2:	4630      	mov	r0, r6
 8007bc4:	e7e6      	b.n	8007b94 <__ieee754_logf+0x1b8>
 8007bc6:	4601      	mov	r1, r0
 8007bc8:	4628      	mov	r0, r5
 8007bca:	f7f8 fe03 	bl	80007d4 <__aeabi_fsub>
 8007bce:	4649      	mov	r1, r9
 8007bd0:	f7f8 ff0a 	bl	80009e8 <__aeabi_fmul>
 8007bd4:	4604      	mov	r4, r0
 8007bd6:	2e00      	cmp	r6, #0
 8007bd8:	f43f af69 	beq.w	8007aae <__ieee754_logf+0xd2>
 8007bdc:	4906      	ldr	r1, [pc, #24]	; (8007bf8 <__ieee754_logf+0x21c>)
 8007bde:	4640      	mov	r0, r8
 8007be0:	f7f8 ff02 	bl	80009e8 <__aeabi_fmul>
 8007be4:	4905      	ldr	r1, [pc, #20]	; (8007bfc <__ieee754_logf+0x220>)
 8007be6:	4606      	mov	r6, r0
 8007be8:	4640      	mov	r0, r8
 8007bea:	e76c      	b.n	8007ac6 <__ieee754_logf+0xea>
 8007bec:	2000      	movs	r0, #0
 8007bee:	e701      	b.n	80079f4 <__ieee754_logf+0x18>
 8007bf0:	004afb20 	.word	0x004afb20
 8007bf4:	007ffff0 	.word	0x007ffff0
 8007bf8:	3f317180 	.word	0x3f317180
 8007bfc:	3717f7d1 	.word	0x3717f7d1
 8007c00:	3eaaaaab 	.word	0x3eaaaaab
 8007c04:	3e178897 	.word	0x3e178897
 8007c08:	3e3a3325 	.word	0x3e3a3325
 8007c0c:	3e924925 	.word	0x3e924925
 8007c10:	3f2aaaab 	.word	0x3f2aaaab
 8007c14:	3e1cd04f 	.word	0x3e1cd04f
 8007c18:	3e638e29 	.word	0x3e638e29
 8007c1c:	3ecccccd 	.word	0x3ecccccd
 8007c20:	ffcf5c30 	.word	0xffcf5c30

08007c24 <__ieee754_sqrtf>:
 8007c24:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8007c28:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8007c2c:	b570      	push	{r4, r5, r6, lr}
 8007c2e:	4603      	mov	r3, r0
 8007c30:	4604      	mov	r4, r0
 8007c32:	d309      	bcc.n	8007c48 <__ieee754_sqrtf+0x24>
 8007c34:	4601      	mov	r1, r0
 8007c36:	f7f8 fed7 	bl	80009e8 <__aeabi_fmul>
 8007c3a:	4601      	mov	r1, r0
 8007c3c:	4620      	mov	r0, r4
 8007c3e:	f7f8 fdcb 	bl	80007d8 <__addsf3>
 8007c42:	4604      	mov	r4, r0
 8007c44:	4620      	mov	r0, r4
 8007c46:	bd70      	pop	{r4, r5, r6, pc}
 8007c48:	2a00      	cmp	r2, #0
 8007c4a:	d0fb      	beq.n	8007c44 <__ieee754_sqrtf+0x20>
 8007c4c:	2800      	cmp	r0, #0
 8007c4e:	da06      	bge.n	8007c5e <__ieee754_sqrtf+0x3a>
 8007c50:	4601      	mov	r1, r0
 8007c52:	f7f8 fdbf 	bl	80007d4 <__aeabi_fsub>
 8007c56:	4601      	mov	r1, r0
 8007c58:	f7f8 ff7a 	bl	8000b50 <__aeabi_fdiv>
 8007c5c:	e7f1      	b.n	8007c42 <__ieee754_sqrtf+0x1e>
 8007c5e:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 8007c62:	ea4f 51e0 	mov.w	r1, r0, asr #23
 8007c66:	d029      	beq.n	8007cbc <__ieee754_sqrtf+0x98>
 8007c68:	f3c3 0216 	ubfx	r2, r3, #0, #23
 8007c6c:	07cb      	lsls	r3, r1, #31
 8007c6e:	f04f 0300 	mov.w	r3, #0
 8007c72:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 8007c76:	f04f 0419 	mov.w	r4, #25
 8007c7a:	461e      	mov	r6, r3
 8007c7c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8007c80:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8007c84:	bf58      	it	pl
 8007c86:	0052      	lslpl	r2, r2, #1
 8007c88:	1040      	asrs	r0, r0, #1
 8007c8a:	0052      	lsls	r2, r2, #1
 8007c8c:	1875      	adds	r5, r6, r1
 8007c8e:	4295      	cmp	r5, r2
 8007c90:	bfde      	ittt	le
 8007c92:	186e      	addle	r6, r5, r1
 8007c94:	1b52      	suble	r2, r2, r5
 8007c96:	185b      	addle	r3, r3, r1
 8007c98:	3c01      	subs	r4, #1
 8007c9a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007c9e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007ca2:	d1f3      	bne.n	8007c8c <__ieee754_sqrtf+0x68>
 8007ca4:	b112      	cbz	r2, 8007cac <__ieee754_sqrtf+0x88>
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	f023 0301 	bic.w	r3, r3, #1
 8007cac:	105c      	asrs	r4, r3, #1
 8007cae:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8007cb2:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 8007cb6:	e7c5      	b.n	8007c44 <__ieee754_sqrtf+0x20>
 8007cb8:	005b      	lsls	r3, r3, #1
 8007cba:	3201      	adds	r2, #1
 8007cbc:	0218      	lsls	r0, r3, #8
 8007cbe:	d5fb      	bpl.n	8007cb8 <__ieee754_sqrtf+0x94>
 8007cc0:	3a01      	subs	r2, #1
 8007cc2:	1a89      	subs	r1, r1, r2
 8007cc4:	e7d0      	b.n	8007c68 <__ieee754_sqrtf+0x44>
	...

08007cc8 <nanf>:
 8007cc8:	4800      	ldr	r0, [pc, #0]	; (8007ccc <nanf+0x4>)
 8007cca:	4770      	bx	lr
 8007ccc:	7fc00000 	.word	0x7fc00000

08007cd0 <abort>:
 8007cd0:	2006      	movs	r0, #6
 8007cd2:	b508      	push	{r3, lr}
 8007cd4:	f000 f9fa 	bl	80080cc <raise>
 8007cd8:	2001      	movs	r0, #1
 8007cda:	f7fb fa7c 	bl	80031d6 <_exit>

08007cde <atoi>:
 8007cde:	220a      	movs	r2, #10
 8007ce0:	2100      	movs	r1, #0
 8007ce2:	f000 bb03 	b.w	80082ec <strtol>
	...

08007ce8 <__errno>:
 8007ce8:	4b01      	ldr	r3, [pc, #4]	; (8007cf0 <__errno+0x8>)
 8007cea:	6818      	ldr	r0, [r3, #0]
 8007cec:	4770      	bx	lr
 8007cee:	bf00      	nop
 8007cf0:	2000000c 	.word	0x2000000c

08007cf4 <__libc_init_array>:
 8007cf4:	b570      	push	{r4, r5, r6, lr}
 8007cf6:	2600      	movs	r6, #0
 8007cf8:	4d0c      	ldr	r5, [pc, #48]	; (8007d2c <__libc_init_array+0x38>)
 8007cfa:	4c0d      	ldr	r4, [pc, #52]	; (8007d30 <__libc_init_array+0x3c>)
 8007cfc:	1b64      	subs	r4, r4, r5
 8007cfe:	10a4      	asrs	r4, r4, #2
 8007d00:	42a6      	cmp	r6, r4
 8007d02:	d109      	bne.n	8007d18 <__libc_init_array+0x24>
 8007d04:	f001 fb3a 	bl	800937c <_init>
 8007d08:	2600      	movs	r6, #0
 8007d0a:	4d0a      	ldr	r5, [pc, #40]	; (8007d34 <__libc_init_array+0x40>)
 8007d0c:	4c0a      	ldr	r4, [pc, #40]	; (8007d38 <__libc_init_array+0x44>)
 8007d0e:	1b64      	subs	r4, r4, r5
 8007d10:	10a4      	asrs	r4, r4, #2
 8007d12:	42a6      	cmp	r6, r4
 8007d14:	d105      	bne.n	8007d22 <__libc_init_array+0x2e>
 8007d16:	bd70      	pop	{r4, r5, r6, pc}
 8007d18:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d1c:	4798      	blx	r3
 8007d1e:	3601      	adds	r6, #1
 8007d20:	e7ee      	b.n	8007d00 <__libc_init_array+0xc>
 8007d22:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d26:	4798      	blx	r3
 8007d28:	3601      	adds	r6, #1
 8007d2a:	e7f2      	b.n	8007d12 <__libc_init_array+0x1e>
 8007d2c:	08009978 	.word	0x08009978
 8007d30:	08009978 	.word	0x08009978
 8007d34:	08009978 	.word	0x08009978
 8007d38:	08009980 	.word	0x08009980

08007d3c <malloc>:
 8007d3c:	4b02      	ldr	r3, [pc, #8]	; (8007d48 <malloc+0xc>)
 8007d3e:	4601      	mov	r1, r0
 8007d40:	6818      	ldr	r0, [r3, #0]
 8007d42:	f000 b889 	b.w	8007e58 <_malloc_r>
 8007d46:	bf00      	nop
 8007d48:	2000000c 	.word	0x2000000c

08007d4c <free>:
 8007d4c:	4b02      	ldr	r3, [pc, #8]	; (8007d58 <free+0xc>)
 8007d4e:	4601      	mov	r1, r0
 8007d50:	6818      	ldr	r0, [r3, #0]
 8007d52:	f000 b819 	b.w	8007d88 <_free_r>
 8007d56:	bf00      	nop
 8007d58:	2000000c 	.word	0x2000000c

08007d5c <memcpy>:
 8007d5c:	440a      	add	r2, r1
 8007d5e:	4291      	cmp	r1, r2
 8007d60:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d64:	d100      	bne.n	8007d68 <memcpy+0xc>
 8007d66:	4770      	bx	lr
 8007d68:	b510      	push	{r4, lr}
 8007d6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d6e:	4291      	cmp	r1, r2
 8007d70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d74:	d1f9      	bne.n	8007d6a <memcpy+0xe>
 8007d76:	bd10      	pop	{r4, pc}

08007d78 <memset>:
 8007d78:	4603      	mov	r3, r0
 8007d7a:	4402      	add	r2, r0
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d100      	bne.n	8007d82 <memset+0xa>
 8007d80:	4770      	bx	lr
 8007d82:	f803 1b01 	strb.w	r1, [r3], #1
 8007d86:	e7f9      	b.n	8007d7c <memset+0x4>

08007d88 <_free_r>:
 8007d88:	b538      	push	{r3, r4, r5, lr}
 8007d8a:	4605      	mov	r5, r0
 8007d8c:	2900      	cmp	r1, #0
 8007d8e:	d040      	beq.n	8007e12 <_free_r+0x8a>
 8007d90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d94:	1f0c      	subs	r4, r1, #4
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	bfb8      	it	lt
 8007d9a:	18e4      	addlt	r4, r4, r3
 8007d9c:	f000 fd8c 	bl	80088b8 <__malloc_lock>
 8007da0:	4a1c      	ldr	r2, [pc, #112]	; (8007e14 <_free_r+0x8c>)
 8007da2:	6813      	ldr	r3, [r2, #0]
 8007da4:	b933      	cbnz	r3, 8007db4 <_free_r+0x2c>
 8007da6:	6063      	str	r3, [r4, #4]
 8007da8:	6014      	str	r4, [r2, #0]
 8007daa:	4628      	mov	r0, r5
 8007dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007db0:	f000 bd88 	b.w	80088c4 <__malloc_unlock>
 8007db4:	42a3      	cmp	r3, r4
 8007db6:	d908      	bls.n	8007dca <_free_r+0x42>
 8007db8:	6820      	ldr	r0, [r4, #0]
 8007dba:	1821      	adds	r1, r4, r0
 8007dbc:	428b      	cmp	r3, r1
 8007dbe:	bf01      	itttt	eq
 8007dc0:	6819      	ldreq	r1, [r3, #0]
 8007dc2:	685b      	ldreq	r3, [r3, #4]
 8007dc4:	1809      	addeq	r1, r1, r0
 8007dc6:	6021      	streq	r1, [r4, #0]
 8007dc8:	e7ed      	b.n	8007da6 <_free_r+0x1e>
 8007dca:	461a      	mov	r2, r3
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	b10b      	cbz	r3, 8007dd4 <_free_r+0x4c>
 8007dd0:	42a3      	cmp	r3, r4
 8007dd2:	d9fa      	bls.n	8007dca <_free_r+0x42>
 8007dd4:	6811      	ldr	r1, [r2, #0]
 8007dd6:	1850      	adds	r0, r2, r1
 8007dd8:	42a0      	cmp	r0, r4
 8007dda:	d10b      	bne.n	8007df4 <_free_r+0x6c>
 8007ddc:	6820      	ldr	r0, [r4, #0]
 8007dde:	4401      	add	r1, r0
 8007de0:	1850      	adds	r0, r2, r1
 8007de2:	4283      	cmp	r3, r0
 8007de4:	6011      	str	r1, [r2, #0]
 8007de6:	d1e0      	bne.n	8007daa <_free_r+0x22>
 8007de8:	6818      	ldr	r0, [r3, #0]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	4401      	add	r1, r0
 8007dee:	6011      	str	r1, [r2, #0]
 8007df0:	6053      	str	r3, [r2, #4]
 8007df2:	e7da      	b.n	8007daa <_free_r+0x22>
 8007df4:	d902      	bls.n	8007dfc <_free_r+0x74>
 8007df6:	230c      	movs	r3, #12
 8007df8:	602b      	str	r3, [r5, #0]
 8007dfa:	e7d6      	b.n	8007daa <_free_r+0x22>
 8007dfc:	6820      	ldr	r0, [r4, #0]
 8007dfe:	1821      	adds	r1, r4, r0
 8007e00:	428b      	cmp	r3, r1
 8007e02:	bf01      	itttt	eq
 8007e04:	6819      	ldreq	r1, [r3, #0]
 8007e06:	685b      	ldreq	r3, [r3, #4]
 8007e08:	1809      	addeq	r1, r1, r0
 8007e0a:	6021      	streq	r1, [r4, #0]
 8007e0c:	6063      	str	r3, [r4, #4]
 8007e0e:	6054      	str	r4, [r2, #4]
 8007e10:	e7cb      	b.n	8007daa <_free_r+0x22>
 8007e12:	bd38      	pop	{r3, r4, r5, pc}
 8007e14:	20000624 	.word	0x20000624

08007e18 <sbrk_aligned>:
 8007e18:	b570      	push	{r4, r5, r6, lr}
 8007e1a:	4e0e      	ldr	r6, [pc, #56]	; (8007e54 <sbrk_aligned+0x3c>)
 8007e1c:	460c      	mov	r4, r1
 8007e1e:	6831      	ldr	r1, [r6, #0]
 8007e20:	4605      	mov	r5, r0
 8007e22:	b911      	cbnz	r1, 8007e2a <sbrk_aligned+0x12>
 8007e24:	f000 f91a 	bl	800805c <_sbrk_r>
 8007e28:	6030      	str	r0, [r6, #0]
 8007e2a:	4621      	mov	r1, r4
 8007e2c:	4628      	mov	r0, r5
 8007e2e:	f000 f915 	bl	800805c <_sbrk_r>
 8007e32:	1c43      	adds	r3, r0, #1
 8007e34:	d00a      	beq.n	8007e4c <sbrk_aligned+0x34>
 8007e36:	1cc4      	adds	r4, r0, #3
 8007e38:	f024 0403 	bic.w	r4, r4, #3
 8007e3c:	42a0      	cmp	r0, r4
 8007e3e:	d007      	beq.n	8007e50 <sbrk_aligned+0x38>
 8007e40:	1a21      	subs	r1, r4, r0
 8007e42:	4628      	mov	r0, r5
 8007e44:	f000 f90a 	bl	800805c <_sbrk_r>
 8007e48:	3001      	adds	r0, #1
 8007e4a:	d101      	bne.n	8007e50 <sbrk_aligned+0x38>
 8007e4c:	f04f 34ff 	mov.w	r4, #4294967295
 8007e50:	4620      	mov	r0, r4
 8007e52:	bd70      	pop	{r4, r5, r6, pc}
 8007e54:	20000628 	.word	0x20000628

08007e58 <_malloc_r>:
 8007e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e5c:	1ccd      	adds	r5, r1, #3
 8007e5e:	f025 0503 	bic.w	r5, r5, #3
 8007e62:	3508      	adds	r5, #8
 8007e64:	2d0c      	cmp	r5, #12
 8007e66:	bf38      	it	cc
 8007e68:	250c      	movcc	r5, #12
 8007e6a:	2d00      	cmp	r5, #0
 8007e6c:	4607      	mov	r7, r0
 8007e6e:	db01      	blt.n	8007e74 <_malloc_r+0x1c>
 8007e70:	42a9      	cmp	r1, r5
 8007e72:	d905      	bls.n	8007e80 <_malloc_r+0x28>
 8007e74:	230c      	movs	r3, #12
 8007e76:	2600      	movs	r6, #0
 8007e78:	603b      	str	r3, [r7, #0]
 8007e7a:	4630      	mov	r0, r6
 8007e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e80:	4e2e      	ldr	r6, [pc, #184]	; (8007f3c <_malloc_r+0xe4>)
 8007e82:	f000 fd19 	bl	80088b8 <__malloc_lock>
 8007e86:	6833      	ldr	r3, [r6, #0]
 8007e88:	461c      	mov	r4, r3
 8007e8a:	bb34      	cbnz	r4, 8007eda <_malloc_r+0x82>
 8007e8c:	4629      	mov	r1, r5
 8007e8e:	4638      	mov	r0, r7
 8007e90:	f7ff ffc2 	bl	8007e18 <sbrk_aligned>
 8007e94:	1c43      	adds	r3, r0, #1
 8007e96:	4604      	mov	r4, r0
 8007e98:	d14d      	bne.n	8007f36 <_malloc_r+0xde>
 8007e9a:	6834      	ldr	r4, [r6, #0]
 8007e9c:	4626      	mov	r6, r4
 8007e9e:	2e00      	cmp	r6, #0
 8007ea0:	d140      	bne.n	8007f24 <_malloc_r+0xcc>
 8007ea2:	6823      	ldr	r3, [r4, #0]
 8007ea4:	4631      	mov	r1, r6
 8007ea6:	4638      	mov	r0, r7
 8007ea8:	eb04 0803 	add.w	r8, r4, r3
 8007eac:	f000 f8d6 	bl	800805c <_sbrk_r>
 8007eb0:	4580      	cmp	r8, r0
 8007eb2:	d13a      	bne.n	8007f2a <_malloc_r+0xd2>
 8007eb4:	6821      	ldr	r1, [r4, #0]
 8007eb6:	3503      	adds	r5, #3
 8007eb8:	1a6d      	subs	r5, r5, r1
 8007eba:	f025 0503 	bic.w	r5, r5, #3
 8007ebe:	3508      	adds	r5, #8
 8007ec0:	2d0c      	cmp	r5, #12
 8007ec2:	bf38      	it	cc
 8007ec4:	250c      	movcc	r5, #12
 8007ec6:	4638      	mov	r0, r7
 8007ec8:	4629      	mov	r1, r5
 8007eca:	f7ff ffa5 	bl	8007e18 <sbrk_aligned>
 8007ece:	3001      	adds	r0, #1
 8007ed0:	d02b      	beq.n	8007f2a <_malloc_r+0xd2>
 8007ed2:	6823      	ldr	r3, [r4, #0]
 8007ed4:	442b      	add	r3, r5
 8007ed6:	6023      	str	r3, [r4, #0]
 8007ed8:	e00e      	b.n	8007ef8 <_malloc_r+0xa0>
 8007eda:	6822      	ldr	r2, [r4, #0]
 8007edc:	1b52      	subs	r2, r2, r5
 8007ede:	d41e      	bmi.n	8007f1e <_malloc_r+0xc6>
 8007ee0:	2a0b      	cmp	r2, #11
 8007ee2:	d916      	bls.n	8007f12 <_malloc_r+0xba>
 8007ee4:	1961      	adds	r1, r4, r5
 8007ee6:	42a3      	cmp	r3, r4
 8007ee8:	6025      	str	r5, [r4, #0]
 8007eea:	bf18      	it	ne
 8007eec:	6059      	strne	r1, [r3, #4]
 8007eee:	6863      	ldr	r3, [r4, #4]
 8007ef0:	bf08      	it	eq
 8007ef2:	6031      	streq	r1, [r6, #0]
 8007ef4:	5162      	str	r2, [r4, r5]
 8007ef6:	604b      	str	r3, [r1, #4]
 8007ef8:	4638      	mov	r0, r7
 8007efa:	f104 060b 	add.w	r6, r4, #11
 8007efe:	f000 fce1 	bl	80088c4 <__malloc_unlock>
 8007f02:	f026 0607 	bic.w	r6, r6, #7
 8007f06:	1d23      	adds	r3, r4, #4
 8007f08:	1af2      	subs	r2, r6, r3
 8007f0a:	d0b6      	beq.n	8007e7a <_malloc_r+0x22>
 8007f0c:	1b9b      	subs	r3, r3, r6
 8007f0e:	50a3      	str	r3, [r4, r2]
 8007f10:	e7b3      	b.n	8007e7a <_malloc_r+0x22>
 8007f12:	6862      	ldr	r2, [r4, #4]
 8007f14:	42a3      	cmp	r3, r4
 8007f16:	bf0c      	ite	eq
 8007f18:	6032      	streq	r2, [r6, #0]
 8007f1a:	605a      	strne	r2, [r3, #4]
 8007f1c:	e7ec      	b.n	8007ef8 <_malloc_r+0xa0>
 8007f1e:	4623      	mov	r3, r4
 8007f20:	6864      	ldr	r4, [r4, #4]
 8007f22:	e7b2      	b.n	8007e8a <_malloc_r+0x32>
 8007f24:	4634      	mov	r4, r6
 8007f26:	6876      	ldr	r6, [r6, #4]
 8007f28:	e7b9      	b.n	8007e9e <_malloc_r+0x46>
 8007f2a:	230c      	movs	r3, #12
 8007f2c:	4638      	mov	r0, r7
 8007f2e:	603b      	str	r3, [r7, #0]
 8007f30:	f000 fcc8 	bl	80088c4 <__malloc_unlock>
 8007f34:	e7a1      	b.n	8007e7a <_malloc_r+0x22>
 8007f36:	6025      	str	r5, [r4, #0]
 8007f38:	e7de      	b.n	8007ef8 <_malloc_r+0xa0>
 8007f3a:	bf00      	nop
 8007f3c:	20000624 	.word	0x20000624

08007f40 <iprintf>:
 8007f40:	b40f      	push	{r0, r1, r2, r3}
 8007f42:	4b0a      	ldr	r3, [pc, #40]	; (8007f6c <iprintf+0x2c>)
 8007f44:	b513      	push	{r0, r1, r4, lr}
 8007f46:	681c      	ldr	r4, [r3, #0]
 8007f48:	b124      	cbz	r4, 8007f54 <iprintf+0x14>
 8007f4a:	69a3      	ldr	r3, [r4, #24]
 8007f4c:	b913      	cbnz	r3, 8007f54 <iprintf+0x14>
 8007f4e:	4620      	mov	r0, r4
 8007f50:	f000 fbac 	bl	80086ac <__sinit>
 8007f54:	ab05      	add	r3, sp, #20
 8007f56:	4620      	mov	r0, r4
 8007f58:	9a04      	ldr	r2, [sp, #16]
 8007f5a:	68a1      	ldr	r1, [r4, #8]
 8007f5c:	9301      	str	r3, [sp, #4]
 8007f5e:	f000 fe3b 	bl	8008bd8 <_vfiprintf_r>
 8007f62:	b002      	add	sp, #8
 8007f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f68:	b004      	add	sp, #16
 8007f6a:	4770      	bx	lr
 8007f6c:	2000000c 	.word	0x2000000c

08007f70 <_puts_r>:
 8007f70:	b570      	push	{r4, r5, r6, lr}
 8007f72:	460e      	mov	r6, r1
 8007f74:	4605      	mov	r5, r0
 8007f76:	b118      	cbz	r0, 8007f80 <_puts_r+0x10>
 8007f78:	6983      	ldr	r3, [r0, #24]
 8007f7a:	b90b      	cbnz	r3, 8007f80 <_puts_r+0x10>
 8007f7c:	f000 fb96 	bl	80086ac <__sinit>
 8007f80:	69ab      	ldr	r3, [r5, #24]
 8007f82:	68ac      	ldr	r4, [r5, #8]
 8007f84:	b913      	cbnz	r3, 8007f8c <_puts_r+0x1c>
 8007f86:	4628      	mov	r0, r5
 8007f88:	f000 fb90 	bl	80086ac <__sinit>
 8007f8c:	4b2c      	ldr	r3, [pc, #176]	; (8008040 <_puts_r+0xd0>)
 8007f8e:	429c      	cmp	r4, r3
 8007f90:	d120      	bne.n	8007fd4 <_puts_r+0x64>
 8007f92:	686c      	ldr	r4, [r5, #4]
 8007f94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f96:	07db      	lsls	r3, r3, #31
 8007f98:	d405      	bmi.n	8007fa6 <_puts_r+0x36>
 8007f9a:	89a3      	ldrh	r3, [r4, #12]
 8007f9c:	0598      	lsls	r0, r3, #22
 8007f9e:	d402      	bmi.n	8007fa6 <_puts_r+0x36>
 8007fa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fa2:	f000 fc21 	bl	80087e8 <__retarget_lock_acquire_recursive>
 8007fa6:	89a3      	ldrh	r3, [r4, #12]
 8007fa8:	0719      	lsls	r1, r3, #28
 8007faa:	d51d      	bpl.n	8007fe8 <_puts_r+0x78>
 8007fac:	6923      	ldr	r3, [r4, #16]
 8007fae:	b1db      	cbz	r3, 8007fe8 <_puts_r+0x78>
 8007fb0:	3e01      	subs	r6, #1
 8007fb2:	68a3      	ldr	r3, [r4, #8]
 8007fb4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007fb8:	3b01      	subs	r3, #1
 8007fba:	60a3      	str	r3, [r4, #8]
 8007fbc:	bb39      	cbnz	r1, 800800e <_puts_r+0x9e>
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	da38      	bge.n	8008034 <_puts_r+0xc4>
 8007fc2:	4622      	mov	r2, r4
 8007fc4:	210a      	movs	r1, #10
 8007fc6:	4628      	mov	r0, r5
 8007fc8:	f000 f99a 	bl	8008300 <__swbuf_r>
 8007fcc:	3001      	adds	r0, #1
 8007fce:	d011      	beq.n	8007ff4 <_puts_r+0x84>
 8007fd0:	250a      	movs	r5, #10
 8007fd2:	e011      	b.n	8007ff8 <_puts_r+0x88>
 8007fd4:	4b1b      	ldr	r3, [pc, #108]	; (8008044 <_puts_r+0xd4>)
 8007fd6:	429c      	cmp	r4, r3
 8007fd8:	d101      	bne.n	8007fde <_puts_r+0x6e>
 8007fda:	68ac      	ldr	r4, [r5, #8]
 8007fdc:	e7da      	b.n	8007f94 <_puts_r+0x24>
 8007fde:	4b1a      	ldr	r3, [pc, #104]	; (8008048 <_puts_r+0xd8>)
 8007fe0:	429c      	cmp	r4, r3
 8007fe2:	bf08      	it	eq
 8007fe4:	68ec      	ldreq	r4, [r5, #12]
 8007fe6:	e7d5      	b.n	8007f94 <_puts_r+0x24>
 8007fe8:	4621      	mov	r1, r4
 8007fea:	4628      	mov	r0, r5
 8007fec:	f000 f9da 	bl	80083a4 <__swsetup_r>
 8007ff0:	2800      	cmp	r0, #0
 8007ff2:	d0dd      	beq.n	8007fb0 <_puts_r+0x40>
 8007ff4:	f04f 35ff 	mov.w	r5, #4294967295
 8007ff8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ffa:	07da      	lsls	r2, r3, #31
 8007ffc:	d405      	bmi.n	800800a <_puts_r+0x9a>
 8007ffe:	89a3      	ldrh	r3, [r4, #12]
 8008000:	059b      	lsls	r3, r3, #22
 8008002:	d402      	bmi.n	800800a <_puts_r+0x9a>
 8008004:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008006:	f000 fbf0 	bl	80087ea <__retarget_lock_release_recursive>
 800800a:	4628      	mov	r0, r5
 800800c:	bd70      	pop	{r4, r5, r6, pc}
 800800e:	2b00      	cmp	r3, #0
 8008010:	da04      	bge.n	800801c <_puts_r+0xac>
 8008012:	69a2      	ldr	r2, [r4, #24]
 8008014:	429a      	cmp	r2, r3
 8008016:	dc06      	bgt.n	8008026 <_puts_r+0xb6>
 8008018:	290a      	cmp	r1, #10
 800801a:	d004      	beq.n	8008026 <_puts_r+0xb6>
 800801c:	6823      	ldr	r3, [r4, #0]
 800801e:	1c5a      	adds	r2, r3, #1
 8008020:	6022      	str	r2, [r4, #0]
 8008022:	7019      	strb	r1, [r3, #0]
 8008024:	e7c5      	b.n	8007fb2 <_puts_r+0x42>
 8008026:	4622      	mov	r2, r4
 8008028:	4628      	mov	r0, r5
 800802a:	f000 f969 	bl	8008300 <__swbuf_r>
 800802e:	3001      	adds	r0, #1
 8008030:	d1bf      	bne.n	8007fb2 <_puts_r+0x42>
 8008032:	e7df      	b.n	8007ff4 <_puts_r+0x84>
 8008034:	250a      	movs	r5, #10
 8008036:	6823      	ldr	r3, [r4, #0]
 8008038:	1c5a      	adds	r2, r3, #1
 800803a:	6022      	str	r2, [r4, #0]
 800803c:	701d      	strb	r5, [r3, #0]
 800803e:	e7db      	b.n	8007ff8 <_puts_r+0x88>
 8008040:	08009904 	.word	0x08009904
 8008044:	08009924 	.word	0x08009924
 8008048:	080098e4 	.word	0x080098e4

0800804c <puts>:
 800804c:	4b02      	ldr	r3, [pc, #8]	; (8008058 <puts+0xc>)
 800804e:	4601      	mov	r1, r0
 8008050:	6818      	ldr	r0, [r3, #0]
 8008052:	f7ff bf8d 	b.w	8007f70 <_puts_r>
 8008056:	bf00      	nop
 8008058:	2000000c 	.word	0x2000000c

0800805c <_sbrk_r>:
 800805c:	b538      	push	{r3, r4, r5, lr}
 800805e:	2300      	movs	r3, #0
 8008060:	4d05      	ldr	r5, [pc, #20]	; (8008078 <_sbrk_r+0x1c>)
 8008062:	4604      	mov	r4, r0
 8008064:	4608      	mov	r0, r1
 8008066:	602b      	str	r3, [r5, #0]
 8008068:	f7fb f90c 	bl	8003284 <_sbrk>
 800806c:	1c43      	adds	r3, r0, #1
 800806e:	d102      	bne.n	8008076 <_sbrk_r+0x1a>
 8008070:	682b      	ldr	r3, [r5, #0]
 8008072:	b103      	cbz	r3, 8008076 <_sbrk_r+0x1a>
 8008074:	6023      	str	r3, [r4, #0]
 8008076:	bd38      	pop	{r3, r4, r5, pc}
 8008078:	20000630 	.word	0x20000630

0800807c <_raise_r>:
 800807c:	291f      	cmp	r1, #31
 800807e:	b538      	push	{r3, r4, r5, lr}
 8008080:	4604      	mov	r4, r0
 8008082:	460d      	mov	r5, r1
 8008084:	d904      	bls.n	8008090 <_raise_r+0x14>
 8008086:	2316      	movs	r3, #22
 8008088:	6003      	str	r3, [r0, #0]
 800808a:	f04f 30ff 	mov.w	r0, #4294967295
 800808e:	bd38      	pop	{r3, r4, r5, pc}
 8008090:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008092:	b112      	cbz	r2, 800809a <_raise_r+0x1e>
 8008094:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008098:	b94b      	cbnz	r3, 80080ae <_raise_r+0x32>
 800809a:	4620      	mov	r0, r4
 800809c:	f000 f830 	bl	8008100 <_getpid_r>
 80080a0:	462a      	mov	r2, r5
 80080a2:	4601      	mov	r1, r0
 80080a4:	4620      	mov	r0, r4
 80080a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080aa:	f000 b817 	b.w	80080dc <_kill_r>
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d00a      	beq.n	80080c8 <_raise_r+0x4c>
 80080b2:	1c59      	adds	r1, r3, #1
 80080b4:	d103      	bne.n	80080be <_raise_r+0x42>
 80080b6:	2316      	movs	r3, #22
 80080b8:	6003      	str	r3, [r0, #0]
 80080ba:	2001      	movs	r0, #1
 80080bc:	e7e7      	b.n	800808e <_raise_r+0x12>
 80080be:	2400      	movs	r4, #0
 80080c0:	4628      	mov	r0, r5
 80080c2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80080c6:	4798      	blx	r3
 80080c8:	2000      	movs	r0, #0
 80080ca:	e7e0      	b.n	800808e <_raise_r+0x12>

080080cc <raise>:
 80080cc:	4b02      	ldr	r3, [pc, #8]	; (80080d8 <raise+0xc>)
 80080ce:	4601      	mov	r1, r0
 80080d0:	6818      	ldr	r0, [r3, #0]
 80080d2:	f7ff bfd3 	b.w	800807c <_raise_r>
 80080d6:	bf00      	nop
 80080d8:	2000000c 	.word	0x2000000c

080080dc <_kill_r>:
 80080dc:	b538      	push	{r3, r4, r5, lr}
 80080de:	2300      	movs	r3, #0
 80080e0:	4d06      	ldr	r5, [pc, #24]	; (80080fc <_kill_r+0x20>)
 80080e2:	4604      	mov	r4, r0
 80080e4:	4608      	mov	r0, r1
 80080e6:	4611      	mov	r1, r2
 80080e8:	602b      	str	r3, [r5, #0]
 80080ea:	f7fb f864 	bl	80031b6 <_kill>
 80080ee:	1c43      	adds	r3, r0, #1
 80080f0:	d102      	bne.n	80080f8 <_kill_r+0x1c>
 80080f2:	682b      	ldr	r3, [r5, #0]
 80080f4:	b103      	cbz	r3, 80080f8 <_kill_r+0x1c>
 80080f6:	6023      	str	r3, [r4, #0]
 80080f8:	bd38      	pop	{r3, r4, r5, pc}
 80080fa:	bf00      	nop
 80080fc:	20000630 	.word	0x20000630

08008100 <_getpid_r>:
 8008100:	f7fb b852 	b.w	80031a8 <_getpid>

08008104 <sniprintf>:
 8008104:	b40c      	push	{r2, r3}
 8008106:	b530      	push	{r4, r5, lr}
 8008108:	4b17      	ldr	r3, [pc, #92]	; (8008168 <sniprintf+0x64>)
 800810a:	1e0c      	subs	r4, r1, #0
 800810c:	681d      	ldr	r5, [r3, #0]
 800810e:	b09d      	sub	sp, #116	; 0x74
 8008110:	da08      	bge.n	8008124 <sniprintf+0x20>
 8008112:	238b      	movs	r3, #139	; 0x8b
 8008114:	f04f 30ff 	mov.w	r0, #4294967295
 8008118:	602b      	str	r3, [r5, #0]
 800811a:	b01d      	add	sp, #116	; 0x74
 800811c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008120:	b002      	add	sp, #8
 8008122:	4770      	bx	lr
 8008124:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008128:	f8ad 3014 	strh.w	r3, [sp, #20]
 800812c:	bf0c      	ite	eq
 800812e:	4623      	moveq	r3, r4
 8008130:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008134:	9304      	str	r3, [sp, #16]
 8008136:	9307      	str	r3, [sp, #28]
 8008138:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800813c:	9002      	str	r0, [sp, #8]
 800813e:	9006      	str	r0, [sp, #24]
 8008140:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008144:	4628      	mov	r0, r5
 8008146:	ab21      	add	r3, sp, #132	; 0x84
 8008148:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800814a:	a902      	add	r1, sp, #8
 800814c:	9301      	str	r3, [sp, #4]
 800814e:	f000 fc1b 	bl	8008988 <_svfiprintf_r>
 8008152:	1c43      	adds	r3, r0, #1
 8008154:	bfbc      	itt	lt
 8008156:	238b      	movlt	r3, #139	; 0x8b
 8008158:	602b      	strlt	r3, [r5, #0]
 800815a:	2c00      	cmp	r4, #0
 800815c:	d0dd      	beq.n	800811a <sniprintf+0x16>
 800815e:	2200      	movs	r2, #0
 8008160:	9b02      	ldr	r3, [sp, #8]
 8008162:	701a      	strb	r2, [r3, #0]
 8008164:	e7d9      	b.n	800811a <sniprintf+0x16>
 8008166:	bf00      	nop
 8008168:	2000000c 	.word	0x2000000c

0800816c <siprintf>:
 800816c:	b40e      	push	{r1, r2, r3}
 800816e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008172:	b500      	push	{lr}
 8008174:	b09c      	sub	sp, #112	; 0x70
 8008176:	ab1d      	add	r3, sp, #116	; 0x74
 8008178:	9002      	str	r0, [sp, #8]
 800817a:	9006      	str	r0, [sp, #24]
 800817c:	9107      	str	r1, [sp, #28]
 800817e:	9104      	str	r1, [sp, #16]
 8008180:	4808      	ldr	r0, [pc, #32]	; (80081a4 <siprintf+0x38>)
 8008182:	4909      	ldr	r1, [pc, #36]	; (80081a8 <siprintf+0x3c>)
 8008184:	f853 2b04 	ldr.w	r2, [r3], #4
 8008188:	9105      	str	r1, [sp, #20]
 800818a:	6800      	ldr	r0, [r0, #0]
 800818c:	a902      	add	r1, sp, #8
 800818e:	9301      	str	r3, [sp, #4]
 8008190:	f000 fbfa 	bl	8008988 <_svfiprintf_r>
 8008194:	2200      	movs	r2, #0
 8008196:	9b02      	ldr	r3, [sp, #8]
 8008198:	701a      	strb	r2, [r3, #0]
 800819a:	b01c      	add	sp, #112	; 0x70
 800819c:	f85d eb04 	ldr.w	lr, [sp], #4
 80081a0:	b003      	add	sp, #12
 80081a2:	4770      	bx	lr
 80081a4:	2000000c 	.word	0x2000000c
 80081a8:	ffff0208 	.word	0xffff0208

080081ac <strchr>:
 80081ac:	4603      	mov	r3, r0
 80081ae:	b2c9      	uxtb	r1, r1
 80081b0:	4618      	mov	r0, r3
 80081b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081b6:	b112      	cbz	r2, 80081be <strchr+0x12>
 80081b8:	428a      	cmp	r2, r1
 80081ba:	d1f9      	bne.n	80081b0 <strchr+0x4>
 80081bc:	4770      	bx	lr
 80081be:	2900      	cmp	r1, #0
 80081c0:	bf18      	it	ne
 80081c2:	2000      	movne	r0, #0
 80081c4:	4770      	bx	lr

080081c6 <strstr>:
 80081c6:	780a      	ldrb	r2, [r1, #0]
 80081c8:	b570      	push	{r4, r5, r6, lr}
 80081ca:	b96a      	cbnz	r2, 80081e8 <strstr+0x22>
 80081cc:	bd70      	pop	{r4, r5, r6, pc}
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d109      	bne.n	80081e6 <strstr+0x20>
 80081d2:	460c      	mov	r4, r1
 80081d4:	4605      	mov	r5, r0
 80081d6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d0f6      	beq.n	80081cc <strstr+0x6>
 80081de:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80081e2:	429e      	cmp	r6, r3
 80081e4:	d0f7      	beq.n	80081d6 <strstr+0x10>
 80081e6:	3001      	adds	r0, #1
 80081e8:	7803      	ldrb	r3, [r0, #0]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d1ef      	bne.n	80081ce <strstr+0x8>
 80081ee:	4618      	mov	r0, r3
 80081f0:	e7ec      	b.n	80081cc <strstr+0x6>
	...

080081f4 <_strtol_l.constprop.0>:
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081fa:	4680      	mov	r8, r0
 80081fc:	d001      	beq.n	8008202 <_strtol_l.constprop.0+0xe>
 80081fe:	2b24      	cmp	r3, #36	; 0x24
 8008200:	d906      	bls.n	8008210 <_strtol_l.constprop.0+0x1c>
 8008202:	f7ff fd71 	bl	8007ce8 <__errno>
 8008206:	2316      	movs	r3, #22
 8008208:	6003      	str	r3, [r0, #0]
 800820a:	2000      	movs	r0, #0
 800820c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008210:	460d      	mov	r5, r1
 8008212:	4f35      	ldr	r7, [pc, #212]	; (80082e8 <_strtol_l.constprop.0+0xf4>)
 8008214:	4628      	mov	r0, r5
 8008216:	f815 4b01 	ldrb.w	r4, [r5], #1
 800821a:	5de6      	ldrb	r6, [r4, r7]
 800821c:	f016 0608 	ands.w	r6, r6, #8
 8008220:	d1f8      	bne.n	8008214 <_strtol_l.constprop.0+0x20>
 8008222:	2c2d      	cmp	r4, #45	; 0x2d
 8008224:	d12f      	bne.n	8008286 <_strtol_l.constprop.0+0x92>
 8008226:	2601      	movs	r6, #1
 8008228:	782c      	ldrb	r4, [r5, #0]
 800822a:	1c85      	adds	r5, r0, #2
 800822c:	2b00      	cmp	r3, #0
 800822e:	d057      	beq.n	80082e0 <_strtol_l.constprop.0+0xec>
 8008230:	2b10      	cmp	r3, #16
 8008232:	d109      	bne.n	8008248 <_strtol_l.constprop.0+0x54>
 8008234:	2c30      	cmp	r4, #48	; 0x30
 8008236:	d107      	bne.n	8008248 <_strtol_l.constprop.0+0x54>
 8008238:	7828      	ldrb	r0, [r5, #0]
 800823a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800823e:	2858      	cmp	r0, #88	; 0x58
 8008240:	d149      	bne.n	80082d6 <_strtol_l.constprop.0+0xe2>
 8008242:	2310      	movs	r3, #16
 8008244:	786c      	ldrb	r4, [r5, #1]
 8008246:	3502      	adds	r5, #2
 8008248:	2700      	movs	r7, #0
 800824a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800824e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8008252:	fbbe f9f3 	udiv	r9, lr, r3
 8008256:	4638      	mov	r0, r7
 8008258:	fb03 ea19 	mls	sl, r3, r9, lr
 800825c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008260:	f1bc 0f09 	cmp.w	ip, #9
 8008264:	d814      	bhi.n	8008290 <_strtol_l.constprop.0+0x9c>
 8008266:	4664      	mov	r4, ip
 8008268:	42a3      	cmp	r3, r4
 800826a:	dd22      	ble.n	80082b2 <_strtol_l.constprop.0+0xbe>
 800826c:	2f00      	cmp	r7, #0
 800826e:	db1d      	blt.n	80082ac <_strtol_l.constprop.0+0xb8>
 8008270:	4581      	cmp	r9, r0
 8008272:	d31b      	bcc.n	80082ac <_strtol_l.constprop.0+0xb8>
 8008274:	d101      	bne.n	800827a <_strtol_l.constprop.0+0x86>
 8008276:	45a2      	cmp	sl, r4
 8008278:	db18      	blt.n	80082ac <_strtol_l.constprop.0+0xb8>
 800827a:	2701      	movs	r7, #1
 800827c:	fb00 4003 	mla	r0, r0, r3, r4
 8008280:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008284:	e7ea      	b.n	800825c <_strtol_l.constprop.0+0x68>
 8008286:	2c2b      	cmp	r4, #43	; 0x2b
 8008288:	bf04      	itt	eq
 800828a:	782c      	ldrbeq	r4, [r5, #0]
 800828c:	1c85      	addeq	r5, r0, #2
 800828e:	e7cd      	b.n	800822c <_strtol_l.constprop.0+0x38>
 8008290:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008294:	f1bc 0f19 	cmp.w	ip, #25
 8008298:	d801      	bhi.n	800829e <_strtol_l.constprop.0+0xaa>
 800829a:	3c37      	subs	r4, #55	; 0x37
 800829c:	e7e4      	b.n	8008268 <_strtol_l.constprop.0+0x74>
 800829e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80082a2:	f1bc 0f19 	cmp.w	ip, #25
 80082a6:	d804      	bhi.n	80082b2 <_strtol_l.constprop.0+0xbe>
 80082a8:	3c57      	subs	r4, #87	; 0x57
 80082aa:	e7dd      	b.n	8008268 <_strtol_l.constprop.0+0x74>
 80082ac:	f04f 37ff 	mov.w	r7, #4294967295
 80082b0:	e7e6      	b.n	8008280 <_strtol_l.constprop.0+0x8c>
 80082b2:	2f00      	cmp	r7, #0
 80082b4:	da07      	bge.n	80082c6 <_strtol_l.constprop.0+0xd2>
 80082b6:	2322      	movs	r3, #34	; 0x22
 80082b8:	4670      	mov	r0, lr
 80082ba:	f8c8 3000 	str.w	r3, [r8]
 80082be:	2a00      	cmp	r2, #0
 80082c0:	d0a4      	beq.n	800820c <_strtol_l.constprop.0+0x18>
 80082c2:	1e69      	subs	r1, r5, #1
 80082c4:	e005      	b.n	80082d2 <_strtol_l.constprop.0+0xde>
 80082c6:	b106      	cbz	r6, 80082ca <_strtol_l.constprop.0+0xd6>
 80082c8:	4240      	negs	r0, r0
 80082ca:	2a00      	cmp	r2, #0
 80082cc:	d09e      	beq.n	800820c <_strtol_l.constprop.0+0x18>
 80082ce:	2f00      	cmp	r7, #0
 80082d0:	d1f7      	bne.n	80082c2 <_strtol_l.constprop.0+0xce>
 80082d2:	6011      	str	r1, [r2, #0]
 80082d4:	e79a      	b.n	800820c <_strtol_l.constprop.0+0x18>
 80082d6:	2430      	movs	r4, #48	; 0x30
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d1b5      	bne.n	8008248 <_strtol_l.constprop.0+0x54>
 80082dc:	2308      	movs	r3, #8
 80082de:	e7b3      	b.n	8008248 <_strtol_l.constprop.0+0x54>
 80082e0:	2c30      	cmp	r4, #48	; 0x30
 80082e2:	d0a9      	beq.n	8008238 <_strtol_l.constprop.0+0x44>
 80082e4:	230a      	movs	r3, #10
 80082e6:	e7af      	b.n	8008248 <_strtol_l.constprop.0+0x54>
 80082e8:	080097e1 	.word	0x080097e1

080082ec <strtol>:
 80082ec:	4613      	mov	r3, r2
 80082ee:	460a      	mov	r2, r1
 80082f0:	4601      	mov	r1, r0
 80082f2:	4802      	ldr	r0, [pc, #8]	; (80082fc <strtol+0x10>)
 80082f4:	6800      	ldr	r0, [r0, #0]
 80082f6:	f7ff bf7d 	b.w	80081f4 <_strtol_l.constprop.0>
 80082fa:	bf00      	nop
 80082fc:	2000000c 	.word	0x2000000c

08008300 <__swbuf_r>:
 8008300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008302:	460e      	mov	r6, r1
 8008304:	4614      	mov	r4, r2
 8008306:	4605      	mov	r5, r0
 8008308:	b118      	cbz	r0, 8008312 <__swbuf_r+0x12>
 800830a:	6983      	ldr	r3, [r0, #24]
 800830c:	b90b      	cbnz	r3, 8008312 <__swbuf_r+0x12>
 800830e:	f000 f9cd 	bl	80086ac <__sinit>
 8008312:	4b21      	ldr	r3, [pc, #132]	; (8008398 <__swbuf_r+0x98>)
 8008314:	429c      	cmp	r4, r3
 8008316:	d12b      	bne.n	8008370 <__swbuf_r+0x70>
 8008318:	686c      	ldr	r4, [r5, #4]
 800831a:	69a3      	ldr	r3, [r4, #24]
 800831c:	60a3      	str	r3, [r4, #8]
 800831e:	89a3      	ldrh	r3, [r4, #12]
 8008320:	071a      	lsls	r2, r3, #28
 8008322:	d52f      	bpl.n	8008384 <__swbuf_r+0x84>
 8008324:	6923      	ldr	r3, [r4, #16]
 8008326:	b36b      	cbz	r3, 8008384 <__swbuf_r+0x84>
 8008328:	6923      	ldr	r3, [r4, #16]
 800832a:	6820      	ldr	r0, [r4, #0]
 800832c:	b2f6      	uxtb	r6, r6
 800832e:	1ac0      	subs	r0, r0, r3
 8008330:	6963      	ldr	r3, [r4, #20]
 8008332:	4637      	mov	r7, r6
 8008334:	4283      	cmp	r3, r0
 8008336:	dc04      	bgt.n	8008342 <__swbuf_r+0x42>
 8008338:	4621      	mov	r1, r4
 800833a:	4628      	mov	r0, r5
 800833c:	f000 f922 	bl	8008584 <_fflush_r>
 8008340:	bb30      	cbnz	r0, 8008390 <__swbuf_r+0x90>
 8008342:	68a3      	ldr	r3, [r4, #8]
 8008344:	3001      	adds	r0, #1
 8008346:	3b01      	subs	r3, #1
 8008348:	60a3      	str	r3, [r4, #8]
 800834a:	6823      	ldr	r3, [r4, #0]
 800834c:	1c5a      	adds	r2, r3, #1
 800834e:	6022      	str	r2, [r4, #0]
 8008350:	701e      	strb	r6, [r3, #0]
 8008352:	6963      	ldr	r3, [r4, #20]
 8008354:	4283      	cmp	r3, r0
 8008356:	d004      	beq.n	8008362 <__swbuf_r+0x62>
 8008358:	89a3      	ldrh	r3, [r4, #12]
 800835a:	07db      	lsls	r3, r3, #31
 800835c:	d506      	bpl.n	800836c <__swbuf_r+0x6c>
 800835e:	2e0a      	cmp	r6, #10
 8008360:	d104      	bne.n	800836c <__swbuf_r+0x6c>
 8008362:	4621      	mov	r1, r4
 8008364:	4628      	mov	r0, r5
 8008366:	f000 f90d 	bl	8008584 <_fflush_r>
 800836a:	b988      	cbnz	r0, 8008390 <__swbuf_r+0x90>
 800836c:	4638      	mov	r0, r7
 800836e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008370:	4b0a      	ldr	r3, [pc, #40]	; (800839c <__swbuf_r+0x9c>)
 8008372:	429c      	cmp	r4, r3
 8008374:	d101      	bne.n	800837a <__swbuf_r+0x7a>
 8008376:	68ac      	ldr	r4, [r5, #8]
 8008378:	e7cf      	b.n	800831a <__swbuf_r+0x1a>
 800837a:	4b09      	ldr	r3, [pc, #36]	; (80083a0 <__swbuf_r+0xa0>)
 800837c:	429c      	cmp	r4, r3
 800837e:	bf08      	it	eq
 8008380:	68ec      	ldreq	r4, [r5, #12]
 8008382:	e7ca      	b.n	800831a <__swbuf_r+0x1a>
 8008384:	4621      	mov	r1, r4
 8008386:	4628      	mov	r0, r5
 8008388:	f000 f80c 	bl	80083a4 <__swsetup_r>
 800838c:	2800      	cmp	r0, #0
 800838e:	d0cb      	beq.n	8008328 <__swbuf_r+0x28>
 8008390:	f04f 37ff 	mov.w	r7, #4294967295
 8008394:	e7ea      	b.n	800836c <__swbuf_r+0x6c>
 8008396:	bf00      	nop
 8008398:	08009904 	.word	0x08009904
 800839c:	08009924 	.word	0x08009924
 80083a0:	080098e4 	.word	0x080098e4

080083a4 <__swsetup_r>:
 80083a4:	4b32      	ldr	r3, [pc, #200]	; (8008470 <__swsetup_r+0xcc>)
 80083a6:	b570      	push	{r4, r5, r6, lr}
 80083a8:	681d      	ldr	r5, [r3, #0]
 80083aa:	4606      	mov	r6, r0
 80083ac:	460c      	mov	r4, r1
 80083ae:	b125      	cbz	r5, 80083ba <__swsetup_r+0x16>
 80083b0:	69ab      	ldr	r3, [r5, #24]
 80083b2:	b913      	cbnz	r3, 80083ba <__swsetup_r+0x16>
 80083b4:	4628      	mov	r0, r5
 80083b6:	f000 f979 	bl	80086ac <__sinit>
 80083ba:	4b2e      	ldr	r3, [pc, #184]	; (8008474 <__swsetup_r+0xd0>)
 80083bc:	429c      	cmp	r4, r3
 80083be:	d10f      	bne.n	80083e0 <__swsetup_r+0x3c>
 80083c0:	686c      	ldr	r4, [r5, #4]
 80083c2:	89a3      	ldrh	r3, [r4, #12]
 80083c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80083c8:	0719      	lsls	r1, r3, #28
 80083ca:	d42c      	bmi.n	8008426 <__swsetup_r+0x82>
 80083cc:	06dd      	lsls	r5, r3, #27
 80083ce:	d411      	bmi.n	80083f4 <__swsetup_r+0x50>
 80083d0:	2309      	movs	r3, #9
 80083d2:	6033      	str	r3, [r6, #0]
 80083d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80083d8:	f04f 30ff 	mov.w	r0, #4294967295
 80083dc:	81a3      	strh	r3, [r4, #12]
 80083de:	e03e      	b.n	800845e <__swsetup_r+0xba>
 80083e0:	4b25      	ldr	r3, [pc, #148]	; (8008478 <__swsetup_r+0xd4>)
 80083e2:	429c      	cmp	r4, r3
 80083e4:	d101      	bne.n	80083ea <__swsetup_r+0x46>
 80083e6:	68ac      	ldr	r4, [r5, #8]
 80083e8:	e7eb      	b.n	80083c2 <__swsetup_r+0x1e>
 80083ea:	4b24      	ldr	r3, [pc, #144]	; (800847c <__swsetup_r+0xd8>)
 80083ec:	429c      	cmp	r4, r3
 80083ee:	bf08      	it	eq
 80083f0:	68ec      	ldreq	r4, [r5, #12]
 80083f2:	e7e6      	b.n	80083c2 <__swsetup_r+0x1e>
 80083f4:	0758      	lsls	r0, r3, #29
 80083f6:	d512      	bpl.n	800841e <__swsetup_r+0x7a>
 80083f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083fa:	b141      	cbz	r1, 800840e <__swsetup_r+0x6a>
 80083fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008400:	4299      	cmp	r1, r3
 8008402:	d002      	beq.n	800840a <__swsetup_r+0x66>
 8008404:	4630      	mov	r0, r6
 8008406:	f7ff fcbf 	bl	8007d88 <_free_r>
 800840a:	2300      	movs	r3, #0
 800840c:	6363      	str	r3, [r4, #52]	; 0x34
 800840e:	89a3      	ldrh	r3, [r4, #12]
 8008410:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008414:	81a3      	strh	r3, [r4, #12]
 8008416:	2300      	movs	r3, #0
 8008418:	6063      	str	r3, [r4, #4]
 800841a:	6923      	ldr	r3, [r4, #16]
 800841c:	6023      	str	r3, [r4, #0]
 800841e:	89a3      	ldrh	r3, [r4, #12]
 8008420:	f043 0308 	orr.w	r3, r3, #8
 8008424:	81a3      	strh	r3, [r4, #12]
 8008426:	6923      	ldr	r3, [r4, #16]
 8008428:	b94b      	cbnz	r3, 800843e <__swsetup_r+0x9a>
 800842a:	89a3      	ldrh	r3, [r4, #12]
 800842c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008430:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008434:	d003      	beq.n	800843e <__swsetup_r+0x9a>
 8008436:	4621      	mov	r1, r4
 8008438:	4630      	mov	r0, r6
 800843a:	f000 f9fd 	bl	8008838 <__smakebuf_r>
 800843e:	89a0      	ldrh	r0, [r4, #12]
 8008440:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008444:	f010 0301 	ands.w	r3, r0, #1
 8008448:	d00a      	beq.n	8008460 <__swsetup_r+0xbc>
 800844a:	2300      	movs	r3, #0
 800844c:	60a3      	str	r3, [r4, #8]
 800844e:	6963      	ldr	r3, [r4, #20]
 8008450:	425b      	negs	r3, r3
 8008452:	61a3      	str	r3, [r4, #24]
 8008454:	6923      	ldr	r3, [r4, #16]
 8008456:	b943      	cbnz	r3, 800846a <__swsetup_r+0xc6>
 8008458:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800845c:	d1ba      	bne.n	80083d4 <__swsetup_r+0x30>
 800845e:	bd70      	pop	{r4, r5, r6, pc}
 8008460:	0781      	lsls	r1, r0, #30
 8008462:	bf58      	it	pl
 8008464:	6963      	ldrpl	r3, [r4, #20]
 8008466:	60a3      	str	r3, [r4, #8]
 8008468:	e7f4      	b.n	8008454 <__swsetup_r+0xb0>
 800846a:	2000      	movs	r0, #0
 800846c:	e7f7      	b.n	800845e <__swsetup_r+0xba>
 800846e:	bf00      	nop
 8008470:	2000000c 	.word	0x2000000c
 8008474:	08009904 	.word	0x08009904
 8008478:	08009924 	.word	0x08009924
 800847c:	080098e4 	.word	0x080098e4

08008480 <__sflush_r>:
 8008480:	898a      	ldrh	r2, [r1, #12]
 8008482:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008484:	4605      	mov	r5, r0
 8008486:	0710      	lsls	r0, r2, #28
 8008488:	460c      	mov	r4, r1
 800848a:	d457      	bmi.n	800853c <__sflush_r+0xbc>
 800848c:	684b      	ldr	r3, [r1, #4]
 800848e:	2b00      	cmp	r3, #0
 8008490:	dc04      	bgt.n	800849c <__sflush_r+0x1c>
 8008492:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008494:	2b00      	cmp	r3, #0
 8008496:	dc01      	bgt.n	800849c <__sflush_r+0x1c>
 8008498:	2000      	movs	r0, #0
 800849a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800849c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800849e:	2e00      	cmp	r6, #0
 80084a0:	d0fa      	beq.n	8008498 <__sflush_r+0x18>
 80084a2:	2300      	movs	r3, #0
 80084a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80084a8:	682f      	ldr	r7, [r5, #0]
 80084aa:	602b      	str	r3, [r5, #0]
 80084ac:	d032      	beq.n	8008514 <__sflush_r+0x94>
 80084ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80084b0:	89a3      	ldrh	r3, [r4, #12]
 80084b2:	075a      	lsls	r2, r3, #29
 80084b4:	d505      	bpl.n	80084c2 <__sflush_r+0x42>
 80084b6:	6863      	ldr	r3, [r4, #4]
 80084b8:	1ac0      	subs	r0, r0, r3
 80084ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80084bc:	b10b      	cbz	r3, 80084c2 <__sflush_r+0x42>
 80084be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80084c0:	1ac0      	subs	r0, r0, r3
 80084c2:	2300      	movs	r3, #0
 80084c4:	4602      	mov	r2, r0
 80084c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80084c8:	4628      	mov	r0, r5
 80084ca:	6a21      	ldr	r1, [r4, #32]
 80084cc:	47b0      	blx	r6
 80084ce:	1c43      	adds	r3, r0, #1
 80084d0:	89a3      	ldrh	r3, [r4, #12]
 80084d2:	d106      	bne.n	80084e2 <__sflush_r+0x62>
 80084d4:	6829      	ldr	r1, [r5, #0]
 80084d6:	291d      	cmp	r1, #29
 80084d8:	d82c      	bhi.n	8008534 <__sflush_r+0xb4>
 80084da:	4a29      	ldr	r2, [pc, #164]	; (8008580 <__sflush_r+0x100>)
 80084dc:	40ca      	lsrs	r2, r1
 80084de:	07d6      	lsls	r6, r2, #31
 80084e0:	d528      	bpl.n	8008534 <__sflush_r+0xb4>
 80084e2:	2200      	movs	r2, #0
 80084e4:	6062      	str	r2, [r4, #4]
 80084e6:	6922      	ldr	r2, [r4, #16]
 80084e8:	04d9      	lsls	r1, r3, #19
 80084ea:	6022      	str	r2, [r4, #0]
 80084ec:	d504      	bpl.n	80084f8 <__sflush_r+0x78>
 80084ee:	1c42      	adds	r2, r0, #1
 80084f0:	d101      	bne.n	80084f6 <__sflush_r+0x76>
 80084f2:	682b      	ldr	r3, [r5, #0]
 80084f4:	b903      	cbnz	r3, 80084f8 <__sflush_r+0x78>
 80084f6:	6560      	str	r0, [r4, #84]	; 0x54
 80084f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80084fa:	602f      	str	r7, [r5, #0]
 80084fc:	2900      	cmp	r1, #0
 80084fe:	d0cb      	beq.n	8008498 <__sflush_r+0x18>
 8008500:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008504:	4299      	cmp	r1, r3
 8008506:	d002      	beq.n	800850e <__sflush_r+0x8e>
 8008508:	4628      	mov	r0, r5
 800850a:	f7ff fc3d 	bl	8007d88 <_free_r>
 800850e:	2000      	movs	r0, #0
 8008510:	6360      	str	r0, [r4, #52]	; 0x34
 8008512:	e7c2      	b.n	800849a <__sflush_r+0x1a>
 8008514:	6a21      	ldr	r1, [r4, #32]
 8008516:	2301      	movs	r3, #1
 8008518:	4628      	mov	r0, r5
 800851a:	47b0      	blx	r6
 800851c:	1c41      	adds	r1, r0, #1
 800851e:	d1c7      	bne.n	80084b0 <__sflush_r+0x30>
 8008520:	682b      	ldr	r3, [r5, #0]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d0c4      	beq.n	80084b0 <__sflush_r+0x30>
 8008526:	2b1d      	cmp	r3, #29
 8008528:	d001      	beq.n	800852e <__sflush_r+0xae>
 800852a:	2b16      	cmp	r3, #22
 800852c:	d101      	bne.n	8008532 <__sflush_r+0xb2>
 800852e:	602f      	str	r7, [r5, #0]
 8008530:	e7b2      	b.n	8008498 <__sflush_r+0x18>
 8008532:	89a3      	ldrh	r3, [r4, #12]
 8008534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008538:	81a3      	strh	r3, [r4, #12]
 800853a:	e7ae      	b.n	800849a <__sflush_r+0x1a>
 800853c:	690f      	ldr	r7, [r1, #16]
 800853e:	2f00      	cmp	r7, #0
 8008540:	d0aa      	beq.n	8008498 <__sflush_r+0x18>
 8008542:	0793      	lsls	r3, r2, #30
 8008544:	bf18      	it	ne
 8008546:	2300      	movne	r3, #0
 8008548:	680e      	ldr	r6, [r1, #0]
 800854a:	bf08      	it	eq
 800854c:	694b      	ldreq	r3, [r1, #20]
 800854e:	1bf6      	subs	r6, r6, r7
 8008550:	600f      	str	r7, [r1, #0]
 8008552:	608b      	str	r3, [r1, #8]
 8008554:	2e00      	cmp	r6, #0
 8008556:	dd9f      	ble.n	8008498 <__sflush_r+0x18>
 8008558:	4633      	mov	r3, r6
 800855a:	463a      	mov	r2, r7
 800855c:	4628      	mov	r0, r5
 800855e:	6a21      	ldr	r1, [r4, #32]
 8008560:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008564:	47e0      	blx	ip
 8008566:	2800      	cmp	r0, #0
 8008568:	dc06      	bgt.n	8008578 <__sflush_r+0xf8>
 800856a:	89a3      	ldrh	r3, [r4, #12]
 800856c:	f04f 30ff 	mov.w	r0, #4294967295
 8008570:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008574:	81a3      	strh	r3, [r4, #12]
 8008576:	e790      	b.n	800849a <__sflush_r+0x1a>
 8008578:	4407      	add	r7, r0
 800857a:	1a36      	subs	r6, r6, r0
 800857c:	e7ea      	b.n	8008554 <__sflush_r+0xd4>
 800857e:	bf00      	nop
 8008580:	20400001 	.word	0x20400001

08008584 <_fflush_r>:
 8008584:	b538      	push	{r3, r4, r5, lr}
 8008586:	690b      	ldr	r3, [r1, #16]
 8008588:	4605      	mov	r5, r0
 800858a:	460c      	mov	r4, r1
 800858c:	b913      	cbnz	r3, 8008594 <_fflush_r+0x10>
 800858e:	2500      	movs	r5, #0
 8008590:	4628      	mov	r0, r5
 8008592:	bd38      	pop	{r3, r4, r5, pc}
 8008594:	b118      	cbz	r0, 800859e <_fflush_r+0x1a>
 8008596:	6983      	ldr	r3, [r0, #24]
 8008598:	b90b      	cbnz	r3, 800859e <_fflush_r+0x1a>
 800859a:	f000 f887 	bl	80086ac <__sinit>
 800859e:	4b14      	ldr	r3, [pc, #80]	; (80085f0 <_fflush_r+0x6c>)
 80085a0:	429c      	cmp	r4, r3
 80085a2:	d11b      	bne.n	80085dc <_fflush_r+0x58>
 80085a4:	686c      	ldr	r4, [r5, #4]
 80085a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d0ef      	beq.n	800858e <_fflush_r+0xa>
 80085ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80085b0:	07d0      	lsls	r0, r2, #31
 80085b2:	d404      	bmi.n	80085be <_fflush_r+0x3a>
 80085b4:	0599      	lsls	r1, r3, #22
 80085b6:	d402      	bmi.n	80085be <_fflush_r+0x3a>
 80085b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80085ba:	f000 f915 	bl	80087e8 <__retarget_lock_acquire_recursive>
 80085be:	4628      	mov	r0, r5
 80085c0:	4621      	mov	r1, r4
 80085c2:	f7ff ff5d 	bl	8008480 <__sflush_r>
 80085c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80085c8:	4605      	mov	r5, r0
 80085ca:	07da      	lsls	r2, r3, #31
 80085cc:	d4e0      	bmi.n	8008590 <_fflush_r+0xc>
 80085ce:	89a3      	ldrh	r3, [r4, #12]
 80085d0:	059b      	lsls	r3, r3, #22
 80085d2:	d4dd      	bmi.n	8008590 <_fflush_r+0xc>
 80085d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80085d6:	f000 f908 	bl	80087ea <__retarget_lock_release_recursive>
 80085da:	e7d9      	b.n	8008590 <_fflush_r+0xc>
 80085dc:	4b05      	ldr	r3, [pc, #20]	; (80085f4 <_fflush_r+0x70>)
 80085de:	429c      	cmp	r4, r3
 80085e0:	d101      	bne.n	80085e6 <_fflush_r+0x62>
 80085e2:	68ac      	ldr	r4, [r5, #8]
 80085e4:	e7df      	b.n	80085a6 <_fflush_r+0x22>
 80085e6:	4b04      	ldr	r3, [pc, #16]	; (80085f8 <_fflush_r+0x74>)
 80085e8:	429c      	cmp	r4, r3
 80085ea:	bf08      	it	eq
 80085ec:	68ec      	ldreq	r4, [r5, #12]
 80085ee:	e7da      	b.n	80085a6 <_fflush_r+0x22>
 80085f0:	08009904 	.word	0x08009904
 80085f4:	08009924 	.word	0x08009924
 80085f8:	080098e4 	.word	0x080098e4

080085fc <std>:
 80085fc:	2300      	movs	r3, #0
 80085fe:	b510      	push	{r4, lr}
 8008600:	4604      	mov	r4, r0
 8008602:	e9c0 3300 	strd	r3, r3, [r0]
 8008606:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800860a:	6083      	str	r3, [r0, #8]
 800860c:	8181      	strh	r1, [r0, #12]
 800860e:	6643      	str	r3, [r0, #100]	; 0x64
 8008610:	81c2      	strh	r2, [r0, #14]
 8008612:	6183      	str	r3, [r0, #24]
 8008614:	4619      	mov	r1, r3
 8008616:	2208      	movs	r2, #8
 8008618:	305c      	adds	r0, #92	; 0x5c
 800861a:	f7ff fbad 	bl	8007d78 <memset>
 800861e:	4b05      	ldr	r3, [pc, #20]	; (8008634 <std+0x38>)
 8008620:	6224      	str	r4, [r4, #32]
 8008622:	6263      	str	r3, [r4, #36]	; 0x24
 8008624:	4b04      	ldr	r3, [pc, #16]	; (8008638 <std+0x3c>)
 8008626:	62a3      	str	r3, [r4, #40]	; 0x28
 8008628:	4b04      	ldr	r3, [pc, #16]	; (800863c <std+0x40>)
 800862a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800862c:	4b04      	ldr	r3, [pc, #16]	; (8008640 <std+0x44>)
 800862e:	6323      	str	r3, [r4, #48]	; 0x30
 8008630:	bd10      	pop	{r4, pc}
 8008632:	bf00      	nop
 8008634:	08009165 	.word	0x08009165
 8008638:	08009187 	.word	0x08009187
 800863c:	080091bf 	.word	0x080091bf
 8008640:	080091e3 	.word	0x080091e3

08008644 <_cleanup_r>:
 8008644:	4901      	ldr	r1, [pc, #4]	; (800864c <_cleanup_r+0x8>)
 8008646:	f000 b8af 	b.w	80087a8 <_fwalk_reent>
 800864a:	bf00      	nop
 800864c:	08008585 	.word	0x08008585

08008650 <__sfmoreglue>:
 8008650:	2268      	movs	r2, #104	; 0x68
 8008652:	b570      	push	{r4, r5, r6, lr}
 8008654:	1e4d      	subs	r5, r1, #1
 8008656:	4355      	muls	r5, r2
 8008658:	460e      	mov	r6, r1
 800865a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800865e:	f7ff fbfb 	bl	8007e58 <_malloc_r>
 8008662:	4604      	mov	r4, r0
 8008664:	b140      	cbz	r0, 8008678 <__sfmoreglue+0x28>
 8008666:	2100      	movs	r1, #0
 8008668:	e9c0 1600 	strd	r1, r6, [r0]
 800866c:	300c      	adds	r0, #12
 800866e:	60a0      	str	r0, [r4, #8]
 8008670:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008674:	f7ff fb80 	bl	8007d78 <memset>
 8008678:	4620      	mov	r0, r4
 800867a:	bd70      	pop	{r4, r5, r6, pc}

0800867c <__sfp_lock_acquire>:
 800867c:	4801      	ldr	r0, [pc, #4]	; (8008684 <__sfp_lock_acquire+0x8>)
 800867e:	f000 b8b3 	b.w	80087e8 <__retarget_lock_acquire_recursive>
 8008682:	bf00      	nop
 8008684:	2000062d 	.word	0x2000062d

08008688 <__sfp_lock_release>:
 8008688:	4801      	ldr	r0, [pc, #4]	; (8008690 <__sfp_lock_release+0x8>)
 800868a:	f000 b8ae 	b.w	80087ea <__retarget_lock_release_recursive>
 800868e:	bf00      	nop
 8008690:	2000062d 	.word	0x2000062d

08008694 <__sinit_lock_acquire>:
 8008694:	4801      	ldr	r0, [pc, #4]	; (800869c <__sinit_lock_acquire+0x8>)
 8008696:	f000 b8a7 	b.w	80087e8 <__retarget_lock_acquire_recursive>
 800869a:	bf00      	nop
 800869c:	2000062e 	.word	0x2000062e

080086a0 <__sinit_lock_release>:
 80086a0:	4801      	ldr	r0, [pc, #4]	; (80086a8 <__sinit_lock_release+0x8>)
 80086a2:	f000 b8a2 	b.w	80087ea <__retarget_lock_release_recursive>
 80086a6:	bf00      	nop
 80086a8:	2000062e 	.word	0x2000062e

080086ac <__sinit>:
 80086ac:	b510      	push	{r4, lr}
 80086ae:	4604      	mov	r4, r0
 80086b0:	f7ff fff0 	bl	8008694 <__sinit_lock_acquire>
 80086b4:	69a3      	ldr	r3, [r4, #24]
 80086b6:	b11b      	cbz	r3, 80086c0 <__sinit+0x14>
 80086b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086bc:	f7ff bff0 	b.w	80086a0 <__sinit_lock_release>
 80086c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80086c4:	6523      	str	r3, [r4, #80]	; 0x50
 80086c6:	4b13      	ldr	r3, [pc, #76]	; (8008714 <__sinit+0x68>)
 80086c8:	4a13      	ldr	r2, [pc, #76]	; (8008718 <__sinit+0x6c>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80086ce:	42a3      	cmp	r3, r4
 80086d0:	bf08      	it	eq
 80086d2:	2301      	moveq	r3, #1
 80086d4:	4620      	mov	r0, r4
 80086d6:	bf08      	it	eq
 80086d8:	61a3      	streq	r3, [r4, #24]
 80086da:	f000 f81f 	bl	800871c <__sfp>
 80086de:	6060      	str	r0, [r4, #4]
 80086e0:	4620      	mov	r0, r4
 80086e2:	f000 f81b 	bl	800871c <__sfp>
 80086e6:	60a0      	str	r0, [r4, #8]
 80086e8:	4620      	mov	r0, r4
 80086ea:	f000 f817 	bl	800871c <__sfp>
 80086ee:	2200      	movs	r2, #0
 80086f0:	2104      	movs	r1, #4
 80086f2:	60e0      	str	r0, [r4, #12]
 80086f4:	6860      	ldr	r0, [r4, #4]
 80086f6:	f7ff ff81 	bl	80085fc <std>
 80086fa:	2201      	movs	r2, #1
 80086fc:	2109      	movs	r1, #9
 80086fe:	68a0      	ldr	r0, [r4, #8]
 8008700:	f7ff ff7c 	bl	80085fc <std>
 8008704:	2202      	movs	r2, #2
 8008706:	2112      	movs	r1, #18
 8008708:	68e0      	ldr	r0, [r4, #12]
 800870a:	f7ff ff77 	bl	80085fc <std>
 800870e:	2301      	movs	r3, #1
 8008710:	61a3      	str	r3, [r4, #24]
 8008712:	e7d1      	b.n	80086b8 <__sinit+0xc>
 8008714:	080097dc 	.word	0x080097dc
 8008718:	08008645 	.word	0x08008645

0800871c <__sfp>:
 800871c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800871e:	4607      	mov	r7, r0
 8008720:	f7ff ffac 	bl	800867c <__sfp_lock_acquire>
 8008724:	4b1e      	ldr	r3, [pc, #120]	; (80087a0 <__sfp+0x84>)
 8008726:	681e      	ldr	r6, [r3, #0]
 8008728:	69b3      	ldr	r3, [r6, #24]
 800872a:	b913      	cbnz	r3, 8008732 <__sfp+0x16>
 800872c:	4630      	mov	r0, r6
 800872e:	f7ff ffbd 	bl	80086ac <__sinit>
 8008732:	3648      	adds	r6, #72	; 0x48
 8008734:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008738:	3b01      	subs	r3, #1
 800873a:	d503      	bpl.n	8008744 <__sfp+0x28>
 800873c:	6833      	ldr	r3, [r6, #0]
 800873e:	b30b      	cbz	r3, 8008784 <__sfp+0x68>
 8008740:	6836      	ldr	r6, [r6, #0]
 8008742:	e7f7      	b.n	8008734 <__sfp+0x18>
 8008744:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008748:	b9d5      	cbnz	r5, 8008780 <__sfp+0x64>
 800874a:	4b16      	ldr	r3, [pc, #88]	; (80087a4 <__sfp+0x88>)
 800874c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008750:	60e3      	str	r3, [r4, #12]
 8008752:	6665      	str	r5, [r4, #100]	; 0x64
 8008754:	f000 f847 	bl	80087e6 <__retarget_lock_init_recursive>
 8008758:	f7ff ff96 	bl	8008688 <__sfp_lock_release>
 800875c:	2208      	movs	r2, #8
 800875e:	4629      	mov	r1, r5
 8008760:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008764:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008768:	6025      	str	r5, [r4, #0]
 800876a:	61a5      	str	r5, [r4, #24]
 800876c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008770:	f7ff fb02 	bl	8007d78 <memset>
 8008774:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008778:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800877c:	4620      	mov	r0, r4
 800877e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008780:	3468      	adds	r4, #104	; 0x68
 8008782:	e7d9      	b.n	8008738 <__sfp+0x1c>
 8008784:	2104      	movs	r1, #4
 8008786:	4638      	mov	r0, r7
 8008788:	f7ff ff62 	bl	8008650 <__sfmoreglue>
 800878c:	4604      	mov	r4, r0
 800878e:	6030      	str	r0, [r6, #0]
 8008790:	2800      	cmp	r0, #0
 8008792:	d1d5      	bne.n	8008740 <__sfp+0x24>
 8008794:	f7ff ff78 	bl	8008688 <__sfp_lock_release>
 8008798:	230c      	movs	r3, #12
 800879a:	603b      	str	r3, [r7, #0]
 800879c:	e7ee      	b.n	800877c <__sfp+0x60>
 800879e:	bf00      	nop
 80087a0:	080097dc 	.word	0x080097dc
 80087a4:	ffff0001 	.word	0xffff0001

080087a8 <_fwalk_reent>:
 80087a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087ac:	4606      	mov	r6, r0
 80087ae:	4688      	mov	r8, r1
 80087b0:	2700      	movs	r7, #0
 80087b2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80087b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80087ba:	f1b9 0901 	subs.w	r9, r9, #1
 80087be:	d505      	bpl.n	80087cc <_fwalk_reent+0x24>
 80087c0:	6824      	ldr	r4, [r4, #0]
 80087c2:	2c00      	cmp	r4, #0
 80087c4:	d1f7      	bne.n	80087b6 <_fwalk_reent+0xe>
 80087c6:	4638      	mov	r0, r7
 80087c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087cc:	89ab      	ldrh	r3, [r5, #12]
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	d907      	bls.n	80087e2 <_fwalk_reent+0x3a>
 80087d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80087d6:	3301      	adds	r3, #1
 80087d8:	d003      	beq.n	80087e2 <_fwalk_reent+0x3a>
 80087da:	4629      	mov	r1, r5
 80087dc:	4630      	mov	r0, r6
 80087de:	47c0      	blx	r8
 80087e0:	4307      	orrs	r7, r0
 80087e2:	3568      	adds	r5, #104	; 0x68
 80087e4:	e7e9      	b.n	80087ba <_fwalk_reent+0x12>

080087e6 <__retarget_lock_init_recursive>:
 80087e6:	4770      	bx	lr

080087e8 <__retarget_lock_acquire_recursive>:
 80087e8:	4770      	bx	lr

080087ea <__retarget_lock_release_recursive>:
 80087ea:	4770      	bx	lr

080087ec <__swhatbuf_r>:
 80087ec:	b570      	push	{r4, r5, r6, lr}
 80087ee:	460e      	mov	r6, r1
 80087f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087f4:	4614      	mov	r4, r2
 80087f6:	2900      	cmp	r1, #0
 80087f8:	461d      	mov	r5, r3
 80087fa:	b096      	sub	sp, #88	; 0x58
 80087fc:	da08      	bge.n	8008810 <__swhatbuf_r+0x24>
 80087fe:	2200      	movs	r2, #0
 8008800:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008804:	602a      	str	r2, [r5, #0]
 8008806:	061a      	lsls	r2, r3, #24
 8008808:	d410      	bmi.n	800882c <__swhatbuf_r+0x40>
 800880a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800880e:	e00e      	b.n	800882e <__swhatbuf_r+0x42>
 8008810:	466a      	mov	r2, sp
 8008812:	f000 fd0d 	bl	8009230 <_fstat_r>
 8008816:	2800      	cmp	r0, #0
 8008818:	dbf1      	blt.n	80087fe <__swhatbuf_r+0x12>
 800881a:	9a01      	ldr	r2, [sp, #4]
 800881c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008820:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008824:	425a      	negs	r2, r3
 8008826:	415a      	adcs	r2, r3
 8008828:	602a      	str	r2, [r5, #0]
 800882a:	e7ee      	b.n	800880a <__swhatbuf_r+0x1e>
 800882c:	2340      	movs	r3, #64	; 0x40
 800882e:	2000      	movs	r0, #0
 8008830:	6023      	str	r3, [r4, #0]
 8008832:	b016      	add	sp, #88	; 0x58
 8008834:	bd70      	pop	{r4, r5, r6, pc}
	...

08008838 <__smakebuf_r>:
 8008838:	898b      	ldrh	r3, [r1, #12]
 800883a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800883c:	079d      	lsls	r5, r3, #30
 800883e:	4606      	mov	r6, r0
 8008840:	460c      	mov	r4, r1
 8008842:	d507      	bpl.n	8008854 <__smakebuf_r+0x1c>
 8008844:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008848:	6023      	str	r3, [r4, #0]
 800884a:	6123      	str	r3, [r4, #16]
 800884c:	2301      	movs	r3, #1
 800884e:	6163      	str	r3, [r4, #20]
 8008850:	b002      	add	sp, #8
 8008852:	bd70      	pop	{r4, r5, r6, pc}
 8008854:	466a      	mov	r2, sp
 8008856:	ab01      	add	r3, sp, #4
 8008858:	f7ff ffc8 	bl	80087ec <__swhatbuf_r>
 800885c:	9900      	ldr	r1, [sp, #0]
 800885e:	4605      	mov	r5, r0
 8008860:	4630      	mov	r0, r6
 8008862:	f7ff faf9 	bl	8007e58 <_malloc_r>
 8008866:	b948      	cbnz	r0, 800887c <__smakebuf_r+0x44>
 8008868:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800886c:	059a      	lsls	r2, r3, #22
 800886e:	d4ef      	bmi.n	8008850 <__smakebuf_r+0x18>
 8008870:	f023 0303 	bic.w	r3, r3, #3
 8008874:	f043 0302 	orr.w	r3, r3, #2
 8008878:	81a3      	strh	r3, [r4, #12]
 800887a:	e7e3      	b.n	8008844 <__smakebuf_r+0xc>
 800887c:	4b0d      	ldr	r3, [pc, #52]	; (80088b4 <__smakebuf_r+0x7c>)
 800887e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008880:	89a3      	ldrh	r3, [r4, #12]
 8008882:	6020      	str	r0, [r4, #0]
 8008884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008888:	81a3      	strh	r3, [r4, #12]
 800888a:	9b00      	ldr	r3, [sp, #0]
 800888c:	6120      	str	r0, [r4, #16]
 800888e:	6163      	str	r3, [r4, #20]
 8008890:	9b01      	ldr	r3, [sp, #4]
 8008892:	b15b      	cbz	r3, 80088ac <__smakebuf_r+0x74>
 8008894:	4630      	mov	r0, r6
 8008896:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800889a:	f000 fcdb 	bl	8009254 <_isatty_r>
 800889e:	b128      	cbz	r0, 80088ac <__smakebuf_r+0x74>
 80088a0:	89a3      	ldrh	r3, [r4, #12]
 80088a2:	f023 0303 	bic.w	r3, r3, #3
 80088a6:	f043 0301 	orr.w	r3, r3, #1
 80088aa:	81a3      	strh	r3, [r4, #12]
 80088ac:	89a0      	ldrh	r0, [r4, #12]
 80088ae:	4305      	orrs	r5, r0
 80088b0:	81a5      	strh	r5, [r4, #12]
 80088b2:	e7cd      	b.n	8008850 <__smakebuf_r+0x18>
 80088b4:	08008645 	.word	0x08008645

080088b8 <__malloc_lock>:
 80088b8:	4801      	ldr	r0, [pc, #4]	; (80088c0 <__malloc_lock+0x8>)
 80088ba:	f7ff bf95 	b.w	80087e8 <__retarget_lock_acquire_recursive>
 80088be:	bf00      	nop
 80088c0:	2000062c 	.word	0x2000062c

080088c4 <__malloc_unlock>:
 80088c4:	4801      	ldr	r0, [pc, #4]	; (80088cc <__malloc_unlock+0x8>)
 80088c6:	f7ff bf90 	b.w	80087ea <__retarget_lock_release_recursive>
 80088ca:	bf00      	nop
 80088cc:	2000062c 	.word	0x2000062c

080088d0 <__ssputs_r>:
 80088d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088d4:	688e      	ldr	r6, [r1, #8]
 80088d6:	4682      	mov	sl, r0
 80088d8:	429e      	cmp	r6, r3
 80088da:	460c      	mov	r4, r1
 80088dc:	4690      	mov	r8, r2
 80088de:	461f      	mov	r7, r3
 80088e0:	d838      	bhi.n	8008954 <__ssputs_r+0x84>
 80088e2:	898a      	ldrh	r2, [r1, #12]
 80088e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80088e8:	d032      	beq.n	8008950 <__ssputs_r+0x80>
 80088ea:	6825      	ldr	r5, [r4, #0]
 80088ec:	6909      	ldr	r1, [r1, #16]
 80088ee:	3301      	adds	r3, #1
 80088f0:	eba5 0901 	sub.w	r9, r5, r1
 80088f4:	6965      	ldr	r5, [r4, #20]
 80088f6:	444b      	add	r3, r9
 80088f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80088fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008900:	106d      	asrs	r5, r5, #1
 8008902:	429d      	cmp	r5, r3
 8008904:	bf38      	it	cc
 8008906:	461d      	movcc	r5, r3
 8008908:	0553      	lsls	r3, r2, #21
 800890a:	d531      	bpl.n	8008970 <__ssputs_r+0xa0>
 800890c:	4629      	mov	r1, r5
 800890e:	f7ff faa3 	bl	8007e58 <_malloc_r>
 8008912:	4606      	mov	r6, r0
 8008914:	b950      	cbnz	r0, 800892c <__ssputs_r+0x5c>
 8008916:	230c      	movs	r3, #12
 8008918:	f04f 30ff 	mov.w	r0, #4294967295
 800891c:	f8ca 3000 	str.w	r3, [sl]
 8008920:	89a3      	ldrh	r3, [r4, #12]
 8008922:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008926:	81a3      	strh	r3, [r4, #12]
 8008928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800892c:	464a      	mov	r2, r9
 800892e:	6921      	ldr	r1, [r4, #16]
 8008930:	f7ff fa14 	bl	8007d5c <memcpy>
 8008934:	89a3      	ldrh	r3, [r4, #12]
 8008936:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800893a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800893e:	81a3      	strh	r3, [r4, #12]
 8008940:	6126      	str	r6, [r4, #16]
 8008942:	444e      	add	r6, r9
 8008944:	6026      	str	r6, [r4, #0]
 8008946:	463e      	mov	r6, r7
 8008948:	6165      	str	r5, [r4, #20]
 800894a:	eba5 0509 	sub.w	r5, r5, r9
 800894e:	60a5      	str	r5, [r4, #8]
 8008950:	42be      	cmp	r6, r7
 8008952:	d900      	bls.n	8008956 <__ssputs_r+0x86>
 8008954:	463e      	mov	r6, r7
 8008956:	4632      	mov	r2, r6
 8008958:	4641      	mov	r1, r8
 800895a:	6820      	ldr	r0, [r4, #0]
 800895c:	f000 fcaa 	bl	80092b4 <memmove>
 8008960:	68a3      	ldr	r3, [r4, #8]
 8008962:	2000      	movs	r0, #0
 8008964:	1b9b      	subs	r3, r3, r6
 8008966:	60a3      	str	r3, [r4, #8]
 8008968:	6823      	ldr	r3, [r4, #0]
 800896a:	4433      	add	r3, r6
 800896c:	6023      	str	r3, [r4, #0]
 800896e:	e7db      	b.n	8008928 <__ssputs_r+0x58>
 8008970:	462a      	mov	r2, r5
 8008972:	f000 fcb9 	bl	80092e8 <_realloc_r>
 8008976:	4606      	mov	r6, r0
 8008978:	2800      	cmp	r0, #0
 800897a:	d1e1      	bne.n	8008940 <__ssputs_r+0x70>
 800897c:	4650      	mov	r0, sl
 800897e:	6921      	ldr	r1, [r4, #16]
 8008980:	f7ff fa02 	bl	8007d88 <_free_r>
 8008984:	e7c7      	b.n	8008916 <__ssputs_r+0x46>
	...

08008988 <_svfiprintf_r>:
 8008988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800898c:	4698      	mov	r8, r3
 800898e:	898b      	ldrh	r3, [r1, #12]
 8008990:	4607      	mov	r7, r0
 8008992:	061b      	lsls	r3, r3, #24
 8008994:	460d      	mov	r5, r1
 8008996:	4614      	mov	r4, r2
 8008998:	b09d      	sub	sp, #116	; 0x74
 800899a:	d50e      	bpl.n	80089ba <_svfiprintf_r+0x32>
 800899c:	690b      	ldr	r3, [r1, #16]
 800899e:	b963      	cbnz	r3, 80089ba <_svfiprintf_r+0x32>
 80089a0:	2140      	movs	r1, #64	; 0x40
 80089a2:	f7ff fa59 	bl	8007e58 <_malloc_r>
 80089a6:	6028      	str	r0, [r5, #0]
 80089a8:	6128      	str	r0, [r5, #16]
 80089aa:	b920      	cbnz	r0, 80089b6 <_svfiprintf_r+0x2e>
 80089ac:	230c      	movs	r3, #12
 80089ae:	603b      	str	r3, [r7, #0]
 80089b0:	f04f 30ff 	mov.w	r0, #4294967295
 80089b4:	e0d1      	b.n	8008b5a <_svfiprintf_r+0x1d2>
 80089b6:	2340      	movs	r3, #64	; 0x40
 80089b8:	616b      	str	r3, [r5, #20]
 80089ba:	2300      	movs	r3, #0
 80089bc:	9309      	str	r3, [sp, #36]	; 0x24
 80089be:	2320      	movs	r3, #32
 80089c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80089c4:	2330      	movs	r3, #48	; 0x30
 80089c6:	f04f 0901 	mov.w	r9, #1
 80089ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80089ce:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008b74 <_svfiprintf_r+0x1ec>
 80089d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80089d6:	4623      	mov	r3, r4
 80089d8:	469a      	mov	sl, r3
 80089da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089de:	b10a      	cbz	r2, 80089e4 <_svfiprintf_r+0x5c>
 80089e0:	2a25      	cmp	r2, #37	; 0x25
 80089e2:	d1f9      	bne.n	80089d8 <_svfiprintf_r+0x50>
 80089e4:	ebba 0b04 	subs.w	fp, sl, r4
 80089e8:	d00b      	beq.n	8008a02 <_svfiprintf_r+0x7a>
 80089ea:	465b      	mov	r3, fp
 80089ec:	4622      	mov	r2, r4
 80089ee:	4629      	mov	r1, r5
 80089f0:	4638      	mov	r0, r7
 80089f2:	f7ff ff6d 	bl	80088d0 <__ssputs_r>
 80089f6:	3001      	adds	r0, #1
 80089f8:	f000 80aa 	beq.w	8008b50 <_svfiprintf_r+0x1c8>
 80089fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089fe:	445a      	add	r2, fp
 8008a00:	9209      	str	r2, [sp, #36]	; 0x24
 8008a02:	f89a 3000 	ldrb.w	r3, [sl]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	f000 80a2 	beq.w	8008b50 <_svfiprintf_r+0x1c8>
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8008a12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a16:	f10a 0a01 	add.w	sl, sl, #1
 8008a1a:	9304      	str	r3, [sp, #16]
 8008a1c:	9307      	str	r3, [sp, #28]
 8008a1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a22:	931a      	str	r3, [sp, #104]	; 0x68
 8008a24:	4654      	mov	r4, sl
 8008a26:	2205      	movs	r2, #5
 8008a28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a2c:	4851      	ldr	r0, [pc, #324]	; (8008b74 <_svfiprintf_r+0x1ec>)
 8008a2e:	f000 fc33 	bl	8009298 <memchr>
 8008a32:	9a04      	ldr	r2, [sp, #16]
 8008a34:	b9d8      	cbnz	r0, 8008a6e <_svfiprintf_r+0xe6>
 8008a36:	06d0      	lsls	r0, r2, #27
 8008a38:	bf44      	itt	mi
 8008a3a:	2320      	movmi	r3, #32
 8008a3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a40:	0711      	lsls	r1, r2, #28
 8008a42:	bf44      	itt	mi
 8008a44:	232b      	movmi	r3, #43	; 0x2b
 8008a46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a4a:	f89a 3000 	ldrb.w	r3, [sl]
 8008a4e:	2b2a      	cmp	r3, #42	; 0x2a
 8008a50:	d015      	beq.n	8008a7e <_svfiprintf_r+0xf6>
 8008a52:	4654      	mov	r4, sl
 8008a54:	2000      	movs	r0, #0
 8008a56:	f04f 0c0a 	mov.w	ip, #10
 8008a5a:	9a07      	ldr	r2, [sp, #28]
 8008a5c:	4621      	mov	r1, r4
 8008a5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a62:	3b30      	subs	r3, #48	; 0x30
 8008a64:	2b09      	cmp	r3, #9
 8008a66:	d94e      	bls.n	8008b06 <_svfiprintf_r+0x17e>
 8008a68:	b1b0      	cbz	r0, 8008a98 <_svfiprintf_r+0x110>
 8008a6a:	9207      	str	r2, [sp, #28]
 8008a6c:	e014      	b.n	8008a98 <_svfiprintf_r+0x110>
 8008a6e:	eba0 0308 	sub.w	r3, r0, r8
 8008a72:	fa09 f303 	lsl.w	r3, r9, r3
 8008a76:	4313      	orrs	r3, r2
 8008a78:	46a2      	mov	sl, r4
 8008a7a:	9304      	str	r3, [sp, #16]
 8008a7c:	e7d2      	b.n	8008a24 <_svfiprintf_r+0x9c>
 8008a7e:	9b03      	ldr	r3, [sp, #12]
 8008a80:	1d19      	adds	r1, r3, #4
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	9103      	str	r1, [sp, #12]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	bfbb      	ittet	lt
 8008a8a:	425b      	neglt	r3, r3
 8008a8c:	f042 0202 	orrlt.w	r2, r2, #2
 8008a90:	9307      	strge	r3, [sp, #28]
 8008a92:	9307      	strlt	r3, [sp, #28]
 8008a94:	bfb8      	it	lt
 8008a96:	9204      	strlt	r2, [sp, #16]
 8008a98:	7823      	ldrb	r3, [r4, #0]
 8008a9a:	2b2e      	cmp	r3, #46	; 0x2e
 8008a9c:	d10c      	bne.n	8008ab8 <_svfiprintf_r+0x130>
 8008a9e:	7863      	ldrb	r3, [r4, #1]
 8008aa0:	2b2a      	cmp	r3, #42	; 0x2a
 8008aa2:	d135      	bne.n	8008b10 <_svfiprintf_r+0x188>
 8008aa4:	9b03      	ldr	r3, [sp, #12]
 8008aa6:	3402      	adds	r4, #2
 8008aa8:	1d1a      	adds	r2, r3, #4
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	9203      	str	r2, [sp, #12]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	bfb8      	it	lt
 8008ab2:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ab6:	9305      	str	r3, [sp, #20]
 8008ab8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008b78 <_svfiprintf_r+0x1f0>
 8008abc:	2203      	movs	r2, #3
 8008abe:	4650      	mov	r0, sl
 8008ac0:	7821      	ldrb	r1, [r4, #0]
 8008ac2:	f000 fbe9 	bl	8009298 <memchr>
 8008ac6:	b140      	cbz	r0, 8008ada <_svfiprintf_r+0x152>
 8008ac8:	2340      	movs	r3, #64	; 0x40
 8008aca:	eba0 000a 	sub.w	r0, r0, sl
 8008ace:	fa03 f000 	lsl.w	r0, r3, r0
 8008ad2:	9b04      	ldr	r3, [sp, #16]
 8008ad4:	3401      	adds	r4, #1
 8008ad6:	4303      	orrs	r3, r0
 8008ad8:	9304      	str	r3, [sp, #16]
 8008ada:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ade:	2206      	movs	r2, #6
 8008ae0:	4826      	ldr	r0, [pc, #152]	; (8008b7c <_svfiprintf_r+0x1f4>)
 8008ae2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ae6:	f000 fbd7 	bl	8009298 <memchr>
 8008aea:	2800      	cmp	r0, #0
 8008aec:	d038      	beq.n	8008b60 <_svfiprintf_r+0x1d8>
 8008aee:	4b24      	ldr	r3, [pc, #144]	; (8008b80 <_svfiprintf_r+0x1f8>)
 8008af0:	bb1b      	cbnz	r3, 8008b3a <_svfiprintf_r+0x1b2>
 8008af2:	9b03      	ldr	r3, [sp, #12]
 8008af4:	3307      	adds	r3, #7
 8008af6:	f023 0307 	bic.w	r3, r3, #7
 8008afa:	3308      	adds	r3, #8
 8008afc:	9303      	str	r3, [sp, #12]
 8008afe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b00:	4433      	add	r3, r6
 8008b02:	9309      	str	r3, [sp, #36]	; 0x24
 8008b04:	e767      	b.n	80089d6 <_svfiprintf_r+0x4e>
 8008b06:	460c      	mov	r4, r1
 8008b08:	2001      	movs	r0, #1
 8008b0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b0e:	e7a5      	b.n	8008a5c <_svfiprintf_r+0xd4>
 8008b10:	2300      	movs	r3, #0
 8008b12:	f04f 0c0a 	mov.w	ip, #10
 8008b16:	4619      	mov	r1, r3
 8008b18:	3401      	adds	r4, #1
 8008b1a:	9305      	str	r3, [sp, #20]
 8008b1c:	4620      	mov	r0, r4
 8008b1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b22:	3a30      	subs	r2, #48	; 0x30
 8008b24:	2a09      	cmp	r2, #9
 8008b26:	d903      	bls.n	8008b30 <_svfiprintf_r+0x1a8>
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d0c5      	beq.n	8008ab8 <_svfiprintf_r+0x130>
 8008b2c:	9105      	str	r1, [sp, #20]
 8008b2e:	e7c3      	b.n	8008ab8 <_svfiprintf_r+0x130>
 8008b30:	4604      	mov	r4, r0
 8008b32:	2301      	movs	r3, #1
 8008b34:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b38:	e7f0      	b.n	8008b1c <_svfiprintf_r+0x194>
 8008b3a:	ab03      	add	r3, sp, #12
 8008b3c:	9300      	str	r3, [sp, #0]
 8008b3e:	462a      	mov	r2, r5
 8008b40:	4638      	mov	r0, r7
 8008b42:	4b10      	ldr	r3, [pc, #64]	; (8008b84 <_svfiprintf_r+0x1fc>)
 8008b44:	a904      	add	r1, sp, #16
 8008b46:	f3af 8000 	nop.w
 8008b4a:	1c42      	adds	r2, r0, #1
 8008b4c:	4606      	mov	r6, r0
 8008b4e:	d1d6      	bne.n	8008afe <_svfiprintf_r+0x176>
 8008b50:	89ab      	ldrh	r3, [r5, #12]
 8008b52:	065b      	lsls	r3, r3, #25
 8008b54:	f53f af2c 	bmi.w	80089b0 <_svfiprintf_r+0x28>
 8008b58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b5a:	b01d      	add	sp, #116	; 0x74
 8008b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b60:	ab03      	add	r3, sp, #12
 8008b62:	9300      	str	r3, [sp, #0]
 8008b64:	462a      	mov	r2, r5
 8008b66:	4638      	mov	r0, r7
 8008b68:	4b06      	ldr	r3, [pc, #24]	; (8008b84 <_svfiprintf_r+0x1fc>)
 8008b6a:	a904      	add	r1, sp, #16
 8008b6c:	f000 f9d4 	bl	8008f18 <_printf_i>
 8008b70:	e7eb      	b.n	8008b4a <_svfiprintf_r+0x1c2>
 8008b72:	bf00      	nop
 8008b74:	08009944 	.word	0x08009944
 8008b78:	0800994a 	.word	0x0800994a
 8008b7c:	0800994e 	.word	0x0800994e
 8008b80:	00000000 	.word	0x00000000
 8008b84:	080088d1 	.word	0x080088d1

08008b88 <__sfputc_r>:
 8008b88:	6893      	ldr	r3, [r2, #8]
 8008b8a:	b410      	push	{r4}
 8008b8c:	3b01      	subs	r3, #1
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	6093      	str	r3, [r2, #8]
 8008b92:	da07      	bge.n	8008ba4 <__sfputc_r+0x1c>
 8008b94:	6994      	ldr	r4, [r2, #24]
 8008b96:	42a3      	cmp	r3, r4
 8008b98:	db01      	blt.n	8008b9e <__sfputc_r+0x16>
 8008b9a:	290a      	cmp	r1, #10
 8008b9c:	d102      	bne.n	8008ba4 <__sfputc_r+0x1c>
 8008b9e:	bc10      	pop	{r4}
 8008ba0:	f7ff bbae 	b.w	8008300 <__swbuf_r>
 8008ba4:	6813      	ldr	r3, [r2, #0]
 8008ba6:	1c58      	adds	r0, r3, #1
 8008ba8:	6010      	str	r0, [r2, #0]
 8008baa:	7019      	strb	r1, [r3, #0]
 8008bac:	4608      	mov	r0, r1
 8008bae:	bc10      	pop	{r4}
 8008bb0:	4770      	bx	lr

08008bb2 <__sfputs_r>:
 8008bb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bb4:	4606      	mov	r6, r0
 8008bb6:	460f      	mov	r7, r1
 8008bb8:	4614      	mov	r4, r2
 8008bba:	18d5      	adds	r5, r2, r3
 8008bbc:	42ac      	cmp	r4, r5
 8008bbe:	d101      	bne.n	8008bc4 <__sfputs_r+0x12>
 8008bc0:	2000      	movs	r0, #0
 8008bc2:	e007      	b.n	8008bd4 <__sfputs_r+0x22>
 8008bc4:	463a      	mov	r2, r7
 8008bc6:	4630      	mov	r0, r6
 8008bc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bcc:	f7ff ffdc 	bl	8008b88 <__sfputc_r>
 8008bd0:	1c43      	adds	r3, r0, #1
 8008bd2:	d1f3      	bne.n	8008bbc <__sfputs_r+0xa>
 8008bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008bd8 <_vfiprintf_r>:
 8008bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bdc:	460d      	mov	r5, r1
 8008bde:	4614      	mov	r4, r2
 8008be0:	4698      	mov	r8, r3
 8008be2:	4606      	mov	r6, r0
 8008be4:	b09d      	sub	sp, #116	; 0x74
 8008be6:	b118      	cbz	r0, 8008bf0 <_vfiprintf_r+0x18>
 8008be8:	6983      	ldr	r3, [r0, #24]
 8008bea:	b90b      	cbnz	r3, 8008bf0 <_vfiprintf_r+0x18>
 8008bec:	f7ff fd5e 	bl	80086ac <__sinit>
 8008bf0:	4b89      	ldr	r3, [pc, #548]	; (8008e18 <_vfiprintf_r+0x240>)
 8008bf2:	429d      	cmp	r5, r3
 8008bf4:	d11b      	bne.n	8008c2e <_vfiprintf_r+0x56>
 8008bf6:	6875      	ldr	r5, [r6, #4]
 8008bf8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bfa:	07d9      	lsls	r1, r3, #31
 8008bfc:	d405      	bmi.n	8008c0a <_vfiprintf_r+0x32>
 8008bfe:	89ab      	ldrh	r3, [r5, #12]
 8008c00:	059a      	lsls	r2, r3, #22
 8008c02:	d402      	bmi.n	8008c0a <_vfiprintf_r+0x32>
 8008c04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c06:	f7ff fdef 	bl	80087e8 <__retarget_lock_acquire_recursive>
 8008c0a:	89ab      	ldrh	r3, [r5, #12]
 8008c0c:	071b      	lsls	r3, r3, #28
 8008c0e:	d501      	bpl.n	8008c14 <_vfiprintf_r+0x3c>
 8008c10:	692b      	ldr	r3, [r5, #16]
 8008c12:	b9eb      	cbnz	r3, 8008c50 <_vfiprintf_r+0x78>
 8008c14:	4629      	mov	r1, r5
 8008c16:	4630      	mov	r0, r6
 8008c18:	f7ff fbc4 	bl	80083a4 <__swsetup_r>
 8008c1c:	b1c0      	cbz	r0, 8008c50 <_vfiprintf_r+0x78>
 8008c1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c20:	07dc      	lsls	r4, r3, #31
 8008c22:	d50e      	bpl.n	8008c42 <_vfiprintf_r+0x6a>
 8008c24:	f04f 30ff 	mov.w	r0, #4294967295
 8008c28:	b01d      	add	sp, #116	; 0x74
 8008c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c2e:	4b7b      	ldr	r3, [pc, #492]	; (8008e1c <_vfiprintf_r+0x244>)
 8008c30:	429d      	cmp	r5, r3
 8008c32:	d101      	bne.n	8008c38 <_vfiprintf_r+0x60>
 8008c34:	68b5      	ldr	r5, [r6, #8]
 8008c36:	e7df      	b.n	8008bf8 <_vfiprintf_r+0x20>
 8008c38:	4b79      	ldr	r3, [pc, #484]	; (8008e20 <_vfiprintf_r+0x248>)
 8008c3a:	429d      	cmp	r5, r3
 8008c3c:	bf08      	it	eq
 8008c3e:	68f5      	ldreq	r5, [r6, #12]
 8008c40:	e7da      	b.n	8008bf8 <_vfiprintf_r+0x20>
 8008c42:	89ab      	ldrh	r3, [r5, #12]
 8008c44:	0598      	lsls	r0, r3, #22
 8008c46:	d4ed      	bmi.n	8008c24 <_vfiprintf_r+0x4c>
 8008c48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c4a:	f7ff fdce 	bl	80087ea <__retarget_lock_release_recursive>
 8008c4e:	e7e9      	b.n	8008c24 <_vfiprintf_r+0x4c>
 8008c50:	2300      	movs	r3, #0
 8008c52:	9309      	str	r3, [sp, #36]	; 0x24
 8008c54:	2320      	movs	r3, #32
 8008c56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c5a:	2330      	movs	r3, #48	; 0x30
 8008c5c:	f04f 0901 	mov.w	r9, #1
 8008c60:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c64:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008e24 <_vfiprintf_r+0x24c>
 8008c68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c6c:	4623      	mov	r3, r4
 8008c6e:	469a      	mov	sl, r3
 8008c70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c74:	b10a      	cbz	r2, 8008c7a <_vfiprintf_r+0xa2>
 8008c76:	2a25      	cmp	r2, #37	; 0x25
 8008c78:	d1f9      	bne.n	8008c6e <_vfiprintf_r+0x96>
 8008c7a:	ebba 0b04 	subs.w	fp, sl, r4
 8008c7e:	d00b      	beq.n	8008c98 <_vfiprintf_r+0xc0>
 8008c80:	465b      	mov	r3, fp
 8008c82:	4622      	mov	r2, r4
 8008c84:	4629      	mov	r1, r5
 8008c86:	4630      	mov	r0, r6
 8008c88:	f7ff ff93 	bl	8008bb2 <__sfputs_r>
 8008c8c:	3001      	adds	r0, #1
 8008c8e:	f000 80aa 	beq.w	8008de6 <_vfiprintf_r+0x20e>
 8008c92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c94:	445a      	add	r2, fp
 8008c96:	9209      	str	r2, [sp, #36]	; 0x24
 8008c98:	f89a 3000 	ldrb.w	r3, [sl]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	f000 80a2 	beq.w	8008de6 <_vfiprintf_r+0x20e>
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ca8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008cac:	f10a 0a01 	add.w	sl, sl, #1
 8008cb0:	9304      	str	r3, [sp, #16]
 8008cb2:	9307      	str	r3, [sp, #28]
 8008cb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008cb8:	931a      	str	r3, [sp, #104]	; 0x68
 8008cba:	4654      	mov	r4, sl
 8008cbc:	2205      	movs	r2, #5
 8008cbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cc2:	4858      	ldr	r0, [pc, #352]	; (8008e24 <_vfiprintf_r+0x24c>)
 8008cc4:	f000 fae8 	bl	8009298 <memchr>
 8008cc8:	9a04      	ldr	r2, [sp, #16]
 8008cca:	b9d8      	cbnz	r0, 8008d04 <_vfiprintf_r+0x12c>
 8008ccc:	06d1      	lsls	r1, r2, #27
 8008cce:	bf44      	itt	mi
 8008cd0:	2320      	movmi	r3, #32
 8008cd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cd6:	0713      	lsls	r3, r2, #28
 8008cd8:	bf44      	itt	mi
 8008cda:	232b      	movmi	r3, #43	; 0x2b
 8008cdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ce0:	f89a 3000 	ldrb.w	r3, [sl]
 8008ce4:	2b2a      	cmp	r3, #42	; 0x2a
 8008ce6:	d015      	beq.n	8008d14 <_vfiprintf_r+0x13c>
 8008ce8:	4654      	mov	r4, sl
 8008cea:	2000      	movs	r0, #0
 8008cec:	f04f 0c0a 	mov.w	ip, #10
 8008cf0:	9a07      	ldr	r2, [sp, #28]
 8008cf2:	4621      	mov	r1, r4
 8008cf4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cf8:	3b30      	subs	r3, #48	; 0x30
 8008cfa:	2b09      	cmp	r3, #9
 8008cfc:	d94e      	bls.n	8008d9c <_vfiprintf_r+0x1c4>
 8008cfe:	b1b0      	cbz	r0, 8008d2e <_vfiprintf_r+0x156>
 8008d00:	9207      	str	r2, [sp, #28]
 8008d02:	e014      	b.n	8008d2e <_vfiprintf_r+0x156>
 8008d04:	eba0 0308 	sub.w	r3, r0, r8
 8008d08:	fa09 f303 	lsl.w	r3, r9, r3
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	46a2      	mov	sl, r4
 8008d10:	9304      	str	r3, [sp, #16]
 8008d12:	e7d2      	b.n	8008cba <_vfiprintf_r+0xe2>
 8008d14:	9b03      	ldr	r3, [sp, #12]
 8008d16:	1d19      	adds	r1, r3, #4
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	9103      	str	r1, [sp, #12]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	bfbb      	ittet	lt
 8008d20:	425b      	neglt	r3, r3
 8008d22:	f042 0202 	orrlt.w	r2, r2, #2
 8008d26:	9307      	strge	r3, [sp, #28]
 8008d28:	9307      	strlt	r3, [sp, #28]
 8008d2a:	bfb8      	it	lt
 8008d2c:	9204      	strlt	r2, [sp, #16]
 8008d2e:	7823      	ldrb	r3, [r4, #0]
 8008d30:	2b2e      	cmp	r3, #46	; 0x2e
 8008d32:	d10c      	bne.n	8008d4e <_vfiprintf_r+0x176>
 8008d34:	7863      	ldrb	r3, [r4, #1]
 8008d36:	2b2a      	cmp	r3, #42	; 0x2a
 8008d38:	d135      	bne.n	8008da6 <_vfiprintf_r+0x1ce>
 8008d3a:	9b03      	ldr	r3, [sp, #12]
 8008d3c:	3402      	adds	r4, #2
 8008d3e:	1d1a      	adds	r2, r3, #4
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	9203      	str	r2, [sp, #12]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	bfb8      	it	lt
 8008d48:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d4c:	9305      	str	r3, [sp, #20]
 8008d4e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8008e28 <_vfiprintf_r+0x250>
 8008d52:	2203      	movs	r2, #3
 8008d54:	4650      	mov	r0, sl
 8008d56:	7821      	ldrb	r1, [r4, #0]
 8008d58:	f000 fa9e 	bl	8009298 <memchr>
 8008d5c:	b140      	cbz	r0, 8008d70 <_vfiprintf_r+0x198>
 8008d5e:	2340      	movs	r3, #64	; 0x40
 8008d60:	eba0 000a 	sub.w	r0, r0, sl
 8008d64:	fa03 f000 	lsl.w	r0, r3, r0
 8008d68:	9b04      	ldr	r3, [sp, #16]
 8008d6a:	3401      	adds	r4, #1
 8008d6c:	4303      	orrs	r3, r0
 8008d6e:	9304      	str	r3, [sp, #16]
 8008d70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d74:	2206      	movs	r2, #6
 8008d76:	482d      	ldr	r0, [pc, #180]	; (8008e2c <_vfiprintf_r+0x254>)
 8008d78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d7c:	f000 fa8c 	bl	8009298 <memchr>
 8008d80:	2800      	cmp	r0, #0
 8008d82:	d03f      	beq.n	8008e04 <_vfiprintf_r+0x22c>
 8008d84:	4b2a      	ldr	r3, [pc, #168]	; (8008e30 <_vfiprintf_r+0x258>)
 8008d86:	bb1b      	cbnz	r3, 8008dd0 <_vfiprintf_r+0x1f8>
 8008d88:	9b03      	ldr	r3, [sp, #12]
 8008d8a:	3307      	adds	r3, #7
 8008d8c:	f023 0307 	bic.w	r3, r3, #7
 8008d90:	3308      	adds	r3, #8
 8008d92:	9303      	str	r3, [sp, #12]
 8008d94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d96:	443b      	add	r3, r7
 8008d98:	9309      	str	r3, [sp, #36]	; 0x24
 8008d9a:	e767      	b.n	8008c6c <_vfiprintf_r+0x94>
 8008d9c:	460c      	mov	r4, r1
 8008d9e:	2001      	movs	r0, #1
 8008da0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008da4:	e7a5      	b.n	8008cf2 <_vfiprintf_r+0x11a>
 8008da6:	2300      	movs	r3, #0
 8008da8:	f04f 0c0a 	mov.w	ip, #10
 8008dac:	4619      	mov	r1, r3
 8008dae:	3401      	adds	r4, #1
 8008db0:	9305      	str	r3, [sp, #20]
 8008db2:	4620      	mov	r0, r4
 8008db4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008db8:	3a30      	subs	r2, #48	; 0x30
 8008dba:	2a09      	cmp	r2, #9
 8008dbc:	d903      	bls.n	8008dc6 <_vfiprintf_r+0x1ee>
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d0c5      	beq.n	8008d4e <_vfiprintf_r+0x176>
 8008dc2:	9105      	str	r1, [sp, #20]
 8008dc4:	e7c3      	b.n	8008d4e <_vfiprintf_r+0x176>
 8008dc6:	4604      	mov	r4, r0
 8008dc8:	2301      	movs	r3, #1
 8008dca:	fb0c 2101 	mla	r1, ip, r1, r2
 8008dce:	e7f0      	b.n	8008db2 <_vfiprintf_r+0x1da>
 8008dd0:	ab03      	add	r3, sp, #12
 8008dd2:	9300      	str	r3, [sp, #0]
 8008dd4:	462a      	mov	r2, r5
 8008dd6:	4630      	mov	r0, r6
 8008dd8:	4b16      	ldr	r3, [pc, #88]	; (8008e34 <_vfiprintf_r+0x25c>)
 8008dda:	a904      	add	r1, sp, #16
 8008ddc:	f3af 8000 	nop.w
 8008de0:	4607      	mov	r7, r0
 8008de2:	1c78      	adds	r0, r7, #1
 8008de4:	d1d6      	bne.n	8008d94 <_vfiprintf_r+0x1bc>
 8008de6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008de8:	07d9      	lsls	r1, r3, #31
 8008dea:	d405      	bmi.n	8008df8 <_vfiprintf_r+0x220>
 8008dec:	89ab      	ldrh	r3, [r5, #12]
 8008dee:	059a      	lsls	r2, r3, #22
 8008df0:	d402      	bmi.n	8008df8 <_vfiprintf_r+0x220>
 8008df2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008df4:	f7ff fcf9 	bl	80087ea <__retarget_lock_release_recursive>
 8008df8:	89ab      	ldrh	r3, [r5, #12]
 8008dfa:	065b      	lsls	r3, r3, #25
 8008dfc:	f53f af12 	bmi.w	8008c24 <_vfiprintf_r+0x4c>
 8008e00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e02:	e711      	b.n	8008c28 <_vfiprintf_r+0x50>
 8008e04:	ab03      	add	r3, sp, #12
 8008e06:	9300      	str	r3, [sp, #0]
 8008e08:	462a      	mov	r2, r5
 8008e0a:	4630      	mov	r0, r6
 8008e0c:	4b09      	ldr	r3, [pc, #36]	; (8008e34 <_vfiprintf_r+0x25c>)
 8008e0e:	a904      	add	r1, sp, #16
 8008e10:	f000 f882 	bl	8008f18 <_printf_i>
 8008e14:	e7e4      	b.n	8008de0 <_vfiprintf_r+0x208>
 8008e16:	bf00      	nop
 8008e18:	08009904 	.word	0x08009904
 8008e1c:	08009924 	.word	0x08009924
 8008e20:	080098e4 	.word	0x080098e4
 8008e24:	08009944 	.word	0x08009944
 8008e28:	0800994a 	.word	0x0800994a
 8008e2c:	0800994e 	.word	0x0800994e
 8008e30:	00000000 	.word	0x00000000
 8008e34:	08008bb3 	.word	0x08008bb3

08008e38 <_printf_common>:
 8008e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e3c:	4616      	mov	r6, r2
 8008e3e:	4699      	mov	r9, r3
 8008e40:	688a      	ldr	r2, [r1, #8]
 8008e42:	690b      	ldr	r3, [r1, #16]
 8008e44:	4607      	mov	r7, r0
 8008e46:	4293      	cmp	r3, r2
 8008e48:	bfb8      	it	lt
 8008e4a:	4613      	movlt	r3, r2
 8008e4c:	6033      	str	r3, [r6, #0]
 8008e4e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e52:	460c      	mov	r4, r1
 8008e54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e58:	b10a      	cbz	r2, 8008e5e <_printf_common+0x26>
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	6033      	str	r3, [r6, #0]
 8008e5e:	6823      	ldr	r3, [r4, #0]
 8008e60:	0699      	lsls	r1, r3, #26
 8008e62:	bf42      	ittt	mi
 8008e64:	6833      	ldrmi	r3, [r6, #0]
 8008e66:	3302      	addmi	r3, #2
 8008e68:	6033      	strmi	r3, [r6, #0]
 8008e6a:	6825      	ldr	r5, [r4, #0]
 8008e6c:	f015 0506 	ands.w	r5, r5, #6
 8008e70:	d106      	bne.n	8008e80 <_printf_common+0x48>
 8008e72:	f104 0a19 	add.w	sl, r4, #25
 8008e76:	68e3      	ldr	r3, [r4, #12]
 8008e78:	6832      	ldr	r2, [r6, #0]
 8008e7a:	1a9b      	subs	r3, r3, r2
 8008e7c:	42ab      	cmp	r3, r5
 8008e7e:	dc28      	bgt.n	8008ed2 <_printf_common+0x9a>
 8008e80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008e84:	1e13      	subs	r3, r2, #0
 8008e86:	6822      	ldr	r2, [r4, #0]
 8008e88:	bf18      	it	ne
 8008e8a:	2301      	movne	r3, #1
 8008e8c:	0692      	lsls	r2, r2, #26
 8008e8e:	d42d      	bmi.n	8008eec <_printf_common+0xb4>
 8008e90:	4649      	mov	r1, r9
 8008e92:	4638      	mov	r0, r7
 8008e94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e98:	47c0      	blx	r8
 8008e9a:	3001      	adds	r0, #1
 8008e9c:	d020      	beq.n	8008ee0 <_printf_common+0xa8>
 8008e9e:	6823      	ldr	r3, [r4, #0]
 8008ea0:	68e5      	ldr	r5, [r4, #12]
 8008ea2:	f003 0306 	and.w	r3, r3, #6
 8008ea6:	2b04      	cmp	r3, #4
 8008ea8:	bf18      	it	ne
 8008eaa:	2500      	movne	r5, #0
 8008eac:	6832      	ldr	r2, [r6, #0]
 8008eae:	f04f 0600 	mov.w	r6, #0
 8008eb2:	68a3      	ldr	r3, [r4, #8]
 8008eb4:	bf08      	it	eq
 8008eb6:	1aad      	subeq	r5, r5, r2
 8008eb8:	6922      	ldr	r2, [r4, #16]
 8008eba:	bf08      	it	eq
 8008ebc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	bfc4      	itt	gt
 8008ec4:	1a9b      	subgt	r3, r3, r2
 8008ec6:	18ed      	addgt	r5, r5, r3
 8008ec8:	341a      	adds	r4, #26
 8008eca:	42b5      	cmp	r5, r6
 8008ecc:	d11a      	bne.n	8008f04 <_printf_common+0xcc>
 8008ece:	2000      	movs	r0, #0
 8008ed0:	e008      	b.n	8008ee4 <_printf_common+0xac>
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	4652      	mov	r2, sl
 8008ed6:	4649      	mov	r1, r9
 8008ed8:	4638      	mov	r0, r7
 8008eda:	47c0      	blx	r8
 8008edc:	3001      	adds	r0, #1
 8008ede:	d103      	bne.n	8008ee8 <_printf_common+0xb0>
 8008ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ee8:	3501      	adds	r5, #1
 8008eea:	e7c4      	b.n	8008e76 <_printf_common+0x3e>
 8008eec:	2030      	movs	r0, #48	; 0x30
 8008eee:	18e1      	adds	r1, r4, r3
 8008ef0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008ef4:	1c5a      	adds	r2, r3, #1
 8008ef6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008efa:	4422      	add	r2, r4
 8008efc:	3302      	adds	r3, #2
 8008efe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008f02:	e7c5      	b.n	8008e90 <_printf_common+0x58>
 8008f04:	2301      	movs	r3, #1
 8008f06:	4622      	mov	r2, r4
 8008f08:	4649      	mov	r1, r9
 8008f0a:	4638      	mov	r0, r7
 8008f0c:	47c0      	blx	r8
 8008f0e:	3001      	adds	r0, #1
 8008f10:	d0e6      	beq.n	8008ee0 <_printf_common+0xa8>
 8008f12:	3601      	adds	r6, #1
 8008f14:	e7d9      	b.n	8008eca <_printf_common+0x92>
	...

08008f18 <_printf_i>:
 8008f18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f1c:	7e0f      	ldrb	r7, [r1, #24]
 8008f1e:	4691      	mov	r9, r2
 8008f20:	2f78      	cmp	r7, #120	; 0x78
 8008f22:	4680      	mov	r8, r0
 8008f24:	460c      	mov	r4, r1
 8008f26:	469a      	mov	sl, r3
 8008f28:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008f2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008f2e:	d807      	bhi.n	8008f40 <_printf_i+0x28>
 8008f30:	2f62      	cmp	r7, #98	; 0x62
 8008f32:	d80a      	bhi.n	8008f4a <_printf_i+0x32>
 8008f34:	2f00      	cmp	r7, #0
 8008f36:	f000 80d9 	beq.w	80090ec <_printf_i+0x1d4>
 8008f3a:	2f58      	cmp	r7, #88	; 0x58
 8008f3c:	f000 80a4 	beq.w	8009088 <_printf_i+0x170>
 8008f40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008f48:	e03a      	b.n	8008fc0 <_printf_i+0xa8>
 8008f4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008f4e:	2b15      	cmp	r3, #21
 8008f50:	d8f6      	bhi.n	8008f40 <_printf_i+0x28>
 8008f52:	a101      	add	r1, pc, #4	; (adr r1, 8008f58 <_printf_i+0x40>)
 8008f54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f58:	08008fb1 	.word	0x08008fb1
 8008f5c:	08008fc5 	.word	0x08008fc5
 8008f60:	08008f41 	.word	0x08008f41
 8008f64:	08008f41 	.word	0x08008f41
 8008f68:	08008f41 	.word	0x08008f41
 8008f6c:	08008f41 	.word	0x08008f41
 8008f70:	08008fc5 	.word	0x08008fc5
 8008f74:	08008f41 	.word	0x08008f41
 8008f78:	08008f41 	.word	0x08008f41
 8008f7c:	08008f41 	.word	0x08008f41
 8008f80:	08008f41 	.word	0x08008f41
 8008f84:	080090d3 	.word	0x080090d3
 8008f88:	08008ff5 	.word	0x08008ff5
 8008f8c:	080090b5 	.word	0x080090b5
 8008f90:	08008f41 	.word	0x08008f41
 8008f94:	08008f41 	.word	0x08008f41
 8008f98:	080090f5 	.word	0x080090f5
 8008f9c:	08008f41 	.word	0x08008f41
 8008fa0:	08008ff5 	.word	0x08008ff5
 8008fa4:	08008f41 	.word	0x08008f41
 8008fa8:	08008f41 	.word	0x08008f41
 8008fac:	080090bd 	.word	0x080090bd
 8008fb0:	682b      	ldr	r3, [r5, #0]
 8008fb2:	1d1a      	adds	r2, r3, #4
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	602a      	str	r2, [r5, #0]
 8008fb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	e0a4      	b.n	800910e <_printf_i+0x1f6>
 8008fc4:	6820      	ldr	r0, [r4, #0]
 8008fc6:	6829      	ldr	r1, [r5, #0]
 8008fc8:	0606      	lsls	r6, r0, #24
 8008fca:	f101 0304 	add.w	r3, r1, #4
 8008fce:	d50a      	bpl.n	8008fe6 <_printf_i+0xce>
 8008fd0:	680e      	ldr	r6, [r1, #0]
 8008fd2:	602b      	str	r3, [r5, #0]
 8008fd4:	2e00      	cmp	r6, #0
 8008fd6:	da03      	bge.n	8008fe0 <_printf_i+0xc8>
 8008fd8:	232d      	movs	r3, #45	; 0x2d
 8008fda:	4276      	negs	r6, r6
 8008fdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fe0:	230a      	movs	r3, #10
 8008fe2:	485e      	ldr	r0, [pc, #376]	; (800915c <_printf_i+0x244>)
 8008fe4:	e019      	b.n	800901a <_printf_i+0x102>
 8008fe6:	680e      	ldr	r6, [r1, #0]
 8008fe8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008fec:	602b      	str	r3, [r5, #0]
 8008fee:	bf18      	it	ne
 8008ff0:	b236      	sxthne	r6, r6
 8008ff2:	e7ef      	b.n	8008fd4 <_printf_i+0xbc>
 8008ff4:	682b      	ldr	r3, [r5, #0]
 8008ff6:	6820      	ldr	r0, [r4, #0]
 8008ff8:	1d19      	adds	r1, r3, #4
 8008ffa:	6029      	str	r1, [r5, #0]
 8008ffc:	0601      	lsls	r1, r0, #24
 8008ffe:	d501      	bpl.n	8009004 <_printf_i+0xec>
 8009000:	681e      	ldr	r6, [r3, #0]
 8009002:	e002      	b.n	800900a <_printf_i+0xf2>
 8009004:	0646      	lsls	r6, r0, #25
 8009006:	d5fb      	bpl.n	8009000 <_printf_i+0xe8>
 8009008:	881e      	ldrh	r6, [r3, #0]
 800900a:	2f6f      	cmp	r7, #111	; 0x6f
 800900c:	bf0c      	ite	eq
 800900e:	2308      	moveq	r3, #8
 8009010:	230a      	movne	r3, #10
 8009012:	4852      	ldr	r0, [pc, #328]	; (800915c <_printf_i+0x244>)
 8009014:	2100      	movs	r1, #0
 8009016:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800901a:	6865      	ldr	r5, [r4, #4]
 800901c:	2d00      	cmp	r5, #0
 800901e:	bfa8      	it	ge
 8009020:	6821      	ldrge	r1, [r4, #0]
 8009022:	60a5      	str	r5, [r4, #8]
 8009024:	bfa4      	itt	ge
 8009026:	f021 0104 	bicge.w	r1, r1, #4
 800902a:	6021      	strge	r1, [r4, #0]
 800902c:	b90e      	cbnz	r6, 8009032 <_printf_i+0x11a>
 800902e:	2d00      	cmp	r5, #0
 8009030:	d04d      	beq.n	80090ce <_printf_i+0x1b6>
 8009032:	4615      	mov	r5, r2
 8009034:	fbb6 f1f3 	udiv	r1, r6, r3
 8009038:	fb03 6711 	mls	r7, r3, r1, r6
 800903c:	5dc7      	ldrb	r7, [r0, r7]
 800903e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009042:	4637      	mov	r7, r6
 8009044:	42bb      	cmp	r3, r7
 8009046:	460e      	mov	r6, r1
 8009048:	d9f4      	bls.n	8009034 <_printf_i+0x11c>
 800904a:	2b08      	cmp	r3, #8
 800904c:	d10b      	bne.n	8009066 <_printf_i+0x14e>
 800904e:	6823      	ldr	r3, [r4, #0]
 8009050:	07de      	lsls	r6, r3, #31
 8009052:	d508      	bpl.n	8009066 <_printf_i+0x14e>
 8009054:	6923      	ldr	r3, [r4, #16]
 8009056:	6861      	ldr	r1, [r4, #4]
 8009058:	4299      	cmp	r1, r3
 800905a:	bfde      	ittt	le
 800905c:	2330      	movle	r3, #48	; 0x30
 800905e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009062:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009066:	1b52      	subs	r2, r2, r5
 8009068:	6122      	str	r2, [r4, #16]
 800906a:	464b      	mov	r3, r9
 800906c:	4621      	mov	r1, r4
 800906e:	4640      	mov	r0, r8
 8009070:	f8cd a000 	str.w	sl, [sp]
 8009074:	aa03      	add	r2, sp, #12
 8009076:	f7ff fedf 	bl	8008e38 <_printf_common>
 800907a:	3001      	adds	r0, #1
 800907c:	d14c      	bne.n	8009118 <_printf_i+0x200>
 800907e:	f04f 30ff 	mov.w	r0, #4294967295
 8009082:	b004      	add	sp, #16
 8009084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009088:	4834      	ldr	r0, [pc, #208]	; (800915c <_printf_i+0x244>)
 800908a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800908e:	6829      	ldr	r1, [r5, #0]
 8009090:	6823      	ldr	r3, [r4, #0]
 8009092:	f851 6b04 	ldr.w	r6, [r1], #4
 8009096:	6029      	str	r1, [r5, #0]
 8009098:	061d      	lsls	r5, r3, #24
 800909a:	d514      	bpl.n	80090c6 <_printf_i+0x1ae>
 800909c:	07df      	lsls	r7, r3, #31
 800909e:	bf44      	itt	mi
 80090a0:	f043 0320 	orrmi.w	r3, r3, #32
 80090a4:	6023      	strmi	r3, [r4, #0]
 80090a6:	b91e      	cbnz	r6, 80090b0 <_printf_i+0x198>
 80090a8:	6823      	ldr	r3, [r4, #0]
 80090aa:	f023 0320 	bic.w	r3, r3, #32
 80090ae:	6023      	str	r3, [r4, #0]
 80090b0:	2310      	movs	r3, #16
 80090b2:	e7af      	b.n	8009014 <_printf_i+0xfc>
 80090b4:	6823      	ldr	r3, [r4, #0]
 80090b6:	f043 0320 	orr.w	r3, r3, #32
 80090ba:	6023      	str	r3, [r4, #0]
 80090bc:	2378      	movs	r3, #120	; 0x78
 80090be:	4828      	ldr	r0, [pc, #160]	; (8009160 <_printf_i+0x248>)
 80090c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80090c4:	e7e3      	b.n	800908e <_printf_i+0x176>
 80090c6:	0659      	lsls	r1, r3, #25
 80090c8:	bf48      	it	mi
 80090ca:	b2b6      	uxthmi	r6, r6
 80090cc:	e7e6      	b.n	800909c <_printf_i+0x184>
 80090ce:	4615      	mov	r5, r2
 80090d0:	e7bb      	b.n	800904a <_printf_i+0x132>
 80090d2:	682b      	ldr	r3, [r5, #0]
 80090d4:	6826      	ldr	r6, [r4, #0]
 80090d6:	1d18      	adds	r0, r3, #4
 80090d8:	6961      	ldr	r1, [r4, #20]
 80090da:	6028      	str	r0, [r5, #0]
 80090dc:	0635      	lsls	r5, r6, #24
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	d501      	bpl.n	80090e6 <_printf_i+0x1ce>
 80090e2:	6019      	str	r1, [r3, #0]
 80090e4:	e002      	b.n	80090ec <_printf_i+0x1d4>
 80090e6:	0670      	lsls	r0, r6, #25
 80090e8:	d5fb      	bpl.n	80090e2 <_printf_i+0x1ca>
 80090ea:	8019      	strh	r1, [r3, #0]
 80090ec:	2300      	movs	r3, #0
 80090ee:	4615      	mov	r5, r2
 80090f0:	6123      	str	r3, [r4, #16]
 80090f2:	e7ba      	b.n	800906a <_printf_i+0x152>
 80090f4:	682b      	ldr	r3, [r5, #0]
 80090f6:	2100      	movs	r1, #0
 80090f8:	1d1a      	adds	r2, r3, #4
 80090fa:	602a      	str	r2, [r5, #0]
 80090fc:	681d      	ldr	r5, [r3, #0]
 80090fe:	6862      	ldr	r2, [r4, #4]
 8009100:	4628      	mov	r0, r5
 8009102:	f000 f8c9 	bl	8009298 <memchr>
 8009106:	b108      	cbz	r0, 800910c <_printf_i+0x1f4>
 8009108:	1b40      	subs	r0, r0, r5
 800910a:	6060      	str	r0, [r4, #4]
 800910c:	6863      	ldr	r3, [r4, #4]
 800910e:	6123      	str	r3, [r4, #16]
 8009110:	2300      	movs	r3, #0
 8009112:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009116:	e7a8      	b.n	800906a <_printf_i+0x152>
 8009118:	462a      	mov	r2, r5
 800911a:	4649      	mov	r1, r9
 800911c:	4640      	mov	r0, r8
 800911e:	6923      	ldr	r3, [r4, #16]
 8009120:	47d0      	blx	sl
 8009122:	3001      	adds	r0, #1
 8009124:	d0ab      	beq.n	800907e <_printf_i+0x166>
 8009126:	6823      	ldr	r3, [r4, #0]
 8009128:	079b      	lsls	r3, r3, #30
 800912a:	d413      	bmi.n	8009154 <_printf_i+0x23c>
 800912c:	68e0      	ldr	r0, [r4, #12]
 800912e:	9b03      	ldr	r3, [sp, #12]
 8009130:	4298      	cmp	r0, r3
 8009132:	bfb8      	it	lt
 8009134:	4618      	movlt	r0, r3
 8009136:	e7a4      	b.n	8009082 <_printf_i+0x16a>
 8009138:	2301      	movs	r3, #1
 800913a:	4632      	mov	r2, r6
 800913c:	4649      	mov	r1, r9
 800913e:	4640      	mov	r0, r8
 8009140:	47d0      	blx	sl
 8009142:	3001      	adds	r0, #1
 8009144:	d09b      	beq.n	800907e <_printf_i+0x166>
 8009146:	3501      	adds	r5, #1
 8009148:	68e3      	ldr	r3, [r4, #12]
 800914a:	9903      	ldr	r1, [sp, #12]
 800914c:	1a5b      	subs	r3, r3, r1
 800914e:	42ab      	cmp	r3, r5
 8009150:	dcf2      	bgt.n	8009138 <_printf_i+0x220>
 8009152:	e7eb      	b.n	800912c <_printf_i+0x214>
 8009154:	2500      	movs	r5, #0
 8009156:	f104 0619 	add.w	r6, r4, #25
 800915a:	e7f5      	b.n	8009148 <_printf_i+0x230>
 800915c:	08009955 	.word	0x08009955
 8009160:	08009966 	.word	0x08009966

08009164 <__sread>:
 8009164:	b510      	push	{r4, lr}
 8009166:	460c      	mov	r4, r1
 8009168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800916c:	f000 f8ec 	bl	8009348 <_read_r>
 8009170:	2800      	cmp	r0, #0
 8009172:	bfab      	itete	ge
 8009174:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009176:	89a3      	ldrhlt	r3, [r4, #12]
 8009178:	181b      	addge	r3, r3, r0
 800917a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800917e:	bfac      	ite	ge
 8009180:	6563      	strge	r3, [r4, #84]	; 0x54
 8009182:	81a3      	strhlt	r3, [r4, #12]
 8009184:	bd10      	pop	{r4, pc}

08009186 <__swrite>:
 8009186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800918a:	461f      	mov	r7, r3
 800918c:	898b      	ldrh	r3, [r1, #12]
 800918e:	4605      	mov	r5, r0
 8009190:	05db      	lsls	r3, r3, #23
 8009192:	460c      	mov	r4, r1
 8009194:	4616      	mov	r6, r2
 8009196:	d505      	bpl.n	80091a4 <__swrite+0x1e>
 8009198:	2302      	movs	r3, #2
 800919a:	2200      	movs	r2, #0
 800919c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091a0:	f000 f868 	bl	8009274 <_lseek_r>
 80091a4:	89a3      	ldrh	r3, [r4, #12]
 80091a6:	4632      	mov	r2, r6
 80091a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80091ac:	81a3      	strh	r3, [r4, #12]
 80091ae:	4628      	mov	r0, r5
 80091b0:	463b      	mov	r3, r7
 80091b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091ba:	f000 b817 	b.w	80091ec <_write_r>

080091be <__sseek>:
 80091be:	b510      	push	{r4, lr}
 80091c0:	460c      	mov	r4, r1
 80091c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091c6:	f000 f855 	bl	8009274 <_lseek_r>
 80091ca:	1c43      	adds	r3, r0, #1
 80091cc:	89a3      	ldrh	r3, [r4, #12]
 80091ce:	bf15      	itete	ne
 80091d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80091d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80091d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80091da:	81a3      	strheq	r3, [r4, #12]
 80091dc:	bf18      	it	ne
 80091de:	81a3      	strhne	r3, [r4, #12]
 80091e0:	bd10      	pop	{r4, pc}

080091e2 <__sclose>:
 80091e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091e6:	f000 b813 	b.w	8009210 <_close_r>
	...

080091ec <_write_r>:
 80091ec:	b538      	push	{r3, r4, r5, lr}
 80091ee:	4604      	mov	r4, r0
 80091f0:	4608      	mov	r0, r1
 80091f2:	4611      	mov	r1, r2
 80091f4:	2200      	movs	r2, #0
 80091f6:	4d05      	ldr	r5, [pc, #20]	; (800920c <_write_r+0x20>)
 80091f8:	602a      	str	r2, [r5, #0]
 80091fa:	461a      	mov	r2, r3
 80091fc:	f7f8 fb8a 	bl	8001914 <_write>
 8009200:	1c43      	adds	r3, r0, #1
 8009202:	d102      	bne.n	800920a <_write_r+0x1e>
 8009204:	682b      	ldr	r3, [r5, #0]
 8009206:	b103      	cbz	r3, 800920a <_write_r+0x1e>
 8009208:	6023      	str	r3, [r4, #0]
 800920a:	bd38      	pop	{r3, r4, r5, pc}
 800920c:	20000630 	.word	0x20000630

08009210 <_close_r>:
 8009210:	b538      	push	{r3, r4, r5, lr}
 8009212:	2300      	movs	r3, #0
 8009214:	4d05      	ldr	r5, [pc, #20]	; (800922c <_close_r+0x1c>)
 8009216:	4604      	mov	r4, r0
 8009218:	4608      	mov	r0, r1
 800921a:	602b      	str	r3, [r5, #0]
 800921c:	f7fa f802 	bl	8003224 <_close>
 8009220:	1c43      	adds	r3, r0, #1
 8009222:	d102      	bne.n	800922a <_close_r+0x1a>
 8009224:	682b      	ldr	r3, [r5, #0]
 8009226:	b103      	cbz	r3, 800922a <_close_r+0x1a>
 8009228:	6023      	str	r3, [r4, #0]
 800922a:	bd38      	pop	{r3, r4, r5, pc}
 800922c:	20000630 	.word	0x20000630

08009230 <_fstat_r>:
 8009230:	b538      	push	{r3, r4, r5, lr}
 8009232:	2300      	movs	r3, #0
 8009234:	4d06      	ldr	r5, [pc, #24]	; (8009250 <_fstat_r+0x20>)
 8009236:	4604      	mov	r4, r0
 8009238:	4608      	mov	r0, r1
 800923a:	4611      	mov	r1, r2
 800923c:	602b      	str	r3, [r5, #0]
 800923e:	f7f9 fffc 	bl	800323a <_fstat>
 8009242:	1c43      	adds	r3, r0, #1
 8009244:	d102      	bne.n	800924c <_fstat_r+0x1c>
 8009246:	682b      	ldr	r3, [r5, #0]
 8009248:	b103      	cbz	r3, 800924c <_fstat_r+0x1c>
 800924a:	6023      	str	r3, [r4, #0]
 800924c:	bd38      	pop	{r3, r4, r5, pc}
 800924e:	bf00      	nop
 8009250:	20000630 	.word	0x20000630

08009254 <_isatty_r>:
 8009254:	b538      	push	{r3, r4, r5, lr}
 8009256:	2300      	movs	r3, #0
 8009258:	4d05      	ldr	r5, [pc, #20]	; (8009270 <_isatty_r+0x1c>)
 800925a:	4604      	mov	r4, r0
 800925c:	4608      	mov	r0, r1
 800925e:	602b      	str	r3, [r5, #0]
 8009260:	f7f9 fffa 	bl	8003258 <_isatty>
 8009264:	1c43      	adds	r3, r0, #1
 8009266:	d102      	bne.n	800926e <_isatty_r+0x1a>
 8009268:	682b      	ldr	r3, [r5, #0]
 800926a:	b103      	cbz	r3, 800926e <_isatty_r+0x1a>
 800926c:	6023      	str	r3, [r4, #0]
 800926e:	bd38      	pop	{r3, r4, r5, pc}
 8009270:	20000630 	.word	0x20000630

08009274 <_lseek_r>:
 8009274:	b538      	push	{r3, r4, r5, lr}
 8009276:	4604      	mov	r4, r0
 8009278:	4608      	mov	r0, r1
 800927a:	4611      	mov	r1, r2
 800927c:	2200      	movs	r2, #0
 800927e:	4d05      	ldr	r5, [pc, #20]	; (8009294 <_lseek_r+0x20>)
 8009280:	602a      	str	r2, [r5, #0]
 8009282:	461a      	mov	r2, r3
 8009284:	f7f9 fff2 	bl	800326c <_lseek>
 8009288:	1c43      	adds	r3, r0, #1
 800928a:	d102      	bne.n	8009292 <_lseek_r+0x1e>
 800928c:	682b      	ldr	r3, [r5, #0]
 800928e:	b103      	cbz	r3, 8009292 <_lseek_r+0x1e>
 8009290:	6023      	str	r3, [r4, #0]
 8009292:	bd38      	pop	{r3, r4, r5, pc}
 8009294:	20000630 	.word	0x20000630

08009298 <memchr>:
 8009298:	4603      	mov	r3, r0
 800929a:	b510      	push	{r4, lr}
 800929c:	b2c9      	uxtb	r1, r1
 800929e:	4402      	add	r2, r0
 80092a0:	4293      	cmp	r3, r2
 80092a2:	4618      	mov	r0, r3
 80092a4:	d101      	bne.n	80092aa <memchr+0x12>
 80092a6:	2000      	movs	r0, #0
 80092a8:	e003      	b.n	80092b2 <memchr+0x1a>
 80092aa:	7804      	ldrb	r4, [r0, #0]
 80092ac:	3301      	adds	r3, #1
 80092ae:	428c      	cmp	r4, r1
 80092b0:	d1f6      	bne.n	80092a0 <memchr+0x8>
 80092b2:	bd10      	pop	{r4, pc}

080092b4 <memmove>:
 80092b4:	4288      	cmp	r0, r1
 80092b6:	b510      	push	{r4, lr}
 80092b8:	eb01 0402 	add.w	r4, r1, r2
 80092bc:	d902      	bls.n	80092c4 <memmove+0x10>
 80092be:	4284      	cmp	r4, r0
 80092c0:	4623      	mov	r3, r4
 80092c2:	d807      	bhi.n	80092d4 <memmove+0x20>
 80092c4:	1e43      	subs	r3, r0, #1
 80092c6:	42a1      	cmp	r1, r4
 80092c8:	d008      	beq.n	80092dc <memmove+0x28>
 80092ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80092ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80092d2:	e7f8      	b.n	80092c6 <memmove+0x12>
 80092d4:	4601      	mov	r1, r0
 80092d6:	4402      	add	r2, r0
 80092d8:	428a      	cmp	r2, r1
 80092da:	d100      	bne.n	80092de <memmove+0x2a>
 80092dc:	bd10      	pop	{r4, pc}
 80092de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80092e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80092e6:	e7f7      	b.n	80092d8 <memmove+0x24>

080092e8 <_realloc_r>:
 80092e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092ec:	4680      	mov	r8, r0
 80092ee:	4614      	mov	r4, r2
 80092f0:	460e      	mov	r6, r1
 80092f2:	b921      	cbnz	r1, 80092fe <_realloc_r+0x16>
 80092f4:	4611      	mov	r1, r2
 80092f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092fa:	f7fe bdad 	b.w	8007e58 <_malloc_r>
 80092fe:	b92a      	cbnz	r2, 800930c <_realloc_r+0x24>
 8009300:	f7fe fd42 	bl	8007d88 <_free_r>
 8009304:	4625      	mov	r5, r4
 8009306:	4628      	mov	r0, r5
 8009308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800930c:	f000 f82e 	bl	800936c <_malloc_usable_size_r>
 8009310:	4284      	cmp	r4, r0
 8009312:	4607      	mov	r7, r0
 8009314:	d802      	bhi.n	800931c <_realloc_r+0x34>
 8009316:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800931a:	d812      	bhi.n	8009342 <_realloc_r+0x5a>
 800931c:	4621      	mov	r1, r4
 800931e:	4640      	mov	r0, r8
 8009320:	f7fe fd9a 	bl	8007e58 <_malloc_r>
 8009324:	4605      	mov	r5, r0
 8009326:	2800      	cmp	r0, #0
 8009328:	d0ed      	beq.n	8009306 <_realloc_r+0x1e>
 800932a:	42bc      	cmp	r4, r7
 800932c:	4622      	mov	r2, r4
 800932e:	4631      	mov	r1, r6
 8009330:	bf28      	it	cs
 8009332:	463a      	movcs	r2, r7
 8009334:	f7fe fd12 	bl	8007d5c <memcpy>
 8009338:	4631      	mov	r1, r6
 800933a:	4640      	mov	r0, r8
 800933c:	f7fe fd24 	bl	8007d88 <_free_r>
 8009340:	e7e1      	b.n	8009306 <_realloc_r+0x1e>
 8009342:	4635      	mov	r5, r6
 8009344:	e7df      	b.n	8009306 <_realloc_r+0x1e>
	...

08009348 <_read_r>:
 8009348:	b538      	push	{r3, r4, r5, lr}
 800934a:	4604      	mov	r4, r0
 800934c:	4608      	mov	r0, r1
 800934e:	4611      	mov	r1, r2
 8009350:	2200      	movs	r2, #0
 8009352:	4d05      	ldr	r5, [pc, #20]	; (8009368 <_read_r+0x20>)
 8009354:	602a      	str	r2, [r5, #0]
 8009356:	461a      	mov	r2, r3
 8009358:	f7f9 ff47 	bl	80031ea <_read>
 800935c:	1c43      	adds	r3, r0, #1
 800935e:	d102      	bne.n	8009366 <_read_r+0x1e>
 8009360:	682b      	ldr	r3, [r5, #0]
 8009362:	b103      	cbz	r3, 8009366 <_read_r+0x1e>
 8009364:	6023      	str	r3, [r4, #0]
 8009366:	bd38      	pop	{r3, r4, r5, pc}
 8009368:	20000630 	.word	0x20000630

0800936c <_malloc_usable_size_r>:
 800936c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009370:	1f18      	subs	r0, r3, #4
 8009372:	2b00      	cmp	r3, #0
 8009374:	bfbc      	itt	lt
 8009376:	580b      	ldrlt	r3, [r1, r0]
 8009378:	18c0      	addlt	r0, r0, r3
 800937a:	4770      	bx	lr

0800937c <_init>:
 800937c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800937e:	bf00      	nop
 8009380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009382:	bc08      	pop	{r3}
 8009384:	469e      	mov	lr, r3
 8009386:	4770      	bx	lr

08009388 <_fini>:
 8009388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800938a:	bf00      	nop
 800938c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800938e:	bc08      	pop	{r3}
 8009390:	469e      	mov	lr, r3
 8009392:	4770      	bx	lr
